{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6fb2ec4a-e209-472f-b917-6da6f1c19153",
        "name": "Clear Cache",
        "item": [
          {
            "id": "04bd2c89-bf4a-41c9-9972-cacb076a8ce4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fe48476b-6a37-4bcd-8305-64b27f1b7d72",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "72fe7c0c-bfe3-40ac-83a4-3c872e405bf7"
                }
              }
            ]
          },
          {
            "id": "66df3d05-bbc8-45fd-b94a-a9731f1229c8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5f2cec9b-c31e-4911-9ffb-eb407dcb95b0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "85260065-5ffb-4fb2-8161-d1528e88921e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "81b303eb-43ac-40a4-a6e9-fdf2c5c03380",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1a79261d-a4d5-4cfc-a62f-b81ed0f84787",
            "name": "Positive Testing",
            "item": [
              {
                "id": "db5b1092-b1c1-4eb3-954c-876c0fe60208",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8f2588c-539e-441a-9b4e-5f99f29f46e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7718a91c-ea09-4445-bef7-22ebb2d749eb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "714ce362-cc3a-4e5d-9ddc-27a7c10791d7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7d882b3c-cc82-43d8-9372-50386f925d47"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "64a62614-993d-4ef8-aa6d-48fbd5f27abd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0407babc-b976-444a-bddf-dfc459808904"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5111d4dc-5bcc-4c23-971d-458b60dc45b9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "dfe2dcfb-478a-48b5-95cc-67c8709619aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "71b3c572-c8a1-43c3-8dcb-07861dafe17c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0eeda801-3e3c-4c94-8bfb-60ca9e8e2d94"
            }
          }
        ]
      },
      {
        "id": "1e05e7fd-32cf-4fae-b043-28ae0aa8b9b6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7e786c48-912a-43ae-86cc-11fb7dea963c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0f0531dd-3cee-452f-a268-ebe4fef61f15",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cf8dd16c-9668-49f1-83b2-47ed05fdebce",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f610bd5-0c58-4f5d-8c1d-763d761a2773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6cf77d6e-b54b-462f-ab99-214b81b702d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c90e076-3389-45c3-8f40-30a0ed30bfb7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e75eba-65e1-4203-996b-74b582d90a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33071772-1656-4666-9db7-2031cd82d7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a2e93d-517e-472e-80af-2562d9c132cc",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9d4272-103e-4210-99c1-e61cedd2dc1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d451d1c-3562-4e1e-83f1-110c872402e3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6f30d13d-bba2-47c8-bbcf-6938f30bcf61",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c2b69e61-eb0e-419b-871c-77cc0442ed23",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f85f51-3933-4264-9f35-89c465d6db81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6efbaa36-124e-475f-93de-0c5591351dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52e45a9-fdc3-4fc1-95a1-958c56acd054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e0b793-3e8e-49c3-9359-956eb662c9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a177008-27ca-4d76-990d-e3dcc7a70a9d",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c726d8fc-78b8-4a1d-82b1-0f7cbdc2b43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59f17b74-a0fb-4b72-9b05-4bde69ecb0d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8622f1cc-f1aa-4a8b-8e9d-b7db3497e453",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b49c33c1-89a6-4cb8-aa6e-06bb5712178e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d72eb8ca-af66-43e0-aed7-7174d7dce2e3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fa95abef-2e23-4dca-bd06-9b30f59786d8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be3d2cb0-50a6-4633-bacd-a6527d272837",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9b2a60ba-6b79-4668-a2bd-0e3f636cd92f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7726e85a-0f7d-4bd5-80a0-b36cb5e53c2c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "6c231173-7a71-424a-835f-6134f55f4aed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e0fe2546-b7c6-4785-892c-ec2cc2b6b744",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87e75256-d46d-4cb3-86cb-769ffa0119c2"
            }
          }
        ]
      },
      {
        "id": "2eb87536-eef1-4f98-8e34-80a94833e92d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9f493b55-26ad-4192-af35-64b1d0f2793d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "02bbae46-6835-4518-adba-f57024b9dd37",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f728a43f-2919-49b3-a83e-664be77bbc48",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1a79e4-2adb-4a41-992b-186619e25364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc598fc-6812-49a8-b1cc-1b54a148bc64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeeda278-a212-45b2-a665-de9aeaf95a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5590ab63-f4fd-4eed-ac8f-2c56e6447d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84cdb56c-2c59-40fc-bbd6-b7c7664a6ecc",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab50ca7-0b69-4864-8357-7c41b5b6db63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d193b31c-c95b-4985-b983-23864a089223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8b8fd4-106f-43fc-b268-c61c8b2ac8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "054f8bad-5c33-4618-b8b6-b66c478175d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff7d359-bfaa-4e53-87ca-aac9ec904f18",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c5f2ad-700a-45bd-a285-09cc1baf697d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51b54ab6-2685-4d61-8627-c62981e5c999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbf173f-236f-4d75-91a0-9a8361f6fe20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94b13645-901a-4801-92e5-c554d3d40327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e6a605-3466-4762-b4c9-d8075a0d3c59",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4548d28f-39ab-41e6-855f-778931a58730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7809467-e07e-4a8b-956b-9632b1e67aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea9d1d6-9228-4e70-bd44-63b455d23a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22cdf575-c945-406c-b359-fed412fff7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e893e5df-c84a-4347-aea4-959076fd014d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac23ee37-48ba-4784-b249-b245a7e1a425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a46c1f9-b610-48df-bea1-5b1b413ac08a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473d77fa-e155-49d3-a492-787ac77c3d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "debddf61-a249-46c3-b499-1f6385c52e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe24bd0f-c337-4417-8eb9-b34f5598e8d6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb7c723-87f3-4d55-b584-bf0e02b3c1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24d07f87-d8d1-40de-a10c-8af85b58fb30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5d0340-03d5-4345-af53-f35485e91f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a79e562-268b-4177-9733-862e31071e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0fde2a6-15e2-4ea8-9511-735aa7cef233",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08605345-0df9-44b3-8ffb-0f663f159042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1368b4b-f56c-417b-a245-f5214e2f1348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1662a428-08d8-43b5-9917-32a37123076a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "129b3f6f-c147-4f0f-91a1-a134d79c8269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f9584a-b182-4b66-93bd-2107b3fdf34e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2a3687-2fe3-4500-a912-ac2b8e644b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec126cca-8d52-4b8b-8ca5-1e204ca679c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8051c81c-daf5-438c-af1a-d42ae436df21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0064490-41f3-4ac2-a6db-33d44d66df12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74482dd5-8ccd-4892-bb31-df7278d7d02b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd58fb5-26e9-40db-94f1-3ddebd76f051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c86036e0-dc2d-40eb-91a2-0e53cc1ff742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3959da45-514e-44b7-a009-f88962582122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0390bfa1-edaa-4f4c-89ec-27672df5ee1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7567140a-3291-4d6e-adae-c90f4b5f8a51",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c4043a7-c9db-41ef-af96-0200ea6cab4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41013a8c-56ba-400d-9f15-04f8368d8f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45c800d-e7ce-4708-a533-093e37a363b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc6bc3da-f261-476c-8426-3cc6108738e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508a519c-69a4-4655-9135-9b284ecfd72b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92aab3d2-bc1b-4b1b-92dc-7799f5f04e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8748b14-855b-488e-a1d9-d0b682cdbbe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841d6f41-cde4-401f-885f-74590d7dd998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec70aebb-65dc-43aa-aa62-e5b016209423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91731a8-34e1-471f-b69f-2501d8897504",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ab0704-ece9-43fe-8dcb-9398bc1d190c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54f0868d-b35f-4d36-9a00-5731bf1085a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba24d07-7f82-45e9-bbfe-686c19b9026f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1b86323-88b1-4a7b-8396-10f265089047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a539a4-49eb-4c13-948e-36823714c16f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce4426a-1c93-4ec9-bd7c-7cb69485b37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1f89c3-d59b-46e4-9d72-ace49f5b95e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6a4b6a-ae71-4298-a006-a96ed6a34320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c90bf334-2c53-476b-bb1b-191488888ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ddf7c5c-65e6-4be5-ab05-ac9fa804fa04",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc39e0c-72c8-4300-aa70-3d79fd7d8b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "093ebad7-06a2-4296-89a0-2582faa814f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e947a7c6-9ab1-432a-aa85-be0c058b5ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1040542a-8039-41d2-940b-d8f1d1af3bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d887f9c-1f06-4e35-b45d-1642bdecb7e4",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a81cfc4b-673b-4b9e-b632-0cfac09da8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d557441d-4639-4f63-b9e1-ff3fbc2f26e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbab02ae-278e-4724-8616-542493ec37a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d87f2b4-2d5a-4a4d-8d64-8eba060b4ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8cd52d-e5f3-4fcf-bfb3-796a998a892e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24597ef-9161-44d4-b343-5e46baa56704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2281aea5-3c99-4c72-8d8d-0142ad2e88b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45361701-8d59-49d9-85c3-2f4f62999db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3b13110-e425-4822-9296-26695ab5dd07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b5569b-1d03-4fb7-bf70-827893074d0a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6d22ee-c29f-4cbf-81f4-ccdc4a2e3575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028dd8d9-acf1-4ece-8315-cbf3a7bd9eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b163cc1-5277-4da9-9def-b18fbdbb3c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e218a7aa-abf4-47ae-ab7f-18c32db0e1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567d1bfe-a493-4e66-9055-28ac85d2b3be",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4173a837-0513-4a5e-b2b3-e1a2a59ce85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7de297ad-e8a7-4e3d-9d23-6fbb8b16bb4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0944dc77-efd4-4dc2-8171-89867d4a9e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f194d4c-099e-40e9-840a-94ca24da849b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d37b8de-9919-46bd-985a-9c772fdb38e0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb2b144-fdc5-4573-8ee8-3ce13128d557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24fca8b5-a533-41c9-9a86-79e0e81fa31b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301df062-7a2f-43d0-9ca3-1b9d18cbc704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33ee5565-c417-4c9d-a67f-b93483e70b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5106a6c5-1d6b-46ca-807a-709cbcd895ec",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3e37ec-3764-4ca7-93ec-cbc653508721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7b51fa9-a7eb-464b-86ea-c9f1a6f868b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31ed0ab-da27-4aa0-a968-3534fdcf01a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d6e3939-7594-4864-8715-56e9d0d36b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f552b996-ae3e-4dda-a299-eda224908a22",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b858e3-8029-47ed-8931-5176f8c83843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79da6630-683a-4ab2-be45-f27610d23abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d2adad-54c4-4e20-ad84-731f91d76dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce075f6f-9b4b-4b7d-b0bb-0b83bbdf65c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0daa7591-c9c4-4a36-bbb8-c92e2d5dd086",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9175267c-2513-4813-8c14-384862000239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f3fb5e-b42c-488b-b433-1ac1af1b6ed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31bdaf0-ecf8-4020-b092-ed555a8b60b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6df6dc4f-9c0d-448a-b374-42f8e126e641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5a0dcd-4ed7-4038-8afb-56a45e544588",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a715d413-4cf1-4397-9d4f-ebc27864bdfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e50cd997-af27-49d0-b0c7-a551b410f676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35404854-e63c-43a4-8399-94fef8167e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f2455b4e-c4b8-46ce-b6b6-49324cd14656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5ebcbb-5130-4c9f-96b3-b4f07d9e2086",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4d9934-99d1-4e7a-9910-cfe2674f43b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e982df-2b47-4672-9116-7cd0f349fa8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c950de-6da7-4fef-b74b-ef5eb2193c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cddfba3-b5fc-41dd-838e-ac0e8e2e712d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "588fa7ec-06fa-472e-92da-dc5353c105b8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ca3a00-fea4-4538-81bc-b57a068583ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3630a5f-cc40-495e-8115-2ca985fa612a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b9a53e-832d-48db-99fa-56bff785f434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9537273-a4fc-48b6-bd51-112f83eb577d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e821a5c-c9ac-4f8a-bf88-689048e2ca69",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5bcf6f-4588-49f4-9ff2-4eeecedbecc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c092a0-cac3-4915-a6f7-240adbb5d49c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168b9be1-25f7-40a5-8894-f9cb17975097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "150aa243-b476-41e7-8525-7ebb237b4e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d07bd6-4d9c-4d10-85af-f405318491dc",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73fc4b24-883b-4070-bf72-80c058b6721f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72f629a1-cc52-4f74-97ac-e2176ba6e6ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dccbd2a0-f849-42d7-9d68-8439789b48c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "78e59f91-9c81-45a3-9deb-3cf816068b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec4c735-8ec7-4caa-869c-9ccbd35648b6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5e21ff-7234-4541-bfb5-f42a9101e867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cdd5c52-5abc-475f-921f-5995a472d048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3762a39-b818-438f-b787-a544e450e118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5121b81a-a9cc-43eb-88b6-d44186a30290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e71ddcf-08d0-4c9e-8411-47ce3296c7dd",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e926f028-1862-4709-abbf-a9108d76d9de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c67a7a7-461b-4e58-a868-06da4fbdc68d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7421874-8c5a-468a-b822-c9e841230e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "174b8ddc-ff30-4ac1-a365-87b39180b484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34556e3e-595c-4fbf-8319-9ed511aaea2f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0cb7002-0e77-4dee-acf9-0aed5dd382a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfafafc3-14a0-4dcf-afb4-cf27d28a3cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5026bf55-ab62-4ef4-a715-5ef5a707a1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "00a3c8a1-7112-457a-bc7b-7728f38652c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aaee30d-e2ac-41e9-a0ef-dae90f1df222",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc78c846-257f-480f-990f-e1b09f704f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "276ed853-6767-4d07-affa-99c24d61349a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "492a7cfb-7bda-441f-a2a3-0728589365e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "01293b6d-d892-4754-9e9e-1ae7f1e0a368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e576bd-8fb7-4f80-b04a-f4ca7973d410",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4921cd0-4c00-49ee-9ab6-0198369ff376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8651990b-dfe6-4ea1-ba5b-a6a0aefe9bbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fbf85dc-831e-4f51-ac88-fdff61999a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db4030b1-1421-43d3-b7b2-b1ef3740bc38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d190243-3607-48d5-944b-0f96276dc1e2",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04c6246-a91b-4a0e-b941-02cb658bcf20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df8b9d94-17c1-42bc-8cbb-a09089d3b63a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a71373-105a-4b1a-8198-b1ad86050cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2730c885-e34e-40f2-adaa-4d96017a79eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca903277-fec2-4b28-a9c3-ccca3fbde0ee",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93e14bb-d5b0-4c4d-8152-0164fec5830d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba888e94-9fe3-404f-a39b-6a31a054ae86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ece9b8-1ba9-4e71-ae54-986aa89ba13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7effaf99-4989-4e0b-899c-020dc95345c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487f1d6a-282f-4efc-92f2-7c31946b3f01",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df61bf6c-c7b9-4204-b153-2668463994d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fec81613-cbb4-430d-a801-2bd8a7ee534c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa2063d-43f7-424d-ae6d-76ecc436ccbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "bd96ace7-fbcc-44b3-9a75-8c87fde40dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3770895e-5708-44e4-b703-140a888e0b76",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1b5f4d-e820-424e-ad6a-f8a80e26f997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "faac0b7d-863a-45fc-bdb9-200c46f8043e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebe3126-743a-4da8-af59-55d0602355e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "81437f52-85aa-4503-a25e-66a97bffb718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2d9f26-b06b-43d5-b15e-8f3ededa9db9",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46a7388-3ee2-4c8e-95c3-0975a5384b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e382d6-c03f-4e43-9aa5-4ceac16b94ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5df0b19-13e9-4e53-9115-403c63f6e846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef395ee7-8263-48b3-8731-5e17f1768fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ccf6a5e-954f-4b51-b2f2-4485d37c1bf8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b849d2-4cef-44b9-8498-77380433871a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3c02d8-9641-428d-9ae1-96af42bf33d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded2a4cc-4704-4665-97ef-a59d363902d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "63948ee2-f310-4e57-9546-2d4d2fbdcf3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ed7d44-a2c6-4efc-8f71-a152991c7d65",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0e345a-8dd7-4a94-a1ed-1b8791669ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ced5165-10ad-489e-afdb-25b18516f26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1887fed4-54da-40c5-be6c-0d4151f2cdc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1221f91-e367-4c8c-84f4-63e734992d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a511703a-b3bc-415f-b4f6-b79a76490ca6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06fbc520-6216-4bb1-8e8d-c6f36c6078b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b3ba55-208f-4e86-8dbd-8facd0f97341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdad1651-6b30-4c36-a0aa-ad7ab75c6532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "11fd7503-7d93-45fe-8cdd-d2fe2d2b783f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a30512a-f318-4bc2-9ff2-cc2e701be5e9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042f6038-4d40-4999-9823-860b5c7805b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ca4736-e92e-4eaa-8b8c-37eb3537d25b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0827148-6df7-4f91-8038-69692d73144f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9453adf-0095-486e-8d7a-6651659f22e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4dddb8-b2cb-4f77-a245-e43489923624",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52dc7baf-1b68-4f7b-bad3-4461cd0eb2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be0ed116-faa3-4360-8351-c967ff4e94da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bda4729-0a15-4051-8441-44ba3d211497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f2fdafa0-a586-4bbb-b0dc-ebb93ff2d879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1164708-ec3f-4b8f-9069-f77155f1ae66",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce89584-c431-4a19-840e-d29f22ecd3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64592e0f-3167-4e92-bbf2-b0d8cbf5fbbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62958ada-93cd-4f47-91bb-b898273b0af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1deb1b8-1ebd-443c-83a2-a594553f7670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88640116-a24f-43ad-b7ce-3eecb38e3b96",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b112ad-4141-4acf-b0fe-0d4a23429c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a76243-b45d-407a-88d3-bd94213f32df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41361088-bcbe-4fc4-a59f-f52d4ed7da19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "58da1385-7c0c-4384-9ff0-2eaabb486ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85142e60-7c5c-4458-9f95-7ea94c201114",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0de0ce-a143-4228-a5db-51a8dd3f292a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "624f5d5d-cde9-4909-a542-37a4057191fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4c4ec5-cd1f-4f26-add0-5f18e9c16ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7990a75-53eb-450d-adee-45dfbfe98988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2116a5b1-49e7-413f-94ae-53ca4aa8b4d4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4652bd16-9864-4571-a459-bc76dc17b6fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d15596da-28d6-4288-affd-408eb3a03f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31589870-8854-4f37-a2fc-b2ecfed11ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba730624-bc21-410e-831b-be1a5c00b23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fae8ec2-2067-4a03-954e-706b43526a60",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c92dc76-e3b3-4a5a-9c9b-29b829830dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e28b419-8c1d-4dbd-ab70-574d30f1fcdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5644bff-6ea7-465a-beac-210da698319c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "042930c2-e62b-4bbf-bb4b-5ece3ba7d440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ab9b9d-f5ba-41ae-9f2a-783e9e854f6d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abb42ed-b4ad-435d-9d85-11d006409438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a8af163-095b-496b-8233-ea7e5a6e2f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a84834e-72f0-45ac-9d87-ab413dc9952e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "62aa6658-4f70-4c83-971d-cab1c786c765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb169b11-8fb2-4ad8-99d1-6be234dc75be",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5506069-9372-42db-a537-6864d41b9d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c01bde7e-3f11-44ed-be8b-56e2b4842101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0ad6d3-b9de-4f06-b158-88e306a1a4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "50714d5d-52ee-410c-8f28-1a756355091c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cffb38b7-d8f1-43af-959a-f3b957dff04d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b929869-d67f-4d5f-a2ad-3f8c9be39e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbda0ce0-6ae4-4de8-aca5-3c7344f14b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f76b9f-7e16-4399-b553-2400fa0aa88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "540fe64f-887f-4b86-95ac-6381926793e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db1d977-56a6-45fb-ac61-79e382eb022a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb1aab9-f46d-49c2-8c09-582b90f8df21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f99c5079-31c8-4c2e-afb0-66a7854a2faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3773a3-3912-414d-9716-df5c4e2730a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "85aa33c6-1293-4026-a70f-120f74010d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a89ea2f-5310-4a12-8e33-8972d192f79a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed80167-ce89-4d29-b223-a7e3cd78c959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c301061-d1ab-4249-bafd-c5d35727aaa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8867f824-4955-45a4-a968-ecc7e83f1e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cba77dd5-a99b-4ae4-9f33-d6af4aafdf27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef49fe6-c2ed-4c18-8ea2-fcd9d7d912b9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "161a9bf4-10d9-4083-8c14-a0b29d3a6ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5137354-62e3-4cca-947d-73fecdbe23c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7095bdd-be1d-4e10-b971-92b8a8c39c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cd10ce0-db79-4a2b-af80-4de6f96adca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f3b69a-8dba-4178-a1e5-021ff9cb6706",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c726ab7-e468-4918-be87-60f37d18faca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af80bef4-e386-4ade-b210-098bb8e7beb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d1c72e-469b-445e-95d5-971f74139350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee563c2b-06e8-477a-8e75-88f415f670d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c79aaef-c509-46f9-aeba-fc87b233b21f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556d570c-1e0a-45b7-9cc3-e94f7d17a4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72b7ecef-9d9f-45a9-8944-387851a1392d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da64b2b-0a29-4b72-ad2f-a1201a9a1dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "856e9aa2-6339-4c57-a5d1-cc394017be84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b9b82f-66e5-4866-bba7-197196d6625f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ece76ff-eb58-4ac4-9eb6-db46fecf0d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c95cf07-5ecd-41b5-a90d-9b3445b10626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8422c4-9b23-41de-b9f8-d514bb72d27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7508364e-df8c-42e7-a63d-4f8e30ff6b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3b98fc-1468-451a-ba93-014a2e41f9c6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c9b415-7ed2-4595-b59e-47297b91a93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5976f279-fc54-4a4d-aec6-a07a22ba21c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19678a1b-f9a6-46e6-9a40-718fee16d605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e66cc7d-0541-4d05-930d-78377ae3de4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7eadebd-07ec-461d-9ec5-6a3d07f0cb7c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91617ff6-2e67-4494-a1ce-3d3debcc0a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4e2d83-aeb4-497e-aaf4-63727b38b0e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53be38a4-d123-4dd9-a683-a0c2f75c072f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "42ec6f30-c880-4570-85e9-c7a0b9849793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4327d2f1-7f9f-4790-96e5-6dc0e42f45c8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1129dbc-1497-4673-a373-ae256544bfc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf3c473-5a2f-4146-bf6e-7a841572d34e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69875124-3ea0-4985-8122-4ce507903d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d14af28a-f795-4f68-a149-1d88bfc1e682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de16710-9e88-42d3-8145-221c9b83be8a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3e2e0f-2af3-4970-b189-bf9904eb8920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c4937d-b9a3-488b-b4ac-21c232d035a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e6df932-b6d9-489a-b247-7cb1e595ffbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "47591ae2-25a1-472b-b77a-7ca4671f4ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b535842b-d728-4e66-9383-c7ac4b6bda1b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cda166e-343f-43e2-9de1-f51b723012e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5d8764b-7c21-4949-838b-5772ef0f989f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa22fa2-ea49-4d80-bf6f-9685000ec71d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "732eeb28-69f9-4af4-afa4-27d5b7ffee0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91140478-3f73-4e18-afbb-c727696362c1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbb93bd-5ca3-47ac-8a6b-9fe3269d7f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a060b5c-6aa2-4764-a049-53d0d65f712e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809ba91b-098b-46e5-b22f-ba82ac9b55e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0cbaa6f-a2e7-4d64-a4c9-0c91372d5010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43956a9d-d335-4ba4-a037-36085cf5fe94",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9c122e-8fdc-4176-aea8-4e793341488c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deb6b4b0-3442-4144-b25d-ba17571b2e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a0e997-c388-4237-990a-4eb2fdb700d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d16554fc-d902-483e-8f18-56bc49347202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6837eccd-6437-4209-b8bc-3926e9af6e01",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7bc3e9-3853-4bbd-9a63-177b76cb5ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "902f73d6-4b33-452f-8495-9b9eb1a472cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf41b55-3a48-4b1c-b329-56672c18aa2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d09fb9cb-91c0-4288-9078-0716ea73d0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c16d23-800a-4b06-b654-91c2a09b552f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab1f11f-54c0-4306-939e-0aa5793b7bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e1de7e7-d79f-4140-9940-ec3522d825d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4532df3-02c6-45b2-b5a3-aee6b4381763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba21b264-0acb-4d27-ab22-23c64539a3f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61edc99b-5986-458e-8862-4623968cfc62",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0591c954-63f4-42b7-897d-fe1dd6bc16df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d233501-53d0-4991-9af4-f73ba85db66b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d903045-7bbc-4fa6-a1b3-738971748f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07d32d35-c02d-456b-9597-7ec297ee3182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c3f7b1-57cd-4251-9bee-3d9216225065",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ed5e20-428f-4db8-a441-6adcfe6aaba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94af7eb6-a521-46de-8d0e-1169d8c5de5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d5f74f-7bb2-4c9c-b97c-6143113da3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a518b122-0a63-4f76-8814-c2b0ca7ddbe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec43192-b1db-47b2-899a-76bea7a3296f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e706a464-460c-4198-aa18-a0da741f0464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d58846-1210-4dfc-85aa-5d29a54dc096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e90af5b-33db-47d4-9956-d11c47aa49ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ea6f02-0f02-4238-937f-740b9b2e51dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b7c92c-8b91-42e2-8d80-308ceabb8df3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "565ecedc-c81f-4d64-b014-f2bac07dfdbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5f309b6-1c73-4cb8-a585-b903813c65b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bccdbf0-0a11-4834-bc72-2d713425e7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcad66dd-2617-4cf9-977e-42286930553b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51439a90-aa57-48f8-9af8-1b4a128d0caf",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de26c16-df0f-4640-a356-39e6ea801e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f40b7b16-4180-473b-a540-fa72e1eaa05a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4641afcd-45ed-42bb-bfed-96dc094fbaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "294b87d5-5fa5-45ce-a598-0fe7d6a64f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13822419-a2a3-4d67-8194-332269c837a0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fab491a-5d24-4fb5-8d2f-69dc94bf778c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b25d2b3-c135-4154-b90b-764db75b1096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6fac911-1071-40f8-a9f4-ebb43a9b9ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8790d1e-fcb2-46bb-86b4-65a387d6e1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2dd6430-d911-4071-9e92-b72426b0af92",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d85a20e-549b-4e89-914e-a1b411e464e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c066bb04-c508-48ba-98c6-21d4359a0f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c8c498-cb50-4b66-b8ba-84c34bc18430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d71b50c-2280-4545-970d-4f492788a9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054ab47a-37b3-441c-a203-27bda2d0e831",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804be060-7726-4a73-8fcc-6232d39a0f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40d93e60-f3dd-4bbd-8311-493e6c9145cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aac8c83-b1d3-4f6a-ba94-225183904202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d302189d-4464-40db-a03c-543555299547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c55021-d91e-4e29-b866-61c1e5312a3f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "938604db-206e-431e-bea1-3487c1ba4661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e411825-c687-474e-ba2e-2a1b3959c96b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040feb64-b403-485c-b4d1-5684ea08313e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4dbd652d-9e5e-48a9-91f2-de8106f4b205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ff8587-f242-4d1f-84c5-c7f47840636a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4974a2b-cdb9-4b54-8ddf-c998730cfaaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa8e4a8-5c09-4284-a27c-fc565547f9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a748393-eebb-4784-a964-f5b59f9398c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b36800c8-780a-4da9-8a52-cd7af9519bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e83bd22-39c7-4165-82ec-0966cd5406de",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fbb6106-05bf-48aa-9015-8e238a020ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28a9b79-e5bc-4f00-b31e-e95602f91f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196071cc-ce13-4c71-8bf7-e51dd82e06b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e30d1ff-7eb1-4c44-a97c-3f3b89fe5fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0039d6-f593-4b94-97a0-d762a86b413e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb892fcc-7d05-467b-8951-3ed24b2ebea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "211be05c-9fd2-4f67-afa6-2e8c734da1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad83f8b-2d67-4f14-8238-74eb73c04e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "35541b50-1595-48f5-93bf-9d4d9a906aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992a3f30-5cc1-4c25-96ea-1e74df247b28",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c949e5f0-ee47-4fac-bd15-e071d0330eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4c26190-a11d-46f4-afb5-a35265499783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46da427-87b7-4cfd-bb9c-51b36c38ae12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3833157d-504c-48f8-b21c-6e9e7a61477a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a45409-e273-45e0-8731-249a7772e18f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "059c9992-1bc8-466c-8204-0e42ed7ac796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fbf315f-1140-4d3d-a62e-35378ef82adb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559a4c51-9b00-4520-a888-806e811afe9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "17286019-2216-43c7-9395-96d5d9468c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a30483-9bde-497a-9030-6f5a3cd35e5c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f373c2-f60c-4774-8ea5-2cb2ed842c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4ab3a3-2d87-4ec3-a589-f9ce61b26665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58f7581-ceba-4d4a-a110-fe60fe7d30c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f17a7e-c7d8-4a4b-a342-05f4704a96e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9da7d1-3a59-4727-86aa-598a623b5f20",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0467cca8-43d4-4085-9d98-5951ad97fdf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "476754bf-73b2-4fb6-96bd-f74ee0dd6502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af294f72-b71c-4b59-ae91-b0976914c9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "10809375-6778-47a0-9db2-928c8ddd7196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b3e15e-3a95-4cb2-974e-2378b6f26f59",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce812b23-b255-4ba9-b35f-46da3e14d275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0316221c-8747-4eb0-894b-5a4f53efbbb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41caad09-d7ec-4eeb-b958-fa72feedba16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cac3974c-1304-43e1-8bef-c2d8b7a58c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e62a9f-6253-48c0-9a5b-dc7f665557cd",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9273038c-da9a-48ac-9b70-f3775b91fc28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49c08c3d-ca90-4d31-b5ea-653447a406d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7453390-6ca9-4f11-ac26-bf1f56d7c254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "982ec686-066c-410a-b9a3-11639689fc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b45bfe-153b-49f1-a12a-d77431501bd2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24935e5f-3751-426b-bb72-a91a50f58514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3eb474-c279-46e7-b1fc-e6a071796392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c5b5ed-7d9e-48ed-8fa1-d848e6791f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc4630b-bb9a-4db4-9619-8b137e31110b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ad1bd4-6c03-461e-abd7-ac9d1d8cb5a0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6792ca-5e87-459f-b829-5c7a48094a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0c0a878-2849-44e5-b127-1da6c77d666f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d785e8f-d5c6-48c6-ae0a-ad548496f3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6eaa568f-b9c9-4263-ad4e-a6bf7f27f1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99a6bf5-74aa-4b28-9eeb-e98fe0841f4b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d867a578-2423-46cc-b1c1-a623132fa757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2dd9714-32da-4bef-9cf4-5639c267d933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006e9af0-0d68-4cd5-a04a-2ade450a90a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb03f47d-36e9-490a-96ea-13b1224b5004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a8082a-afba-4f74-a8f0-f19e79a199f3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6731cf55-6c4f-4424-9480-c392b7bc8085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42bdc166-129d-4751-9e00-fe87c22db5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c532a65-e048-42b7-b533-3d745fb3b72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c3565d-019a-4bf2-8098-5ca53b4ebbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5903c3-4f4b-46cf-a3f6-ce3ff9bf5a6c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edf2816-3f5c-4670-a3ca-0ed626b11cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "457eb0b8-bcc8-4613-877a-f5aa5b4cab67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa4f03d-ac45-4088-9edc-e38e4edd53c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e0d7fc0-9cdb-4a01-a3db-441381eba0b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddde8b4d-d901-4413-9c5b-f503a5853bfc",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9297d80f-ece0-45c8-be92-385a79ec0509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3072e0c7-0beb-45f6-9d33-09edad3418bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25989414-2b0a-4a5c-a439-085bdb10deec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "48b85305-124b-4d45-a65d-23595c1d20e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80c3915-9ffa-40a2-a086-e702c9ce46b4",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8f77af-5f11-468a-a386-f39852ee3523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cb695fa-8a80-4daf-8956-ede8ee069ba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "984918b8-248b-4e1e-abd1-984b022361d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc29fd7d-7c2d-448b-a01b-f2c476450e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad4556f-a38f-4e04-b2b5-4a8f85146f50",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43535c2d-0242-490a-9717-937411eaf19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4ac9f37-c523-43ea-bd10-f4785cb95ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ae513a-36e5-485a-80bd-33d1211ad4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4e4714d-5db8-4b7f-a764-fe5c20cae0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edbc3b9d-7c38-4184-bc65-54e64394b5bf",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d706227-315f-4ad2-aa27-5578ecf86fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9f7be2f6-83f8-49cd-b3ae-6e2013a1f335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6a07c9-2afe-44c8-82b5-b3a7f3e04ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3bcbc523-5a5a-434c-8cfa-5956649c2029"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6f2fa4bd-46a1-4e24-b250-95792858536a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "027ff4c5-95fe-4215-ae4a-bd8888feff7d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5beb9803-6611-4772-8f7e-108f25850a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02cf0ef6-aec8-4388-8f3d-f0b301eebf6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d2d096-4f13-4387-9d64-ebbde9e252b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5fa2e814-b02e-4e26-80a3-b70c801a1bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be72380d-5956-49cf-aabf-0eeb1acff0d4",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47bfdd8d-0e45-4749-8670-1d22d36ba4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c218aea3-5c2c-4b37-945d-abea06e62d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3645165c-78ce-4fb7-87ba-f7bf8d8e4a31",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a8e354e8-12a7-468a-98f7-c7de2907dda9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10cbe86b-4c29-44e0-bfcc-777ba9a89958",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd5138e1-f1f8-431d-8a85-9d07a4f9b4de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4fa64c8-11be-4882-8d90-9f9480aaf2f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cc2b853-a153-4b18-86c7-beefc2f90b60"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5f722365-57a7-4521-ac60-44e183915288",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e4f77c87-fc19-47a1-97e5-6f0367918f30"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "11b6a3db-164f-43d5-a58b-508066748707",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "38ddd1a1-bcbb-47fc-ae50-0223c5e34667"
                }
              }
            ]
          },
          {
            "id": "02d1fa09-d270-4cde-8d0c-22e0c7a9df25",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fac10243-35ae-4ba2-bc6b-8aaccef19d95",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "352c17ef-8db7-4209-a663-78d4ca661078",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70fe37a9-3dd1-43a7-ae9c-a9eab111dc4c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d9821e5-1f76-46c8-acca-dfdaa5ff3c7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "66becf51-bbcc-479e-a3d5-9caa9158bba2"
                    }
                  }
                ]
              },
              {
                "id": "9f672585-81c7-44f7-9887-661bcd6d21d9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e4b01b3-94ba-43ae-a7ee-18be28cdb015",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0233203f-f446-40b4-bcd8-7ec0e3eb482f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc76ec5e-6e8c-443e-ae71-779982507c56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "615f6829-03f6-4ecf-a1c6-c09e663f9ceb"
                    }
                  }
                ]
              },
              {
                "id": "a0e4dff9-a698-4670-8386-bc50ee69e8f2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95fa6218-6294-482b-9b1b-5268ebba2bb8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "639a9991-f05f-4b8a-b059-9afe706138f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67bfc2ae-427b-4664-ae03-57f739eda073",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "912eb930-bc12-4fe2-ba49-b6b795c4c03d"
                    }
                  }
                ]
              },
              {
                "id": "6bd9678f-a1e4-44fa-88af-e5d1de1e63ca",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09db4bb7-3434-4e2e-910c-b3d9350b7e39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2a76369b-9191-435f-9f3e-3e44e41ad573"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a301f774-e98e-407b-ac2d-479a0bfc694b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f5ca3f64-5584-4656-afc1-85abea4b6cb6"
                    }
                  }
                ]
              },
              {
                "id": "03ea12e8-decd-4856-ba8d-b699d45b8a91",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04b515ad-2443-4550-91f0-988e8f48790e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "06f2451a-d59f-4a00-a26f-970a6232403f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "612edbb8-a85e-4e00-b8d7-d691c2a14111",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1a832683-bfe8-4884-b463-a8092e0e1330"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e2cf0519-7bfb-4e9f-9986-974e81697ee8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "19908f02-31c8-44c9-9218-5d57e1683af1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "07a35206-3270-406b-a2cb-9fad7bf4a90d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6edda285-2101-4f60-bf76-371995379a0d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b81b941e-72f4-43ef-9bc0-3c59d9ba49a5",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "94420f25-4e98-4f99-aac9-e7d887a32b36"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d786b0cc-42a2-4ac7-afbb-f5e350306fa0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26f6b2c1-2b7b-4950-8432-58b944e41ba6"
            }
          }
        ]
      },
      {
        "id": "f429cbf0-4504-4520-871c-98051aa7a13c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "df7e3265-306a-4f28-8ded-a49eac15d29a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d564e9e7-fa3e-41e9-880f-2a711de6099f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4ea6cab7-2ced-4d21-83f4-7cc087a37a78",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e84298-f957-4897-8b09-63822ea0d5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdfa4460-080f-4a6f-a4ef-1662320535d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de69886-bb0f-4672-9c1c-72cccb801b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6bae2ef-b2c6-46d1-9cf1-29ca5bcac8d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66bfbf3a-bacc-41b2-a24c-636a3796df2f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e263e52-a362-4d37-8aa2-471a692ad6b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fababa23-c737-4523-bedc-47fea3ca9253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57133031-c29e-4a2a-9f4a-cd6f9b6fd856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4188ca6c-417e-466f-850e-fb7086798bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1dea971-9675-4e5c-b76f-8d48fe2f704b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b55560-0f66-4aa6-acc2-66a87a41c4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c769fdc3-e5e0-4c8a-bc47-b4bea08d44ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f89d7f4-d9e2-4273-a09a-8cc77c217ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd678ff3-798f-4d55-8071-5e960cc07dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7042b1c-3fd4-4495-9b4b-3ffa30138e2e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ef4c35-83df-40fb-9030-cd9792c6a9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c000ba-2425-40b4-93eb-90ac13fb357b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2bda89-08ad-47d6-94f4-fb5011ab0a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c068bd02-03cf-4a99-a0ac-490bb2ef43af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd86e1a6-39b6-4af6-9f67-c89bbf6eef0c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "126c7508-24af-4e28-a256-e4062fd886d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f05caac7-28d2-4915-b443-fa77cd26d5ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8266cef6-0744-495a-a18a-78a2f3dd9c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63d092e9-5bf0-4e70-8047-e1101a0b7b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057ed536-9ffd-4ca6-ba6b-35f6bc1f0097",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b783fd0e-cb68-46ab-b1ae-be6a02557b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e83c77ea-ab7f-440e-86af-88721182f085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef74fc69-6990-40cc-961b-44905e45c335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "db7e1ba4-6bdd-4aec-adea-5d1050c5d2d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aec5593-c5db-4851-9fe8-db4c559f7bf4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f7b4c1-74b4-4f96-99f8-fc56a028c7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c32a1ee1-c237-42a4-a60d-653c3e2375db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319d7d59-aad8-4bb0-9cfd-1420b3fd15ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e966638-6af1-417e-9020-bebd84d2d761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb5683f-07d1-4c07-938d-95225c4cd527",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6235e4e2-069b-4a46-be6d-3de7638553f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09de8a9c-086e-4d59-9041-a15415ba811d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c4e4c3-7c1d-47ed-b5f4-f65bcfd18147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "77f5e3ad-1631-4f61-9c85-80b25144493e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f3a141-42b1-4dad-bcc3-8802291bc095",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8bf8c95-c5d3-4706-89fa-fde4a3f61ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2d312c2-020f-46d0-b999-7fb0f7aa6f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bee053a-9976-4a5d-a3c7-1b68bef2ad72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b48b6343-0370-48cb-9781-b5ba0cc57446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d3a38d-6df0-4845-950d-f92153751f65",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbfef537-2eef-4ee3-8194-07af64f3a43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5c4f92-4b9e-43cd-9719-e8f258d5bc48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1738123-2866-4711-9155-9acd4281b843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "51441335-841f-4b9b-b5f5-7257e81696de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216e5ad4-d9ca-4569-a329-27eb022f200d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52f049e-e2cc-49db-b40d-3e90b582c8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "294ad3fa-2880-4996-9045-b3449023b917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e53e0e-ed69-4a1b-b677-8ca9edb789ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d337dda6-9c0c-47b0-a241-901d37c608b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43bf41d1-782b-4c99-b8f7-fd713dfcd993",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9516692-33f6-4dd9-a85d-659441baa6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d72cb83-f365-4ff0-8c75-97c9cea6d885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e440613-3c1e-4aff-be94-64f3ca4f162f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4105dc87-b105-447a-8464-cfb1bbeca849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf77f15-06bc-4051-ba00-e771d3ee2c0e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af9c02dc-3347-4a01-9060-4c15af64657e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e245bfd-d72f-4a49-9f38-29fe12d8a2fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8cf302c-fe80-4aae-ba7b-385e1f864413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffb40fe5-19be-434d-886d-89f9c109bcd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c505ca85-c410-4e23-b998-6497b2c37fab",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba12af2-5b52-4919-8068-2ed79ab030cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0f63a06-3505-4758-97ad-e4500028ec76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0f565b-7514-4815-84ef-f0165042a3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc4e432-e52f-4a0d-b089-43525737ee63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5581ce-39ad-4a23-abd6-f41a0de4c94d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f41d5e-e9b8-4561-83d3-5582420fc818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b52ba352-edaf-4c16-b6c7-261fddd0d7db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4157cf1d-4701-405e-a934-d9bb6d2c3c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f04dc0f4-7ab3-416e-bee6-1655e9828b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffd2c8b-3909-4610-9290-7a8d4a8e2198",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb8b843-6175-4124-b821-9b7e9f3771f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0353ee07-58c1-49be-b000-060f6a590dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca9d32c-a86d-456f-a706-0cf6c4b5cfb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "688160e2-8cfa-45b5-94c7-56a72aa83be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d64f3d-64ad-4e07-adac-0271a33d901b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e79daf-952a-4e7c-9298-1c85ebcc6c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcfc6aeb-2979-4245-a6bd-0857a51bcc6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76ffc79-0ea0-4a4f-82d1-adf744e39c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "34b2d103-9476-47be-87cb-631a5a6f78f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb100aa1-8ffe-4ef7-bd00-a0c0c1c7fc5a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9ed901-c36e-45fe-86ef-badec5e2e127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bdb65e7-15e2-4b3c-8e5c-af1fe6911eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4beb64f-2f03-43f6-ac0c-c910d176722c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff9c44b1-314f-4306-8a10-907efe899b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9bac0d-5f32-40dc-80b9-944aa6a4e7a3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "945bc15f-8b37-426e-8835-e7d9f867da9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3804951-9708-4ca6-adec-817a00bb860c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c043f95-aa14-4d0e-930b-30c37e6a2c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b3955c-1273-4020-b264-06d8ea65089d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fcc43a-a9a8-41fb-bc09-40bc446d465c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00071953-9561-43ae-92aa-69a3ae9e34b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7415d389-76a8-4d4e-ac07-42e226ec77a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ad0b06-273d-4130-8b04-28798980f2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c48ed01-6069-4542-8807-96371e341c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61da6836-c637-40c3-95bd-3474788e3774",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af514277-6479-4a72-b3a1-d1b3aa0b034b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5c54f04-e851-432e-b1f6-4d165684f112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be44b2a-e231-449e-ba62-a8adc0f190bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38dbe057-fde0-447f-ab9e-859ce6126777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f5ed82-3bb4-4e2e-8737-ffe919de2889",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2382b41c-62c9-425c-bba0-e22a0aad7c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a20f45d-bbb4-441b-a534-9aa73027be26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6d328e-a496-4701-95e5-e9d8421c8cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd5b7a5-3e67-4625-b623-0d6418fa1d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e693245f-1f8b-4897-b250-afd8bae9e156",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a439a80-d88f-4238-a6da-1b029902c495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df0f4dd9-7e4c-4fe4-9290-8d4f3b7640af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c94fcb6-bfd0-416d-b40b-3deb10be176b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3254585e-7c3d-4d01-b2bd-76174c9ce6dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33791f22-9b75-4ee2-956e-8e8b2992ccf5",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836366cf-a4db-4b4d-8528-1966be9655b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a88fcf-54c2-42fd-943b-a6b166c4c199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a549fc19-2a89-4131-b67c-36b22050d7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea8f5f87-0c8f-4927-a5e5-2479c2e027dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10a1825-55e8-4023-a368-7c7219212bfd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea756f1a-7ed8-409f-a29f-972d25d4ffa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "623f1637-6666-482c-8970-b528dea8e96a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e792fb3-6556-4f29-88a0-49590bcf68b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80fe8722-6831-498b-9fac-23976f57a002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363f789f-c3c0-49ae-b011-406335455bab",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd27f25f-85d5-4445-b7c6-1765b7fe7dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c6e9e8a-5a25-407e-aa92-5f71013b35a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a08f85-ae35-48de-aa20-3e666fc180f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e8a0064-9874-40a1-b4c1-c85b18db07b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74403c88-1ae6-4fa8-ab6b-8f282385a9aa",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb654e9f-9787-4222-816e-62c9f8aa1f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a26df30d-d6af-4ae0-ad1d-9700a52ace36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd8c4d8-da47-45af-8d98-dafb84fb5f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a971233d-d303-40eb-bfdb-53309731543d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34d3462-1607-4c68-90ea-925802ff4bdb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f852ac25-359e-4b83-af8f-134d59880014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e345a1a4-2b91-4a3b-8916-681256d30d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064d5bb3-34f1-418f-85c8-12aa9239eb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0984cc3d-8b62-4dc9-b214-8c0d5c9675ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce29dec-d76e-4328-80c1-1aa44e75ba65",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5159d5dd-38dd-4e86-875c-7145e331bf2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b3df8f4-a20e-4210-9e5d-b83c930a69ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8e24b4-48e2-41d5-8122-19bffbad86a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b616893-273c-4b50-9258-f45203bb9684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c6bdd9-74d1-454d-9f72-0cf8a5babb87",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "564a32aa-094e-447b-bea4-b4eb1724aecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "469e52e1-efb9-445f-aeb4-cdeb5ab60ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e645b9-3096-4bec-a2f6-1ee4111a21ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0260f76-3d12-4509-a03b-c2af2b4ac7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2dba74-4eb0-47ff-9aad-5e7086abb28b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "375787b6-f0c6-4e37-836f-2d6e616f4466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0015f32d-fb35-491f-b4d2-6a62ac650654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80fb4be-94ae-4a9a-bf71-246d56c03a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebd0de78-461a-44ef-bbbe-fa5ef5ed3111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4e2af3-7050-4ee8-966e-980331395c83",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d778cb-fdfa-495c-a0e1-4392a0c3378a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f64dee04-94e2-4343-97ea-360801780322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22aeb997-9c08-4807-b095-ca938d67f6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f175ac3e-f098-4596-9913-b3c8e39622f6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eceb7056-f106-4445-ac1d-6056a34d9a03",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "13247aac-bc8f-4d0d-8e4f-001f17b6670a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca716543-400b-4939-a95b-752f214a9256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e08603-198e-416f-aedd-5afe79bb1e50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f62d2a1-01f8-4b79-8367-21f397ecef26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81667bdb-1d84-4b35-97c1-7134fcb13a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0845e886-5a2b-4798-a6cf-9774340b6300",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67195dc-e987-4801-a5db-d2a7b6a34452",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "efc997c3-48ef-47ca-aad5-7e2492f03596"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f8913e-4426-4d6b-9632-78ce479caacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e819427-7665-454a-a81c-734091e095ff"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "803606df-a7d5-4f9c-9225-14775328479b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d1af00d-76b9-4d2d-b719-a72357c2145a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "07280a52-2264-4e0b-bc43-b7cc4a520804",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13d09b42-1a16-4558-b8be-fbd57455eabd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f364d14-ac3f-4875-aa55-7d496c89e869",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d43af7d2-1b83-437c-8b8d-29894ad294bd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "38fa1ad8-180e-43f6-9156-08932fb1a748",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1dd7faaa-e5d7-4b37-a0af-f12f067709b8"
            }
          }
        ]
      },
      {
        "id": "7fd4d547-53e3-4f6e-b13a-f99478d2fe49",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7bbcbd5a-3c01-4257-9771-66a6a43b8d1d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "afc3dec7-aad8-4fac-a5ac-999db58ee0fb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b698e8b8-fbde-40f2-a3c9-e2fe3e7168f9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855ab45c-4d69-4a8f-8fb4-d326b0dd668f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12ef7a1a-0778-4f5a-aab3-d40f9555351a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964add57-645e-43e4-9e3b-3b520dd7c8ed",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3372b13c-66c6-48c2-afdf-ae036e346f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0570116c-ecab-4949-ad05-e26bda7e872a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c239732d-fe4a-427f-b008-7ab44476f132",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27036e67-89d3-4d1d-ad22-21cd4acd9aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5fd644f-2aa7-44cf-862c-00ab1c61c585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367fefa2-544b-46e1-9469-4ca29e6f5424",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7731e980-55ce-4950-a646-cbfd478a753b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "643c1bbc-00d9-4f94-b70c-4c280b296e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec55b486-ba0d-4c1c-9456-9d77bce70b53",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805f9985-2a22-4639-aded-d74ab1eb32c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4083ad-f7c1-4017-bd9f-3d5b6712b02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e7945e-085b-422f-b441-26eaf709b4b3",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e91b26-32d4-4fde-ac7d-4b4ccdbebd76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fcb32f2-aa70-4abf-b4d9-231e42f2e6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b788226-90e0-42c1-b28d-3374bb2e4aaa",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a86c2f6-964f-405a-aabb-fa530ae32f0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31187245-0993-482f-9d8c-fed9c0a06c78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79687d9-7ab0-48a9-bff1-a4253090bf11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ba23ab-ca70-426d-9c28-b0bbb9ec8192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21bd3ee9-5187-4d4e-9218-deb243a4a250",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0268501f-3758-4642-b13d-46076095b23c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41f38563-de21-4a4b-81a2-e25248bba769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63917429-4405-44da-be9d-4dcb2bf1e49a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06b5f06b-3933-4c34-a4e8-2e6373d14027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f8dfbd-23b3-4ae9-bff9-6f394926ed2c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8205601-07ea-442c-8ecc-d6939bd51bee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59261495-9911-4075-83ad-46de681c09ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7d4655-2f68-4a3e-a5b5-f6d74a41555d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6777e3a9-2d89-478c-9b9d-481c5a91aaaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5a3c5d-84cf-46b8-9f0d-a3dfaeef720a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1a7f0f-5160-4708-8ff7-677b1e4404a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5b63242-2a1e-4b49-9f61-ebfc24b918e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "994ebd5d-35e1-4047-b4a7-5cc0ee2ee4fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f6800f-ceee-4c80-91fc-765e560203dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ba56fa-d9be-478c-bbfd-a7c3249336e3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3609596f-dfe5-4e9a-b4b0-6fb664be77a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01a8d34b-c6be-4ecd-b90a-02aeaf084b9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3daa57-51e7-444f-9647-1ff27d6bd228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d56a8c9-af31-4369-b66b-606b7758437f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ce78cf-fbc5-41c2-ba89-e12bb2719662",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b1f313-80af-4f1b-a85c-bdbf35611fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50087c81-ce69-49e7-aa5b-500683c8b299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa5926b-32c5-499d-9eb3-4c049ad85c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e227dd-62e5-45b4-90d8-465ddace5884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2163762d-509b-464c-a9e1-33181a6c7eb1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71330ab1-e4da-4f6e-a778-8d0e42c8b655",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b1e1cf4-2ab7-4b7b-9bca-a53ae67ed9f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "748ed0e0-9802-4e83-a2d6-48305a598049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45183fe0-5fd5-4630-9c0b-842e4a186dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096b57c4-a241-47f2-a555-b7a9ef35b19a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63aaa1ff-e174-42f8-b5a3-0fdadabec7fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b424b5b-3fc5-49db-ad50-a11def159b9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6ddb4f-ed55-44ac-8a43-2c34e828b4ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b77810eb-438d-40b7-961b-709f0f1f8c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4425838-11b5-4396-9b08-be59af943dea",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6610da2-5560-4094-b827-3880d7dbc5cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7406e7ca-96b7-4368-9d9e-c337b71f6990"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "803fb06d-3b9c-4800-b056-bc1520a31834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a0071b3-44c8-4a89-b30d-1b4ec135dd71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e929d25-ac8e-401f-9971-2e2c48a6fb13",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02741faa-49cf-4bc2-89ed-84fd38b33be6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7149c32e-17c2-43ba-b02d-5d540c792fa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "529bb9d8-68ba-4010-a71c-88d45d663c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f84aecc-d790-44af-b7a7-1b39c1bc6941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32d2419-917f-4f71-852c-d40d278e3cea",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139b1238-aa1e-4e08-ab29-10fc7b1efa36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56bc4e75-5799-44e1-a55a-adafcb8c098a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1f1fec-5647-4026-b254-3f3233d7ba17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc07aad9-0f5a-4bcb-81d7-d613ee36278b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec32701e-6d2a-45d2-9f5f-339ecece49be",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a7e1472-d18b-440b-81fa-7128e9007f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13ff4bea-00cd-4ec9-9f0e-c996ebace780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fed52db-9655-49b0-882f-ec2214c42dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "733767ca-626d-4c2e-a256-4d0e0123e662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67c4e8b-037f-43dc-ab8f-1aa51601788f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ec6083-4c57-49f3-a1f7-927763084c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3544dfc7-dc02-49c4-8856-71c105778404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49fa525-7998-4758-a450-fc364a3ca6e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15919c19-c6a0-4346-9952-b4b585533220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fb61fd-9621-4738-811a-a12b8e399be5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7100eb9e-eba2-4ac9-a721-54afd206b1af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4524aba2-3ed3-4f6d-acf5-8783b57cfc96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4a1650-bd0a-4101-9c44-d0ef3cb88eae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "234800c8-cdc5-479e-8546-243e09173798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739f4d55-7989-4cf6-9b1d-0d8992b8f3ef",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2584a20c-a979-484a-b9c4-2d144addda50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c8e671d-d7d4-46e4-a120-13fabc1b91d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d408760a-f2e6-455a-84ac-1360bdba6693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdd3623c-66b3-4cd3-be17-eda56db1b7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb366d56-34c8-4078-8113-a9972392353b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d505a1-ddd3-4f7e-b5d6-46ce4f6f07aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a5813a3-bb20-4685-be58-a24f69938d7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5053f468-653a-4dae-9c0e-4a07b5c995ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a46a8b7b-faf8-41c3-a1a2-a0d30d31e379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d923f610-5008-40aa-ba2e-0994d8e1f3c3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd2cfa2-da73-4bdf-b3bc-4a49e337c4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1664b259-da4e-4775-9b04-b3d23e74b4f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82192e9-2581-4965-80af-54b1f7f0666a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75a49799-01e4-481d-95a9-a4e3d8a023be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2588ceb5-53d4-44e7-a571-67ae9989feab",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4566442-7d3c-429e-9cb0-19e9546cfa46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a674a48-5c35-4bc7-8407-ac7960eeae6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d0ec35a-6b88-4858-96cf-dfc5ba36e777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef7e5783-e37a-4037-8fdc-46649fd77c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f3b284-c67c-4f0d-8033-05fc03eef50b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd83278a-ab36-497d-960c-9d46ad1d9214",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d95ca54c-1722-45f7-a3d6-0dcd2c02d61c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "889336a8-e60e-416e-be86-d827d6dc5b83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e5f39e-ab3e-4ab5-8525-f034787ccab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736078a6-1878-42b3-970b-9e03b5426b61",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0fa9a6a-39e1-4426-9e02-dbaa8c636de1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faea9c02-31dc-42a9-9c8c-7b71c2b69cae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b00d18-2de9-4b73-b3b3-54c8c4a06527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b36294e2-1d8d-4678-8ebc-6db36060c6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80229e47-f7e9-4eaa-99e6-f17ed48d39aa",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e13666-b5ef-4ee0-ba39-9cfa1b9f2730",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc894f65-281a-4506-a911-95b21f17e2ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "241dd4d0-bb3d-4436-95c9-4f872f6f9aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb241a80-4c29-43bb-9ef3-6fa99672bed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4acbe8d0-38fb-4720-a80e-14111009690d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ef3ea3-7491-404b-adf2-a10f562db8e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "494f4123-bdbd-4240-9b6f-d23c403665eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7140e947-422e-43f4-9fc3-35286663d646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e0d5110-ada0-4857-91bb-193ac9fde4d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe12b7f8-7b2b-4ae6-9f6c-304bfff146f0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58e11a5-75c5-4868-a1ce-af0849aea573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4303c42-5b45-4193-8300-a9a7543149af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83fc0c80-5dfb-4e11-98d6-7ac7050804d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb9ec316-274b-47bf-88b4-0aa9fd062484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c31072-60e8-4bd7-bec5-a6f35ccf50b8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523bb4d0-6901-434d-a0f6-a1f76d6ad88d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1bd710e-f0e5-4a2a-80ef-5d6087158dc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b64b77-7cd2-4506-9882-7f3411cdd092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82d1297d-4e8c-4a4c-91ce-74a2b3bb4de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eba912d-a1cd-44d1-b270-e9f6f24db7da",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525f526f-4c5a-437d-bdf9-20b8b29746ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00fb4f18-0c5f-4c20-89c9-05dbf9f81801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f15f37-3fcb-4619-8a3c-a0cc7f3d7fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "886381af-388a-4496-9533-cd86394de0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e6d5aa3-3e41-4c1d-9870-73747eb75fe1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f096489d-bc1c-4356-a12d-49a9d89e7d33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f5e4c23-a845-432a-a1e5-c68a8ea63344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb37a17-eaa8-4d22-b753-9c1d3c446e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b57915a-34e3-4651-9db3-225115340414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8542ae4c-7608-4650-b16d-6affc9052141",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade1853c-2382-436f-a276-09f114234c98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dd403e5-07a8-449f-9200-40b873460907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f055246-3b45-4372-9610-bf2cb85d79dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff99b32-7419-4917-9fa9-783e6be72c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596be6e5-19e8-48f4-b3ed-ec934c8a43a8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d8041e-94d9-4992-ac90-22469caab60e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5097ca4-3393-4982-b1af-091e1e0261af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bedd1ab-38ad-4309-a15a-ce88bd640db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22bbc0d-79cd-411b-b282-8bda0dde74a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924fce3b-abaf-441a-9041-419a43ec9887",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f3abeb2-d328-48d4-b8ce-fed5c9682a08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "026c391f-fbb7-4d99-9bd6-88c6f200d0c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6daa94a9-f424-4a99-96fa-28a412a3bf87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d63928d-75e7-4a80-8cc7-bdc7147f43d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d860cc-f5b4-4d8a-9ae3-4255e515cb79",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c58d3c3-0c35-4afd-9685-beae845dd4d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d71347ec-9e72-4df5-ab60-a6e40a590ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e74e9f4-1b29-47e5-ab77-0c29c9d9aef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1197ee2a-c391-4cc2-a7d3-2213e406211d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b493b8-ba43-40f3-9b5c-fe43ed886a33",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33eeee3-4151-4f77-8519-6c984e7c67c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04bff3f2-047f-4314-94d3-7a7b4c335d62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c493848-145c-406d-a9c6-ea14be8dd1fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c110895-3a6b-40a0-b1e5-912b67d20586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3c3ee1-9619-48c8-ba16-6d7a2facd74e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be2da943-7fa5-4335-a565-dd947e078daa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bce6c06-1362-4cdc-a61b-936abae13bdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f9cd13-9a2d-469c-bb4e-a3471d42a228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9558ca2e-5e20-4c12-be9a-b3ee98a80391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c6cef7-903c-42aa-b968-719c0d9de7a4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689a27db-748a-4a96-bab4-cf48dc423461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb43a6fb-b199-4ede-a268-2ef801e6a8be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb384ca-e61c-4782-92b0-b2d5595ddbbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aca65cc8-ce5f-4ec5-8a4a-6ca0d5df0f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a4a038b-f62e-4c77-b910-b5a6ece3025b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213a8033-d76d-4b57-a096-c76c0d67ef23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6576a15c-9116-4671-8953-b68f4048ee58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8368557b-3478-49c1-999b-d74d2dca78db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6275ca7a-081b-41bc-9ac8-d56224ab34b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9217c3-91ac-4f5d-8fbf-6a9333758134",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750d114f-7e69-443f-90a9-dccd292df7cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd12150-e738-47de-a7f1-06702f7ffc55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5f3c29-cac3-4790-8f9a-cf04738d1144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff355ca-7814-4d7f-bde4-b3e3769e7cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a4e265-16e4-4c86-87f2-b5e4152b7743",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96223a4-796b-4b57-b967-dfbbe040dfb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c5a49d-3556-485c-8c4f-33d59aecd9b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1dda41c-d7fd-4063-9002-be2077bc30bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94c2339e-19d1-437c-8b7b-e25b0c49fe44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54072242-20ac-4c4f-8170-061404889c7e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2341afa-c53f-421e-9263-77146e48cf70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8d3abf2-b083-4eba-a5d2-9b578b398d3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b948eb8-88b4-4c72-a2e0-71f403e47918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "099773f0-0a9b-4a24-bb44-312209c08a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ff6f10-1321-4808-904d-ea0c0c1cb80b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c80f099-f5d1-4acf-a8d0-6f3a5c323f05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2c18c4-9f3b-42fb-bd5b-4569f77b155e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd25eccc-7677-4c99-86fd-0680c3832f05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b9b5017-1988-4b9c-baf5-8ad3e09dc8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d854aac-628b-4cce-b7e8-a928075a75fd",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7aa787-e95f-472b-8781-295a2298b7a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c3e4f5f-a3e1-4acc-af40-4acf6c0e0c53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de1940c-8b1b-42d3-9f5c-05f555934af1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91b79bf1-ce42-42ec-a3a4-28082054693c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6fed1c8-a5de-4d37-ae17-933c9648c500",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87040865-0916-4aa8-9b4a-7b2a19d168c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddc8e0dd-08fa-4861-9670-21fc8d209e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32bbf296-c213-41dd-8634-430133406830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c2ac990-65c2-4975-b0b8-97a6ed7298b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395a980f-916f-4856-a85a-e33758fcd1e1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73954ab4-9bd9-4110-90ae-ea91146dee3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2490d6ca-e89e-423c-bcff-0a7cd01f6c70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab70c2a-e098-4295-b74e-77f80fe40a99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37bf683f-5fe4-492c-bd6e-fcb56cf94bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f39297-5cdc-46a3-804e-f32b52f264f9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0ce2d4-28ea-4f28-b589-68171947b368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f935ba-a709-4afb-acb8-4ebe244bbde8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eedf6fd-1e9c-4297-9230-5ea6cc8e93b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3187c7c7-c4e2-4ea6-8427-29eb0b0d5de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04cd7988-5390-4b6a-8b0c-77d0469e1d5e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c5dd95-dd7e-49fa-969e-27e34d2ccdf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ffa286-9a90-4331-96e4-97f63c607cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd74691a-36f8-49b6-8feb-510e1392bba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3478183-52a0-460d-8ba7-8f3c84da4026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ee6e38-9433-420d-b89f-2cfb1b056952",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774bf27a-bfaa-4441-85d5-5cc76f776f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89bc7155-037e-4d26-a9df-27c20d683d80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "752afbd5-d2ce-4d70-b022-5a7e52fb055f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89dcbaf0-5ffa-412c-8ae5-680b6d6cdb5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a305be-558f-4397-b662-88c329449114",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f81e1e4-d966-4813-92d1-e83431392d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8691e7ed-c067-4804-ba6a-006b60f05f9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d168d12-d92e-4167-b117-e17cf25290d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1993a2e-9fd4-45b6-8ec1-6b2ca6c0e282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1516c7-0fe2-4edf-ac82-eee88d5a6d9d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2c3ba6-09e0-4222-8f04-81a6b2233d01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ac3093-f1c1-44c5-82d8-3c20c56a23c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec9b9c7-5e77-4af3-8376-98b66c36ae78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d5b70a-da76-437a-bf9e-23de7168000c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a94241-b160-471c-9e7a-d0d43affa684",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6607620a-b24b-429c-a8a7-fa6948cfcf0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b55e8c7-1838-43cb-af95-11989dcb5b2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f82873-0fb5-4ea3-b285-c9633b79b159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbbc0171-edcd-44b9-bf85-842bef169edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc0b119-cce5-49e1-9342-9e2cd1ed91d2",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c34c79-b6f6-4fd3-ab5e-1c768fa5f181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea5c212a-513c-42a3-bbd9-ae91221c6e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df77063-76df-4b87-95cb-671adb416f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b02112b-558b-4a37-ab6e-622f08c3876f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5281a7e-0932-4bd5-8365-aa9762ab9b05",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b28d422-eb01-420e-b5ad-49930eabf199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb16592-0458-4533-8ab9-36bd86f9a8c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbeb9d0-2c6e-4768-a145-deaca60ce569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c2e1ce4-177f-401d-a85e-cce797c96b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e8a348-d320-41e7-a513-ea8fc0baefd2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b286b53-a22d-49bb-8843-bb4eae666202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c917c8d8-f60f-484f-a19f-6d4c5d0b432d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb87f53-ccda-468d-a8aa-5518b71d029f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f7e4fd2-1c71-4282-bf72-8b603661a312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8650eafc-252d-4711-b769-88588e0f88cb",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa4d865-858f-4293-a09e-794b5b208d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "733409b9-05a5-4502-8562-92e4a0ca0436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11dfa465-eaa9-4a59-8321-b1c3736a0279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "433ce180-2ab9-4212-aebc-b561d399f67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e76472-cbb4-4114-b153-c0b6d41ad4ca",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d871cee5-3fda-4e43-a9f8-f174796987d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8173f6e-9199-47a7-b434-443df6784a26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ea17d1-0e01-4ca7-bf5f-de63560d4e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f4c287-236c-4cce-b4b8-d36f75246da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f80d9f-8429-4e47-9fed-469e2ee62c0c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d1961e-bd80-4164-a5e4-0a8594683b66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b1e4513-ac6c-4309-ba04-caa0f66a33de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a233c8d5-ffbe-4ecd-a1af-055d102dc983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86096fba-0028-4298-9d13-157c8bb2cfc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6e5ff3-b70a-4a32-8ec4-1929f18d2738",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ceb333-e68c-4ac9-9c86-1ce097c604ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "788682fc-3ea1-407b-920f-8d1372cf8b78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f115c3-413c-4b54-93a6-b21a35995d5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5381ebb6-897c-4a28-a419-7054663dbfef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5943757-cc8e-460f-a108-e77f8d5d7bd0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1103c3-e501-4c7c-bce0-b03c6fc6c90d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8f58f17-db7d-419b-be05-4d804a76d01b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6678639-4520-47dc-a9dc-5cd14723480d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5267bc01-76b2-456e-b592-2c2d1bf10f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48862b7c-ef77-46f8-a794-9a264c52efc5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5146031-35d8-44d0-8038-0567cd745e67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccc180a4-72f2-4686-b38a-f3caf0b905f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9907de43-df07-464e-97df-f5f1821c2c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e34c544b-b82e-4399-a862-3b5ea6ff24ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3d7eb8-4e6e-4699-ac37-eb5622d31c8e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e508b815-3f68-49be-bbec-30b6b6976980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9b312c-0cf7-4bfb-ad3c-2f8fc5d1745b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b7af5e-1fc2-44d0-8d7f-645ab5e793b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c26c263a-1fa2-4d19-8697-8f16b6ac189d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85df81d6-1c70-45e9-8988-5080d941c06c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dddcf9bb-2b22-4662-8f0c-053d1f7ebccd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5058aedc-54f8-4599-bab5-39f1d9bfcc0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc52ed3-4be2-4f6a-960b-e3bdff0d1fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c0f48b-9754-4352-a249-7c4d384ebea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3113a2b-a288-4bb4-8d39-8575aedf1613",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98a3ff0-14a5-4dbb-bf4d-b64679fa39a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3e71cbd-9f2a-4797-8a7f-1839416ed62f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1065ebde-0a24-469d-9849-5797cd16d0b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7332404-9be2-4c4f-9758-66ace10ed98d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3425d39a-4a5f-4f65-b736-cbf6b78dbd9b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82868e57-e2c5-4c82-b2be-8c3529dd8dd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa69ce5a-f25b-4727-adbf-f4f3a2bc469d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12005a5-2c49-4fac-bc3b-5ec3b34c79bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3407192f-a8d6-4d62-856d-76515095ff35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f38349-9360-4621-938c-1d3cf17a52f7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13b972d-8850-440e-83bb-857368e464e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99166829-1c9e-4afa-8a54-c97c887875c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cf3b91-4624-4664-b6c3-133fd0b55efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e608e36-ab63-4fda-9cea-d022897a2078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab15e188-05f2-4ca9-bfa1-9e38106ad1ac",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c923ae1-a213-4ab7-a1c6-6d1074eefe41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82b0e491-5970-48be-b31d-dd6832844180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1544bf3-5d7b-4285-a547-c44a784e8f6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f479a77-1174-48c1-af37-5e0430937c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a92c6a47-ab07-428e-85d0-b472e5252725",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27c0eec-b96b-473d-802d-d9bd25da4f98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5927b0a6-9293-43e4-8bf4-dcd484b6dce9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7905c63-aeda-4a9b-805c-4930603aa188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a180711-42bd-4ee4-9929-146cd3612141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7d5b94-4e3f-4d4a-8cb0-2a94c81013a6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b39aafb-ea87-4e88-99e6-c68b4de52be9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f442782-e176-4c09-bb2f-445ad9b270fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77634c4e-a6df-499b-bebc-f391d174c0a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd42eef-4ad8-408a-b8e9-b4925e145368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3f46b4-b4ba-4b7e-b634-d16b27662e2c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff7e786-c0f7-4c8a-9b87-b31d06562fd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f0dee3a-023e-49b7-a382-c34c19ec6c21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "971f0eb4-fc1b-4e3c-a1f7-a750348000bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872eb54c-9dd1-4a3e-aa73-8264e183fa31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbfe351f-13fd-4e5a-9143-a44b6ff4a8d1",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a31aaf-2fd3-4364-9cb7-93c9eb582e33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33f9453e-469d-4c7f-80ff-5fc8723ae974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abf4a3a-8242-43c3-9f26-c25e876ce540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b151d9c1-8dec-44c9-8066-75a19659f79e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41dbce8d-525d-4eea-a387-645e80274af0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa9bb34-bd6a-45a3-b151-4fcea086b1a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f702e569-3f4f-4fa9-a266-2779eddc4f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad9b551-f4af-4f89-b092-e583d0478f90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96ce9704-1740-415a-8c53-db608ab821e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be946c7-476f-4ee1-8604-351e3c1b5cfc",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674a31ca-6a86-48f5-9514-cbd11d2c3a33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1922821-b9a6-4260-99b1-9d2176f44171"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0facd2ec-2f84-4f1f-829b-153d3e34277b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80626a6a-309c-4a0d-bbd5-193a4d98379f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b8ff56-d2a9-474d-8f0e-63de0e57a209",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d9bbd4-cae0-49a3-91b5-6d8a26d12dca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd998f0c-3fa5-4682-9417-eeaddc487a87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6d10e6-e6d2-4374-8ea2-a66252362907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9be3fadd-edaf-49fe-bf60-e82851ceb4fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8979ceb8-6d5d-486f-8074-3b2d8ce25c62",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0403c15-6824-4560-a973-89b462cf8f36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd9659c4-2fab-47f8-a94d-8d2c81032f3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c4af65-fb89-4c81-babd-de6e377aa59a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9267c409-9d64-4f8c-9df0-fa450d84af1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78778bbb-c89d-4363-8d64-de198f7b44b8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2617d4-9b24-4489-b806-d9c51d01123e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e835f4b-8aad-47c4-83d7-e72286268f1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8caa350b-d044-43c7-8b4e-a999a7a22039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5f26005-7b22-4ca6-8528-4eaf47b063bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42894205-a587-401f-959a-bf3fe03fa83b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1879b7cc-b698-4eb7-b630-f24c060e9c23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a991a7be-ab0a-472c-93d2-1867ff660650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18b999d-6939-4698-8b9a-569cb114d7ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a89f73d1-89b5-4891-b418-12b34581e78d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5dbd79-b6a0-4297-9ceb-7e8c6004f38e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8488bd0b-2c5b-4d7d-a589-1a12a23a4b32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30efb3d6-a248-469f-bd94-88d69a31444f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d006bb41-81e8-48af-a13c-1861dffcca50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b2bc897-dd99-4a9a-b178-067f7bcf064a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9beef26-66e4-443e-9103-1e4fe7f3b016",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb0d0cf-2d99-4eea-a71b-257c3831b27f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1259807c-7bcb-49e4-8f44-6e976312cb42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb74ba86-dff2-4488-859f-5534b48c97f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae3bd9b-a3dc-4c3e-84eb-61a965ca55f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33b3f18-dca7-4cf5-a6ae-be30dddfc7be",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b31909-2ca1-42b6-8a80-414052298be8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "997b860f-0c19-483b-b163-3813ad09f651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff8ab60-0665-4c69-b5d5-b8704e9e3d17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc6d5382-71a5-4bcf-906e-97f74fb0623a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ce17b1-e8a6-424f-b720-4aa084e5b832",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33908f82-5efd-4924-96e8-827996c63401",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "606a26a3-687e-4e0d-94b8-5fd2dd7832cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "281c6c1a-37b0-47f6-aabf-e725e66ddb45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "112a4535-6f5b-40ff-9791-24d89d308754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb000641-64a1-4460-8164-b16df1eb5a2e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a7d854-e58e-46c9-bbaa-8ff7091e7036",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8bcba40-2677-4011-847a-9d50e15f8dd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42f1612-1b32-414c-93c7-bedae3762e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b3b273c-5716-4cbb-9fe1-fe330e29f319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5145b0a-76a6-4718-9d1a-18e48598cd4f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958a344c-6f02-4eb7-b84c-b311905d1dbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eebb51a9-f0eb-4535-84f8-aaa34e38d146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15d8f0f-f585-42bc-ad9e-59629e4eea4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fc60e92-1392-42a8-a84d-abed45c8a9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac46c7c7-ac6b-4060-a442-8a4822fad24b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5231dc28-77d0-456e-b721-2e8946cb9c25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7621bc77-cbe1-4525-981e-84d15810b7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e9ed01-c2fb-4f03-a9ba-fde8f5b047e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d3edea6-fa94-467a-90d3-ccf349881fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99d2f73-3706-478f-83e9-76f25548b863",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9970f2e0-e875-453c-aa8e-5714423514e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f950e4e-3d9c-48ad-8ddd-bbe59b9825de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "147ce480-a926-4ca0-a801-a0b0c246626c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9f625fe-f655-45da-8218-faa3e43fb99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f7e7e1-bd4f-4f40-81e8-5c10cbe4ef58",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b433d3-6b11-4672-a40f-f5a6e27ba525",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88a10f0f-7574-4aa3-af01-7fcb6dfd0fa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf2b1575-dc5a-473f-b73b-7a499ac45b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee28b468-6a90-41f9-8a91-bfb3757e556c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275ec7c0-9bfa-48ce-825f-2d53a2f6d30c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5462a28-da7f-4416-a0cb-b81c02f2a104",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90a3f454-7bbc-45d9-942c-db6eeca7ad13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d6237f-ca73-4cf5-92d9-5dcfe01f21be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aadd0ccb-e5e5-4b73-b572-1efbf178140b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474007bc-327a-405d-a8cb-b8b38d4b7fd1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3411adc5-5506-47a0-a666-a2da366e218a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2140f19-371f-43e9-9c2d-affb346be5f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e4b2bd-3626-463e-8fd0-1988a0878bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cecebbf7-7310-474b-a72b-22b0ee4e9a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b741a1-36e0-4e4b-af59-51fd406e3c6d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbcf6af0-7f8b-418c-a4ba-c1cd9d537338",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6259c51a-4c26-47e0-9bfa-dc1776fa2f74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ac8691-bc1f-4f53-bad0-aabf85e6565f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bc85c79-4844-4777-999c-6301e7206eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4992aa8f-335c-4813-98c1-447b36a9fcd0",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83167200-9b45-4007-a4f2-f195b49787c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d3e75b5-c5dd-4823-95de-453c68ba4b7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c0974b-11f1-48f0-a056-e129c1410694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9739f52a-195f-4088-90eb-77c25f1f379f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f433c3d9-d6b4-4062-a0a5-44214c9909ec",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82aeb598-3859-45ec-a349-03c86a39ad46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e1c996d-d7bf-4b13-a35c-93056b979b71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40562c8e-f2f3-4642-8dfe-ae6780f333d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e509edab-1d57-4a0d-af00-c1b017bc2b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d2f64e-fa56-4c33-9aca-79db8a6592cd",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8bc96cc-d1f2-42e5-95f5-155de40742a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "638f7479-91ec-4839-a920-b3a4e85dbdaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d846910f-d80a-43cc-af31-3b8757daab8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c438387-bc8a-4f1c-b3c3-c6b3bc159c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea932cf-75db-425c-99e3-1602dee2b9f8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9305006f-cdd5-42aa-b569-5650833fdf7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc0a046a-a2de-4b9f-b2a3-9ad8a0465bd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0162f241-fc31-4c31-9e9d-7a57d414776f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "556b7677-b99f-452e-8773-2b0e0a4a2198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a152cbb2-c41d-439f-90d6-7d540e7ada20",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3adada4f-9876-43e0-939a-584bc6e97f1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bb0d2de-d549-4895-9ef1-5db0a293098d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58e6e79-cd4b-4df5-a3e2-9776645bfde0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69242976-b3f5-40e0-bb35-091914f45332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbfbdb80-52f0-4994-9f2e-dd4be3af097c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45f3524-e6c5-4170-ac17-12455573ffb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f40e835a-e0cd-4f40-bd33-c7037c4aaae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb12e3c-9e3e-4d04-be9a-ba29a54a6881",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e140a2f-dd4f-4e1a-bf09-a43b55210626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc947f07-582e-4693-9869-02fd41ea5732",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5de1fd7-2cbb-4865-9ad0-99de52af9daf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea08fe2e-6a92-4fb6-90b4-386015778091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0b22ad-c712-4435-b768-dae53fe31004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16820df0-2da8-4169-936e-9a69965a45cc"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30e27c3e-0506-4cb3-93ad-a24c3867b639",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81a2aa8d-4415-4960-b3fb-e3be8ccd8862"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "33a7ca59-a3b3-431d-8e75-1f3828881e78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "56b7d71b-e6c4-44ae-afdc-e10d3d769555"
                    }
                  }
                ]
              },
              {
                "id": "a3f22f0b-fb3c-42d1-992f-571594461f1e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a8bf447d-7692-49b9-9bab-75ff2f498cad",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca0921c-9fa4-44bb-9c6e-bb7f8cce966c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7231eafd-f72c-4036-9e4d-5fd175de482a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca645dd-989f-4573-84b2-0375fcb3f540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a881a4a-9846-41f4-a06d-0ff838848bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57a8e4c-a224-4d4d-a04f-821e4e928624",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7e6d29-077c-4e06-8214-5eb1d0093239",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6ed5625a-d819-4db3-9aab-4b2bd153e0f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c66ffb-8980-453c-8a83-de31dec7aec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6c50da8-56ed-4ec0-844e-dd3431a3e1ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a65a96e8-77e0-4572-afbe-9c0d1a2841a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f39bcadb-8395-4210-87b6-0f0419136c8c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e41ade93-67dd-4f70-b901-7cf414415a44",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8dddd53-884d-4adb-9f7d-eef5a1381071"
                    }
                  }
                ]
              },
              {
                "id": "ec43e690-6bc2-46b8-b141-53d0e0a7b164",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "752d884b-6170-445f-bc8b-f1ea9ed9ff11",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0024b0a8-1f46-48e2-9622-95216117d02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6ec84b61-968b-4f81-9599-a9409aa1574d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c3ee59-4b41-47b8-908d-a17a4f44ecde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "434d6400-a498-4acd-8cd1-e043f87abe17"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9e90e53e-854c-4b3b-92b7-d6534e17a683",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e72884f5-f3a4-463f-9c9b-12dd0a86ebd5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c808c304-fa25-47e5-962c-2f8235bcba3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c6331169-ecb2-42fe-96fc-c5345660333b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59f0e2c6-535a-4c47-9668-f8e5c979d0af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49237ccd-df72-46f8-96a1-e2bff4386c2e"
                    }
                  }
                ]
              },
              {
                "id": "409e212d-8e68-429e-8694-6b64a3d02ea1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b85b68ca-8669-41ae-b120-b58a0d07f964",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2be6f647-bac7-4bf8-9958-2989ca14d57f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f757e2a1-eb2e-4a54-9336-e7bb0f4b183a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2976499-84c1-4344-a605-6642a06ceddd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c710858b-f4b2-4f6e-b968-7b7562919cf1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "927dadbe-58c4-4c7e-9f4a-89e0d2932d39"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5106abb-6fdf-4702-bdfb-41726bfdfcc7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a9a95cb4-0d90-4968-aaf1-101a5cfffba0"
            }
          }
        ]
      },
      {
        "id": "0d6f25ef-861d-4c3b-980d-eabcbb176b75",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e1cd368f-1ee3-4c67-83d3-6b4d7de7df31",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ea84bea2-bd81-47ce-9090-66dab4ba4521",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3f0bc7aa-d2fa-4d7e-a3e5-8cf22f8b684f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edbfaef-f52c-4df0-995b-926bd4d12a20",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "87a8a6b8-8b54-416a-8042-d433e4c9b69a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea0c676-d5df-4003-a29c-fc7d49c69015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf4476ec-2916-4a56-9fb0-c4013f9b2a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cddd1b5-9647-4bf9-b4d1-24c4b58d6e5e",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce069159-3c99-4e2f-acca-d422d279609d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "99c9a74e-223b-49cc-9ac6-7af1c7cba5b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e37618-b1e3-4487-9353-d54850e2e3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3a9da87-7965-4b7a-88e3-26339cc5f88e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "039eba53-6a4f-45a5-848d-4e78e16d4c49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbb3d77e-204f-4d15-a935-cbd0661f2be5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ee788f4-f8bd-4def-b85e-5f4534328a65",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49aec991-90c1-42c4-99f9-581ba32f57f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0bfb716-779a-421f-a4a9-55cc797969c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c6f2e7a7-34f0-4fcf-a144-5589ca4b1a60"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b82c8656-d103-47d0-9ba5-e6b1347d46cc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16b68e34-dbc4-4ecc-b77b-8980ff5421bf"
            }
          }
        ]
      },
      {
        "id": "e5c3215e-962e-4537-aeb7-7f451397f594",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6cf1ee73-4182-43b5-b7bb-533243fedac6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d66330a2-9400-4efa-8a7b-f7794ac09194",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74afce3a-8d02-41d1-bc5b-525d1d44b3ab",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a775d73-e937-4033-a14a-1c7e3c1196dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "eebcd3cd-74de-4c80-8fd7-cdee0a550b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77048f8-4fa6-41a8-840b-41912d3da51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53dc6e57-b984-4a1c-be78-78036c9f3ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e0873f-9205-4a33-86bf-2a59f34e4225",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1551a14d-7806-43d6-b376-87f3c613b25e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b42887bb-5bd9-4e9d-b010-4bb5fc7e0cf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d5140c-4d35-460e-9f34-642d21f35cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8363f37-f5c1-44df-8128-863dabbd5298"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2996dff2-e55e-415f-bd8e-8a1996b803f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7ff579b-461b-4d96-979e-6e3d4e6b6882"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5bd9a49-1d20-463b-8f06-34e99d4e6511",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1fea027-d6ef-4dd9-a1dc-ceafa79c463d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6908a2d0-1f9e-427d-9e2b-d3a5187db613",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cbe9ad0b-6227-4811-9559-759e1c9d4873"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7877a378-a434-459f-9894-9f94d12426ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e225d32e-e2f5-43d7-8633-0df148e899e7"
            }
          }
        ]
      },
      {
        "id": "8cf7ebc8-fcfd-4eae-892d-fb154cba6f75",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "88d05c06-78cd-407a-b38d-fe7522af5424",
            "name": "Negative Testing",
            "item": [
              {
                "id": "08b73cc3-da1f-4935-ad0a-bead6fde9a32",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9a944401-90ee-4be6-9821-3838f88158a8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae220962-b707-457c-add7-d19407ae2514",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bb6b1e6a-598c-4387-9416-0ced131e69ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "982cd709-5585-4459-bb06-6a699ba653f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07dd8311-6c1a-42b1-b17d-d04ad23ed27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f7ac1f-cab5-44d3-96e5-5fec3111f644",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a50c79-868e-490f-a62c-3bea8c98c354",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "af8635e0-9b78-48e9-81dc-abc1004d15c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4631d575-51f6-481c-8712-3f208e3224a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f209a12-3984-466b-9057-0cdc8f2c1fc3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75f68568-4ab5-452a-86e5-f1fbbe9ca39c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18085752-d08d-4f79-bca9-b461ffeba132"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c46423f-b72a-4309-a037-b571afbd56c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0d64c13-978a-4a9c-967a-9ef39707bbc2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c001e2a-2578-4942-9001-8b4ff61ac3ae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "84dd9672-b87e-42c5-a39b-36e6241757b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c0e6382-47d2-4102-9467-d29e5908b6db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ceba3a0-3453-425e-afc9-c349964dc532"
            }
          }
        ]
      },
      {
        "id": "c4d0462f-0335-4490-84a2-784f0534dd24",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5489fb15-874b-4045-9aea-47e6d553a2f3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7198359-b159-48f2-8f9e-eb7d8c2120d2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3d1c03af-9a92-41cd-86e5-b70c6d15c6bc",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b864089f-b9e9-47e1-a282-c63e1d66860a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10e96cd1-0fce-49b3-997d-d92a2af7c868",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 18.494208494208493,
      "responseMin": 6,
      "responseMax": 410,
      "responseSd": 42.04285097147686,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676680851771,
      "completed": 1676680868481
    },
    "executions": [
      {
        "id": "04bd2c89-bf4a-41c9-9972-cacb076a8ce4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "735196ef-1586-45cd-b6f8-7954922a2c13",
          "httpRequestId": "affda525-f46c-4e49-97a6-e14d9de23966"
        },
        "item": {
          "id": "04bd2c89-bf4a-41c9-9972-cacb076a8ce4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7e233b94-c22e-4b9a-ad28-e59d7790c286",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "66df3d05-bbc8-45fd-b94a-a9731f1229c8",
        "cursor": {
          "ref": "1797d08d-a456-402c-b2ee-550e4b9d5d9c",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "01033d0f-60d0-44d7-80fa-6549dae08019"
        },
        "item": {
          "id": "66df3d05-bbc8-45fd-b94a-a9731f1229c8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8fde1134-c3d6-446d-8b2f-8d986ac2dba5",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "db5b1092-b1c1-4eb3-954c-876c0fe60208",
        "cursor": {
          "ref": "7bfb00d2-67fa-438f-be2d-fdfb2708f4c0",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c67aac7f-c6f5-4481-ad32-e919c5217686"
        },
        "item": {
          "id": "db5b1092-b1c1-4eb3-954c-876c0fe60208",
          "name": "did_json"
        },
        "response": {
          "id": "e1bfddd3-8724-4a4a-a5b9-2fa513043fe9",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf8dd16c-9668-49f1-83b2-47ed05fdebce",
        "cursor": {
          "ref": "289b2449-0e3b-4e39-a379-8bf64ceda235",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "638e08f2-4288-43f6-b54a-a84d642d5d59"
        },
        "item": {
          "id": "cf8dd16c-9668-49f1-83b2-47ed05fdebce",
          "name": "did:invalid"
        },
        "response": {
          "id": "b5a8a9ba-2a74-4479-b561-d8e0d3bec60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "cf8dd16c-9668-49f1-83b2-47ed05fdebce",
        "cursor": {
          "ref": "289b2449-0e3b-4e39-a379-8bf64ceda235",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "638e08f2-4288-43f6-b54a-a84d642d5d59"
        },
        "item": {
          "id": "cf8dd16c-9668-49f1-83b2-47ed05fdebce",
          "name": "did:invalid"
        },
        "response": {
          "id": "b5a8a9ba-2a74-4479-b561-d8e0d3bec60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "6c90e076-3389-45c3-8f40-30a0ed30bfb7",
        "cursor": {
          "ref": "9987ad11-25e0-402d-8bcc-60d6cafdd372",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ae84fa3c-7770-4518-99da-e610685a0e8e"
        },
        "item": {
          "id": "6c90e076-3389-45c3-8f40-30a0ed30bfb7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ba0e878d-b60b-4ec4-8199-a4423965a695",
          "status": "Not Found",
          "code": 404,
          "responseTime": 61,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a2e93d-517e-472e-80af-2562d9c132cc",
        "cursor": {
          "ref": "c8edf164-721f-499c-bd4b-6f6d6bab9642",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ad7ad7b1-2531-4a68-92f4-87b3fbe4325e"
        },
        "item": {
          "id": "04a2e93d-517e-472e-80af-2562d9c132cc",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4c6bdbfc-5b12-4f84-abb0-e77f454452c7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b69e61-eb0e-419b-871c-77cc0442ed23",
        "cursor": {
          "ref": "71530a5f-c218-4b63-9bb3-024243da632b",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ed7ed8da-7c90-4485-9652-e3cec778d2fb"
        },
        "item": {
          "id": "c2b69e61-eb0e-419b-871c-77cc0442ed23",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "76fe9525-6ba2-4ec5-8d4e-32b6ad164fd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a177008-27ca-4d76-990d-e3dcc7a70a9d",
        "cursor": {
          "ref": "5076f714-24ae-4518-bbfc-787b05909192",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "91db9cd9-f573-4bae-819a-821c16b402ed"
        },
        "item": {
          "id": "4a177008-27ca-4d76-990d-e3dcc7a70a9d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2735875c-3841-454d-8176-899778958c1d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a177008-27ca-4d76-990d-e3dcc7a70a9d",
        "cursor": {
          "ref": "5076f714-24ae-4518-bbfc-787b05909192",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "91db9cd9-f573-4bae-819a-821c16b402ed"
        },
        "item": {
          "id": "4a177008-27ca-4d76-990d-e3dcc7a70a9d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2735875c-3841-454d-8176-899778958c1d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa95abef-2e23-4dca-bd06-9b30f59786d8",
        "cursor": {
          "ref": "c69ed799-da83-4ccc-b0fc-f71a55efb6e0",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "837df884-8947-4d46-99bd-6f2aa1a9a0fc"
        },
        "item": {
          "id": "fa95abef-2e23-4dca-bd06-9b30f59786d8",
          "name": "identifiers"
        },
        "response": {
          "id": "67f0f146-bc13-4214-8f39-d42c786edb20",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f728a43f-2919-49b3-a83e-664be77bbc48",
        "cursor": {
          "ref": "aa77000b-e3c8-4353-b7b4-13a7cd83a998",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c4dd3b50-0274-4d3b-ad66-ed6fbdf563ee"
        },
        "item": {
          "id": "f728a43f-2919-49b3-a83e-664be77bbc48",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "013843a9-920f-48ff-885e-076702b335a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f728a43f-2919-49b3-a83e-664be77bbc48",
        "cursor": {
          "ref": "aa77000b-e3c8-4353-b7b4-13a7cd83a998",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c4dd3b50-0274-4d3b-ad66-ed6fbdf563ee"
        },
        "item": {
          "id": "f728a43f-2919-49b3-a83e-664be77bbc48",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "013843a9-920f-48ff-885e-076702b335a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84cdb56c-2c59-40fc-bbd6-b7c7664a6ecc",
        "cursor": {
          "ref": "b66aa34f-dcb8-44e1-afba-b134fd478c74",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "106b3551-1683-4aee-8bfc-7df1bd083cab"
        },
        "item": {
          "id": "84cdb56c-2c59-40fc-bbd6-b7c7664a6ecc",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a8316317-732b-4155-9e91-6a67196e0c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff7d359-bfaa-4e53-87ca-aac9ec904f18",
        "cursor": {
          "ref": "c700cebf-d780-4e27-b332-5b1865da8161",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2585ab30-889a-4a93-9d55-99f97a896374"
        },
        "item": {
          "id": "2ff7d359-bfaa-4e53-87ca-aac9ec904f18",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "018a141c-dec2-4c36-bce8-815ae8f38e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e6a605-3466-4762-b4c9-d8075a0d3c59",
        "cursor": {
          "ref": "ceefba5b-8608-46f7-9394-63f4149ff895",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "475f3a94-500f-48a3-b266-995fac6e5da3"
        },
        "item": {
          "id": "63e6a605-3466-4762-b4c9-d8075a0d3c59",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "715d4c2b-f7ad-482e-b9b2-4de2a99cd265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e893e5df-c84a-4347-aea4-959076fd014d",
        "cursor": {
          "ref": "bfb54963-af2b-40a0-99ac-02dcadcf8300",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1f8fe194-feda-4f01-ba6f-8e2f5aa69aba"
        },
        "item": {
          "id": "e893e5df-c84a-4347-aea4-959076fd014d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "43703db8-e8ce-46b9-b0ed-edb06d2e301f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe24bd0f-c337-4417-8eb9-b34f5598e8d6",
        "cursor": {
          "ref": "3fcfb34e-a50f-48ef-9aef-676bd8d1060d",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "248b043e-cde6-4d3a-960e-966138edf45d"
        },
        "item": {
          "id": "fe24bd0f-c337-4417-8eb9-b34f5598e8d6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b199aaf2-65df-4729-8d78-cc58b7e291a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0fde2a6-15e2-4ea8-9511-735aa7cef233",
        "cursor": {
          "ref": "257ab576-8cd0-4c57-84ae-98ad542a7256",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "24830e0b-c2fa-4a33-b3e3-7d1a3b202c6b"
        },
        "item": {
          "id": "d0fde2a6-15e2-4ea8-9511-735aa7cef233",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "03f0d673-adcb-468c-b52d-bcd86fb84792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f9584a-b182-4b66-93bd-2107b3fdf34e",
        "cursor": {
          "ref": "18e92c0e-798c-43e9-942d-a97efc408926",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2dacb715-5edb-4d2e-94cc-ccda32a861a7"
        },
        "item": {
          "id": "26f9584a-b182-4b66-93bd-2107b3fdf34e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "523720b4-800c-49e4-9a9e-e8291503c7fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74482dd5-8ccd-4892-bb31-df7278d7d02b",
        "cursor": {
          "ref": "e1efbcb5-90d1-4c51-961f-71537051c46c",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f1aad9d4-fdff-476d-bd35-df7f7d3e54e6"
        },
        "item": {
          "id": "74482dd5-8ccd-4892-bb31-df7278d7d02b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "79a1fa82-c0e8-421e-95e5-c4a8cbdec565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7567140a-3291-4d6e-adae-c90f4b5f8a51",
        "cursor": {
          "ref": "46d92679-99a0-4288-9d47-b89963f1acee",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0dede337-a250-4242-a48c-d5af4a83f3da"
        },
        "item": {
          "id": "7567140a-3291-4d6e-adae-c90f4b5f8a51",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d8580eb8-c105-4daa-a2a9-19841db3c008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508a519c-69a4-4655-9135-9b284ecfd72b",
        "cursor": {
          "ref": "6745bc6c-5791-4f2c-be8b-6c52d6e7ff00",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "fe9ab0e9-2aa0-400f-af01-a562daba7b89"
        },
        "item": {
          "id": "508a519c-69a4-4655-9135-9b284ecfd72b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ade6a83c-e7bb-418f-8b3c-eaed905ca5cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91731a8-34e1-471f-b69f-2501d8897504",
        "cursor": {
          "ref": "07ff1cd5-9e95-445c-8330-f6c6eea32675",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a33c47e4-fd10-4f05-a255-d174c972795f"
        },
        "item": {
          "id": "f91731a8-34e1-471f-b69f-2501d8897504",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6268a3d0-993e-4a28-bcb8-16b05e188c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a539a4-49eb-4c13-948e-36823714c16f",
        "cursor": {
          "ref": "516eb5f3-6e7f-4f17-8b14-b5e86b2ef15b",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b9c4fc8b-1c1c-42af-8992-8588cdef034a"
        },
        "item": {
          "id": "f6a539a4-49eb-4c13-948e-36823714c16f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ff52cb9c-b04c-46e7-926f-26fb1c6880da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ddf7c5c-65e6-4be5-ab05-ac9fa804fa04",
        "cursor": {
          "ref": "046f3140-cddc-4741-9b13-b1d9de9f3047",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "bc48e5d3-d6d0-46f5-91a6-bac7069df0cd"
        },
        "item": {
          "id": "0ddf7c5c-65e6-4be5-ab05-ac9fa804fa04",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3f842dbd-77b8-4530-9054-5a5610a34524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d887f9c-1f06-4e35-b45d-1642bdecb7e4",
        "cursor": {
          "ref": "7e7bd365-c7cd-4144-8f46-14cb71add577",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6438b467-f000-4b9f-a388-673aef27ff64"
        },
        "item": {
          "id": "5d887f9c-1f06-4e35-b45d-1642bdecb7e4",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "359c0a7c-1fb0-46e2-983e-723c42e32a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8cd52d-e5f3-4fcf-bfb3-796a998a892e",
        "cursor": {
          "ref": "de2fb3c3-3015-4451-8f52-ded034e5e5e4",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "25984da0-56c7-49fd-b7c8-09b4f44fc61c"
        },
        "item": {
          "id": "0c8cd52d-e5f3-4fcf-bfb3-796a998a892e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2780d478-10d2-480c-9226-48e66d8e9b47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b5569b-1d03-4fb7-bf70-827893074d0a",
        "cursor": {
          "ref": "7b0e4c5c-e477-4d6c-abc5-523cb1debe45",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e114f700-725f-4e7f-9001-96d23e614787"
        },
        "item": {
          "id": "05b5569b-1d03-4fb7-bf70-827893074d0a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f3f79246-bda7-434b-96a3-4449af019470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567d1bfe-a493-4e66-9055-28ac85d2b3be",
        "cursor": {
          "ref": "72535c3a-780e-41bd-9d16-8bf03eef561a",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7c21bb5c-d6b7-4cbb-8133-4d7cef250af0"
        },
        "item": {
          "id": "567d1bfe-a493-4e66-9055-28ac85d2b3be",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "55551e8e-3767-4067-957e-ea11af108d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d37b8de-9919-46bd-985a-9c772fdb38e0",
        "cursor": {
          "ref": "7b96f89e-0561-4a9d-8d15-ef255cd23168",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a95d40ca-9813-4db0-9c21-6113383da276"
        },
        "item": {
          "id": "2d37b8de-9919-46bd-985a-9c772fdb38e0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "aef62803-a860-4751-82b8-6a8639eea5c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5106a6c5-1d6b-46ca-807a-709cbcd895ec",
        "cursor": {
          "ref": "e0749f20-71b5-4656-8ce6-a0bf695026be",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "887197fa-ebdb-4cd9-b7e4-5374fa8090a2"
        },
        "item": {
          "id": "5106a6c5-1d6b-46ca-807a-709cbcd895ec",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9eb0c1a1-9d6e-4667-81d2-77906f7edd8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f552b996-ae3e-4dda-a299-eda224908a22",
        "cursor": {
          "ref": "08b15821-46f9-4f73-8a58-1c08a38c4c55",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6c9ae27a-8011-4e0e-afa6-7714f3156d17"
        },
        "item": {
          "id": "f552b996-ae3e-4dda-a299-eda224908a22",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "09888850-30bb-4838-8fc9-b4d61ffe8460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0daa7591-c9c4-4a36-bbb8-c92e2d5dd086",
        "cursor": {
          "ref": "bc28292c-25df-466c-929f-a5df944b7669",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0fe02ca6-4f99-4c94-a5ec-611e565b1045"
        },
        "item": {
          "id": "0daa7591-c9c4-4a36-bbb8-c92e2d5dd086",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2fe896db-8746-4810-b8fc-7a1e37172ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa5a0dcd-4ed7-4038-8afb-56a45e544588",
        "cursor": {
          "ref": "2ed3446d-56db-4983-a891-c50c502f74ae",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f76cb416-cacf-4abd-a013-145f54ccc383"
        },
        "item": {
          "id": "fa5a0dcd-4ed7-4038-8afb-56a45e544588",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "dd5df257-88b3-4d54-97f6-1d8fa8fa669e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5ebcbb-5130-4c9f-96b3-b4f07d9e2086",
        "cursor": {
          "ref": "733fe6a4-f83b-4386-b07f-2d93287b4147",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "35802345-e4ad-4249-89f0-61866a3679ce"
        },
        "item": {
          "id": "2c5ebcbb-5130-4c9f-96b3-b4f07d9e2086",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "22bc2380-20e0-49a6-8302-d280f55d1710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588fa7ec-06fa-472e-92da-dc5353c105b8",
        "cursor": {
          "ref": "bc33b558-7060-4321-8c9f-582e0f6bbfed",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "40ddac19-6870-472c-bd4d-946ea905e87b"
        },
        "item": {
          "id": "588fa7ec-06fa-472e-92da-dc5353c105b8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fec587b4-c61e-4016-b139-0bda52e1bb70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e821a5c-c9ac-4f8a-bf88-689048e2ca69",
        "cursor": {
          "ref": "b14d0e25-5798-4a18-96fc-698deb1c6514",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "acecf46f-9c05-4341-936c-389084749b0b"
        },
        "item": {
          "id": "7e821a5c-c9ac-4f8a-bf88-689048e2ca69",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "39de293a-6000-460c-ad87-a96b78587829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d07bd6-4d9c-4d10-85af-f405318491dc",
        "cursor": {
          "ref": "cc9ded00-a71f-4ea9-af5c-f96deeafe693",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "bb240163-d64f-4a50-86a1-9339a6e04003"
        },
        "item": {
          "id": "88d07bd6-4d9c-4d10-85af-f405318491dc",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b820ee1b-6583-4757-98a3-46312ba55c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec4c735-8ec7-4caa-869c-9ccbd35648b6",
        "cursor": {
          "ref": "daef10ff-404b-4219-b8f1-20fd20e2d0e3",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5b3fe3a4-4961-4e6e-8229-228e05d5ff80"
        },
        "item": {
          "id": "8ec4c735-8ec7-4caa-869c-9ccbd35648b6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ee818fe2-ad69-4c06-b386-b50dad14e8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e71ddcf-08d0-4c9e-8411-47ce3296c7dd",
        "cursor": {
          "ref": "476db156-05ab-4adf-97a5-85121dfd14de",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "33643ffb-40a9-4236-927d-993756d4f72d"
        },
        "item": {
          "id": "3e71ddcf-08d0-4c9e-8411-47ce3296c7dd",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "242353b5-3f3c-4c52-a4db-a4cd4ad52eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34556e3e-595c-4fbf-8319-9ed511aaea2f",
        "cursor": {
          "ref": "d68edd91-f925-4215-957f-cddbc2446b4f",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d6f42615-f233-4d8a-89ae-21999c0c0c94"
        },
        "item": {
          "id": "34556e3e-595c-4fbf-8319-9ed511aaea2f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "9f190912-e995-42b7-a89a-6b22608f2e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aaee30d-e2ac-41e9-a0ef-dae90f1df222",
        "cursor": {
          "ref": "d01cc271-6d62-45c3-bf99-13445001a0f6",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4ef09b6c-6d9e-4fa9-8951-04d5fa5a3f0d"
        },
        "item": {
          "id": "8aaee30d-e2ac-41e9-a0ef-dae90f1df222",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8db405cd-d4b6-4700-9111-25cacb1103c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e576bd-8fb7-4f80-b04a-f4ca7973d410",
        "cursor": {
          "ref": "636c2f1e-0eb2-424e-bb6e-badf40cebcdb",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9e4c8eff-42a5-4e57-884d-a42bee9a0fa7"
        },
        "item": {
          "id": "90e576bd-8fb7-4f80-b04a-f4ca7973d410",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "be66351f-a622-45a6-beb6-3dcf0341cd9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d190243-3607-48d5-944b-0f96276dc1e2",
        "cursor": {
          "ref": "9ff8e202-0ab4-4907-abfa-a4f36b6effce",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0decf808-1524-4d8c-99e2-367ec8eefc55"
        },
        "item": {
          "id": "1d190243-3607-48d5-944b-0f96276dc1e2",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "629faa0d-bd43-499b-a52a-0dd40a793176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca903277-fec2-4b28-a9c3-ccca3fbde0ee",
        "cursor": {
          "ref": "2b4c1dfa-5984-496a-bc86-61b754c11035",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6dcb9467-add9-4e9f-8839-891674d7f56c"
        },
        "item": {
          "id": "ca903277-fec2-4b28-a9c3-ccca3fbde0ee",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "be24c9d1-cb8f-470f-84c1-1755a3f6c327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487f1d6a-282f-4efc-92f2-7c31946b3f01",
        "cursor": {
          "ref": "a1e5dab9-24bf-43d1-8416-09822a93aa53",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2e8f98b4-f3f7-43c3-9152-ee95fa63a7a2"
        },
        "item": {
          "id": "487f1d6a-282f-4efc-92f2-7c31946b3f01",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "12d53dda-cb93-439c-9923-f5cbaaa30389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3770895e-5708-44e4-b703-140a888e0b76",
        "cursor": {
          "ref": "dc2f2d65-0ac2-4047-a96a-ccd5ef762b8d",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "14ee139f-b15e-40b8-ba34-425c65967a44"
        },
        "item": {
          "id": "3770895e-5708-44e4-b703-140a888e0b76",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ae8aedf8-2981-4022-a285-ef338f97a3f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "3a2d9f26-b06b-43d5-b15e-8f3ededa9db9",
        "cursor": {
          "ref": "026dfa89-f028-4280-a742-a88c10e3faeb",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "81db822b-fd88-45f2-86f5-afa42b5bbe39"
        },
        "item": {
          "id": "3a2d9f26-b06b-43d5-b15e-8f3ededa9db9",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b3c5f93c-91f5-4643-ba13-a8d84021610c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ccf6a5e-954f-4b51-b2f2-4485d37c1bf8",
        "cursor": {
          "ref": "1f2d99c3-6250-44cc-817e-a9167209490e",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a3aaa0a5-67d7-4d04-b174-8f3e2284e1b3"
        },
        "item": {
          "id": "4ccf6a5e-954f-4b51-b2f2-4485d37c1bf8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f9abe7fd-9735-490b-9e29-73ffeee945cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ed7d44-a2c6-4efc-8f71-a152991c7d65",
        "cursor": {
          "ref": "3374dcf9-faad-4f1e-a03b-5569ded681e3",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "38d04ccd-2a10-48fa-9276-faa454013a08"
        },
        "item": {
          "id": "18ed7d44-a2c6-4efc-8f71-a152991c7d65",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "989566ec-485f-4832-b657-f57f7fff2d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a511703a-b3bc-415f-b4f6-b79a76490ca6",
        "cursor": {
          "ref": "9998ab4b-57c8-4d83-8f8c-60b9fb2cb56c",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5b40332e-d5d9-4291-856d-693b14e451eb"
        },
        "item": {
          "id": "a511703a-b3bc-415f-b4f6-b79a76490ca6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9213a8a1-d334-4017-86d0-d9bf6fbd4339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a30512a-f318-4bc2-9ff2-cc2e701be5e9",
        "cursor": {
          "ref": "d76a3117-bdd1-4a6f-8f28-1cf7c62adb2f",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1266a663-05cd-4abc-b8ad-e92dcae525cf"
        },
        "item": {
          "id": "7a30512a-f318-4bc2-9ff2-cc2e701be5e9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e5e200eb-4f6c-4823-b54f-5b0f9e73efab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4dddb8-b2cb-4f77-a245-e43489923624",
        "cursor": {
          "ref": "0be930c7-4f7c-4364-ae3e-9426dacc0023",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c15288be-0bfb-4a2c-a334-456dcf202a3c"
        },
        "item": {
          "id": "fc4dddb8-b2cb-4f77-a245-e43489923624",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "19eee492-2d7c-4281-89e6-0ca29750bc9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1164708-ec3f-4b8f-9069-f77155f1ae66",
        "cursor": {
          "ref": "60feb5a0-6873-404a-ac92-2905b840aec2",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b1731253-e60a-47b6-a9e0-a681b52dd659"
        },
        "item": {
          "id": "e1164708-ec3f-4b8f-9069-f77155f1ae66",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2fe01d16-1c6a-4e5a-b0bc-e9a6744540b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "88640116-a24f-43ad-b7ce-3eecb38e3b96",
        "cursor": {
          "ref": "d409005c-ee82-4d2f-9592-78ad38ff22f9",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2dd72c77-f442-4622-a26a-d243f098f4b7"
        },
        "item": {
          "id": "88640116-a24f-43ad-b7ce-3eecb38e3b96",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6eface02-5b65-431f-82b0-d1413a18b69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85142e60-7c5c-4458-9f95-7ea94c201114",
        "cursor": {
          "ref": "9edca5fa-9f04-4eeb-9fce-24e6435e398a",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e93fbec5-a24e-40a4-9688-25991dc72864"
        },
        "item": {
          "id": "85142e60-7c5c-4458-9f95-7ea94c201114",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "08d1227b-dffb-4a5b-ad85-84cc364795cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2116a5b1-49e7-413f-94ae-53ca4aa8b4d4",
        "cursor": {
          "ref": "1f89baf0-b827-4c4b-9c20-a147ac2d4b6f",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "641d2cda-0c8c-482c-88a2-edda563a5035"
        },
        "item": {
          "id": "2116a5b1-49e7-413f-94ae-53ca4aa8b4d4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9a638e37-4164-4f27-9fa6-5ef5945ea479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fae8ec2-2067-4a03-954e-706b43526a60",
        "cursor": {
          "ref": "2b8d08b0-75bf-49a4-8f63-e2e4e952bf15",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "16fed371-e73e-4993-b947-8db624d5a987"
        },
        "item": {
          "id": "1fae8ec2-2067-4a03-954e-706b43526a60",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "12970284-18e8-4e84-8b44-66a3a2f74a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ab9b9d-f5ba-41ae-9f2a-783e9e854f6d",
        "cursor": {
          "ref": "6228fb4f-5d76-48ba-8758-b828b4e355d6",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4e47b0c8-d9ff-4ec5-bf34-95c5822e8f07"
        },
        "item": {
          "id": "80ab9b9d-f5ba-41ae-9f2a-783e9e854f6d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d7536820-07da-4ac4-ba34-b12dd49db943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb169b11-8fb2-4ad8-99d1-6be234dc75be",
        "cursor": {
          "ref": "3310e5a8-a5e3-421d-8d8e-f05bc3395801",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6e2bbb57-9299-4957-a70e-968a97530fc0"
        },
        "item": {
          "id": "fb169b11-8fb2-4ad8-99d1-6be234dc75be",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7ebd7f8f-45f4-43fc-b6be-485dc8690439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cffb38b7-d8f1-43af-959a-f3b957dff04d",
        "cursor": {
          "ref": "96a200a4-1165-4b91-8f19-8aad4282ca03",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6eb450b2-e6ce-4a9a-975f-34528d776e53"
        },
        "item": {
          "id": "cffb38b7-d8f1-43af-959a-f3b957dff04d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c0a899f8-260b-407f-aa59-537633f26851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db1d977-56a6-45fb-ac61-79e382eb022a",
        "cursor": {
          "ref": "0d17cef2-6f50-4067-a1fb-3fdc160e7a5b",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5a129246-6e6f-4131-b0cb-f45b10562205"
        },
        "item": {
          "id": "7db1d977-56a6-45fb-ac61-79e382eb022a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "91299da8-3bbf-43d0-8bc7-224fda5e363b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a89ea2f-5310-4a12-8e33-8972d192f79a",
        "cursor": {
          "ref": "76febd48-c95d-48b5-884e-c059424256e6",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d8a74ce4-caf5-44cf-983e-895cfc17fa83"
        },
        "item": {
          "id": "2a89ea2f-5310-4a12-8e33-8972d192f79a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c2ca7499-6541-4288-8a05-4167bdaf4ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef49fe6-c2ed-4c18-8ea2-fcd9d7d912b9",
        "cursor": {
          "ref": "6c37c99a-99a4-479c-a6ac-d9383307af33",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3df01852-f325-4e8f-a619-b066ae78cbfb"
        },
        "item": {
          "id": "cef49fe6-c2ed-4c18-8ea2-fcd9d7d912b9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "de875040-68ff-4980-b14e-251ad4a21dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f3b69a-8dba-4178-a1e5-021ff9cb6706",
        "cursor": {
          "ref": "ea2d1f11-42ef-4eb9-bd11-571ce47e6a20",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6d6ecfdb-426f-4996-9a85-b52484e14867"
        },
        "item": {
          "id": "e8f3b69a-8dba-4178-a1e5-021ff9cb6706",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9e2cddff-3c0b-40f0-b169-0d3f3a0b3e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c79aaef-c509-46f9-aeba-fc87b233b21f",
        "cursor": {
          "ref": "eed522eb-1ce0-4e37-be2c-284c5fd20705",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7b7d8712-aeb5-4e7b-bb9f-135771f70c22"
        },
        "item": {
          "id": "3c79aaef-c509-46f9-aeba-fc87b233b21f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "40da17f4-42b3-4172-b9bb-ff845f964a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b9b82f-66e5-4866-bba7-197196d6625f",
        "cursor": {
          "ref": "f20c4a51-4d80-4d0e-892a-90c4edd9afe4",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7c09d3d7-62b5-430f-9802-aae408399b7d"
        },
        "item": {
          "id": "93b9b82f-66e5-4866-bba7-197196d6625f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1c66e3df-7b02-4a45-b8c4-c57d6616e6c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3b98fc-1468-451a-ba93-014a2e41f9c6",
        "cursor": {
          "ref": "4479d49a-3861-4d9a-b33c-be9d3113a328",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6de2f353-ad78-42c4-83e0-246b0752ce9c"
        },
        "item": {
          "id": "3d3b98fc-1468-451a-ba93-014a2e41f9c6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "fd85bb3b-3faf-425d-be11-d89746e8e5b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7eadebd-07ec-461d-9ec5-6a3d07f0cb7c",
        "cursor": {
          "ref": "3f0fe9e6-6d46-4a34-8693-be9c6721e09e",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "dc2afe23-53a0-476e-896a-5435d2741245"
        },
        "item": {
          "id": "e7eadebd-07ec-461d-9ec5-6a3d07f0cb7c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "56f2552e-7013-44ff-b313-1af5f4071fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4327d2f1-7f9f-4790-96e5-6dc0e42f45c8",
        "cursor": {
          "ref": "626d45c8-2de7-4a24-8f42-69fc2ab1af1d",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "92efdda4-02a6-4b2b-94e9-ffd85b56a1f0"
        },
        "item": {
          "id": "4327d2f1-7f9f-4790-96e5-6dc0e42f45c8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b38173ea-c339-4146-a19b-0249b0ba1f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de16710-9e88-42d3-8145-221c9b83be8a",
        "cursor": {
          "ref": "f061a1da-23e2-47c6-8262-ed0d7a28e8ad",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "bfa30882-5561-4dbf-a8ca-aac5356cedc1"
        },
        "item": {
          "id": "6de16710-9e88-42d3-8145-221c9b83be8a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7dfc750c-1e26-4125-aa45-9e6b30e88162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b535842b-d728-4e66-9383-c7ac4b6bda1b",
        "cursor": {
          "ref": "7987ab1e-e0ab-449a-b4d6-736c9e41ac5f",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f5582ead-409e-48a0-a3fc-d9700b9449ba"
        },
        "item": {
          "id": "b535842b-d728-4e66-9383-c7ac4b6bda1b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6b32bde7-678e-4e44-a8f1-7d7ec36d762d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91140478-3f73-4e18-afbb-c727696362c1",
        "cursor": {
          "ref": "66bafa7f-a56a-4d05-b406-6b27c282f5f7",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9cfbe389-ae89-4678-8b8a-f26e1d8a9f80"
        },
        "item": {
          "id": "91140478-3f73-4e18-afbb-c727696362c1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "33b7d7d6-d8d4-4a4e-b218-ab304da32c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43956a9d-d335-4ba4-a037-36085cf5fe94",
        "cursor": {
          "ref": "5586a899-a5ed-4c17-a6ed-1b955458144f",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "61d8b867-9207-4da3-8566-3237f60383b1"
        },
        "item": {
          "id": "43956a9d-d335-4ba4-a037-36085cf5fe94",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "449eaef3-22c3-4d75-8a6a-69ba981d6972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6837eccd-6437-4209-b8bc-3926e9af6e01",
        "cursor": {
          "ref": "fec2c305-9864-48b6-83de-0a8f4bcd7065",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "35fb777e-f4f2-41ae-8560-21f273925107"
        },
        "item": {
          "id": "6837eccd-6437-4209-b8bc-3926e9af6e01",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1204edca-d7ba-4388-8fb0-13cd8bf775b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c16d23-800a-4b06-b654-91c2a09b552f",
        "cursor": {
          "ref": "d1a6f423-ec18-4b85-8cda-2917dad9206c",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2900808e-1a8f-4a4c-9082-89fa148126d8"
        },
        "item": {
          "id": "25c16d23-800a-4b06-b654-91c2a09b552f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4c226345-0eff-4595-afb2-1d62e1ab95d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61edc99b-5986-458e-8862-4623968cfc62",
        "cursor": {
          "ref": "2306a5c4-3b57-40af-9534-4e01d7c875d2",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6a0a314a-254e-4065-926c-111be23ba20b"
        },
        "item": {
          "id": "61edc99b-5986-458e-8862-4623968cfc62",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d71f6271-4ef0-4da4-bf41-6200a13d29c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c3f7b1-57cd-4251-9bee-3d9216225065",
        "cursor": {
          "ref": "1fde389c-d1bc-4fa6-8e93-775f3559911e",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a98fc6bc-abc4-4a17-9a41-fc3755174823"
        },
        "item": {
          "id": "c5c3f7b1-57cd-4251-9bee-3d9216225065",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bd6f98e6-d0ef-485f-b89a-465dddebdb05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec43192-b1db-47b2-899a-76bea7a3296f",
        "cursor": {
          "ref": "e391885b-e60d-4398-b942-3fa2af50b42b",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6a65711b-cc92-4ead-ac96-03abaa4146a1"
        },
        "item": {
          "id": "5ec43192-b1db-47b2-899a-76bea7a3296f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ff3a0a1d-f9e6-43c9-9dfe-27e1c7aaab41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b7c92c-8b91-42e2-8d80-308ceabb8df3",
        "cursor": {
          "ref": "d9cb5c9d-b567-4aac-859f-33b2472b4117",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7662441c-f91d-4863-8a7c-829777889398"
        },
        "item": {
          "id": "29b7c92c-8b91-42e2-8d80-308ceabb8df3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "796392b6-fd5d-4989-bfdb-d7a924b7f802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51439a90-aa57-48f8-9af8-1b4a128d0caf",
        "cursor": {
          "ref": "1c07c943-3fdb-409b-b153-d6ecced85603",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9915c0cf-235d-44ad-a9ec-32a451edb673"
        },
        "item": {
          "id": "51439a90-aa57-48f8-9af8-1b4a128d0caf",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5f5c9c4e-892c-476e-b010-ad01072a3a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13822419-a2a3-4d67-8194-332269c837a0",
        "cursor": {
          "ref": "ed865165-0440-45f2-ac2a-57d22167f7fb",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a6f42d8b-2896-46cf-922c-0b3aca5b523b"
        },
        "item": {
          "id": "13822419-a2a3-4d67-8194-332269c837a0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "44ea6738-d217-49c1-8e0b-cf316770f762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2dd6430-d911-4071-9e92-b72426b0af92",
        "cursor": {
          "ref": "f1e95795-f492-4dfc-af84-dffda71be356",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6724bd94-1e2d-4c15-a441-d614c0056735"
        },
        "item": {
          "id": "c2dd6430-d911-4071-9e92-b72426b0af92",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "271ee5f1-d190-4154-9fa9-41c8f122c2aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054ab47a-37b3-441c-a203-27bda2d0e831",
        "cursor": {
          "ref": "a2b19402-c323-4d8d-b756-2c48f36f316b",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d335fab5-7bc5-484a-bd2d-e724ac6e481b"
        },
        "item": {
          "id": "054ab47a-37b3-441c-a203-27bda2d0e831",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "cb2a1d4e-9d3e-4a61-999b-827065255c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c55021-d91e-4e29-b866-61c1e5312a3f",
        "cursor": {
          "ref": "e9e8476a-693b-4a7c-91e6-de18c603c61d",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fe55da86-9c1f-4e57-915b-1eb06192ff60"
        },
        "item": {
          "id": "d1c55021-d91e-4e29-b866-61c1e5312a3f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "66649b5c-b661-4a20-bd7c-c0182297f2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ff8587-f242-4d1f-84c5-c7f47840636a",
        "cursor": {
          "ref": "6f4dd501-4b76-4d8e-9396-0eceab5ee5ad",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "11a88899-5a3c-4167-8af0-9eb33d182260"
        },
        "item": {
          "id": "38ff8587-f242-4d1f-84c5-c7f47840636a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a61974aa-1390-48c0-9ed1-58bbae514620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e83bd22-39c7-4165-82ec-0966cd5406de",
        "cursor": {
          "ref": "4523654a-e9b5-4253-8422-95b34d372a08",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f1ffac87-8de7-4165-b906-fd83ebb3886d"
        },
        "item": {
          "id": "3e83bd22-39c7-4165-82ec-0966cd5406de",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "22dbc80c-5f2a-4068-8941-a57bd3bb88cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d0039d6-f593-4b94-97a0-d762a86b413e",
        "cursor": {
          "ref": "97ccf26f-a81b-45e6-9372-260e03905576",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ed005c20-70f3-4345-bdc9-e39c2725797d"
        },
        "item": {
          "id": "4d0039d6-f593-4b94-97a0-d762a86b413e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "514ddcbc-935a-4869-8f2d-74c2d66d686b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992a3f30-5cc1-4c25-96ea-1e74df247b28",
        "cursor": {
          "ref": "bd0f8e64-67d0-4258-ba52-5324d2f9063f",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f5d94102-a303-41c3-a051-817033399b43"
        },
        "item": {
          "id": "992a3f30-5cc1-4c25-96ea-1e74df247b28",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "4942ccf0-e2f7-4530-a68b-d6d8553a63a6",
          "status": "Created",
          "code": 201,
          "responseTime": 28,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "69a45409-e273-45e0-8731-249a7772e18f",
        "cursor": {
          "ref": "755bbe26-4d53-4a51-aef9-4665fa99810a",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "fcbff57b-5bfc-443a-8a16-04cfb47d1010"
        },
        "item": {
          "id": "69a45409-e273-45e0-8731-249a7772e18f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c103304b-c7f4-4d7c-8587-42d8feff0845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a30483-9bde-497a-9030-6f5a3cd35e5c",
        "cursor": {
          "ref": "143fbf1c-5533-4c7f-a255-aa94053d6d37",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a1246b13-cb35-4bd4-a403-b17b71f03f49"
        },
        "item": {
          "id": "16a30483-9bde-497a-9030-6f5a3cd35e5c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "001e9984-ceba-4ffb-9d47-66af6f0540bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9da7d1-3a59-4727-86aa-598a623b5f20",
        "cursor": {
          "ref": "7ec5a0c0-9fae-44e9-94df-1f2ac8901caa",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ca064f97-f895-4c4e-9046-aca4dcd0cda3"
        },
        "item": {
          "id": "dc9da7d1-3a59-4727-86aa-598a623b5f20",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "552be233-5f5b-4edc-b4b6-f8232bbde2e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b3e15e-3a95-4cb2-974e-2378b6f26f59",
        "cursor": {
          "ref": "c11c1b03-b649-4814-97a8-f2bfe7cf24a0",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ddc4ec7d-3942-4e3d-8554-4bf66b698c11"
        },
        "item": {
          "id": "87b3e15e-3a95-4cb2-974e-2378b6f26f59",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f7bf8ee7-966d-4c20-a96f-30b381439720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e62a9f-6253-48c0-9a5b-dc7f665557cd",
        "cursor": {
          "ref": "c1db879d-bf63-4c40-9433-f9d40bec3996",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6404b53e-7b7d-4e52-9e2f-a0bb8bb115ef"
        },
        "item": {
          "id": "e2e62a9f-6253-48c0-9a5b-dc7f665557cd",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "dadd5e27-2304-40fd-ba37-01b1ec7c8bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b45bfe-153b-49f1-a12a-d77431501bd2",
        "cursor": {
          "ref": "89ff531d-9141-478d-8724-d291c53d8911",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "034e75f9-5418-4016-b093-eb9dbfa50f1d"
        },
        "item": {
          "id": "72b45bfe-153b-49f1-a12a-d77431501bd2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2a8a8b6f-67a9-4736-abf4-81d1341cab81",
          "status": "Created",
          "code": 201,
          "responseTime": 28,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "66ad1bd4-6c03-461e-abd7-ac9d1d8cb5a0",
        "cursor": {
          "ref": "d7d3a529-3dee-4a79-843c-7e346a8601aa",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "691323fe-aba7-415c-983e-a74dc9aae907"
        },
        "item": {
          "id": "66ad1bd4-6c03-461e-abd7-ac9d1d8cb5a0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "05f2048a-62e9-41c4-bcf4-432468bae182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99a6bf5-74aa-4b28-9eeb-e98fe0841f4b",
        "cursor": {
          "ref": "64d7935d-db3e-4e80-9efe-2b72b1f84db1",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e58a5683-8149-4384-bf46-539da53e13a2"
        },
        "item": {
          "id": "e99a6bf5-74aa-4b28-9eeb-e98fe0841f4b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e7f58f8d-58c2-47df-a3ff-e5645dfd3f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a8082a-afba-4f74-a8f0-f19e79a199f3",
        "cursor": {
          "ref": "bb37070f-c743-4411-98d3-ade06908cba1",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5d7b8c3a-0bbe-4e40-a9bc-4ea7cc65c081"
        },
        "item": {
          "id": "a2a8082a-afba-4f74-a8f0-f19e79a199f3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d4ad143e-c741-4b19-b4c6-5056a3ea87a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5903c3-4f4b-46cf-a3f6-ce3ff9bf5a6c",
        "cursor": {
          "ref": "34b9005d-ca21-43a5-b509-fb2e6ba7d735",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6da5249e-e48d-45e7-8e91-a79f6d4b6a90"
        },
        "item": {
          "id": "ff5903c3-4f4b-46cf-a3f6-ce3ff9bf5a6c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "fc04f719-bfb3-4a9e-aaf0-b498549b22f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddde8b4d-d901-4413-9c5b-f503a5853bfc",
        "cursor": {
          "ref": "dd284d05-154c-4746-9986-96ffbbdbcb05",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4a23b560-9470-4f81-b783-172279fddb67"
        },
        "item": {
          "id": "ddde8b4d-d901-4413-9c5b-f503a5853bfc",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b8141bd8-5510-4c1c-8da1-8a9540dccc0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80c3915-9ffa-40a2-a086-e702c9ce46b4",
        "cursor": {
          "ref": "64086f7e-d79c-448f-af11-b3bc046ea1dc",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6ff3fc9c-4fe1-4c87-9e8c-960a4c22c25a"
        },
        "item": {
          "id": "f80c3915-9ffa-40a2-a086-e702c9ce46b4",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "496ed4c6-7cdd-4ecc-ad44-8f504e04499a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad4556f-a38f-4e04-b2b5-4a8f85146f50",
        "cursor": {
          "ref": "d9b4891d-63f1-47da-bd8b-25078934d47f",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bff385da-6f68-420c-bacb-96517b23651d"
        },
        "item": {
          "id": "dad4556f-a38f-4e04-b2b5-4a8f85146f50",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c5638a6c-c63b-4b85-8886-906a815ced6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edbc3b9d-7c38-4184-bc65-54e64394b5bf",
        "cursor": {
          "ref": "d729a446-bc73-4366-90dc-87a5fddd8d1d",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "cf2f9f03-ca07-4104-ae4f-1629edbf0a07"
        },
        "item": {
          "id": "edbc3b9d-7c38-4184-bc65-54e64394b5bf",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9eea30cd-f3b1-4d1e-88b4-162bef6195fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "027ff4c5-95fe-4215-ae4a-bd8888feff7d",
        "cursor": {
          "ref": "1f739572-d816-46c5-9cb5-a32f50ea6066",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6dd0ddc7-7146-4a00-a2d5-0349b20aee0b"
        },
        "item": {
          "id": "027ff4c5-95fe-4215-ae4a-bd8888feff7d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a042ce15-1b94-444c-853e-6ca8c07a3796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "be72380d-5956-49cf-aabf-0eeb1acff0d4",
        "cursor": {
          "ref": "9ae107ee-fadc-46e7-877a-eb8fb0453049",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "afe08a14-c8bd-4f68-8131-fb7687538c34"
        },
        "item": {
          "id": "be72380d-5956-49cf-aabf-0eeb1acff0d4",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "af558001-9ba8-4219-a592-630f298219b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "fac10243-35ae-4ba2-bc6b-8aaccef19d95",
        "cursor": {
          "ref": "85834298-e36d-4ecf-90b4-69ffa3fca5dd",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7bf1d718-3a6a-4403-ae84-822056c1f5bf"
        },
        "item": {
          "id": "fac10243-35ae-4ba2-bc6b-8aaccef19d95",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6e1516f6-f0be-4ec3-a9f4-b72d6c516f9d",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f672585-81c7-44f7-9887-661bcd6d21d9",
        "cursor": {
          "ref": "b00bd6f0-5bb0-40da-b67f-feb4c60cef9a",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3ceee291-cc44-4612-8a6c-7cb8a1aa5b87"
        },
        "item": {
          "id": "9f672585-81c7-44f7-9887-661bcd6d21d9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9dcbcbb1-cf02-4c06-8222-1741ed075b67",
          "status": "Created",
          "code": 201,
          "responseTime": 27,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e4dff9-a698-4670-8386-bc50ee69e8f2",
        "cursor": {
          "ref": "c81ee24b-e39b-4909-b50a-bc41080d9a47",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "852c6774-9405-4bfb-8bc3-259bfd7218d2"
        },
        "item": {
          "id": "a0e4dff9-a698-4670-8386-bc50ee69e8f2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2ff0675a-0356-4263-8f4e-d4d6fd8ff5cc",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 665
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd9678f-a1e4-44fa-88af-e5d1de1e63ca",
        "cursor": {
          "ref": "dec19c8d-1b11-4f08-ac56-73901315acbc",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "11542d80-0bfa-49d1-a62b-f80e99df281e"
        },
        "item": {
          "id": "6bd9678f-a1e4-44fa-88af-e5d1de1e63ca",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3ace0936-68fb-4166-9577-3e7a4d7407d4",
          "status": "Created",
          "code": 201,
          "responseTime": 28,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ea12e8-decd-4856-ba8d-b699d45b8a91",
        "cursor": {
          "ref": "b7688051-44a6-4a81-bf73-2c106af88ed5",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "aa020b64-1b5e-4c79-bf28-5608c4589acc"
        },
        "item": {
          "id": "03ea12e8-decd-4856-ba8d-b699d45b8a91",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "40ed5881-3bdc-46ab-8c85-962b3f8d450c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "4ea6cab7-2ced-4d21-83f4-7cc087a37a78",
        "cursor": {
          "ref": "6d00164f-e771-4fd8-8f2e-5dde58d3b171",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a3c20855-8ded-4b3b-aa18-a7096715d81e"
        },
        "item": {
          "id": "4ea6cab7-2ced-4d21-83f4-7cc087a37a78",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "da0cba7c-311e-4b0c-a8f8-8cf99fc43e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea6cab7-2ced-4d21-83f4-7cc087a37a78",
        "cursor": {
          "ref": "6d00164f-e771-4fd8-8f2e-5dde58d3b171",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a3c20855-8ded-4b3b-aa18-a7096715d81e"
        },
        "item": {
          "id": "4ea6cab7-2ced-4d21-83f4-7cc087a37a78",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "da0cba7c-311e-4b0c-a8f8-8cf99fc43e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66bfbf3a-bacc-41b2-a24c-636a3796df2f",
        "cursor": {
          "ref": "16de660c-3272-4b4b-9345-8f27b6368c6b",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "19bdc98b-ba1c-4796-bceb-7b3525887e73"
        },
        "item": {
          "id": "66bfbf3a-bacc-41b2-a24c-636a3796df2f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1ca4e812-001a-47a2-b266-77e49c07b36b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1dea971-9675-4e5c-b76f-8d48fe2f704b",
        "cursor": {
          "ref": "635b5667-bd51-46af-9f32-316011431255",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9fdb3660-fc5a-4098-ab00-d94b4265b234"
        },
        "item": {
          "id": "b1dea971-9675-4e5c-b76f-8d48fe2f704b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f823817c-d313-49cf-84f2-7013cd802858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7042b1c-3fd4-4495-9b4b-3ffa30138e2e",
        "cursor": {
          "ref": "b85d8c27-e975-47d7-8d78-10fa421a66cf",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "99cd2c48-5daf-4cb5-b682-93133f531ee1"
        },
        "item": {
          "id": "f7042b1c-3fd4-4495-9b4b-3ffa30138e2e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "13b8e56c-b6a4-46f7-8334-0ce0a00ae7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd86e1a6-39b6-4af6-9f67-c89bbf6eef0c",
        "cursor": {
          "ref": "6965b0a3-408e-4f37-bfe3-7f5424b79bed",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2d201f00-2fef-4ba4-b4a8-a2efff2e5a41"
        },
        "item": {
          "id": "fd86e1a6-39b6-4af6-9f67-c89bbf6eef0c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8695d61a-7bf6-48d1-b13f-1d322b88d2ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057ed536-9ffd-4ca6-ba6b-35f6bc1f0097",
        "cursor": {
          "ref": "5b859f17-ee97-4fa6-aba6-651e6a807efd",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "eb0eef75-9365-4d37-8cb7-96935d47496c"
        },
        "item": {
          "id": "057ed536-9ffd-4ca6-ba6b-35f6bc1f0097",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ac0a7f83-6936-4984-9b86-7777dd3d6b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aec5593-c5db-4851-9fe8-db4c559f7bf4",
        "cursor": {
          "ref": "e4e1bbf0-eeb7-4320-b85f-f7422fe7d9e7",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e3cff243-d046-453d-b2cd-267724a82040"
        },
        "item": {
          "id": "8aec5593-c5db-4851-9fe8-db4c559f7bf4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "15ca6c89-8f37-4afe-aa23-21fe16389975",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "9eb5683f-07d1-4c07-938d-95225c4cd527",
        "cursor": {
          "ref": "4b8eeecb-27ef-4198-99cd-93c3b68f3b06",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e0b5249b-89fc-4282-8c18-2ae1a7fa774d"
        },
        "item": {
          "id": "9eb5683f-07d1-4c07-938d-95225c4cd527",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5f66720e-2df5-47ae-9b44-977403cd52f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f3a141-42b1-4dad-bcc3-8802291bc095",
        "cursor": {
          "ref": "d0a84068-b8c8-47af-ab0e-dd8fab163891",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "70b3e889-1490-41ff-aea2-c56128a7a19a"
        },
        "item": {
          "id": "e5f3a141-42b1-4dad-bcc3-8802291bc095",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8235e12e-726c-47c8-b7c7-19335aafadfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d3a38d-6df0-4845-950d-f92153751f65",
        "cursor": {
          "ref": "945008a7-55d9-4cb0-bcc9-32acdb4fdc04",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f7c0d76f-7c3e-441f-a3a1-6f20f64e38a7"
        },
        "item": {
          "id": "61d3a38d-6df0-4845-950d-f92153751f65",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c783515e-fea9-4983-a29f-bfec7d4ba130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216e5ad4-d9ca-4569-a329-27eb022f200d",
        "cursor": {
          "ref": "dc729f7a-6971-429c-9abb-3a8a9f533c4a",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "52eaad84-674f-4bd4-ae18-92e07581cea0"
        },
        "item": {
          "id": "216e5ad4-d9ca-4569-a329-27eb022f200d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "463e5aa3-bdbe-4909-973e-ce108a1420d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43bf41d1-782b-4c99-b8f7-fd713dfcd993",
        "cursor": {
          "ref": "55bf5952-d224-423b-a1ec-69e8dbfe4eb6",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e82cbf3e-39e5-4729-9aa5-405b87317806"
        },
        "item": {
          "id": "43bf41d1-782b-4c99-b8f7-fd713dfcd993",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3ff6606d-a3f1-4bb8-9bac-143fb4d25bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf77f15-06bc-4051-ba00-e771d3ee2c0e",
        "cursor": {
          "ref": "69e04f85-7698-4852-a2e0-0d19a99e26e3",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d5cf27b8-78c2-4986-9e13-04c424110e09"
        },
        "item": {
          "id": "6bf77f15-06bc-4051-ba00-e771d3ee2c0e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1bfcbe03-bad0-4fd3-9094-f75805aa80fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c505ca85-c410-4e23-b998-6497b2c37fab",
        "cursor": {
          "ref": "cf7216ca-d0e3-4d4e-8415-254cfb8fa4f8",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3359d48d-44d6-45b9-8aa9-32bbe9a9d13a"
        },
        "item": {
          "id": "c505ca85-c410-4e23-b998-6497b2c37fab",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "21114651-9ce1-4b16-bc57-636bb7691c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5581ce-39ad-4a23-abd6-f41a0de4c94d",
        "cursor": {
          "ref": "c5c7f5ad-db34-4e6f-9119-7a50e1cfb531",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "94e7dde1-95c5-46f9-8968-e5bfa7364eb6"
        },
        "item": {
          "id": "5e5581ce-39ad-4a23-abd6-f41a0de4c94d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "abe3cae6-af8a-481e-83d3-60dba5f5c732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ffd2c8b-3909-4610-9290-7a8d4a8e2198",
        "cursor": {
          "ref": "a31d54c4-adc2-4c9d-81b2-1e674ce76ae7",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "860a6cdd-5bd8-4341-b6b8-78addced1360"
        },
        "item": {
          "id": "2ffd2c8b-3909-4610-9290-7a8d4a8e2198",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4abb6e99-87c6-4635-9b41-8bd315577ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d64f3d-64ad-4e07-adac-0271a33d901b",
        "cursor": {
          "ref": "2b59d3f6-d670-4da1-ad59-e8ccd5e90b2f",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5e3677be-75a5-4d2d-94a9-e9dc8a87fd5f"
        },
        "item": {
          "id": "50d64f3d-64ad-4e07-adac-0271a33d901b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "938ad4e5-2b4c-4d67-bd51-3a4d34ea615a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb100aa1-8ffe-4ef7-bd00-a0c0c1c7fc5a",
        "cursor": {
          "ref": "30de9ebe-e4a6-4336-8174-498a6da6ebd7",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9bf93fdb-6804-45c6-add9-e03518d0b628"
        },
        "item": {
          "id": "fb100aa1-8ffe-4ef7-bd00-a0c0c1c7fc5a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "add14b10-5a9c-4e08-bc3b-87356e9727d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9bac0d-5f32-40dc-80b9-944aa6a4e7a3",
        "cursor": {
          "ref": "ad61c50f-ac0f-4452-adb1-2ff7e80c22aa",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7f7baf10-3e85-4b25-a798-317d48ed50e3"
        },
        "item": {
          "id": "ba9bac0d-5f32-40dc-80b9-944aa6a4e7a3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "82dcfb0f-786f-4a19-9bc1-e15e46c42697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fcc43a-a9a8-41fb-bc09-40bc446d465c",
        "cursor": {
          "ref": "bcb340aa-1a38-4b72-8419-1827ff445705",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "82270ee7-81aa-4271-af7c-da19089e08f9"
        },
        "item": {
          "id": "e6fcc43a-a9a8-41fb-bc09-40bc446d465c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "dcf5c6b2-bcda-4779-9903-60e50b3faca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61da6836-c637-40c3-95bd-3474788e3774",
        "cursor": {
          "ref": "5d2bc73c-d4ec-46c9-9d02-83b8d2ffd373",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6866354a-0677-4983-b080-2ba7f8424f58"
        },
        "item": {
          "id": "61da6836-c637-40c3-95bd-3474788e3774",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ed0ae8f3-0360-4edc-8d0c-ed693ec6ea56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f5ed82-3bb4-4e2e-8737-ffe919de2889",
        "cursor": {
          "ref": "a3987a67-4d17-4326-973c-599485269f13",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f963ecff-c32c-4241-aaf4-65791ae99398"
        },
        "item": {
          "id": "01f5ed82-3bb4-4e2e-8737-ffe919de2889",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6f1b6471-34ae-46a2-91b4-3a51c719a6d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e693245f-1f8b-4897-b250-afd8bae9e156",
        "cursor": {
          "ref": "28099d5c-b337-45a9-b090-2dc2f52e4d21",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "57032888-53fe-4f0e-83c0-c2ee290e19bf"
        },
        "item": {
          "id": "e693245f-1f8b-4897-b250-afd8bae9e156",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a1fc1caf-deeb-4b4d-8faf-6d60572331c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33791f22-9b75-4ee2-956e-8e8b2992ccf5",
        "cursor": {
          "ref": "34b75898-5e5b-4060-bb97-f50aecf2d013",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e9a8fd06-0ef3-4ce9-b4d9-a190791f8df7"
        },
        "item": {
          "id": "33791f22-9b75-4ee2-956e-8e8b2992ccf5",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "57dde7dd-4874-4702-a598-c821b6dc903a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10a1825-55e8-4023-a368-7c7219212bfd",
        "cursor": {
          "ref": "686c3c81-d4db-4fb4-a411-e479220d51ea",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c67f9ba5-8809-49e1-962d-96e5c971ddb2"
        },
        "item": {
          "id": "d10a1825-55e8-4023-a368-7c7219212bfd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7a99f580-3657-4499-9f9c-42602f10e959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363f789f-c3c0-49ae-b011-406335455bab",
        "cursor": {
          "ref": "cb2f7572-07cd-4c4e-bd19-a96a4e23d086",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1d7af55c-9cdc-44ae-8c27-522b789944f7"
        },
        "item": {
          "id": "363f789f-c3c0-49ae-b011-406335455bab",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "10ac05ba-dac8-4b32-b22e-9d0a10293111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74403c88-1ae6-4fa8-ab6b-8f282385a9aa",
        "cursor": {
          "ref": "a5fa6766-6212-4185-9432-8d3664016aaa",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "dcd8d211-98de-46b3-9115-4a4f0919b927"
        },
        "item": {
          "id": "74403c88-1ae6-4fa8-ab6b-8f282385a9aa",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b90ec03d-beb8-4761-8988-8a9db97cfef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34d3462-1607-4c68-90ea-925802ff4bdb",
        "cursor": {
          "ref": "0df5d5f6-8c40-49bf-be82-2a67fcb84e3c",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b09ef160-a587-40ef-8135-5f5d3f4892c6"
        },
        "item": {
          "id": "f34d3462-1607-4c68-90ea-925802ff4bdb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6beaa2f4-8114-43fa-af76-9d4ccf4530b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce29dec-d76e-4328-80c1-1aa44e75ba65",
        "cursor": {
          "ref": "e7cb85ef-5ee1-4e96-b52d-00610c186c03",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f8de802b-3224-4662-b5ae-b34862dacc3f"
        },
        "item": {
          "id": "7ce29dec-d76e-4328-80c1-1aa44e75ba65",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ec6b01b5-2e5d-405b-970a-da1c416b9d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c6bdd9-74d1-454d-9f72-0cf8a5babb87",
        "cursor": {
          "ref": "ab4d17a3-58ff-4b5c-98ac-26eccdd01170",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d62db938-292e-4a63-bd5d-47d47bcbc080"
        },
        "item": {
          "id": "e0c6bdd9-74d1-454d-9f72-0cf8a5babb87",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d6d5bf41-fd8e-472a-9b9c-32a1446de1c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2dba74-4eb0-47ff-9aad-5e7086abb28b",
        "cursor": {
          "ref": "330cd210-a4ff-4311-86e6-1918e72e2e74",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f30055f6-33be-4d0b-b97d-26efacc8802b"
        },
        "item": {
          "id": "ea2dba74-4eb0-47ff-9aad-5e7086abb28b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f7a35b71-45ba-425f-b879-a2ca4d22d96d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4e2af3-7050-4ee8-966e-980331395c83",
        "cursor": {
          "ref": "7188f159-29da-46be-aa33-42f94b535ad2",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ac4e2c41-47f7-4d45-b2d6-8f8f56c8ed4c"
        },
        "item": {
          "id": "ef4e2af3-7050-4ee8-966e-980331395c83",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9e424c6a-0cce-41b6-9d6f-bc719908842c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13247aac-bc8f-4d0d-8e4f-001f17b6670a",
        "cursor": {
          "ref": "20cb8850-6ced-4894-a4bb-00c7bbe697ef",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ed6a23a2-f5d6-416f-b413-27a7f254979a"
        },
        "item": {
          "id": "13247aac-bc8f-4d0d-8e4f-001f17b6670a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "28518aad-683f-4ca3-ac4c-6a216affd180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "0845e886-5a2b-4798-a6cf-9774340b6300",
        "cursor": {
          "ref": "a62fc642-fbec-4655-a918-7f83eec90ad1",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1e6f39ae-ee5a-4021-bc47-0bf6bca3a497"
        },
        "item": {
          "id": "0845e886-5a2b-4798-a6cf-9774340b6300",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "9ecd37a2-5efd-48a3-94b9-00db057f81fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b698e8b8-fbde-40f2-a3c9-e2fe3e7168f9",
        "cursor": {
          "ref": "480ee3c9-8b83-45fc-a2bf-39e9df1fac89",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4162bc2b-84aa-4197-b32e-2bf71c3f1819"
        },
        "item": {
          "id": "b698e8b8-fbde-40f2-a3c9-e2fe3e7168f9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4ec8b00c-b1e8-4c84-aa5a-d4b5e072f724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b698e8b8-fbde-40f2-a3c9-e2fe3e7168f9",
        "cursor": {
          "ref": "480ee3c9-8b83-45fc-a2bf-39e9df1fac89",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4162bc2b-84aa-4197-b32e-2bf71c3f1819"
        },
        "item": {
          "id": "b698e8b8-fbde-40f2-a3c9-e2fe3e7168f9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4ec8b00c-b1e8-4c84-aa5a-d4b5e072f724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964add57-645e-43e4-9e3b-3b520dd7c8ed",
        "cursor": {
          "ref": "72fc5d87-8708-4652-a997-0cc5fbbbe6fd",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1e1249eb-39ab-4e81-ad75-b2dce7d68f65"
        },
        "item": {
          "id": "964add57-645e-43e4-9e3b-3b520dd7c8ed",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bf27c7dd-4398-467f-b214-3bd38aa2d3c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c239732d-fe4a-427f-b008-7ab44476f132",
        "cursor": {
          "ref": "13dded5f-6fc1-4da2-b602-0a0486ac822c",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0e78336c-6c06-4058-a16f-e6e357436a5f"
        },
        "item": {
          "id": "c239732d-fe4a-427f-b008-7ab44476f132",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f7d391d0-d9f9-4469-9673-4319a615beea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367fefa2-544b-46e1-9469-4ca29e6f5424",
        "cursor": {
          "ref": "1c95a1f3-767f-4d29-92d5-1425fa4263b6",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3d31c13f-2699-4cd6-8618-b30678a5aab9"
        },
        "item": {
          "id": "367fefa2-544b-46e1-9469-4ca29e6f5424",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "43de462b-84dc-4e8d-b214-036dbc6a6276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec55b486-ba0d-4c1c-9456-9d77bce70b53",
        "cursor": {
          "ref": "4cc28be4-b63c-4ba7-a3aa-e2b3822ff158",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b8cbe994-e0f0-4abc-b848-7e71021e1c96"
        },
        "item": {
          "id": "ec55b486-ba0d-4c1c-9456-9d77bce70b53",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "830d41d3-6b27-4d29-99c8-fcee35d9840c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e7945e-085b-422f-b441-26eaf709b4b3",
        "cursor": {
          "ref": "272b3e90-5c62-4cdb-adca-6db83264e053",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2eed6f4c-e7d7-4bf1-86fd-b90d0138366d"
        },
        "item": {
          "id": "e1e7945e-085b-422f-b441-26eaf709b4b3",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "bd3d7a23-b649-4841-a7b8-88ca8688dde7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b788226-90e0-42c1-b28d-3374bb2e4aaa",
        "cursor": {
          "ref": "8e5f6ad5-ef46-402d-8a51-bb0f3a923a5c",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d2a5b8a2-d61c-4b7d-a7ef-d9f04e956206"
        },
        "item": {
          "id": "5b788226-90e0-42c1-b28d-3374bb2e4aaa",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3746cbef-3bd9-43a1-b7b5-527ab7aba44a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21bd3ee9-5187-4d4e-9218-deb243a4a250",
        "cursor": {
          "ref": "d95fed8d-67b2-49c7-a289-3d41cd171c7f",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1d148408-970d-4855-9a10-5efbbb91907d"
        },
        "item": {
          "id": "21bd3ee9-5187-4d4e-9218-deb243a4a250",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c91fe583-d5e4-4e0e-8de7-6551f0881404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f8dfbd-23b3-4ae9-bff9-6f394926ed2c",
        "cursor": {
          "ref": "fac18422-6999-4707-8401-74018d0c15b4",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "34f5ae69-fb17-4b44-8004-58726c90ecb8"
        },
        "item": {
          "id": "06f8dfbd-23b3-4ae9-bff9-6f394926ed2c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b53755ae-c016-424b-a26a-d0c7f610c028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5a3c5d-84cf-46b8-9f0d-a3dfaeef720a",
        "cursor": {
          "ref": "7218c1b0-5278-4707-9112-f596a6fdc6c7",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3a8afc5b-e600-4ec3-9fea-d132588f29d7"
        },
        "item": {
          "id": "1a5a3c5d-84cf-46b8-9f0d-a3dfaeef720a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3436355f-8660-4041-9e6b-8ed428e79014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ba56fa-d9be-478c-bbfd-a7c3249336e3",
        "cursor": {
          "ref": "932cc76f-b70c-4f86-9988-c9bc9cf7613a",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "274486f3-28c2-4a8c-937e-347a46797062"
        },
        "item": {
          "id": "53ba56fa-d9be-478c-bbfd-a7c3249336e3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e604ec46-9900-4162-ba91-7fd85e3500d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ce78cf-fbc5-41c2-ba89-e12bb2719662",
        "cursor": {
          "ref": "51d791a8-facd-4af0-984a-4208877a2627",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "20135088-7444-4089-97ba-5ae6829c3e90"
        },
        "item": {
          "id": "32ce78cf-fbc5-41c2-ba89-e12bb2719662",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "55223153-f2ce-4881-8760-461b12b3d2f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2163762d-509b-464c-a9e1-33181a6c7eb1",
        "cursor": {
          "ref": "bd8cb651-72a3-40d9-a750-dc874f707984",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8562a805-3ac8-466f-a493-3f98d2237306"
        },
        "item": {
          "id": "2163762d-509b-464c-a9e1-33181a6c7eb1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ab15c1cb-0647-4fd5-8353-d39457a0b9e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096b57c4-a241-47f2-a555-b7a9ef35b19a",
        "cursor": {
          "ref": "8c8e692f-7123-4f4c-b017-b1ddc1ea972b",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1b676a48-25ba-4d4f-b377-57596112195d"
        },
        "item": {
          "id": "096b57c4-a241-47f2-a555-b7a9ef35b19a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1694174e-b644-4d60-b7b9-713802e763a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4425838-11b5-4396-9b08-be59af943dea",
        "cursor": {
          "ref": "0873a95b-402b-421f-b274-af9d17433728",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1fef102d-20c6-47e4-b4f6-2d2baee67433"
        },
        "item": {
          "id": "a4425838-11b5-4396-9b08-be59af943dea",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ba2b30d9-c13b-463f-bc6b-9f0ece49606e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e929d25-ac8e-401f-9971-2e2c48a6fb13",
        "cursor": {
          "ref": "c03e3102-0db6-4173-a337-7854073c3d5b",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5b4efa89-db10-4b97-9cef-31cc8afabbdb"
        },
        "item": {
          "id": "6e929d25-ac8e-401f-9971-2e2c48a6fb13",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "40a5d55b-64ec-47b6-bd85-e917ded95fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32d2419-917f-4f71-852c-d40d278e3cea",
        "cursor": {
          "ref": "0a4be528-b328-4776-ae06-9004c6b17cec",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "599c2af7-bf83-40d8-9591-1d88482f151e"
        },
        "item": {
          "id": "a32d2419-917f-4f71-852c-d40d278e3cea",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "325cae7b-52a6-4c87-bedf-413afd445785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec32701e-6d2a-45d2-9f5f-339ecece49be",
        "cursor": {
          "ref": "f4b9fdf7-0e99-4f09-be84-3cc78befd9b3",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "cf606c2d-92ae-4e40-9c0e-8f02088f422b"
        },
        "item": {
          "id": "ec32701e-6d2a-45d2-9f5f-339ecece49be",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2753e449-47a1-4ca0-a534-2644a6b9e042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67c4e8b-037f-43dc-ab8f-1aa51601788f",
        "cursor": {
          "ref": "e9f51485-91d9-4d95-a6a6-f9418fd962ab",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b9bd2167-dd65-4ac4-be62-3a16b1e1449f"
        },
        "item": {
          "id": "e67c4e8b-037f-43dc-ab8f-1aa51601788f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3aca0366-9a24-4f9d-a016-66cc2ea9fb62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fb61fd-9621-4738-811a-a12b8e399be5",
        "cursor": {
          "ref": "917ad519-a7a0-4d72-80de-1b90f4d0191f",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d3e35e33-9fb4-4e92-9eb8-9e778a4b658e"
        },
        "item": {
          "id": "d3fb61fd-9621-4738-811a-a12b8e399be5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4b2e6dcc-f129-459a-9605-cd5b05930c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739f4d55-7989-4cf6-9b1d-0d8992b8f3ef",
        "cursor": {
          "ref": "d875dfec-c04f-4f2c-90af-889497c4dd83",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "822a0fab-7f08-4b3e-8d97-13c5e41a1727"
        },
        "item": {
          "id": "739f4d55-7989-4cf6-9b1d-0d8992b8f3ef",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "49e5a030-2dd6-4e57-bca5-555f6ae55c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb366d56-34c8-4078-8113-a9972392353b",
        "cursor": {
          "ref": "5195a08b-32d3-4377-93d6-650afe938ceb",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "23a0d583-968f-4461-9374-e57b595d21f0"
        },
        "item": {
          "id": "fb366d56-34c8-4078-8113-a9972392353b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2501dec5-42e6-4506-b8af-982e4d9fe94a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d923f610-5008-40aa-ba2e-0994d8e1f3c3",
        "cursor": {
          "ref": "6461e4fa-dacb-4cb5-bc2a-e569bbaddbe1",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c19b5911-13bc-4c3a-92d3-4cbb006e9dff"
        },
        "item": {
          "id": "d923f610-5008-40aa-ba2e-0994d8e1f3c3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9e57c9dc-7682-4f41-a35a-9b3ec70c20ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2588ceb5-53d4-44e7-a571-67ae9989feab",
        "cursor": {
          "ref": "3af5d665-d271-446c-a5f9-321b60ba4e82",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9f7377ea-bbe0-4e13-9472-e44d79f62825"
        },
        "item": {
          "id": "2588ceb5-53d4-44e7-a571-67ae9989feab",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6851b9da-2882-4e6b-a4b1-997ce5aba542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f3b284-c67c-4f0d-8033-05fc03eef50b",
        "cursor": {
          "ref": "11249e03-8277-4bb7-b6cf-e085aa8b7427",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c1cb3b65-6255-45ba-abd7-b9a1b6bf1f74"
        },
        "item": {
          "id": "34f3b284-c67c-4f0d-8033-05fc03eef50b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d882aff0-e2bd-44ab-bf5b-6d70197d74d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736078a6-1878-42b3-970b-9e03b5426b61",
        "cursor": {
          "ref": "e6179571-738f-4e0f-9b1a-0801a1194833",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f96c202c-2308-4926-8fca-14001bfd7230"
        },
        "item": {
          "id": "736078a6-1878-42b3-970b-9e03b5426b61",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "486eeb0b-3ced-4b53-85ff-8bc2a5c89aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80229e47-f7e9-4eaa-99e6-f17ed48d39aa",
        "cursor": {
          "ref": "a8534879-db2a-4fec-ac0a-b3610e601e34",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b0b74b37-1329-43f1-a55a-260cb613b5c7"
        },
        "item": {
          "id": "80229e47-f7e9-4eaa-99e6-f17ed48d39aa",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a0636028-60fb-4192-9b4c-622daa91718c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4acbe8d0-38fb-4720-a80e-14111009690d",
        "cursor": {
          "ref": "a4b31c19-dd68-4311-920e-2800ee05e13c",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "35f62249-769e-4669-950e-03a36a08d9f9"
        },
        "item": {
          "id": "4acbe8d0-38fb-4720-a80e-14111009690d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d30de15c-7842-482a-95d7-f9ae856ecac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe12b7f8-7b2b-4ae6-9f6c-304bfff146f0",
        "cursor": {
          "ref": "d8917b44-cb5f-4efa-95c6-68de4a11993c",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d6d1de92-2fdb-414e-bca8-12eb3cfce0c8"
        },
        "item": {
          "id": "fe12b7f8-7b2b-4ae6-9f6c-304bfff146f0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "345b70bc-4a65-4bf3-8666-3c19f2d91185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c31072-60e8-4bd7-bec5-a6f35ccf50b8",
        "cursor": {
          "ref": "322c7558-bc75-4915-aeff-32b5dbc91228",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fc2235ee-35ff-41d9-9ab4-5b845637d9e9"
        },
        "item": {
          "id": "f7c31072-60e8-4bd7-bec5-a6f35ccf50b8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "435a6c9f-6adf-4ea4-a374-fbfb4ebae5d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eba912d-a1cd-44d1-b270-e9f6f24db7da",
        "cursor": {
          "ref": "35636dc8-8e72-45bb-ae50-2a8fd58c7eb0",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "418655ed-4142-4481-a51e-20f6f80d8f46"
        },
        "item": {
          "id": "1eba912d-a1cd-44d1-b270-e9f6f24db7da",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "35aec791-6fdd-44e7-8c87-a04a55eda4ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e6d5aa3-3e41-4c1d-9870-73747eb75fe1",
        "cursor": {
          "ref": "b8a2d83b-3665-444b-9b7e-e1810d38c2b9",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f1b3f290-dfeb-49be-963f-7718aa52454f"
        },
        "item": {
          "id": "5e6d5aa3-3e41-4c1d-9870-73747eb75fe1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "728fbab2-86ee-4aeb-a9e8-acf564797412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8542ae4c-7608-4650-b16d-6affc9052141",
        "cursor": {
          "ref": "03b12e7b-ca16-47b6-ba85-6aac441c9f65",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "bd88159b-16f9-4117-a08f-4f93ffead3c1"
        },
        "item": {
          "id": "8542ae4c-7608-4650-b16d-6affc9052141",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "eb2db235-e2bc-455e-8b98-72cf763965ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596be6e5-19e8-48f4-b3ed-ec934c8a43a8",
        "cursor": {
          "ref": "36810a08-3163-452c-bbbe-9e5ea202c17d",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3f0b2fea-0eea-4ec2-853e-6a22caf1957d"
        },
        "item": {
          "id": "596be6e5-19e8-48f4-b3ed-ec934c8a43a8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9d6deab9-037b-4fe9-aca5-30b7a08b67d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924fce3b-abaf-441a-9041-419a43ec9887",
        "cursor": {
          "ref": "7c98501e-ccc7-4f38-97af-4225a7f71a15",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "99994a1f-0ea7-42f1-bc5d-7371be511586"
        },
        "item": {
          "id": "924fce3b-abaf-441a-9041-419a43ec9887",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b54be7aa-f5f8-4d81-894a-b32ee9e1eff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d860cc-f5b4-4d8a-9ae3-4255e515cb79",
        "cursor": {
          "ref": "c57aba24-f81f-4d58-aa42-a1f924804fe6",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fa15d189-fb54-4b1d-b1be-471974e11547"
        },
        "item": {
          "id": "b2d860cc-f5b4-4d8a-9ae3-4255e515cb79",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d27cbfbd-ddc9-4863-9970-60ec87312d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b493b8-ba43-40f3-9b5c-fe43ed886a33",
        "cursor": {
          "ref": "57bbb37a-1200-4ac2-a312-6af56fe91185",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fac9d65e-214a-4742-964d-5e8417aac391"
        },
        "item": {
          "id": "60b493b8-ba43-40f3-9b5c-fe43ed886a33",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a317e207-3809-4217-a9e2-5184170303ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3c3ee1-9619-48c8-ba16-6d7a2facd74e",
        "cursor": {
          "ref": "0658a4d5-ae66-4f93-b62b-a07a768c8d48",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a234a56f-fd32-4814-a1d1-2dfc81b5f7a5"
        },
        "item": {
          "id": "5c3c3ee1-9619-48c8-ba16-6d7a2facd74e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "34d9c47f-d0c6-4ded-869f-5148f842d5fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c6cef7-903c-42aa-b968-719c0d9de7a4",
        "cursor": {
          "ref": "f332ae0c-cfeb-43bf-858a-8f07feb641bb",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "775135b0-3b5b-40f3-9699-6d76c1612ccd"
        },
        "item": {
          "id": "f3c6cef7-903c-42aa-b968-719c0d9de7a4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4a210e1b-371c-4853-95c1-d226e7150079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a4a038b-f62e-4c77-b910-b5a6ece3025b",
        "cursor": {
          "ref": "a31b2611-f20f-454c-b9fd-6be7301ea219",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "646eae30-af8c-4299-9a28-a11013e14a91"
        },
        "item": {
          "id": "3a4a038b-f62e-4c77-b910-b5a6ece3025b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "06c0856f-58bb-496e-a78e-837b0464d876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9217c3-91ac-4f5d-8fbf-6a9333758134",
        "cursor": {
          "ref": "ddc55b98-addf-47de-9195-400738a9700b",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "718cd7e5-d0bf-4364-b80c-bfd90facba89"
        },
        "item": {
          "id": "4e9217c3-91ac-4f5d-8fbf-6a9333758134",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c0428d1e-faf9-4a9b-961a-151674044f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a4e265-16e4-4c86-87f2-b5e4152b7743",
        "cursor": {
          "ref": "e563e97f-bf85-4a49-906b-faa717113fdd",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1275f84a-c398-49b2-9e4f-06401628edbd"
        },
        "item": {
          "id": "66a4e265-16e4-4c86-87f2-b5e4152b7743",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3aa9b812-1ed2-44fa-8ae8-e9ed25b9dc6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54072242-20ac-4c4f-8170-061404889c7e",
        "cursor": {
          "ref": "5225742f-a5f7-45ad-ab89-958535f2ef48",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c2a652ab-6970-41bb-ab5d-d391886a38cb"
        },
        "item": {
          "id": "54072242-20ac-4c4f-8170-061404889c7e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4404452d-4515-42e4-a2d7-d7bf08782c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ff6f10-1321-4808-904d-ea0c0c1cb80b",
        "cursor": {
          "ref": "94e5d349-83ec-449d-8fa4-79001c1ada4e",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "bc70d54a-9b2c-4cf5-959f-4beeab00fa52"
        },
        "item": {
          "id": "e0ff6f10-1321-4808-904d-ea0c0c1cb80b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "095a5d7a-2c9c-4591-81c2-b389e6ec130d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d854aac-628b-4cce-b7e8-a928075a75fd",
        "cursor": {
          "ref": "6d6ff822-b04d-488c-9d6b-c1edccd50e77",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9cd48930-57de-4510-ba83-abbe0863822a"
        },
        "item": {
          "id": "0d854aac-628b-4cce-b7e8-a928075a75fd",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "84c8e57c-5bcd-4118-945c-1eb4437e7488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fed1c8-a5de-4d37-ae17-933c9648c500",
        "cursor": {
          "ref": "cfb801ed-cca0-452e-9cd6-be9fd0fca1c4",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "01a4dd0e-24c3-464a-a97f-bf121ed3bc56"
        },
        "item": {
          "id": "b6fed1c8-a5de-4d37-ae17-933c9648c500",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c4a02913-9376-4f82-bc1b-9d0afa04ec00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395a980f-916f-4856-a85a-e33758fcd1e1",
        "cursor": {
          "ref": "96143b2a-c34b-448d-9e3d-b66b8a1674ce",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9bc7d6ea-ae8f-4684-b409-3e3486267ba0"
        },
        "item": {
          "id": "395a980f-916f-4856-a85a-e33758fcd1e1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f0d0445e-6e3a-4cd3-b2be-b1aee68e73cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f39297-5cdc-46a3-804e-f32b52f264f9",
        "cursor": {
          "ref": "8ef74dea-94bd-4d8f-9056-2137660f3851",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e0e8e7e5-b8e5-4451-9cf9-8dfcec116076"
        },
        "item": {
          "id": "e4f39297-5cdc-46a3-804e-f32b52f264f9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "61158d7f-0f8a-40b9-b7d3-7aa8e1b7d558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04cd7988-5390-4b6a-8b0c-77d0469e1d5e",
        "cursor": {
          "ref": "0d26327a-f90d-462e-bbe3-a87583da7523",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "db0ada02-abba-4a0f-b472-7510ffffc107"
        },
        "item": {
          "id": "04cd7988-5390-4b6a-8b0c-77d0469e1d5e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "84bb3492-744b-451f-9242-dfb4f5e8048b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ee6e38-9433-420d-b89f-2cfb1b056952",
        "cursor": {
          "ref": "edbec91a-cd15-4579-b6b5-e39528ce4fca",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "facc659b-c28c-484b-bd46-b2b7175439bd"
        },
        "item": {
          "id": "c7ee6e38-9433-420d-b89f-2cfb1b056952",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6b9d9e65-f2e8-494a-b7c1-c9b3442d7e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a305be-558f-4397-b662-88c329449114",
        "cursor": {
          "ref": "ef568b28-b45a-4bc4-8960-161d575653a1",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5e40ce4b-1ebe-4c0a-b736-5f78b8f8ced6"
        },
        "item": {
          "id": "33a305be-558f-4397-b662-88c329449114",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8ade214d-3728-47db-a95a-dea84ede9ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1516c7-0fe2-4edf-ac82-eee88d5a6d9d",
        "cursor": {
          "ref": "a871250c-8275-4ab1-bdc2-04f102d8faa4",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "974ba34c-d46d-4b7d-bad3-044d85d54a3d"
        },
        "item": {
          "id": "2f1516c7-0fe2-4edf-ac82-eee88d5a6d9d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "51c27ba8-8b57-4d10-8cf6-a6e7d147f0c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a94241-b160-471c-9e7a-d0d43affa684",
        "cursor": {
          "ref": "66a1df49-5f1b-461c-bdf0-5328f2cc7d63",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "458f43f9-4457-4ebb-b768-d801cd36926d"
        },
        "item": {
          "id": "b5a94241-b160-471c-9e7a-d0d43affa684",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b200dc1a-11cf-45fa-bc9a-da8270517e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc0b119-cce5-49e1-9342-9e2cd1ed91d2",
        "cursor": {
          "ref": "77c98768-442f-4452-9583-ae2d41ebc725",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f185cc78-c740-49de-a4a4-5d5254662122"
        },
        "item": {
          "id": "7bc0b119-cce5-49e1-9342-9e2cd1ed91d2",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "779b3621-8eb9-488e-b7f8-5b0444b8cabf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5281a7e-0932-4bd5-8365-aa9762ab9b05",
        "cursor": {
          "ref": "49b6aa0d-8c0f-48f6-92f6-0557ac44e4ae",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "694c5f17-0343-4eef-a587-568ac4942232"
        },
        "item": {
          "id": "a5281a7e-0932-4bd5-8365-aa9762ab9b05",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2b13a6f5-49cf-439a-a238-a29b2c9b72d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e8a348-d320-41e7-a513-ea8fc0baefd2",
        "cursor": {
          "ref": "584c7f3a-517b-4eef-b965-69922a982830",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7ed04b36-53b3-415f-aacb-861e73bf185c"
        },
        "item": {
          "id": "17e8a348-d320-41e7-a513-ea8fc0baefd2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "abd84dec-16aa-4484-b65f-490b454c0852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8650eafc-252d-4711-b769-88588e0f88cb",
        "cursor": {
          "ref": "7ee72153-a69a-48ff-9887-ad35fa6347d6",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "13a9b2b7-1ed9-49eb-81ca-3d00b58f46cc"
        },
        "item": {
          "id": "8650eafc-252d-4711-b769-88588e0f88cb",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6ef9a6ea-a7d2-4fb6-b03a-7a510d26377b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e76472-cbb4-4114-b153-c0b6d41ad4ca",
        "cursor": {
          "ref": "eca22afc-8284-4c89-b5a4-66c6456efe5a",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ef85bb8d-4d9f-46e7-9628-0cac49dfb382"
        },
        "item": {
          "id": "c3e76472-cbb4-4114-b153-c0b6d41ad4ca",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "745f973a-93ae-4ac3-8acd-0d5476129fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f80d9f-8429-4e47-9fed-469e2ee62c0c",
        "cursor": {
          "ref": "e4f22235-e2e3-4d39-b7f0-f20f522ebc3a",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ca5721b7-cdc7-4171-a30c-fa852263f4f2"
        },
        "item": {
          "id": "29f80d9f-8429-4e47-9fed-469e2ee62c0c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "02f936a8-6df1-489b-a97f-07eb2c7be6c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6e5ff3-b70a-4a32-8ec4-1929f18d2738",
        "cursor": {
          "ref": "08251879-d382-47cc-a6fa-5d269bae5eea",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "aac02d1e-eafb-4327-b153-6b7e0057294b"
        },
        "item": {
          "id": "3c6e5ff3-b70a-4a32-8ec4-1929f18d2738",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3d7b9687-072c-4c7d-ace7-328cb8a77806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5943757-cc8e-460f-a108-e77f8d5d7bd0",
        "cursor": {
          "ref": "325d0c89-3c97-471f-878e-57bd20097040",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "39ba0b5a-847e-4265-a10f-9be4b416d7f3"
        },
        "item": {
          "id": "a5943757-cc8e-460f-a108-e77f8d5d7bd0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4ba201a2-3f21-4d9e-a109-5cdcee4ca9d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48862b7c-ef77-46f8-a794-9a264c52efc5",
        "cursor": {
          "ref": "649de5a8-2452-4f17-afb7-1fe5ddfe4376",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a1829d19-972c-4c00-902e-38bc746f3870"
        },
        "item": {
          "id": "48862b7c-ef77-46f8-a794-9a264c52efc5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "af7955c1-5c2f-4548-8f79-6fc4bd8a0639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3d7eb8-4e6e-4699-ac37-eb5622d31c8e",
        "cursor": {
          "ref": "f8a0404f-edbd-48d0-943b-f24a2eb40d15",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "19a62571-44fc-4c2f-adb6-31d10e5ccca4"
        },
        "item": {
          "id": "9c3d7eb8-4e6e-4699-ac37-eb5622d31c8e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c5c5f5b0-6abc-41d7-a443-90a76ee03f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85df81d6-1c70-45e9-8988-5080d941c06c",
        "cursor": {
          "ref": "232efe3e-2fff-4741-bb38-e9cf11588687",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f9404d3b-479b-4342-8c5b-b7fd6c00f29f"
        },
        "item": {
          "id": "85df81d6-1c70-45e9-8988-5080d941c06c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d31b2897-c68c-4df1-a29f-18a60772b572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3113a2b-a288-4bb4-8d39-8575aedf1613",
        "cursor": {
          "ref": "5b1c9124-4036-46cc-ae63-450a330ee25d",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d8708a90-1206-430b-b513-b2c0980ce7d2"
        },
        "item": {
          "id": "c3113a2b-a288-4bb4-8d39-8575aedf1613",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "84be07d3-a90d-437a-b16d-029280fbe295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3425d39a-4a5f-4f65-b736-cbf6b78dbd9b",
        "cursor": {
          "ref": "8d9c42e1-e289-4315-a8ab-fcf35aedcc7c",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4b2e7248-e2f7-4a43-b998-5273668b749c"
        },
        "item": {
          "id": "3425d39a-4a5f-4f65-b736-cbf6b78dbd9b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "28bd2fc0-b9ff-4d1d-a8be-d4a73d3498c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f38349-9360-4621-938c-1d3cf17a52f7",
        "cursor": {
          "ref": "0f9b0037-ca4e-4eee-adff-8bc2011ffa1d",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1a0cfbec-b83e-471d-8d63-9694605610be"
        },
        "item": {
          "id": "39f38349-9360-4621-938c-1d3cf17a52f7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4f87e74f-c393-4e0d-8f83-88517cc2aa3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab15e188-05f2-4ca9-bfa1-9e38106ad1ac",
        "cursor": {
          "ref": "44261234-10de-40b3-a431-b471122c41bf",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "bbd2de2a-0bca-49bf-9f24-18a509e1cbb7"
        },
        "item": {
          "id": "ab15e188-05f2-4ca9-bfa1-9e38106ad1ac",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2c7afc4a-5622-4e72-a00b-462d8f89aa79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a92c6a47-ab07-428e-85d0-b472e5252725",
        "cursor": {
          "ref": "6bb2e95b-9c19-4595-8b69-e6bf7a39339b",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "756267ba-3775-487e-ae11-93bc34afec98"
        },
        "item": {
          "id": "a92c6a47-ab07-428e-85d0-b472e5252725",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "42194395-e474-4644-adfe-20dba2a456d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7d5b94-4e3f-4d4a-8cb0-2a94c81013a6",
        "cursor": {
          "ref": "c954abd7-41bf-48eb-b7d0-901967e94085",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7edfbdf6-5806-4365-8db8-3dcbedd4d99f"
        },
        "item": {
          "id": "ec7d5b94-4e3f-4d4a-8cb0-2a94c81013a6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bf8952c1-c77a-4f04-91fc-e67f3337b706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3f46b4-b4ba-4b7e-b634-d16b27662e2c",
        "cursor": {
          "ref": "a2b3618e-dd4c-4b76-b467-93e78dfc06c7",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1e9762b0-d268-4637-b967-4e1bc7bc8b8e"
        },
        "item": {
          "id": "1b3f46b4-b4ba-4b7e-b634-d16b27662e2c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "90fc9a90-70a5-4836-8a0b-abaed03556f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbfe351f-13fd-4e5a-9143-a44b6ff4a8d1",
        "cursor": {
          "ref": "3abdaf79-26f4-470d-836b-2a54e3be8cad",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "66d3859b-89da-4f3c-8425-cc00f072441f"
        },
        "item": {
          "id": "bbfe351f-13fd-4e5a-9143-a44b6ff4a8d1",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d07e1574-d531-42fc-953d-44f330330995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41dbce8d-525d-4eea-a387-645e80274af0",
        "cursor": {
          "ref": "7ad3b76d-c3f0-4ea3-8ad5-0dd252a40fbc",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a58787c3-3f56-47f1-b1d7-253b8f8f518c"
        },
        "item": {
          "id": "41dbce8d-525d-4eea-a387-645e80274af0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4ba6854c-c13a-4fbd-b721-6706711c51e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be946c7-476f-4ee1-8604-351e3c1b5cfc",
        "cursor": {
          "ref": "19488ab2-0f16-4166-9808-ffe8e0c0f825",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3ff30e70-a634-4282-a49b-07ac4b8e402c"
        },
        "item": {
          "id": "3be946c7-476f-4ee1-8604-351e3c1b5cfc",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "13d1c311-e563-4f3a-b602-8025bbd3c775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b8ff56-d2a9-474d-8f0e-63de0e57a209",
        "cursor": {
          "ref": "238434d7-45fd-4a0f-9b4d-63a85b8e5ebd",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a7a478df-7d07-4e2f-a22f-1ad467f162e7"
        },
        "item": {
          "id": "12b8ff56-d2a9-474d-8f0e-63de0e57a209",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "52aaa2be-0b14-4aa0-aa4e-995428518608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8979ceb8-6d5d-486f-8074-3b2d8ce25c62",
        "cursor": {
          "ref": "b7db39b2-957c-4dd4-b4eb-70f797dac063",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "478fa72d-b44a-416b-a6b3-1fa8b2125059"
        },
        "item": {
          "id": "8979ceb8-6d5d-486f-8074-3b2d8ce25c62",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7f7ff870-f43d-413b-88e9-966be42d476d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78778bbb-c89d-4363-8d64-de198f7b44b8",
        "cursor": {
          "ref": "fae51290-301d-4d56-907a-66e2840d0437",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "2554e050-048f-4304-969d-68c18593959a"
        },
        "item": {
          "id": "78778bbb-c89d-4363-8d64-de198f7b44b8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "cbe9a345-a820-4db9-abc1-8a74d5e7eb81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42894205-a587-401f-959a-bf3fe03fa83b",
        "cursor": {
          "ref": "b31f2ed9-696a-4686-9a2d-40a44b474ee0",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "543c45e3-f078-46ca-a405-ad8d6e82be33"
        },
        "item": {
          "id": "42894205-a587-401f-959a-bf3fe03fa83b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5615970f-cd5e-4227-bcb1-48a1917d95f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed5dbd79-b6a0-4297-9ceb-7e8c6004f38e",
        "cursor": {
          "ref": "a45ea9df-9070-4dd8-82b7-0df492b74b33",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7d8e1e12-71d1-45f0-b398-cb7189f54a96"
        },
        "item": {
          "id": "ed5dbd79-b6a0-4297-9ceb-7e8c6004f38e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "51874b0c-9c7c-4653-99c9-343c42fa8302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9beef26-66e4-443e-9103-1e4fe7f3b016",
        "cursor": {
          "ref": "54ae00c1-98f6-4d00-abf9-72747d8c52f0",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "99b6864a-0598-423e-ace5-ca5193728434"
        },
        "item": {
          "id": "e9beef26-66e4-443e-9103-1e4fe7f3b016",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2920db44-55c4-4b8f-8efc-da71f23952ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33b3f18-dca7-4cf5-a6ae-be30dddfc7be",
        "cursor": {
          "ref": "d1bba447-b3cf-40c1-abbe-3b3e744e4730",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f2cfe9f3-9346-4b9f-aeee-a30dce8a8e97"
        },
        "item": {
          "id": "f33b3f18-dca7-4cf5-a6ae-be30dddfc7be",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "453a20ed-59c2-4866-86ab-17175450ef8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ce17b1-e8a6-424f-b720-4aa084e5b832",
        "cursor": {
          "ref": "b39968cc-66ba-4477-8659-efd7214ae8ee",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "72e44bf2-4e35-4826-9c1c-356097a833af"
        },
        "item": {
          "id": "84ce17b1-e8a6-424f-b720-4aa084e5b832",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0a94bba9-a08f-4a9d-beb3-233afdb3f60e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb000641-64a1-4460-8164-b16df1eb5a2e",
        "cursor": {
          "ref": "68e22593-d7ac-479d-8aa4-04cd9863f843",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0c2db0c0-7357-442c-8c96-d3ebdfb4d2f3"
        },
        "item": {
          "id": "bb000641-64a1-4460-8164-b16df1eb5a2e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "62981ed7-4cc3-4008-be08-906ad0bd3d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5145b0a-76a6-4718-9d1a-18e48598cd4f",
        "cursor": {
          "ref": "e7f1e537-61e8-4b87-a0b8-8aadae2e7505",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "44e2a1ca-3861-42da-bc70-c3a13a28cf55"
        },
        "item": {
          "id": "a5145b0a-76a6-4718-9d1a-18e48598cd4f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cfc247ac-3e91-453f-8329-ada0c05f6dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac46c7c7-ac6b-4060-a442-8a4822fad24b",
        "cursor": {
          "ref": "74293308-de4c-4b8d-9ced-93396087ddfc",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c7715e0a-f283-46af-a065-40c2c5bc7024"
        },
        "item": {
          "id": "ac46c7c7-ac6b-4060-a442-8a4822fad24b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "622048f4-1f49-45c4-997a-9ffe7cae8b51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99d2f73-3706-478f-83e9-76f25548b863",
        "cursor": {
          "ref": "ee7b129e-1731-437b-9e60-d0f69b29de94",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "95963237-9d89-431f-9972-2cdcd0914c9b"
        },
        "item": {
          "id": "f99d2f73-3706-478f-83e9-76f25548b863",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b54bdef0-c191-4156-9a00-95b9072a08b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f7e7e1-bd4f-4f40-81e8-5c10cbe4ef58",
        "cursor": {
          "ref": "ad844291-b112-4c8f-b158-f911d1ab6d07",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cc72aa4a-bb91-414a-8c65-788689c44028"
        },
        "item": {
          "id": "d4f7e7e1-bd4f-4f40-81e8-5c10cbe4ef58",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "56691e7b-aa31-491a-afae-63ed726cc91a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275ec7c0-9bfa-48ce-825f-2d53a2f6d30c",
        "cursor": {
          "ref": "8f91f457-6fbf-4375-8133-ff898ce07ab0",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6fb4c925-d304-41b4-87f8-dea537beeb17"
        },
        "item": {
          "id": "275ec7c0-9bfa-48ce-825f-2d53a2f6d30c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2462b92c-f39c-4fb1-aaeb-50f19e169db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474007bc-327a-405d-a8cb-b8b38d4b7fd1",
        "cursor": {
          "ref": "894f4b47-0ab2-459a-922a-3437db2df76a",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "71f970e3-7266-4e1b-98f6-4126334f9fd4"
        },
        "item": {
          "id": "474007bc-327a-405d-a8cb-b8b38d4b7fd1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "98a024da-f7e3-4036-ac6d-a37fb0524962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b741a1-36e0-4e4b-af59-51fd406e3c6d",
        "cursor": {
          "ref": "d9ce9a4b-c9e4-4670-965b-a69f3bad10a1",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "60d76b0b-27cd-4013-9971-d7f91f4e49d7"
        },
        "item": {
          "id": "55b741a1-36e0-4e4b-af59-51fd406e3c6d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5ee3b9ef-c869-4048-bc0b-8c15402c0e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4992aa8f-335c-4813-98c1-447b36a9fcd0",
        "cursor": {
          "ref": "7c547ad1-54af-4d53-8187-85fcf8b050cd",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fb967cb8-8c7d-4e72-9234-88be78eea7c6"
        },
        "item": {
          "id": "4992aa8f-335c-4813-98c1-447b36a9fcd0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1b6b21eb-e45f-49d2-b46d-6a4be2798029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f433c3d9-d6b4-4062-a0a5-44214c9909ec",
        "cursor": {
          "ref": "c459b484-81c0-4994-a67a-8bedc516ab16",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "75a50279-2870-4a55-a1ca-c55f4edd090e"
        },
        "item": {
          "id": "f433c3d9-d6b4-4062-a0a5-44214c9909ec",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4b0c4551-9446-463b-90e1-42b2ad1ea032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d2f64e-fa56-4c33-9aca-79db8a6592cd",
        "cursor": {
          "ref": "47baa896-f0cf-489f-b5cc-c269159861ef",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5caa203b-64c9-429c-97b8-b03b6c4811cf"
        },
        "item": {
          "id": "a4d2f64e-fa56-4c33-9aca-79db8a6592cd",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1339d95e-50fc-489e-84b2-4c106c96094b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea932cf-75db-425c-99e3-1602dee2b9f8",
        "cursor": {
          "ref": "a261f268-77ba-452a-8143-50ff127d4aa5",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a627aa74-cc6c-4cf2-85f2-a85a72034657"
        },
        "item": {
          "id": "2ea932cf-75db-425c-99e3-1602dee2b9f8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4664c4c1-3bfb-4ac8-ac04-6712b8607fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a152cbb2-c41d-439f-90d6-7d540e7ada20",
        "cursor": {
          "ref": "43e7ebcc-2866-42b4-a688-e7349bd1f304",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "48c01414-38ea-4223-b3e3-b901d53079d2"
        },
        "item": {
          "id": "a152cbb2-c41d-439f-90d6-7d540e7ada20",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8f23a638-04e4-4056-bae2-61eb949002cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbfbdb80-52f0-4994-9f2e-dd4be3af097c",
        "cursor": {
          "ref": "7a3d6685-7fee-4d4b-97d3-b029be873f71",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fb2ac744-0a34-487f-b195-e4a607efa6d6"
        },
        "item": {
          "id": "cbfbdb80-52f0-4994-9f2e-dd4be3af097c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "276bc05d-3e86-4b98-bf8b-ad400971aaf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc947f07-582e-4693-9869-02fd41ea5732",
        "cursor": {
          "ref": "088e1f76-a39e-4d8c-84ab-d1e33e201cdf",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a1e369af-afb9-48bb-ab78-99c62257726b"
        },
        "item": {
          "id": "fc947f07-582e-4693-9869-02fd41ea5732",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d6fbece9-1eaa-462d-80aa-916602d170a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8bf447d-7692-49b9-9bab-75ff2f498cad",
        "cursor": {
          "ref": "40158136-2edc-4f49-b07f-a54f5e7bfecd",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3656b18f-8bbe-4eab-b070-fca7509db6f3"
        },
        "item": {
          "id": "a8bf447d-7692-49b9-9bab-75ff2f498cad",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d884d655-b1e9-43c8-ad6d-3cfce854653f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57a8e4c-a224-4d4d-a04f-821e4e928624",
        "cursor": {
          "ref": "6ebabaf7-767d-45a1-9d93-7db62780ece8",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ec79379e-d46d-406d-8e67-560847706649"
        },
        "item": {
          "id": "d57a8e4c-a224-4d4d-a04f-821e4e928624",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "2d6e660f-f56b-44be-b5b6-ccfe9a963f7e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752d884b-6170-445f-bc8b-f1ea9ed9ff11",
        "cursor": {
          "ref": "e42623c5-8cd2-4f7e-87e0-9b9164c6c561",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "66f756ff-2d2f-4994-9bd6-0cb40b9c07ab"
        },
        "item": {
          "id": "752d884b-6170-445f-bc8b-f1ea9ed9ff11",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "27d362ce-1d42-4bf8-9254-18c6590abf06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:242)"
            }
          }
        ]
      },
      {
        "id": "e72884f5-f3a4-463f-9c9b-12dd0a86ebd5",
        "cursor": {
          "ref": "c979c469-154d-4ee4-848e-ae86ee84ad43",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7f433c6c-ab18-42cc-b5de-5efc593f917c"
        },
        "item": {
          "id": "e72884f5-f3a4-463f-9c9b-12dd0a86ebd5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a1e93767-f7aa-4b56-b952-32bf2e94e5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "409e212d-8e68-429e-8694-6b64a3d02ea1",
        "cursor": {
          "ref": "be3c35bd-6209-489a-9fcd-d43d75572937",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "dd86b216-8c89-4dea-b1e4-24f5bacfd49c"
        },
        "item": {
          "id": "409e212d-8e68-429e-8694-6b64a3d02ea1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "574a8220-a146-445b-b38b-7fb780685224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "3f0bc7aa-d2fa-4d7e-a3e5-8cf22f8b684f",
        "cursor": {
          "ref": "63eeeacc-4da4-4dc6-b69d-49b1ab501000",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "59f87e1e-bc86-4ca5-bb66-3e1864f8ff69"
        },
        "item": {
          "id": "3f0bc7aa-d2fa-4d7e-a3e5-8cf22f8b684f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b5c41ced-a927-4769-a508-2facf5d94a01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f0bc7aa-d2fa-4d7e-a3e5-8cf22f8b684f",
        "cursor": {
          "ref": "63eeeacc-4da4-4dc6-b69d-49b1ab501000",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "59f87e1e-bc86-4ca5-bb66-3e1864f8ff69"
        },
        "item": {
          "id": "3f0bc7aa-d2fa-4d7e-a3e5-8cf22f8b684f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b5c41ced-a927-4769-a508-2facf5d94a01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f0bc7aa-d2fa-4d7e-a3e5-8cf22f8b684f",
        "cursor": {
          "ref": "63eeeacc-4da4-4dc6-b69d-49b1ab501000",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "59f87e1e-bc86-4ca5-bb66-3e1864f8ff69"
        },
        "item": {
          "id": "3f0bc7aa-d2fa-4d7e-a3e5-8cf22f8b684f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b5c41ced-a927-4769-a508-2facf5d94a01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cddd1b5-9647-4bf9-b4d1-24c4b58d6e5e",
        "cursor": {
          "ref": "3d9b72d4-988c-4cf0-9d78-72399ceb5c2d",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d5132c75-00d2-44a2-a636-fab9deda965f"
        },
        "item": {
          "id": "5cddd1b5-9647-4bf9-b4d1-24c4b58d6e5e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "cec10685-1244-49b3-8b03-d57be7d1c2d1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74afce3a-8d02-41d1-bc5b-525d1d44b3ab",
        "cursor": {
          "ref": "94634f23-92e5-4877-9f12-67d8e0543abe",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "47629f8b-90d8-4780-8a34-9576f0f8f711"
        },
        "item": {
          "id": "74afce3a-8d02-41d1-bc5b-525d1d44b3ab",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "30a2ac05-b35c-435a-a026-6b624c19b068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "74afce3a-8d02-41d1-bc5b-525d1d44b3ab",
        "cursor": {
          "ref": "94634f23-92e5-4877-9f12-67d8e0543abe",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "47629f8b-90d8-4780-8a34-9576f0f8f711"
        },
        "item": {
          "id": "74afce3a-8d02-41d1-bc5b-525d1d44b3ab",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "30a2ac05-b35c-435a-a026-6b624c19b068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "97e0873f-9205-4a33-86bf-2a59f34e4225",
        "cursor": {
          "ref": "c48d709b-e415-4ca7-b442-b20644a291a8",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bf684cd5-4982-4abb-bd76-745315d45855"
        },
        "item": {
          "id": "97e0873f-9205-4a33-86bf-2a59f34e4225",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "11eb1e3a-e3f4-4c76-9afb-49a8546f5ec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9a944401-90ee-4be6-9821-3838f88158a8",
        "cursor": {
          "ref": "6e3e3817-7234-46b7-b524-ee3ede1e4abc",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4c98a6d0-a54b-4f41-a61d-aa85904476bb"
        },
        "item": {
          "id": "9a944401-90ee-4be6-9821-3838f88158a8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "78402ff6-6823-4013-b8f4-a7041e93ddee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "9a944401-90ee-4be6-9821-3838f88158a8",
        "cursor": {
          "ref": "6e3e3817-7234-46b7-b524-ee3ede1e4abc",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4c98a6d0-a54b-4f41-a61d-aa85904476bb"
        },
        "item": {
          "id": "9a944401-90ee-4be6-9821-3838f88158a8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "78402ff6-6823-4013-b8f4-a7041e93ddee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "28f7ac1f-cab5-44d3-96e5-5fec3111f644",
        "cursor": {
          "ref": "4ce43c36-05c3-4c10-8346-84fe66903c18",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6c16774e-fdeb-4c46-a35d-3c6387fd0379"
        },
        "item": {
          "id": "28f7ac1f-cab5-44d3-96e5-5fec3111f644",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "ec043c61-da95-4c70-aff2-3ac5e3c67091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}