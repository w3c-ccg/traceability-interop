{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f2cebf3b-439d-466a-a5ad-5a79cbe7e3bb",
        "name": "Clear Cache",
        "item": [
          {
            "id": "39b513d5-3705-4e4e-96e1-cc8f45f8e9d5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "61eaffd1-90b3-4edb-85e6-af7020800fcc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3a224689-e4f6-4201-93c3-f4a83ccb358f"
                }
              }
            ]
          },
          {
            "id": "e93e4005-14d2-4188-97d4-6ade950ea84f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "451856c8-1ddb-42f1-9bfe-3fe255b7c74f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6268a0af-d6d2-49cf-9164-922e9966abac"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cd91e585-9dad-42e1-bffa-80f68d3bc7e7",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c887125a-f799-4b3e-bd52-5e8f80fb1e9e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6580c223-b1c9-4511-adea-b12b82be4745",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbb42403-ca32-4724-8096-c0c0b1741343",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f7126401-041b-4eca-bef2-bdf0a0f36ea1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "07993080-fc37-49df-9031-ca7ce71b9b79",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3fcdedb6-7388-4d92-82f9-25763d6d177d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2d9a474f-0f54-439c-b54a-c4636a87cc2d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7e2973c8-f78a-4883-83cc-6c9b2adce620"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4a674c5-ffcd-4fee-b9b3-9e2a9cfe1adf",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "894a75eb-6621-49f9-9f63-341532da76f8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96e83a96-dfa3-421a-831e-c74f5f1b9db7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "682f6e37-6fa5-4823-9573-a96a484ea426"
            }
          }
        ]
      },
      {
        "id": "2b07544c-7b21-4e0f-b7c7-24995a238559",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c7a6de0e-e782-4b27-a1b9-721d2c17a82c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "440a00e9-795d-4cac-bc88-0a58b5eca35b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e76239e8-7227-43c7-9b89-a6954b87c577",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bdcbdad-b316-480d-a071-9d95e5d8a4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd208bcb-1bc3-4549-8eb6-e3684538b600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146e344b-de7c-4f8c-9826-f5ca3a24de0e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e87da93-c533-4089-8735-6830f415e721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d823f7b-728b-4410-94a1-22336c69c47f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758372fa-5cc8-4e7e-8b4b-eb12039d7206",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2c6e92-7073-414d-b4a2-c2a871ebee98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7e51b20-9f48-46ff-a713-743a11ba8401"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3948c591-6661-40c7-9a76-956a5c14c0ef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cf16ae34-6368-49fb-b612-b3924d2760d1",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87beca5-7264-4c43-8d29-8ed9711124ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e03107c8-c770-43f7-a0c6-13b64557dfb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f9bceb-0ce1-4e41-97ad-71411903862a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90850936-d72d-44b5-872a-230b9de7f76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "408a32c1-ef32-462e-a3f2-d448e0204ed2",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1935efef-82d7-4fe2-a2a2-63f4f97a6e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77c8ca60-fff8-4e7d-8d1f-e6de400e53fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ee5a44-dfba-47db-9248-c66773127f31",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "4ec032a6-fe90-4545-84af-add59de6a0c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "813d6acd-5f49-42d8-9b6d-9d31ea5051a9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8102bf9d-0b93-461e-a1bc-2f758f843ade",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2e40392-94ea-4fe1-ab46-67831a39d82c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "184b19e2-b103-4bd5-b727-b011a81d5bd8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed6be037-88bf-4a95-b274-cb1d3c45f4e3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "182540f1-64db-47f8-81a0-e0efaf24027a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "71c9b854-4c23-4f75-9f07-db3c1de8d3de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94bb2358-78fb-4dce-b04e-4cd33549ede3"
            }
          }
        ]
      },
      {
        "id": "1df83af1-14db-4b8f-995e-709994de5e70",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3f606957-9131-4396-99c9-a54069c19fd7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "960f70c1-38fe-474a-a57f-760cfe36b138",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4ab4d26d-ecf9-4066-9bcd-09bf8d5c255a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b4d5d5-a6d0-41ef-8e63-2288fafdbda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1b6cfa0-f569-45ff-b111-1b419cd373c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d581cef1-b612-4e25-9db8-e4378be98a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5009626-5ee6-42ec-a195-73232164beae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3218bf99-4794-414b-b637-df495d10d5ba",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b43b6d-6a4e-485b-a209-6de37ae06105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dfaad90-04ed-4ad8-b5b7-1ee9489e8bd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca9a497-bbfb-40f1-91c5-5a50cae6ca0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6e22c6b-471e-4c48-a4b6-6ca6e263f67f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3818a4-8420-4115-bfa3-06f727b91972",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded539a2-b985-43dd-ae92-dd2e52a1cea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42622739-9c12-4cc3-9bf6-6704e50e1b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733b00c1-251f-40f8-ad24-d0041e60c1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91e0eb16-9ce4-48a7-a2fb-ad5d65c8c0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1a675a-8181-4f67-85da-3054ab071120",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab1cd40-3d48-48ba-aedb-86f64dabd056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb00035e-3d55-4a79-9d13-0a07256be048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fb7bb4-e3da-482d-a22f-36b6bd2c4feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99202635-3f94-4ff8-a540-f25ae3566674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a3126d-cdaf-4869-b79f-2fb58fd7de3b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b67403-d7fe-4d0c-a847-b9094c928904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "935181ce-3c2f-4c63-ac18-4d60f8df42a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874a432f-b3bd-4b45-9062-a361bcad9844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1613711d-8cb8-48d5-8729-97e1cc6c538b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e610ce58-fc47-4f11-8399-19ba795caf20",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9fca90d-c0be-47b6-9b4e-fb35c2fe4a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a5bc006-447d-4a9b-a915-fc1e7304f6fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68cb105-7198-485b-815b-393c3576325e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0637102-f60c-4a3d-b19b-d08669e435ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1eed42-9217-4b5d-94b9-4adabc69479c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7acaedc5-b333-44d2-813d-83a489d6c5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d8e4cc-f9c1-4387-b4c5-2afad55ca0d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e7a21c-b46f-4cc6-98dd-47dd584f0961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "960e7cea-b89c-46e6-ba6b-224fffc19e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8818465-a793-4336-a69e-6575bf9f0295",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b86b68-7766-4d38-aea8-f4c27f2564ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8231a93f-ddaa-4601-a201-65db80785444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee83f64-81e6-4f5a-97b4-b10e907cee64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71492801-8d6d-494d-9ae2-94a4a4cb08c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cbcfabb-27e8-4a95-bae2-dac0801fddc5",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3780a2-3ac9-492c-a3e0-98488177bc5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e3b34dd-722b-486d-b42d-8a9ac06518a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ceeb38-d766-4274-b687-f64e63fb83a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2264e0ec-3e47-42cc-8bdd-dfa325281124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7130cc8-87d4-48d7-8b06-640c58a5f618",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6448a46-0293-47cd-a207-18e325c0f7ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95021df8-02c6-44c7-8442-0740d9376df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed873ea4-9046-4f6a-8400-86bb8beeb927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9bf3b553-a8d8-4e82-a1f7-de02af935ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38b84fc-e3ac-4be4-aeea-132c582e94cd",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "559ac491-fdbf-46ed-824f-d63a735448f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b9d9ce-4d76-47c4-88d4-d547e16cc115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a327fa-7096-485a-aa04-a3f3529cf9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a6c1ff3-f4da-492b-8026-389e4c04eeed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054c560e-4510-42dc-a96f-35abfe47f544",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c09d9e-9291-4be4-811c-6a48dc3c9895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5297912-33af-4b7b-ada9-6f5cc00b999a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d92799-b7b0-49ae-ab53-9b6938f9d2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d274567-1a4a-4afd-bdef-be67482bc214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c896f1-ddba-4e86-9514-5134080c7b8a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08cc2f0-aad3-430b-9407-91742bca4e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a58084e-7b8d-4cc8-8d96-3818a91e09d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed7799c-2dc8-4f0c-a8ee-1c503f9fac49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ddbea1a-ca1b-4735-8c55-1bcc55a5c580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1172e487-203f-4418-9192-7a518bb44c36",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "822e8e3a-2ea9-43a9-bc87-005cc073b727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12c73fa9-43cf-4a3e-959e-3cf3087bc3ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22beea24-9eca-42e0-889d-ae9a0ecaaf60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d2017db-90b7-41cb-8cdf-a3f4b36c4e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cef6bd5-e940-4f5f-ab5e-9451ed1076d1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3565fd76-81b3-4c25-abe8-805f7fc10004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b67b490f-093d-4bec-baed-c913c82f821f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34b4ab8-b514-45a2-ab21-5afb99aa87eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbd48944-4b5f-4761-adba-739613cd69da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee1b6be-5b85-4b0c-b49e-a621ad3ffb3d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901ad2df-6768-4f2a-999d-088d599165ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63233da0-72c0-4897-9a9b-4d39ba8f3017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d236eba5-b606-4956-923b-edee038b071f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23e2c658-85b1-44b2-9a1c-e9ee916d366b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb59187b-0c9c-49a5-82dc-7f380c58f2a1",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd4d1d4-f8df-46fe-99f4-2b1128fcc2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6521446-9c3c-4e7f-9180-e3020ce646bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82157ec8-d0c6-4d9e-b331-10890b4bb956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d84b604e-57b5-4709-ba6c-0cc88de34fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc4ef26-2c2e-4009-9bd9-2f81a173e4db",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d524801a-a524-4459-90a3-0c769cdd4d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e96271e8-2b60-410a-a111-f0cc4a766789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34136bb0-07cd-4b40-b275-90951fd10adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d05d6ea-bdfa-404a-96aa-311488813943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838fd2c0-9cf5-477b-8ffd-f34739eb9068",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4680f181-396e-44c2-9624-583022a914da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4e4a26-a279-4df5-ab56-2f816ac2e5e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb84a8e7-1ecd-4911-809b-a8b3186ec10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37a9df17-7941-4c83-88d3-22bb12984835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7654fd-c662-44bb-879e-92d3b7ff22be",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "577f5771-8d77-4f02-9d6e-4f8cb231bac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af08d0d-4caf-4bee-baa4-d6b7e13a856c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "791bb23e-4404-4041-938d-b68ba6cb4fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53393c38-b4d0-4fd1-acaa-77069b3f61d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b06083-c301-44ba-b890-9544a43cefbd",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f00018-aa84-4cd7-a83f-81375865ad73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "864d9143-7d53-40be-8b6d-614a0878968a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56388772-4eca-4685-af03-ce12b0611ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a891871-c147-42f1-a6c0-98de38e00519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161af747-1217-447c-9b94-c2fe5af08c42",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092f4944-f833-4003-a03e-0294bf9c0cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e53bce7b-d32b-4889-ac7b-77e732f861f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2880e5a-07b1-4e47-ab6b-1a8b84337131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af86fa12-ae8f-4f69-baa3-8b7560b584cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b0544b-43a1-41fb-91f8-9eec2f8239bb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d23f03c-21f4-4554-a52b-e27d14f678e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b289adb9-9931-424c-aa79-ce0aee90f80a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2117f44d-69bc-47cd-a950-43e4cdf10907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "16a8d09c-0c24-410d-a588-b813a0b2afb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56d72d3-47bc-497b-b6be-7bdcf0b3403e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f4de38-d72f-46f2-8e55-cde96eae9651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba79bdd-04e0-4e5f-bb3c-dbdf8e1f2446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40662ea2-00d6-4a65-a87a-8525455ad9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a40674a1-f931-4a69-b9dd-28ed538075c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29338d90-6987-4ef1-9702-916ecbf9cf13",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd39b15-e521-40e0-babf-76bce386a226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0485d220-9e8d-4f13-a1b0-e5be7db4caeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489ea1d5-0f29-4e5a-8b10-60fff17e91e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5c38e7-b3ae-417d-aaed-469cb9ab7b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55543f96-a645-4763-bfcd-c071ceba51b9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06e017d-818e-4f73-b651-0262da1f2e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c711ea32-2d00-4701-9d21-b25c9e79d70e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0cec6a7-5594-4abe-9443-78f9b550f23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "70fc9ef0-214a-46d7-b0ff-312395031aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dab2f29-9355-4349-9fa0-9f479e568432",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2383927c-3408-40fa-9c9d-e01b4cad8c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d9c7979-ab46-4c17-9fbd-edc4a9a48a70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7833c626-7b58-4321-91d4-b79ae2a9b977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e45c16d1-2e7a-4d8d-b88a-f05614ab9c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c562096-0e2a-4005-ad07-ae0f50eeb7a8",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7244b8a1-ae6a-4e54-83b7-3104ba0e4b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5a5cf1a-a329-4f7f-a959-5f9e9c7fad37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16bf15c-23d5-4e59-a8f4-da29c5e36056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "021a351f-504c-4682-ab06-bcdc470e9fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef65b5b-b83f-4e2c-a105-b92dd97c11f3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8fac7b-4b2c-436b-a7a3-a5f531ed1044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06be1a5b-9752-455a-8244-2908199c878c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402d1b8d-57e4-4df2-94e6-9b6655b1020f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e64ed226-a0bc-45ff-a76e-e7d3e2af94cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d30f8c-e9a6-4582-8a1f-f13c912a5126",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "308d395d-069a-4b01-b1b8-55bae0ad3137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dac50d88-6fe8-4b96-937d-d1bc493366aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fadd168-a392-4ed5-8ca3-05775f36f18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "82bc2333-5f25-4354-8667-5e433968805c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d560f1-a8d9-4dfc-b7b2-1d315084d210",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00ad185-6fd7-497b-9cbc-030f1cfae791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d3f9cc-6682-4515-9898-8a69f3dafbd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af4d1e7-b214-45e4-85f2-fd9e1b7f07d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e546ce2-1e55-483c-b58e-14f69383d94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7496b0be-0cdc-41a9-811a-4f17085d2db8",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cce601a-875e-4d0f-a1ad-41fbef54d23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "576c5e70-deb0-4946-b6ae-e965b8865247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8675bf80-8bf6-46f3-b521-9f44331621f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d31744f3-ac44-4034-ae83-c5a89f71acc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0090fcc7-b260-446f-964e-39169dacd3a7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71caba01-12ef-4ab5-8791-1e32e42ab1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6ff5780-6a05-49ed-b576-1008febd9fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10370913-0b13-4d7d-a7ad-e4c41ed870fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "196965c3-37dc-4672-a34f-8da3c121915a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec8add5-997d-4b1a-b3fb-afe328efd6c0",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04f03cb-1a0c-4687-8d8e-21bea9612371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05b1cbd1-e86b-449b-bf24-ef5539b5a9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "325bc48a-dd80-401a-9998-aa0fe41e0b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "068d08f2-bf23-4ddb-8a62-aa89c49e0972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f972d4-95e3-417e-bae7-c2f0647feb19",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27a7ed7-0bb9-4e76-96a0-2ca560bc17f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0f0405-a902-4a55-aa64-00fde818781d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0daab688-0d5f-4f40-8529-8ebd8488b85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cc1336fd-e959-4fe2-87da-52ebf116e78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edea0daf-fb2e-4372-872f-22cd22e5ccc6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc03834-9d38-4f83-8118-0e88ebeb6f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5d83582-c3bf-4154-a91a-4e72b5c9bfcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fda47d3-9914-4db9-ad23-dea684ae33cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fba90261-637a-4e7f-8849-64a5d3782479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c011019-3ebf-4061-87ce-7b6bf41f4b98",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bb57a9-fdd1-4706-ba41-02c113166832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a1ce0df-2c55-45dd-9e02-bfc63a2b4618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f13cea-c729-403d-824b-e479569ec9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d4267bc-3466-41b0-9372-5092b259b98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497d0929-441c-4a8a-9e9d-460b04eae29d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6d4168-737d-4d17-bdc0-d80efd645952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f8b4e01-ac1b-4b8b-af12-c34b09258df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0798ce2-fd6b-4a77-9170-ecb4197b47a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a6eec13-ebdb-4090-8d9e-4ce57364b871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ab7f2d-aae0-4e86-8c20-3a9987f01914",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccfe664e-cf51-470c-8b87-ff7cf5e7450f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeaefc86-c289-4bf3-95ba-0350cd27f69e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "747ba68c-c507-4c23-8a37-c5b523d8e28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e3fc368-4847-4d1e-9b19-c717f1da1d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7684fc85-fa65-4333-b97d-d61714931aa1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98054ff6-f285-4078-abe8-d39700e0d5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe05606-e390-4423-a9df-21e3776dbff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e147c8a9-0084-475e-aa87-5130e7d8618c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7602c6f-46ed-47d2-82c9-86ff857935f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29dc8cd8-6435-4780-a782-e49290018623",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62557a16-7c59-49d2-acf7-f2e3ede8874c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e440255-2d53-4068-a713-59f32e5581a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc153643-ec25-4f30-88b0-66ae1e9b4c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2b70067-da2a-42f0-a552-ce5bc21f0b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f795f16-dcc2-43ff-84ab-726ddd5c262d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c99ba4-f255-4083-979e-9089d40f271a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a37ca21c-7668-4153-90b0-d258408c0749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490b6fe7-5679-47ae-a23f-215fb6716689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0a88215d-c73c-4f32-b782-80dce55d10d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ff8a03-1b25-49f2-a923-ef9835a8df13",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fffb0cc-489d-4ecd-8292-b70ba633f3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "947d6349-6bc7-4015-9edc-0123273ad387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e27c60a-f295-4ab0-987e-6dabbe198c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "df976b19-8f49-48fb-81ab-1b8b57a9291a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab07b08b-d5ff-47ed-b2ec-9371e62ef1db",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1bc08f9-80c7-4145-89e5-8550e902ebc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99be668a-7bf8-4da0-a71f-adc648d01d5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f85007-808d-40e2-8501-267944deea1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "819087ce-f73e-4122-b739-cfc99c2b3ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1c4046-b519-44fa-ade5-057edc1b47e4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d45ac40-54e9-4726-807e-fd9f65019b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9194f817-6035-41d1-af11-0b27edf9180f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5d1b76-2389-4044-9b10-4982be969f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b8ce3c-28c6-4bb7-a5f3-60c852f920ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15b8e89-f5a5-4251-ab99-cd1be9b5f608",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c28ea9-9705-4530-ab06-6d1b6a4ab389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e47f352-0295-4c76-ab08-1f3165624a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b0bfa9-9cb0-45e4-86c4-17313e641230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbadbb46-6b03-4878-b402-a44dd18712ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e810ba1-445a-4bdc-8340-50d44b81a62c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4394d09b-0888-4804-88e7-be17f0ea188a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a7d3196-5e2f-4246-90fc-8bc41a5cde1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0645c378-a852-4c93-8149-a5a000bd89fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33ac9b1a-befc-4b10-9346-a6ef7294e1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e11c62-7d7d-4a92-af06-f60dcf224a76",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d226e6-7b77-41a9-9275-624eb6c2c922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14eba568-b411-4edf-b3c6-5025ec4fc5dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9f7147-0156-43bb-928d-1060f316ff94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d705b5f-c287-4528-9507-e30c209f13ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a9eeed-1275-4ac6-88ff-6a224aa8b810",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8caba1f4-4b98-476e-808c-3e177e8bb7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "170ce79e-b307-40d5-809f-562d3c44d3df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5708314b-089c-4cac-822f-ecc79b9cb4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae69fe26-9ca0-49a9-8658-c8dd01ace76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4bd45b6-b1bd-41c0-a1e2-78fdb4738df3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c61edb-5d45-48f0-bac5-c76f5dc44fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1f06b7-d405-4d6d-ae8a-7c31aa1f2f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b9129d-ce2b-4c9d-a3f8-258100173c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "48275eb0-2ee7-488f-a4c8-725c8d0a6865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2991fc-e2e2-4919-8645-9eea9e84b226",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee58356-4b67-41f2-8210-5439109d7619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ca22d1-8c28-4789-a5d2-b263514de327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3108582-a186-41c1-ae82-cd6d5ed6885a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6da48432-fc83-44ea-9e8e-63a13669437d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45db7db2-3c4d-4978-86b3-0e1950147e2e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98d6161-4379-4564-85b1-920f749ca5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deacb340-81ee-4423-91a4-ecaa11e7c604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff2157d-91d1-4357-865c-96b37b269f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c868265-1328-4a0e-a799-36af01bbe5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a31249-f6f1-4a0f-a26b-48021bd39611",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a4fa7c-e63f-4f76-b8e3-96664fa60f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8e8509-5940-4b4d-950b-86beeb9a2595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba0a11f-7689-423f-b5de-8d9c981cbdc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1248d7e2-fc82-4eef-ad91-f3e7595dd700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4373c17e-2989-453a-be4e-88625f422a4f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1329c45f-4c7d-4fbf-aeec-74fc27db9840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6589133c-cd30-487e-9222-f165d0468862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55f5adf-77a5-4f57-88e2-0a9b722b91a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "25e291d8-9d11-49a4-82e4-7c26124537cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fb9289-f7a4-4ce2-b11b-0b3d2975e99a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d5ca5a-9720-482a-8e23-c3089574a4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10aa5a5a-f916-48c7-a9ef-82d76a4e0633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1eb015-96ec-4f2e-b2f0-0d5dbeaa904e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd713784-1535-4291-bc5c-d8bf40243621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d01da5-6d46-4d25-923a-6c1e4f9090fe",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12fc211a-7078-40b3-92fc-85b0a0811663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df815b1-9132-4593-a441-89b9065383d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd89d3e5-fdc6-49d9-8033-faf911fd1e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5be68bdc-3779-4245-b1f8-d5d2ad35da3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b647393f-b1d3-45b3-908a-5ef43902ec17",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb6866a-07c3-47f3-9d4d-08476a7053e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d3cf6d9-d8f3-47f8-9f50-895f5ac72181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16fc204c-44ab-409c-9a39-8a563a7080be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "32f88a24-1496-4fd0-bdd9-6a81825c18af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b562968b-0f0f-4a6a-bea9-10b805a7fbda",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2267c48c-879a-4ab7-bc2d-e2fcc46a9b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4143d7c9-a514-4eda-be04-6d841bb055aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236c4541-ce15-4faf-b832-3b0f6ef63395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ce66068-b42a-471e-8dd5-7f1e68effd4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d392bfdc-0c94-435d-ac0a-f6a832b92d59",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25bd8cf8-fc5f-47fb-a22b-9a580a830f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d8c352-7aa0-41ca-8182-7c8da23e691d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350a6b5e-650e-4fff-b192-1dc8635c6bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac46c7b5-ca5a-469c-aca4-0e5730356eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ffbf9d1-1252-49b5-b5dd-58e41aaa7457",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8232b5c7-b86c-4ca5-8903-aee8cda39cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684fe013-5ddd-414c-b1b5-f686a90202a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d0f95a-4a20-4b79-be24-fc1186de07cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9d943e7-78ea-4f10-a4b3-a4ef85930b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78026bf9-b89b-4eaf-ad28-96cb3301880c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbcc003-b5e5-4818-ac56-189552ab81ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e2f294-ecf5-4638-8225-5d058b32272f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f3459b-7d49-4586-ba59-619a4eed40eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9471b64-f67a-49e4-9185-d7a9adbb3b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f81936b-b42d-4d7a-983e-c1c413e8e8e4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75b6bf0-7bb3-4aaf-9f25-dbc0e276367a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "880ddc7b-756b-4930-9a02-f4c30ace7f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4f4f3c-22f6-48ef-99bf-597c25aca306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "de319b1e-0f32-4296-9bc2-710a3c3d7627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b62ff71-3694-40fb-9cc7-4573602725c5",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5810fdf5-5d17-4da8-832a-85bcf456e347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f1742c6-fb9d-4d94-b21e-2d39cd5a2eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f662b9be-088c-457e-8f8a-c9bf432b2da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f312209f-46b1-49af-9584-a8afb1cbfecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef75255-7df9-456a-9b5d-e79248d3dcbf",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d2bccf-2669-427b-ada6-7af95b63aae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60361ba6-6581-4cb5-ba30-ab63e7fcff3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579c439d-b660-4aff-b62d-45dbdad4afa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52bf9d5d-c573-4d84-a6f8-1918133c5fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "015e9f7b-8190-45b3-bfcc-7734f07cefec",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad00b5c-df40-42f0-9c4a-a637139b9eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d817389-5fb6-4a18-933e-14c7a2c4380e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6cb1bd8-5399-4caa-ab37-9f7d963f7c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f2f93ee-e5e4-4950-a8e2-94d757e7a477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a944c063-4210-4613-88dc-8a67f2690e46",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd95d47-a1db-4b94-aa85-4e2b59f037f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a951fd6a-3e84-48f7-9cfe-83ba2de876e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71e6c5e-7fb3-4846-80a4-1f89732db895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f61a93b6-c208-4304-b091-7610b6372995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395dd367-1bdd-4829-a853-b9b885931457",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5715380-d587-4a00-b30f-6e40f44e1092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee68f94c-44d2-43c9-bb92-bdcb98c4bddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ce5dfc-1b5a-4391-883e-8d0d17022fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5e264b70-22b3-497f-89c1-15740d0739a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61eefd13-de44-438a-a419-07626d499734",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f7621e-6d7f-4449-bf01-60360210fa6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4f4d4f-5105-47a9-9935-46fc952f78f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1c3c27-cfa1-4b3c-a0de-d5c1b2523552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "679ebdfe-a6fe-4b35-a306-44539d7f162e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429aa91b-9ff2-4aa3-9df5-6d4dacbd5b51",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28c46ab-26c0-4c04-93e3-77a2d7026d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e092ff8-c208-47ee-9f1c-4383cf6fe12e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d94ae1b-978d-43ea-b722-74127d0460fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "602ade10-c153-48ed-aa0d-ebee0896b1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def56f59-42e9-46e6-937f-b712de16dcda",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b985620a-d99e-40bf-a05b-1b6bb3ca051e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c09c2a67-4098-4c97-8341-47ad2b0b2240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580b6126-f5af-436f-8d72-2b2218b9557c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c45bd96-5889-4ee1-8d8f-959d78684425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7edd4c5-14dd-4fd6-9088-1b4968efb1e6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c72de8-7b20-4824-97d8-6addc7079c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff2663cd-5c53-4996-836e-6ed4c1401f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d86558f-a905-4f99-bf71-db77a2555ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c07c119a-8fdf-486a-a1b9-8cbc92e87937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758f936f-5703-4777-bf7e-57d0eaed6457",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8dd3429-6733-4c36-ad5f-c3f4a94b4440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bf54df1-42e4-4310-aa8e-103ef3191233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73cf6774-2228-4211-9614-d93ee4ec2d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c88ff3fa-002f-4705-a400-6f394a331307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2fc679-fd28-485e-a72e-de95c8b39322",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "261c9b5d-6ee9-4eb4-852b-31e231f18259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efa04a62-5de5-4789-a2d3-2bd78047de97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3227e4e5-1d3f-4541-8629-6519608af209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00996a70-e92d-41b7-823a-f53d1edafac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725a1af3-9e55-4d29-aa63-5b2837cec28f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbaab96-2e86-4956-b8fa-6463f97a3cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "393cd389-e88d-4e79-96d5-5762b049bd00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba53dd1-2e8d-4855-91d9-de6dcce9f386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b821c19f-8f09-4668-841f-a5c1458d5168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80404850-f612-445d-ac36-dac7cb81d9fe",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1955cd51-2f69-4e3f-9108-49a0a7bd651a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "609f6d7f-aca1-471d-b07d-b2c49bbc71a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7744d25d-241b-4540-b8bf-7e7e7c4fd9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f07985d-bfa9-4737-8b76-8a8542029e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53482289-49a4-4426-bf3d-7c3b8ba795b3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d915bb-89a3-4a5f-b833-093d5b624de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d19c20f-349f-4de8-8859-0e427cc92bee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc4b02c-794e-4206-a1fd-3a688cbae3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f68728de-b122-4bee-92c0-e16f83973c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40905598-24c9-435b-a70c-b655fdde9a88",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f823188e-460d-4e7b-ae1b-ca571178daa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc00625-6ed2-4935-9e60-8977fa5628ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576b05e6-3810-4042-9f79-393783568f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76c47931-c740-419a-8a30-de91a2288f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4234ef1f-6cac-4e70-a25c-9645623f1829",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92de2d6b-8825-4435-80ae-ffb5136c19d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0124d47c-556a-4642-8a66-e9b9f5018b7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85c25df-b56c-4ec9-9e1f-3536cea79de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff79173c-c121-4950-87a6-b5c1091433bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da036475-3530-4422-b517-f5da00a5dc49",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc1e198-43c6-4a30-91ed-de33511e69e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b3a901-8bd3-41ce-8f8b-d14458cffd7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e211023b-f154-4df4-9f59-c87b815ecca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f156117-b852-474d-8353-457ab136dc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35b510b-6809-4b25-8a85-592424f03d51",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a783c3ab-ad7a-4a43-8678-5a85fcb4b731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d5f664a-8c4f-4a48-9ada-9ebf48966d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818b170e-5a30-4340-930f-2e7c29d7471f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "322800d2-5d76-44fd-bc76-b204d6b3d46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c88b6a1-66e8-4449-8edb-46513b4b34a5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "791682ec-737c-4250-8f77-f497d6dc8ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79fd4be9-af23-431b-b89e-d7f4dc1e5ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f9f55d-516c-4a28-9b7f-f797597d4f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6807df7-3d5c-47a4-8aac-3dd8b6992e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5763c9ef-ce1f-4385-a094-ebd8a30df8d9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04a8b7f-58a7-418b-b0bf-2038af941a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c65a2b00-0ab8-46d2-8444-5d273adf692d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051c1aa6-f763-4d12-8355-771f325e0288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7490572a-549e-442e-a3bb-7e7b3626dff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1965ca79-c236-4023-b4b4-7d24acb1bf0a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf033f0f-8bab-4cea-a39c-d5d932a57896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a654e3-6792-407e-af17-679ac20233f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b786aa-b3fe-4923-a272-c43bb3b91b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "97f56bd4-e6a7-4104-9e5e-581a57ce16ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c82ba4-c8bf-49d4-a167-1355834efe41",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608fb6bf-225a-4197-a2b2-888d945bce60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f02c3d0-c428-4456-b859-a9bc670eefa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56ebcd8-49e4-42e9-810a-c441f7f154fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75a5caf6-28f9-4175-940a-1064d2486c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786e8406-64ff-4832-a604-aabe962e87ed",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e29e29-614d-40e3-9367-3f4c2ee93944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc29c40-7457-4850-9ec4-4786051195c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d78b607-3800-42a1-8441-dbe1974bd602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f572c745-ffcc-4ebc-9a2d-6fa0de364152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebb82dd-59fb-4509-bfac-6a09d37d2256",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ba8ae3-4e40-44ee-bd4e-12c2d970433e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95fc5102-73f8-4069-a2bb-5597b2093440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a03123f-0e63-4afa-a864-34f88cf6cf5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4807b1d7-2946-498c-b1ce-8cdd2563821d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87694927-a6bf-4fba-b10d-99f87a087e33",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21fe4b83-b5c0-40b7-943f-31f707a377b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "979213f5-b2a6-4647-b45a-836b67fce13a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c108bf-96ad-457a-9625-fc422a1dcf99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e56a78a-d29b-4bec-8713-c37e35405c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19db1492-71d5-4259-b814-bbea1a7fc9d7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d46726-b8c7-405a-9505-160e27d7eada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb6f01c-c0b7-4a11-bda9-9571de015a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d60f50e-334a-4f37-b196-e1ef748f5cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "267b08ef-57f8-4bcd-bd92-436085d66b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa9b205-fbad-4d07-abc6-fcf10af7fc1e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba989cf0-7955-4e42-ace7-68405e341dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44e11b9d-a619-4675-9b8d-be4345195ec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73e7b1c-74b5-42d2-955c-f1ba37bf52be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "371e15d2-ad7f-4e79-aae9-722e523d036a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09560ced-ba0d-4b9a-9a5f-e21928b236f5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4377afa-accd-4603-aeea-197f306d8c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3552481a-7194-4dab-b0cf-cd9a4c57f971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f86fd8f-4a2c-4a12-8f67-71e007460da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2191f384-3bee-454a-978f-4610ad0a381d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2bd516-7075-4498-82d0-6e81ed74c9fd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "594e2672-1e0f-460f-a96f-144c60c8fc1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "165dd98f-aded-4fc9-a8a6-6eceeb871e68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6faf9def-4e34-4cf7-80cd-0a9c549c5aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "39d78ab3-f924-41e6-9b0a-ab237ed9f519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1746e301-cf50-4335-af1f-8b44a2aa332b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a275a0-0018-4c8e-8739-3dceef29676c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c8fda485-233a-4c0a-aff1-387896241348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e5f434-8ad2-40d1-baef-8a1e14f9b5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb3a24cb-81b6-4778-a73b-42fdb78c9536"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9e9a9e3d-0db1-4d70-93be-52f684f0cfbf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "89f70d03-f161-4002-9dc5-bf8ca68bd502",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "326c8357-8a21-439e-909e-e47a059cd922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "026a5154-8bda-40b0-8517-3643eeea4951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a71cda0-a249-4e5a-812d-07f3ff1d7cdb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e252aed-690f-4ea7-b4a3-55f2a5c365a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ffae506-811d-47db-8bac-7bbb4604a294",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2656939d-b149-4a12-80dd-24485c3be9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c900e9c-89d9-4b52-bd17-9d8c20223f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cddb9f0-009a-40c5-acb0-7ca0e8baf6bd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "156e18f9-a179-40e3-b407-6138cdc49c12"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f844195b-e839-4b27-8482-8d47a595d9a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c5f04a0-8ef6-4416-8a94-a9534e3a9a60"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ae2d615-a4f6-49cf-a10b-8aac136f7b3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4513fc69-4211-40b9-bcef-65ddfb57afd9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cb2f53df-0377-447e-a6c4-1e6988b4c61d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "105e15e2-15e5-4ad7-9390-4c50195522b4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d3ac186a-22cc-4db8-bb35-707c33ad25da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7331c56e-a498-4687-9b7e-fea4afed2436"
                }
              }
            ]
          },
          {
            "id": "035a1f11-9de7-48d2-9ca9-633fc0b22b35",
            "name": "Positive Testing",
            "item": [
              {
                "id": "41c90c81-3959-4165-89a8-41d40b343af5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a757611-c034-4dc1-9c44-ad6c160238d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd13369d-5d95-4702-b1fc-677c866bb433"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "968c59e3-402b-4f6b-9d18-865bcef01bb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "18c186da-53e4-4432-8af1-050c8d21a2ed"
                    }
                  }
                ]
              },
              {
                "id": "24fab76b-f1ff-49f2-b337-deda77a03595",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb40b166-d928-4fcc-81cb-b10ea17b76dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6af45f7a-8727-4297-9e03-e7789da48a2e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58e44192-583c-4b21-bab6-e3d4bf7e4f85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3af1cb6d-8971-41b3-bbe8-f42a63cc1869"
                    }
                  }
                ]
              },
              {
                "id": "86c2e24a-7bbf-413e-bd5e-960de0972fb1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1d8b408-f588-4db0-9225-da173a0744ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5228c7f9-fa71-4514-a24e-ab303da27739"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5eb6f90-d94a-42ad-a2de-e19aac266d3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e415c2db-3660-4ac8-8833-7365970c5324"
                    }
                  }
                ]
              },
              {
                "id": "a895beeb-348d-40ce-966d-db7556c75f32",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97ff3163-c5f3-4c9d-92b9-4465486efb60",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dbe4b415-2626-4a3d-8b6c-94add2c90d00"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f5717de-7b0e-4229-8834-6d16ebeae308",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d8dbe98c-4292-487b-a114-dc1038ec3981"
                    }
                  }
                ]
              },
              {
                "id": "224635ee-65fd-4acc-be6a-8bf92a88cd5a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1ccd8f4-f5a2-4af1-9685-36155707b2f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1433bde0-d16a-4feb-94e4-e41f1035e682"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91cac6dc-15db-4594-b06f-c3a0acc79275",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "642e14fb-54b3-4c8e-b35f-8f2cea229d4b"
                    }
                  }
                ]
              },
              {
                "id": "6dddbaa6-c4ec-4567-8a4e-740839771bd4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8560fe3-3872-42f9-a898-0a4101449fdd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6df21997-12ba-4d13-836d-5c5776b3d92b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "222849e9-6888-4ec9-9f6c-bb215e18cb34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "18acc0e7-b369-460a-8072-2afa60c52c7c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c217f15f-6003-4115-b3b3-f2179059c9fb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "303ec62a-92a8-47c9-8bfc-1b7376674821"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "daa78a5f-b43e-4cc0-b021-7e79b4a68f1f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9720293e-8d65-4f1b-ba9e-11315aefcdaf"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0712b8c1-4632-48c5-8fdc-595aff6344b6",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "42fb2290-7987-48a5-8771-a6ff6ae91ee2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a20c40f1-082d-44af-8f7b-0260dbe57919",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5065f804-6398-42a3-92a4-2d5e5560f4cb"
            }
          }
        ]
      },
      {
        "id": "71df9338-069d-4ff6-a405-fddd6550e7d2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ceacd42a-bd23-455e-bb52-cc61dd763af5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6d5b3920-d9d9-45fa-b45d-d977fad76f6f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f4486fdf-87b6-49d6-bda0-043247c4ea50",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581689a0-29cc-4d6f-b482-83ad930fecd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0770901-a7e2-439b-ae42-1fd504f3100f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cc8c97-3332-48eb-aa68-d2c42e4ebb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "439a674e-111c-428b-9ad9-aca1c770854d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab44729b-0ab3-4d04-93d4-d77733f6fd19",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53a5ea5-8edc-4faf-8bbb-1d331675213d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9426dc3-c805-408b-80e0-e5f4315d1037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6226c0-03e7-4a4b-86d3-84bbcbb770f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0734123c-30c5-401c-a0d0-b7a8ea116f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4921e4-1727-4cf4-b5b7-35ac1fd589db",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360553ab-e53c-4165-b2af-e1dc509135d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f65b9395-6d9b-4640-8bb6-47f22f8002c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bda35df-6307-4172-923c-f5ae16c60e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2302a17-b925-443f-b887-3b9945460a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16988208-5d45-4ddf-9200-c91adea93d8b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52de18ea-c714-4684-9c46-148e587ff5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3435c0a4-3008-45aa-baf9-67c54a210920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5656d9-f329-44ce-b03e-d26f79fc3f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aad693b-8aff-44db-88e6-ecc8707fee6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382c3d6e-1c46-43ac-a463-69310decb455",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537a6556-1a5a-4176-942b-ceb32c927e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44bd02ac-9f18-4ac1-9732-f01cf1111c78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b838b54b-a37e-4e12-aaaf-629aaff879d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70f78842-a666-463b-a4da-7e9b27b42252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a3876d-9fd6-4550-be2c-f2085fce7102",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d85b43c-1fab-4322-a5b5-6d720d21d393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64a3b672-a5e4-4aeb-b6a2-13fa06e7f691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3632d5-b404-4d3c-bb70-fc010ca870a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c3f0d4-78d3-40e6-8959-a4bb0da5482a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b33838-9213-4b60-a53f-732392832b54",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c84244-b35d-4706-94f5-581f3963e36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e653c543-4376-4760-83a0-00365a169f0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7640d02b-ed7c-45ed-a643-447139dfd004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa855f9-b77d-441b-8f44-8a32eb9a143c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2b2836-439f-40d5-b04e-81a0f7b34a87",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07cb87c7-06d6-4044-af67-c212643e0201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7b1ba3f-c6f3-4aa8-9f08-f1ddd6f95416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9e0fce-df80-4028-b222-e7fe831d94fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "159579c3-11a9-41d6-8b61-241f6e6ecbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226b8091-41f5-42c8-8333-9813a9eef7ca",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "354bf5a1-9e47-44b6-8604-699bc3a42ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "140258cb-3dc7-46c2-871c-b114ba8d769a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf85979-44de-4d7e-a4e4-cb3cfb2fa41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0a5c3d2-e02e-4ab9-b863-cc865bc4435d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b8ab33-f9b8-4c57-8bff-b86e6046d032",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b753b140-d9c3-4d88-a3d7-8abe60f938c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb96bcaf-01c4-4e61-8355-13aaa4fb24ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5baf23-5a6f-4fa1-b163-67abf0a247ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b66e274-3eac-4ecb-b319-fefd617682c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a030017-a177-4dd7-a69f-a109d1235267",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a2e31fe-9770-4549-a49e-aebf11ce1f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6864b1ff-2a28-4081-82a4-cd1b24a7cb18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68da8ea-1f9f-4893-a823-5baf53bd3ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e4a726e3-da07-4d59-aa17-f288d1e8904a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2257ce7b-ce90-4b2c-908f-298728184e9c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34c9d5d-b1eb-4181-be38-136eb1f603fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea120c24-3cd6-458c-89e5-a97368666353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64962f96-292a-4a79-955d-9b43093a4fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6b90f8a3-73c5-4cab-a91e-72bb98c57c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b7f8ad-4cfb-4456-b78b-f0ab5a7d1293",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fdac76-0b66-4e0b-99ba-5fa5f65f0a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b244786-3722-4027-96ec-295cf3178e6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04942f90-f79f-48fa-b44e-598f87ac49c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "62ec7097-5052-4b64-a4e2-02826201058e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84c9f22-ac99-4fb7-8943-2ee3eacc2d90",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a68c46-2a2d-41d8-bf3c-d8a2a9c16f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c79bf1-1194-4e02-8962-650b8429316b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444336c1-05aa-439a-8635-2179ef048776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "423524ee-1123-4936-ba05-86e318dd51ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0174fc-c5cf-4935-84b6-665dabe60db6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "987e83a9-c0b1-4173-a0d1-ef5537de411f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c81a8c1b-98d3-4e3e-89a6-20b92c6ce5e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ebdb73-7a1d-4cd2-93ad-cea714078f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca67195-43a4-49c5-bf3a-0a583e088551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b39020d-93b8-48b2-8989-8831666190a4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e216c65-6eae-49ed-97a9-587c6c09455f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed646eb2-3730-4aca-aa74-b242ed1c9817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c64bab0-6a01-4c6b-be91-c8063d23d9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f7debeb-7fda-436c-935d-cdfba5889d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52164ee-4b1c-4441-93f3-6289c8ec548f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c13fac1-f578-45f6-baaa-0029ed4704a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ae283e-f3cd-45ee-b825-40a396a343ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8db035-36f7-4f32-9551-b15be3323297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "62da79b3-ea75-40f3-874e-d5e5f37b57a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f761284f-b43b-4a64-afb8-b1fbe2981a6d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c963e63-68af-4cb9-a2b1-d6e391b8e868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4e18e7-730f-4500-8cdf-1df9127ff7d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c56385f-66dd-4dac-b18c-b05f010ce8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee4f4f5f-50d0-4e5c-9d71-3228a61e096d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a011d5a-079f-4b61-9d7f-b8e19feedb9d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8835775c-0a8a-4451-babb-164cb1fa4fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d01c5d-ab6d-463d-a602-b4ceddff1e03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11fba62-f060-4c48-9bda-4e7f76d73e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f252fc0-8c93-4836-b3f2-13090701d4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d130c7a0-ce4c-4bd1-8c5f-043619d5cc70",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80556c6-cd3b-4e62-8c6b-f110e00ca479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f24c6af-2190-45aa-aaa7-f2dfc762da9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee140eb-a8f3-42a2-b21c-2b6b80f4a8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b8c19f-6450-4346-be4a-d37dd1a70698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0f2003-37da-44e0-8ce5-a1b091d2091b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65425188-781b-4b93-8baa-9f59ef0806f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6aa087e-123c-4172-842a-7a5c77489196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac1088d-04f4-4fa2-8292-a421125074ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce70b67a-ea8b-4fb1-9068-cad79cdfc26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4fce1c-f73d-4021-80e4-cbe5a0561fc3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b201bf-52f4-41f5-a38f-2f86f280fe1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35e4dcce-7373-46fd-849e-a6e783f3b999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e701cb43-10d4-4a38-8c2c-a39d464080c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25e1658a-3f25-466a-9045-29aed4070d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d250191-a7fb-4eee-9e15-044146343e3f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af2023f-1dfc-4225-ba1c-62d94601c078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2141bfd7-7789-4880-afe8-c79ef49a8c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f61a3c-9d5e-45b0-81f9-347aab558136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c5b4735-0eab-4e18-9aa0-70f109a5c9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ea1b2a-998f-4fc4-8051-2343477e64d1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0568d18-6cb0-4735-b673-9ab1885eb3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4eb591c-b1f7-406c-8e61-d11ee9f472a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33827a6-0c6a-4d90-8352-69f153938a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "115a1e20-4814-415f-98bc-2e309a5efc48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33251a1b-da38-4a67-a87f-0cdf10db657c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3a5b25-0833-4d92-97b6-e6ecb6616688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2d41a9a-d071-4e9b-b23f-cb3697925880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee52cfb4-1682-43e4-91e7-5f88f9b0f7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec350071-04e5-4986-a2cd-b6df644bcacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3cf6bf-82e9-40dc-851f-00e9d9de8445",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381b77f7-bd59-4a0a-ab92-87848325070b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "384af3d6-b4ab-4849-98a9-8f25261d149d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18018e02-d9cb-4bbb-a671-008dbc0793bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "476ac4dd-c222-4ffe-9144-bedb6ddab586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a831aee-0b7c-44c3-b3d0-ba151f226ff7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8972f8-fe20-4ec1-a93b-3432a53384b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7879b720-dc1f-4648-8105-b1e05ade4d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc990a23-89ad-4541-bbbb-8c5256e91d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae6292d5-d66f-4e2d-ad9f-d6cb0ca36fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2f2b6e-bed0-424c-868e-2cc43c039f74",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c76fa2-a5f2-41f6-b0e2-d0d2fad6c64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d13b8786-792f-4d2a-9f4e-63f3eca3d654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7916f7-99b2-4e81-b03a-8e53b6bf539f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d4e7947-c663-4f4e-80d8-c27f4668e37f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d605725-cd29-4f9e-aa76-6a475e2227dd",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f7e96e-7f7f-4038-bf2d-da963428d8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d05108f4-19f7-4d02-aca5-2d1a96810a8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "201cb49d-6e15-425c-9d15-b4bd7f43d13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6c82f2f-5852-4cc3-b10f-ec6639d6d95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5a33bb-ece6-4099-a399-dde7fb7b0bcb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "923e5810-1795-47db-b382-68119c397cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3919bdaf-271e-45ac-8e08-591e158f55bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad639f5-fef2-4e44-9bbf-e851c219edf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dfb44fa-b773-4753-8b95-be7e18f25036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d742e03-990b-4391-b8e4-2e7b22e15bc1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae70037-9a60-434e-9876-33a1fd69bdab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b63415f-f41d-4fb7-8546-9d97a9272133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f798cc8-18bf-4f0b-b3c8-cc46f063c741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "294c9e53-c2a5-4507-8c5e-3343227f4c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764aad79-f978-4332-a334-03ac5d60bc49",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7407c11-28d4-437e-8cd7-79a64662bc17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "745a2ed6-2318-4247-a0f3-3ab083411632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f56cbb7-8793-49a2-a124-6317d3c13d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d0ce4ca-14e7-4328-a3e8-e7f70ebd7818"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5b6d9998-1825-4938-97e6-9ede619cdc06",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ea75b9cb-d643-4b1c-9c48-a1ec3501b15f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c41dd2f-3da4-4f72-879c-4ea735341d29",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f11dddd8-7b33-41d0-9fb2-7c2bea8797e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ca558f-9d64-4ff2-891e-0c173a1beaae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc54cad7-7450-4edb-bfa1-87e1fe5cb533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9709c8-7ca3-4f19-b9af-b7dd1d396f65",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4fa1ef-eb61-48f6-a621-463977319d7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "574ac49c-f00c-4e5c-83c6-38eab85bc455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffd1709-28e5-4185-8e3d-7fb555f8002b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64d7c35c-6114-4de0-b1e5-ca38a0f71fba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78286cfb-5e13-4953-b7dc-a01ca0739944",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bdba8e1-6022-4164-893c-6d69f2d079ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "76a9c46c-e51c-4c95-90f1-246a4b646b97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "128153b3-4de1-4662-8d24-b3978597fca2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b74aab1d-84db-41d2-be96-ad220ee0e21e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1863698b-c1e8-449c-ab48-018a452b278f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c5f6e60-f6df-4df8-bbe2-fdcee373621a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19bb0356-ad53-4919-8a8b-dfc045244888"
            }
          }
        ]
      },
      {
        "id": "9210c5c6-84c8-4a15-bf20-ba22e79cf6ad",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "32221dc9-52b7-47c0-af5b-35bbeeebdc11",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f7a0c1b4-0792-422c-b9ba-b67e060b3cbc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8d0d60ad-2def-4a10-94c8-3370a4173a12",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd827970-c936-4a74-b943-5c257a9b9b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c9692fe-ee99-46a1-9246-47f2a55814fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ed5528-67e3-46f0-9c3b-3614cfa44d27",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79fe6b3-b370-490e-ac3d-3a759f8c3166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d39dafd4-7090-499b-a43e-29f27375e76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5a3920-070d-4b63-bed9-898ad7ce99ba",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6904d4d8-a1ae-40d3-a998-74ee5b49b467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2aea4e7-33fa-4f9e-bcdb-fb5b1a73159a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb774d6-3888-4589-9925-0c28c0ae67e2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae8e071d-9a80-4988-87b4-339058466c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5082651a-c491-4314-aa0b-32f0b9d48433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b126d0ba-cecf-40bb-8c27-1886013c9fe4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "304cf3a4-73b4-41fe-b272-0a3e108ef265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e24cdf-ca60-486b-9c27-2729fdfe1023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899d99ac-a391-4cda-8e6f-c9f3bbaa9c54",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b655764c-6374-4f3c-89d1-6993565cebe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c1fdc7-d1b0-445e-8b4d-0e3ee1f18288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9a3733-a0c6-46fd-9554-63bb21142f03",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0802b8b3-30e1-4813-8eca-7aaca0d1645e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a24bbf-1967-47f6-9044-d211a9a95898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fd78b8-48c7-41fe-8890-a3daaba6034b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8fec602-e0e2-4ed8-a08e-2a98c4bc7504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3650d2-755b-4adf-9dcb-a6431d32da41",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b11d743-8108-4799-b684-abfc80fc521f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00e25817-9e9c-42d8-9da1-95daa24a5783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f993f9c-7312-4f7d-aba1-edfed7a0caa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224e3d27-3ca1-4130-a809-b6f006a639a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fb34f2-a9e2-44d9-9dcc-b1fe9b9e17da",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae5d833-ec3a-44bd-8361-b6621235d821",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64d8a8c3-6f6b-4ebf-9cdf-2a5d7efcf658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b373014-335f-4790-9bf9-97153eb771a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd3fcff-1dad-4199-a768-caaf9b417422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af47c804-c7f8-4934-b74e-994f0e35f2a2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838fe9d6-c4dc-4b8a-94dd-90c19cde3784",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34391bca-dc23-48bc-b8d3-c4c6c3e63bcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5efeeff4-aa74-47e7-b4db-365accd0819d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb9dbe85-3704-4caf-bc77-fc1b2547e1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e55b95-9582-484f-a21a-9c95be7b466e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68659e09-8bb6-4ca5-87f8-f7abcce01983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbcef7f2-ea7b-4a75-846e-c9575eee6d57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5153395-0949-45dc-bc10-94eacc3e1adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cca088f-66fb-4501-82f0-08168b54dc11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8890c9-95c4-41e5-9e68-96df992c9484",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74aa1f44-9e4b-4ac6-9b2c-a882d7e9df82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "946f90c8-e21b-4052-848b-629543acd149"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd6e503-62d0-46d5-8fff-368e07199444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74174c45-0222-42f1-8cc5-a8575cd39f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95dc255d-49df-4e2c-b3cc-3a1e2452080e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b3be71-b9ae-447a-b0a0-8261227200ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6352dce4-6ca0-4c1c-a688-b40144550de0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dcaee76-40b7-4dae-ab3a-799cbc7816b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d6b7fca-a77a-40ad-a77d-1a2e3cb7b2dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42105d7f-465f-444e-8fa0-abe9a254e1e1",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2080acfc-5fd9-42c9-8be4-64cb760fd8ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d7b7a67-d70d-43ca-a176-0ccdf88251e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b14d94-b872-414b-9a9d-93457a92503c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862ecd81-51f5-4c5b-8c5d-23fd3562fc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c44964-8be1-446d-8791-32c5914bab5f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8082ba89-c3a6-4e9b-9cb9-34efbe903e8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57e18ddf-cfb9-4c45-bea9-afb54d077754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f0c41a-40be-428a-802c-1ee78ddf1478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "407fcf4e-e851-4d51-9349-02d0cb315bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc55f06-c4fc-4544-a718-443c75407e22",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2680d4e8-11f0-427d-9650-d10785b328fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb3fde9c-4ea5-4339-bbe5-2846fc6a3c29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6b0fc2-ede2-401d-a5c1-b70702eb6c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "515e8ced-da58-4a59-ba5e-b5bcdd1cd92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44a0d03-8688-42ce-ba74-87e6321d06d3",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45165322-adc7-4c7d-a053-c7545e996197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5caf0c9-b9a7-4f77-b768-3a3459d351c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc1a329-a527-4b7c-8346-8971bc1b61dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf4cc2c8-f8c0-4b87-bbb8-df787ec9f31d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd17224f-8de8-42ac-beee-d7a07bbfaaad",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48300ca-c97e-48de-971d-7b19b5b910eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28bb71ea-e8c5-4dad-baf4-dfc5276fd359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0574762-52f3-4b3b-bfb3-da5d5bf74df9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da3f05fc-f19b-4c73-9790-21fe180bb512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4ea4a3-f395-4841-bbf2-4f710153e3c3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a056ad1d-9fd0-4250-863a-fc20d84d6a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff8f424-0b45-4f59-9102-a22d42e28e8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed455dc9-249f-4c8e-a72a-901cf57ea9d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad37d666-9cc0-4ed4-af3f-b480ca625263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2a0dbe-ccf3-4dfe-9b9e-a0209abb3bd7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2bf770-22b1-4578-ac58-6dc6423d199f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a321e6bf-675a-4383-b82e-baef75293da8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2ff770-26f9-474c-85a6-e783315f4ae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56207af2-6bf5-4d06-9a1d-3a673bbbe2f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e89896e-f554-4263-ae0e-be4d183fb02a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89ce0ed-6aa3-4db1-8517-f726cb86fb71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8aa572c-eb4c-4766-bc3d-dbb7b882a3df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43626fdd-aa95-4f17-843c-b26f322396f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01dd0d32-01d2-476b-bd73-5e7cc5c64e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa624de-a2fe-4fbd-82fa-f6fb858c9e0e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c0b357-4024-402e-a3b6-549af37b0b31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce825c21-c2e3-47c0-abcf-d9d17aa311d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f6b3eb-9d9b-4dc0-bf7d-ce6e9880191b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c52ab5-3f4c-4763-aa5e-f53e0578ea53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d905b07-c97e-4101-a685-7c291bb91f5b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9612ac8f-999d-4810-8283-8898d532285d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255a93a2-55a7-4c1a-b483-830ee0852bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b9e786-3f84-48ae-84ef-5e7695be3fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2027e17a-df99-4605-a105-c688dc3c2b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e582cac3-61b2-4def-991e-9d61cd57aa3e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fbaf8e2-d3d4-4f6c-9e5f-7500ee46f6a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bcf41b7-6a41-4741-b373-0261cfb49cd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c40b66a-e6ec-4b32-9d60-3fc0d44187b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2679d83d-021f-424d-9e3f-e65f49d7d562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633b1e68-da94-4214-8202-80f40aa87648",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5469e0eb-6a9e-4584-8828-aba74086870b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca5b19b1-46df-4518-8a5f-5c9750c94813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26220203-fec9-4812-9c17-385733cdd403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ee3977b-5c52-4ad2-9c08-4b637611e570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c754512-6f06-4fcf-bfe1-104db975bac3",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38aa5499-d22a-4e68-a498-8181cb3edf03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce500261-35f6-43e7-9c88-ff268172120e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06ce8d7-e6ad-4f1f-b12f-2d4468a73669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f7beeda-08ce-49b3-ad44-980f0277f8dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e070ecb4-911c-43ba-b030-0f3f561124fa",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7b45ac-d574-4898-acef-7c93cbcbde4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad3a6581-0fd8-424f-b83c-5f548fced2af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a473ad9d-241d-4a3b-8ac6-728c55167c65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8bb45e8-e8d4-42a6-8a2d-b0d42bbeb710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1962c6d-b0d0-4a9e-82f4-a434f138d9e5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1513470-3968-40c7-b02e-71b8ed479dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95f3ce2-6d5d-4290-85d5-7271ab3e1506"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "291681e3-0c6d-40d3-84d5-c27929a54b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8e8c66-4b76-4bd2-afda-ca9a357d1a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12533e74-d639-419b-8537-14202e62cfb2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39424495-8d0f-498f-a89d-1f05b350fc9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78730d43-ee26-431d-8279-abf58dcc7e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7298e2-8cd0-4f88-9a16-6bdd02833912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5de11818-7e25-4c52-a069-ebc0e47505db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708f403b-027e-47c0-9476-09ac3c5a09ec",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdff5c6-f92c-4b77-be71-2867bd1e9d5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbab9822-69d0-4373-b8ca-beb156250aa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bce6a1-6711-4df9-9c75-8218b73db56e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6cc20b6-62b0-4fc2-9e18-1831aeb59be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4cc7ba-e936-4356-874e-06ccc97167a7",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88e4928-133a-4b20-a984-a81557de49e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e28c4be0-27ce-4129-af11-644e52427428"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5722435-3a92-4bca-adb7-023fff099458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d38dd835-9f2b-4213-8c1a-c261c779c379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05455f2e-f44f-4bcc-8889-865b3ee0ee8d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b915f64-24b4-4979-9873-366cd82dbceb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9cf4b49-571a-42fb-829b-a312bb935caf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f0f313-0f15-4ddb-bb96-ee0f2e15ad27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fada4c8f-9324-40ab-974a-0c8b04262318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1140db5b-2cb1-4765-b264-e5a88a7bbf78",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57af9a42-5782-426e-a0f9-c499660962a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68045bcf-2e8f-4f4a-aa1c-c22e267653a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61e1553-510d-4c8c-ac0a-15f0dadd1894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aacec8a7-a0f6-492e-9dce-d900a867dc9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16392629-a162-4747-b547-306234894ce1",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9ea8bd-2324-429a-b8fe-47813703f8ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38479589-7481-4584-8411-6157c24a5dc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5e763e-3207-483f-ba24-cec3c5fb560c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f513fb6-39b7-4488-81eb-2135060cc809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b96bc11-aeb0-4914-8c3e-fc76cffdc19d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad81b9a4-ebae-4929-98e3-ea21f01e3f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1548dea2-7da9-4db5-8650-224c21637602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0301d25d-fcef-4370-8ba3-81a2f70a8084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bd6d896-9353-4ecc-8bab-f4237558a636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b33a5a-d4dc-4a03-918c-d6cdd6631dd2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ebd4f2f-21f8-481d-861d-17a7292fe80e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "022be3d7-ffd4-4377-b5f4-fb561ee2d522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02219aef-3d52-42ef-bb2b-41614d6ea1cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6219a3bc-60f3-42d1-ae9e-a6336e0f09f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ee6fcd-f64c-4765-86d1-5794378e8a26",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83cb1b97-2af1-46cd-811a-075f6815652f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3674325b-e5eb-4234-ba32-c14355286608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e083bf27-c9aa-4e3f-88ce-55d086884a6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5208fcde-eaae-472b-bc8d-aa714e9888d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe44b56-e0f0-43bc-a3c4-697d347096b1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ac6ae7-20e4-4be9-98a3-5ea403c3c8ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d39d1602-dc5c-4d29-a3d9-e4885d6fadc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40adb428-5fcc-4099-bc3e-c3b7f5976f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a866e03-b5fc-43a3-8415-89a3d49bf3f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3798a84-c8fb-4117-8f97-6d3390656d4f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6b5056-b1b4-435c-a579-28cd87b5498e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27a6869e-3caf-497d-9169-cffe751ee7f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad7e8e1-5813-4afa-8a22-fee786bd3a37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeb10030-5d5e-4abf-bfc9-c8c128b580ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e758e1a2-98e4-4003-8402-60c2f5475ea3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87e2762-a49d-4280-b9bd-ffe7360d2402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f09ebf30-f1be-4bbd-9a72-d2d2b821d321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7c599d-9a2c-480a-b388-5fea7bd3bbfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c9e4ff5-bd7d-44b2-81fd-5bca55b7f213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe670192-2b08-4437-8978-2c1df2cdab3b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f955020b-b2dc-4fe8-a05c-dbd018b4a832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77d5fc1f-c03e-4ccb-aea8-133cc8677927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9cb6ca5-4a3e-432c-bf90-0d780b6c9714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32ad347e-2474-4dbf-a268-a2c2289e8328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834c68dd-a43f-4cfc-99ae-67a5adf9c788",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ceeba9a-4635-4682-95a8-0d28ad98d1cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6da820e-7a81-456b-9177-1814f4660c40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2223ed57-542c-45d4-a43a-14a4df736941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c938fb-f3c5-45d5-acc6-fb6536e0d0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e69b7d-4701-4f67-8262-a002cfdc6c61",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ebf6ec3-9f4b-446e-bd12-3d6633d7bc42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078fcdca-417c-4983-8923-7177f446daa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92dd088-afd0-4fbe-aef7-67c5d7daac12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "537cf9a2-5fb6-4947-bc33-ed0d221c658f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3507c66a-4c8f-4395-8009-90ff1a78293c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23513bf8-7cc8-4fee-9441-c6d6bf55749c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "179a4e34-5af0-497d-934a-0bd60b6c5cfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "195b9b8b-e58f-4f57-9f2c-043e5ded5972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "984cf489-7e90-4b12-ac7b-ea22fb42e3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a6a9aef-abad-460f-9f52-81879f3345fe",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b9b784-deee-443e-9f12-63a4e730f2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d55dc6f9-a02d-453f-bb7f-a12c5b525942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d77f7b9-4501-423f-9681-26a2cc751467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ffb568d-184c-4f1a-b2d4-6de8ce9eff3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92782354-7411-4de1-96de-789baaa34155",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b68ea7-cbd6-49eb-8bca-8502895fa2d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3570a069-7171-4eb3-acfb-d46a27160a5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f632494-1018-499e-8d27-28c5551a2429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63269934-425c-41d6-a47c-e8eb13bce852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacb7316-7787-4e1b-8f63-79eb52991a93",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7cc530-e872-40eb-9da8-124d564f683c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de500367-be13-460a-b524-a1a8a1397386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b860a8b9-45d6-4365-b12f-62a02d938bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dcd57c1-9852-4dad-9251-362e8f02671f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff21f480-785d-455d-9167-09bfe8327cf9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6479512-fc19-4d80-be13-22495c247491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5edda9a-708f-4cf3-b1f4-c6c30a4ed446"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10a0488-f0b1-414a-8c9c-acbdb5a3af78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c74adc8d-df83-49d1-bbfe-9f9b000362a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a73cdab-7ef3-4cf5-851c-07f0b243218c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e5dcbb-415a-4fc0-ab25-111c827df314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb2f8ce4-b8ab-4513-8a6c-e23685f766b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe26552-0757-4294-b0d7-6c5df82b44b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8199dc92-b10c-45af-afa2-e30535630348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7138ac03-262c-4387-9600-36c76d12277f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58828fe-ba60-430f-afdf-60bc7148da7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2836f00-6237-470b-8971-772ea92ab1e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e871f7b-992f-4520-b805-00729ceb49f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9259138-1f86-454e-98b8-f595eb32b33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ab381c-3199-402a-b209-56bf992f7477",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7508d3d-38e4-4e65-a098-79281a43203f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30ebcd7-6150-42ac-ab6f-b4e9bd17ddc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc837f5-2cc8-4e1b-b5ba-717c81486050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1480c15-4b1e-46ea-9606-ab93ffa7cc28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28892b0f-4b83-41f2-ba6e-df10d96fb7ff",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc6fba3-7464-48e8-a759-dfc7e746db01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a08b0877-cdf1-445f-b63d-6d5370be8a79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3762f70-b220-4200-9f02-9473388c3f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54d429e7-a1ce-45e9-8a75-1d47409a1be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33742a5c-a460-467b-a5d5-0f30ebb1ab96",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5603fed-edf9-4990-9c72-b67c123235cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f1c4cb2-75d5-4eca-94ee-3a418fc07c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1eaca12-560d-45e7-9c2c-799808a6ec72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a451dd66-adc4-4e9e-a636-e49a888b548b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac569c3-16bf-40aa-afb5-26b5f13395d1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be7fb33-3634-4e84-a75c-705e2f65dce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d67f9cd3-09c7-4bda-bc19-c1dcea6dab3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8894c07-a275-44fb-ab51-0cbaa2be2680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c83dd2b9-1349-474a-bb04-9a258da5c757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f87965-ae86-4c65-affd-9823d70b4ae6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79529a03-7a83-4b47-a6af-5893c6b7ccef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b877bc80-8cff-426c-8d17-4d2c76f7f8dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6277af7-512d-46f5-8ba2-0daf5c5073b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "470b8efa-754c-4341-9d80-20242fbac966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23301cf1-ecf5-49d8-8133-f148e3440c8c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180a79f3-189c-41ee-8440-49c168a64eae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d45bbe-bf83-4930-b5b6-e8d2e59ec837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9e4ec1-29fb-460c-acb0-d91b7d88a892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdcb116a-f342-4edb-ac3c-37119bf9db6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245115fe-83e9-466b-9e28-e79da09d1a2c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77c0255-399a-4dfb-b192-c60f94368519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2083d3fd-2500-4eef-9b15-ac68c9214879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2177a457-94ce-42ae-b3e9-2527f8e9e89a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f3e562b-9a86-415b-ae70-9fbd7f294922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f3bd17-7a40-41c2-a398-1338a4180c78",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c85440a-0aca-4c69-b9b5-d830d819e891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e5afc7-20f2-437c-bff1-7875706f728e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f88539-fecf-4733-aebf-291d9e980ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da71665f-cfa9-4db3-a9c1-a9dd6b44fb18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414c15a6-4ece-423c-ad5a-0057ff786110",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0496d26b-a81c-4501-9924-40fa1e83878e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2e72668-21dd-4081-a5b9-e4e7ea5b0bdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e943f242-ec1e-477f-901b-9566fd0bbfc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81de2580-ed69-445f-8776-41e36bb2a3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb7a127-5e67-425e-ac10-3120f852900e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f2eef8-3420-4c17-8936-be109c2bbb06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3513152-7fba-4790-aa3e-3251929c7597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc6a23c-3d2a-43a5-ac8b-2123841cb0df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e2a3ed-10a6-4e73-b040-a731532d299b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfac14d3-9e69-48d9-9120-722a17bace79",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191779c4-a40d-4386-a3a9-fcc24c626c3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66a60e54-7066-49b5-914e-0b457a7b495d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6856808a-d7b0-46e8-aa9d-cafa1125db14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8518740-cd1b-4706-a23c-dde5590affae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a935c57c-55a1-49d7-88d2-615ed79d77de",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade5a887-aed7-4835-8115-1af1150d18bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c707a2-7007-4736-9ac5-c487c671abce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1f016b-0492-4c0d-b9aa-151cb7c249bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3003616a-0251-4abb-bdac-a8f57907c6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b95da6a-d963-4e31-be40-08892958840f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9882fc44-3e9b-44f1-bb5b-b95ebc6e0b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf2f9e1-3729-4ed0-896f-fc1ef57ce8d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2e7283-669d-4e07-837e-f0793779ae87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716212a1-e0f0-465e-8e03-25ddd776b56d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144048b5-7aa3-47c9-a7cd-0cfb16650ef0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5222015-6089-469f-9803-fe7c8f52880b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb643d28-19f8-4ff9-b025-7e31004a3fb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b583211-8d6d-4e15-b045-24cb364e489a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e29412c9-842a-4a91-83cd-3e8946485a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662ed938-bfa1-4a72-87bc-6208998f1be4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e2abee-f3c4-4a4f-ad4c-7d58c05d3cab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "085ea3e0-725c-4a2d-ab9d-43cb8850dcd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3619cfe7-c9e4-41f6-a8e3-05fa7a08bc92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fdc0037-0906-470a-a11a-ce74de8ecf2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7adcdb0-8aac-425f-90fc-3f34cec56f4a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92d94b5-1134-453c-89fb-421abe4afc41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a580cfb-537b-4837-acbb-38d49abe5c63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98d2a61-508d-4f81-965b-1ae0eabd2c0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "717d4372-2e70-40fe-af65-7b4fd3138713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1778de-e6f6-4269-8ba1-f0ba35ff3d44",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731a8b0c-4b11-4447-b8ab-d978a4dc6b4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e817db3c-95ea-46b6-be83-ea05ff9fdc54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "640d805d-9289-4c7e-bfbc-7a9444d668c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a69c695-f523-4d8a-b56d-151aebe5fe15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668541b2-f51d-44be-af97-b1762acc23bc",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233a8157-d61d-4999-b6ec-8888f6bb51ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f2255a3-6487-452c-9b63-fe66cd6e558f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc92c2d-1bb9-4774-bd93-bdd099e8e967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce49c11b-be62-4e3d-8b9b-fd918e6c779b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6deea0a-68e8-4783-8fbe-cf04b4c8f625",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2deeee96-711d-463f-ada3-96817d42d716",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c685729a-de8e-4a80-95a5-470ad7b904d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88333e33-f870-4094-a47c-109fcbf36e81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebbce6c3-15f1-4b9b-b984-e63e4c9b43e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e17d1c-0525-4e82-a062-7ceb23cdba39",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05e6693-3c1e-4fc9-bc9f-146918b9a742",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88971fea-ba22-487b-a70c-5271f51ba67d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff80af9-55b7-4424-8250-52e4cff08075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72bf3e22-b760-4557-9802-80034173f799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c398c9c0-a96a-4e5c-83b7-5187793e65e6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593e18ea-b776-41ed-84cb-591cf038c188",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1a9a592-cf5f-4a90-90e9-fe0d8c497862"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b98bda3-f749-49e3-b49b-5f7bda67ecb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e425b73-f432-4022-975e-876ca234c263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f52319-a6ef-4061-b5aa-adfb6591acee",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d63622-8395-44e9-86b9-1a210c978451",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f2baf63-4935-4f0b-91a7-7c68a46e9d4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "290a0f43-dc9c-4949-a96a-f5449f17b715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eefd13c-03fb-46a6-a88e-578f5373eb49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3de4dde-f3b2-42cc-84d5-4f7160960f80",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453ae99b-2181-4d7e-b0e0-66681cc5edb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae9c5f31-6134-4c07-ba79-b3fbb4f2e195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f095d28a-a249-496f-a573-160919524b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47cd14da-5ced-4129-9937-ff51bf5ab2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e32937-a639-4533-8088-7b0aa37f7b27",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6dc22c1-7af9-4826-822c-d10100d91601",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9762ceab-8c55-4f47-aeb5-0b6491d7a0e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebe0325-8eea-4f6c-b7c8-2a3f50df47fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ddd2ee-d043-4140-9733-1354690169b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3f1b2b-ce30-41d2-a980-6ebc8becad08",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab8e898-046c-4342-b928-3d9240d486b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b7b2e11-34af-4824-905b-a4ee9f1afef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf98ef4-cd54-40de-a96f-62a713191e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a8d78cd-b5cb-4102-8755-5665a59040ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c7ddeb-f299-446c-a011-94238ad1b362",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d21aa91-864a-48ed-9e88-e4ccd2b65738",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f9ee9f3-381a-45c5-bb87-f4fc55e59be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3b23b7-2db1-4b75-af37-3ef7fd85a320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e32d945-49de-468b-a45c-e85a025d3a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e92e9d-3716-4b95-96b1-551444444254",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f85b25b-67dd-47b1-a6c0-10698d5d0e5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e84ee2e0-5fe2-4e02-9efe-ae597245b4f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca83f624-6d1f-40b3-83cf-56e859bd2e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87fc01a0-ddd8-4168-8bb1-3b7ee7a8f101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32c73ab-6be8-4af3-ac0f-0c82ccd35d24",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e53541b-991d-4cde-a4d1-ca4b82ec6af9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d60eb88-7e68-432d-88a6-bc522af2bf97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0101a56-8d88-4742-a553-3a0259bd92fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7d9c6d6-10bc-4933-b6e5-f7e44470bf60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4fcdcd7-fd03-42ae-9103-307efb70e1b1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b50161f-429d-418f-8389-0390d8eb4164",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ec5b1bf-df66-4bd9-a946-ddf13166843e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf68242-529d-4adf-b976-20f670e5752b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87efbb1a-a996-4bf6-9249-7fb510d921d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb24d139-a0be-4aa7-9cae-b646bbddd4c7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849edcdd-5132-4d23-b222-90b2211ba146",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c977634c-90da-4285-8910-0b0480a42ae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f773280-76da-4432-a362-ce3651b06303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a073eb36-9dee-43e1-8b48-102100188103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77efcf93-496d-411b-b073-7704d98ea438",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b730ef85-e92f-4235-b32c-0bd195c437e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "431e198a-cc49-4638-a489-a1c00758df87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43b6f00-22d3-420c-9d81-729fa68ac98b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55b12919-5db8-4519-904f-a16e44a0245b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41746a75-76df-4a2c-bc79-180ef226fcfc",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b6d168-34ce-4af6-9ea6-b23f97aa5be4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7b3685b-c0bc-479f-a966-0a95b58e768c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb3591f-ae90-4a2b-a5e6-45419930286d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "832193a8-8eb5-4949-8f27-d40a08122fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd63b36-a697-4419-bca5-2a4408cffd74",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c4beed-6946-45f1-a5d2-55d34e4fa9cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e88b979a-99b3-4318-95ce-caf79fc9abeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "828cf5a6-6318-4226-a588-7abbe16f1ee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f3a7c42-73f5-48cb-89f5-7497f122090b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d498516-8756-429c-8e8e-f0a180eb0743",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a217436e-9e06-460c-8437-6f98cd7364c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bf10404-a7db-4e41-bebf-27666f178ddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "948e459f-2259-49b0-beb6-9496ed17dbd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348ae8ce-e9ee-4dad-89bc-2ef50283b8ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33746e7b-2b0b-42bd-a21a-4d4d41efdfce",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb186c9f-33d7-4f5e-add4-db82f9452f3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ac9b2a0-2b17-4a60-9440-a57482258fb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57aa8f0f-21b5-4952-8c56-0bcb9c9cf8b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48c5f144-38d5-459b-930f-157150c191d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884e7534-0730-4ea6-a8d7-6baec7ac05cc",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc9b8a7-3096-43a4-bd01-2acb6e480e64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b966dca-6f39-40ec-8e6c-b9085bfc2011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8f4dd7-8fad-46ff-bbf1-6095c5be4f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13e62899-a2a3-436b-9c9b-b82587b024af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1876d9-263d-46e9-b5f4-3ed0b9277f42",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f60a73f-2b7a-4f7a-b458-79eea1e6bc29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4984239b-4f5c-491e-a3b3-eb9ce35cb5ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "567a2458-c325-497b-97d8-11bb5d1d87a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198d4b95-32b0-4e13-aa01-e469a6ba1a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d462648a-8633-40f6-8577-a922ad281323",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ba3c7f-80ed-4d88-8492-82b7cb117746",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4996739e-6b4d-4e7e-b3a3-92828c8ef8c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07cb7071-5785-4019-9828-eb77c607a54d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1daea054-21fe-4918-bc4a-c4f2f36973a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f02d349-0710-4bf5-98d3-141459307ee2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980bcce7-78ef-461d-97a2-ce60dc55e6ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d8d6007-b193-4a10-9051-f32fde76f173"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8435d627-9fca-4bfc-814c-698a318b0abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5596691-eea2-4ee4-9f94-038e60e870b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d2b06f-3d20-478b-b649-1232149436ad",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd1a989-bd9c-4e16-8378-3594af6c931b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f28e7325-eea4-4ec4-b980-1f318b0314fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c5d255-b627-4f0d-a6fc-f88901eee0b4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e92586d9-4f49-4923-8554-8119bbe591bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39afb0a9-e7d4-4067-9064-1caa550dc14f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffac0322-678f-4228-bd42-92be34a83b22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acb017ef-5a12-4be1-aa9b-da78ccdfbfd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d347e2b4-178d-4aad-8191-6dc04d4ea54d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd730d81-7720-46f6-a6b3-a3357cf14d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f594383b-573d-45de-bfb2-8ac319198553",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "779baf0e-1634-4039-a34f-1a38cb6bec1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2e02857-6b92-46d0-b97d-d04f0b68d848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e55cd61-4992-42a1-962c-bb26c8c4dbff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a28226e8-8d48-4fec-a2c7-4115ca5fb8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7fcc89-56ed-4de2-8010-9235fd54e5df",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4f6692-a56c-4c53-b727-3ce78c168c9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "673fd385-3c97-4b89-a756-b9e48510f36f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ee6cd7-ff28-4133-92e6-38d6495f5f90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a82c369-45e8-404c-a4e4-1e99a90159dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c691ce5-826f-4edd-849e-36f9f2f4180b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3138ded1-7f93-4805-b9aa-43d4dc2aae20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "271f4477-8d14-4f0a-a961-c87b28db01d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6faa9b3d-c807-42d9-a5a1-e81885dedf50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c58fba4-f966-4ea0-b11c-5a000a3bd018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba230b81-00a6-4e4b-8423-97be92a7adef",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6371d1-f739-409b-8243-5fea5bad3c5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04d704c2-5ed4-47f6-9282-e304529b24e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39279fe6-0c7d-45b7-8627-ae01118ddc57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a7f2d1-4f38-4024-a6ee-06616c656244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5252e13-1d9e-4420-b305-07fb4b9cea14",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a50492-e03a-4d69-ba17-cd81aeab2e22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb17e929-d7c8-4a95-bae9-203dee047464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b89da82-1273-4b8f-8143-f10907f16a0a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce6a4f6f-f585-4c4b-a354-29bf42aa8180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4cac289-b03f-4f5f-832a-c718d780edd3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e927b2-6f7c-479c-bd18-766fc6f8fd34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3954417a-3c20-41dc-9275-6b06c6d5496e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c96cab0-271d-4250-b588-407afed908f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79447019-b659-4de9-b6fe-1e809468ca1f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "946f721b-9bc2-4290-9402-750a8fba876b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aee4a960-acf7-407f-bea0-d91e134c529b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5824a97d-e0e6-4c53-8e57-27a4edd05095",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a4d5fda1-25bb-4949-894d-8dab0df617f4"
                    }
                  }
                ]
              },
              {
                "id": "b6a7f3eb-6940-4e49-b905-a33aab85aa1a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a5c29ea-8ae4-433f-8efe-1c24c80330a0",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62876c25-f38b-4cbd-a83d-c98c6641207f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "511cace2-d596-4565-9b63-169e8ccc030d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e8c0d0-131a-4a61-81bf-5c7e4d6b22e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "585d22e5-9d28-4eb6-a490-6fcdbda3612f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53242f0-a8c8-451b-82c2-b1a04c8e6d4f",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254bc5e4-9643-4d11-9b04-afd167b90342",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cb0c7557-1058-4b13-bada-72c503906622"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1934f904-ca70-460e-8866-a88f1312345d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3966f5d3-f5e1-4272-b1c6-010d07388a19"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24a1c78a-a070-4af2-8b81-3e2b6015c605",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82d48fb2-315f-41e9-84b0-f980e106083e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "06e6f622-5925-4878-820e-920aea1e84f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38937d1b-84ab-4613-8992-7b382b9160b0"
                    }
                  }
                ]
              },
              {
                "id": "b83ddf18-0e72-4555-be87-4167315c9d0f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4545842d-44bd-4ac8-b924-031623840b36",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed5d85fb-9b06-4020-b48d-6bbb1af605fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e03fbc55-7b82-4a35-8d2c-522e8e4a5563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a1a359-3440-4848-9f2f-93ea531296f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ed8437a-78e9-4df1-85d2-396348fdf791"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b92547e4-baaf-412b-a555-f38b178a72b6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0209be28-d973-469b-af4e-6acf51379cf0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49f22375-5ecd-4ff6-9913-8ef1ce9e1086",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "01c67ac7-9044-4368-a24e-5f7e7a997886"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7344260-6894-4ad3-909a-9bc41efe7cdf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "910dbe19-62ce-4941-bb7c-b74dcee10338"
                    }
                  }
                ]
              },
              {
                "id": "cdae3378-d27f-40aa-a0a8-91da0d4132f6",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19458aa2-9c80-407e-b7d7-6aba755c17e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "35df12f7-f3a9-49c0-8e6e-6c00dbfb60e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0c0102d-7426-4d34-b3af-cbc7cdeb5be8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8ab493c-b0fb-47ae-8ce4-ebb0c120f91d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46eae397-43f8-4750-82c1-032e8923dcc4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "00fb08bd-8dc3-468f-adae-f082c24a62fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "21d3a329-9e83-42ef-bf5a-25df5b9c344c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ae555fa-5051-4c2f-9ece-e2ec5b28caa2"
            }
          }
        ]
      },
      {
        "id": "cc3867db-45a6-4053-b7ac-475dfb8c89c2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "48eae6c7-28a3-42b8-ab9b-5dc53aa6a03a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b9525a7-a3b7-4033-aedd-7306d0d42d12",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8125c2ce-a0cf-4d06-95bd-01d2f7671823",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbda7cfc-b7b3-4fde-bfa2-6248890a8f8c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2b9ef865-ed69-4f94-a027-e3165c2c53b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96000e5-4988-418d-bbb1-6cc6b3eab599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a332773-82d3-4bc9-b070-6e8cb8f8a31b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba2571ac-6424-41c4-a3dd-86758f5cbc28",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2526fde9-3957-4da7-8b8f-08c6e0070c13",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "51559505-6806-43b7-a37b-1c65c5e4e43e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d01c8209-a4d3-4f5b-a529-46e0433e767c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ab20ea1-0ad9-43e4-8ba7-b18d3259f9f0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92c7651f-9199-4477-a61a-e6ec613c50c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0d003ad-d911-4b76-bfa2-bd7812fd10ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0228ecf9-229f-4af6-822d-6a830c155505",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b87ea42e-ec8c-4458-bfd7-b4369a42fc56"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "37e3ba88-55d7-44de-996b-798cea20342c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3c31b3d1-ac95-45f7-911c-81ee3571755c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b752f9d-9e77-48b4-937a-3e1321c47bff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ee4eb67-0be6-4bfb-a2af-07b885f76757"
            }
          }
        ]
      },
      {
        "id": "faa44c06-a2bb-4017-95d7-d251f64b679d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "393c9313-c8fa-4a89-aadc-070c2d1bf77f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7714e0bf-647a-4c66-be9f-048b2fee7293",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ef3d3e72-70dd-4f5d-a125-4de8660dc191",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c620a79-8b48-4b71-96a8-3772cb7d38a5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1627ed63-3641-4b60-8f3d-384eb1ca4a4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91111fb-0e19-42e1-909b-a262621e9cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77f4e211-4789-4c28-ad3d-4328b468be39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae0eaf3-647e-4613-a546-bac911633f4e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1925d6-f49c-47d7-8220-117628797eba",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ee439cd2-2d0f-4e6a-8cf4-fcde8601d4ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf72f6a-92a0-4ede-a27c-8eacd7b28586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d70ec85b-73bb-4cd8-9647-a201f7333555"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "863e7885-c8d0-4c8f-be96-d1c2f585bbe9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3575482-12a4-47d7-b979-71c9f36cc025"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d595a0d-f504-46b1-8f38-795c648f3280",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f0fc72c-3d44-4be1-8d7d-0790c2a5202c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dab40a3e-922b-47f5-a8f7-9bd8c45830f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f9dd763c-dfe0-46cc-9e8d-4fd04df71a16"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "700faf70-6a25-4417-b727-22bb4ce1db55",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c736141f-323c-454a-8992-bc9e870d81ad"
            }
          }
        ]
      },
      {
        "id": "4be81947-6fc0-4d63-8276-b8055334e39c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "259d3c89-eaba-4eb6-8572-cce1a2d212b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af5c5dfd-f74d-4a4d-9855-064a763c8fb8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "30495f66-d93d-4711-93f8-5ed88e81cc4a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3c794f-c9f7-4470-99a8-fa825ca52998",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1dfc2434-52e9-40e0-b79b-3625b43482ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dc6bb6-be25-4699-ae79-5892ca1ac4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0cf063c-a8d1-4248-8979-e3da2481ae86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9fe61f-2542-4a09-b03e-f8136b4004a5",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73cfcef4-40b2-4684-8d44-24f265c02ef3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9ad18560-35b8-43b5-bd8c-06a38bb5a9c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6c86f1-041e-44dc-a153-8db4a1a4ed00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "615c9cfc-28ee-469f-ac36-267437edfbe3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46f3381e-1df4-4c31-8025-fb9126edb956",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ad227f0-66d1-4ad5-ad3e-32a684e02202"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b76fb5fa-49b1-42e6-b8a4-dcc400572e54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50f4ddeb-464c-4ad5-98ca-6ffd2f7c2621"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eddad75e-81ab-4a0d-aa7b-5242e1f23555",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2b048511-b891-4f71-9cdb-aa368f8b5cac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a11aeb1-e660-4fc4-aa90-96a08a7c24b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc503293-70d4-496b-a31d-a46b0f2a0b1d"
            }
          }
        ]
      },
      {
        "id": "4c5509ea-f79e-494f-a5cb-fe4d5eb27b60",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29085ad6-fd7c-404b-9059-cf69e48ff357",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9d695338-1085-45df-b38e-9e14e7fa5ac4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "25174fa3-a46a-4473-91b4-b31a89b28596",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "996ebeba-d3a6-4dd2-9040-9e451a2c306c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be8bb7e8-ef02-46bd-b397-60bae61a99be",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 269.79615384615386,
      "responseMin": 12,
      "responseMax": 6383,
      "responseSd": 832.773217342914,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685061461241,
      "completed": 1685061542770
    },
    "executions": [
      {
        "id": "39b513d5-3705-4e4e-96e1-cc8f45f8e9d5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "90da0427-7f9e-4120-9268-24d235400c74",
          "httpRequestId": "ed8e5ca4-6d8e-4534-b4d8-b9ba8cc49643"
        },
        "item": {
          "id": "39b513d5-3705-4e4e-96e1-cc8f45f8e9d5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d632da05-0ba5-4fea-9fe0-d7435b8d2949",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 0
        }
      },
      {
        "id": "e93e4005-14d2-4188-97d4-6ade950ea84f",
        "cursor": {
          "ref": "f2055f06-3059-43e0-8c1e-4960e2e1fe80",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cc937c4e-4ae6-4b7e-bc05-5942004b6f83"
        },
        "item": {
          "id": "e93e4005-14d2-4188-97d4-6ade950ea84f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f50fb291-1a5f-4be3-ab4d-482e770b9dfe",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "6580c223-b1c9-4511-adea-b12b82be4745",
        "cursor": {
          "ref": "a5222180-be69-4f01-879f-4f652193a676",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6a0c5ba4-f597-47e0-844a-c7cef0eedd71"
        },
        "item": {
          "id": "6580c223-b1c9-4511-adea-b12b82be4745",
          "name": "did_json"
        },
        "response": {
          "id": "f2752ae2-0ec3-4bd0-ae7f-c5ce86cb4ee3",
          "status": "OK",
          "code": 200,
          "responseTime": 451,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76239e8-7227-43c7-9b89-a6954b87c577",
        "cursor": {
          "ref": "689f4079-356f-4367-9d86-3209b72a8212",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f7b99b44-b1a5-43ad-91ef-009c676ec023"
        },
        "item": {
          "id": "e76239e8-7227-43c7-9b89-a6954b87c577",
          "name": "did:invalid"
        },
        "response": {
          "id": "f0c8101f-0730-4f40-b45a-cc81e4a5bdf5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2016,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e76239e8-7227-43c7-9b89-a6954b87c577",
        "cursor": {
          "ref": "689f4079-356f-4367-9d86-3209b72a8212",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f7b99b44-b1a5-43ad-91ef-009c676ec023"
        },
        "item": {
          "id": "e76239e8-7227-43c7-9b89-a6954b87c577",
          "name": "did:invalid"
        },
        "response": {
          "id": "f0c8101f-0730-4f40-b45a-cc81e4a5bdf5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2016,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "146e344b-de7c-4f8c-9826-f5ca3a24de0e",
        "cursor": {
          "ref": "ae4879a5-c5e9-47dc-82d5-387e0cb9d035",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0fe07627-cda5-4f9f-b61b-a279d8183297"
        },
        "item": {
          "id": "146e344b-de7c-4f8c-9826-f5ca3a24de0e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "36584759-1e59-4f23-8969-b7adf55df878",
          "status": "Not Found",
          "code": 404,
          "responseTime": 24,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758372fa-5cc8-4e7e-8b4b-eb12039d7206",
        "cursor": {
          "ref": "9bcbdf6c-16ee-42cf-ba3a-5f233ff4676e",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "848e7691-76c9-46bd-b7c4-912c10af5bde"
        },
        "item": {
          "id": "758372fa-5cc8-4e7e-8b4b-eb12039d7206",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1acab9e5-6138-463e-a5c9-eef642a7e643",
          "status": "Not Found",
          "code": 404,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf16ae34-6368-49fb-b612-b3924d2760d1",
        "cursor": {
          "ref": "70a0addf-4f9c-42f0-8dc4-80518845aeed",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "af0a6977-bfda-49a4-8492-367e134c6451"
        },
        "item": {
          "id": "cf16ae34-6368-49fb-b612-b3924d2760d1",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3c40226f-b684-42e2-97db-d6b6474d13f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "408a32c1-ef32-462e-a3f2-d448e0204ed2",
        "cursor": {
          "ref": "7514f3be-0b65-483e-b1bb-9f4a5d97d185",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9106c6cc-1b24-4d2e-8521-430c8b9e155e"
        },
        "item": {
          "id": "408a32c1-ef32-462e-a3f2-d448e0204ed2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "db2c8be3-aa8d-4d50-b389-81753b821f5d",
          "status": "OK",
          "code": 200,
          "responseTime": 27,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "408a32c1-ef32-462e-a3f2-d448e0204ed2",
        "cursor": {
          "ref": "7514f3be-0b65-483e-b1bb-9f4a5d97d185",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9106c6cc-1b24-4d2e-8521-430c8b9e155e"
        },
        "item": {
          "id": "408a32c1-ef32-462e-a3f2-d448e0204ed2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "db2c8be3-aa8d-4d50-b389-81753b821f5d",
          "status": "OK",
          "code": 200,
          "responseTime": 27,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8102bf9d-0b93-461e-a1bc-2f758f843ade",
        "cursor": {
          "ref": "fd48eeff-30f0-4312-a867-938f516ef86d",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "95da35a3-3b35-4263-9f49-b8c84d1ad57d"
        },
        "item": {
          "id": "8102bf9d-0b93-461e-a1bc-2f758f843ade",
          "name": "identifiers"
        },
        "response": {
          "id": "887977b5-b882-4596-be59-745cc1581f6e",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab4d26d-ecf9-4066-9bcd-09bf8d5c255a",
        "cursor": {
          "ref": "0a7c0ac0-a424-4a7b-9c10-d485237a8e45",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b8ad0247-23ca-4066-9452-9ef7d500e793"
        },
        "item": {
          "id": "4ab4d26d-ecf9-4066-9bcd-09bf8d5c255a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3f5bcbee-523f-47d0-b3ac-af0e977ef855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab4d26d-ecf9-4066-9bcd-09bf8d5c255a",
        "cursor": {
          "ref": "0a7c0ac0-a424-4a7b-9c10-d485237a8e45",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b8ad0247-23ca-4066-9452-9ef7d500e793"
        },
        "item": {
          "id": "4ab4d26d-ecf9-4066-9bcd-09bf8d5c255a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3f5bcbee-523f-47d0-b3ac-af0e977ef855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3218bf99-4794-414b-b637-df495d10d5ba",
        "cursor": {
          "ref": "4853d446-0297-44b7-8b8b-5d7e8a9e412f",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "219574a2-cfb8-468e-b034-740bfbd57bc9"
        },
        "item": {
          "id": "3218bf99-4794-414b-b637-df495d10d5ba",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a68f0877-cce2-4488-a6e0-6e9ab8ce35a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3818a4-8420-4115-bfa3-06f727b91972",
        "cursor": {
          "ref": "f799d183-cedd-445d-82c5-297273a5899f",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "94a08768-2e57-4328-bd77-74a7b19b3bc8"
        },
        "item": {
          "id": "aa3818a4-8420-4115-bfa3-06f727b91972",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b940cd52-9ae2-4e08-a6d5-4a207ead6a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1a675a-8181-4f67-85da-3054ab071120",
        "cursor": {
          "ref": "e82f3ea7-85ac-4cdb-9462-99f7150b14f7",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "50135b18-dc77-4034-8994-f268b9f3edd6"
        },
        "item": {
          "id": "3f1a675a-8181-4f67-85da-3054ab071120",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a562bd91-4998-4d8f-8a74-f8b71aec0d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a3126d-cdaf-4869-b79f-2fb58fd7de3b",
        "cursor": {
          "ref": "b46db257-9f49-4521-ad8a-ddf2287a6c3e",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e7b2451b-ea6a-4b9e-b364-dd2bea9f6941"
        },
        "item": {
          "id": "a2a3126d-cdaf-4869-b79f-2fb58fd7de3b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1fbf0970-3881-497e-b104-7c3d3328ded1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e610ce58-fc47-4f11-8399-19ba795caf20",
        "cursor": {
          "ref": "2a65f203-2808-4fb3-b106-73360ce4635d",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "eb53ca88-3e0f-468e-8ef3-8c68c974274a"
        },
        "item": {
          "id": "e610ce58-fc47-4f11-8399-19ba795caf20",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9745ac97-707a-4d66-9bcc-411851c856a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1eed42-9217-4b5d-94b9-4adabc69479c",
        "cursor": {
          "ref": "eee890c8-30f7-48be-86f2-4e1b9fc7f71b",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "00906f6e-f74a-4ba9-b2ca-a1359183bd39"
        },
        "item": {
          "id": "da1eed42-9217-4b5d-94b9-4adabc69479c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "616e5187-81f8-4071-b9c7-4aa6ca58d37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8818465-a793-4336-a69e-6575bf9f0295",
        "cursor": {
          "ref": "d17b04f0-21bd-483b-a6c6-25e47901a0f4",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "48aad28d-338e-432c-94cf-995b9b97d6b2"
        },
        "item": {
          "id": "a8818465-a793-4336-a69e-6575bf9f0295",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8dbdf7d5-0a9a-40ca-a0f1-6511f9d0f1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cbcfabb-27e8-4a95-bae2-dac0801fddc5",
        "cursor": {
          "ref": "9397fb01-756e-404f-a727-cbeb0656bb40",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "387a83b2-5714-4254-a16d-77f6e50291a2"
        },
        "item": {
          "id": "1cbcfabb-27e8-4a95-bae2-dac0801fddc5",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "fc2aac65-0ef9-4c74-8b00-ad6eeeb8571b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7130cc8-87d4-48d7-8b06-640c58a5f618",
        "cursor": {
          "ref": "14f21f30-7b13-4c4f-9ccc-58ccba61f041",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b941a9a4-7297-41c0-9db7-23b3d07b8f06"
        },
        "item": {
          "id": "c7130cc8-87d4-48d7-8b06-640c58a5f618",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c294e043-f171-4fba-816b-ec77f6068601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38b84fc-e3ac-4be4-aeea-132c582e94cd",
        "cursor": {
          "ref": "56ec60ca-b94a-4159-b3f0-2b56683a7e02",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5df2d231-7107-4799-852e-68e52f6845ff"
        },
        "item": {
          "id": "b38b84fc-e3ac-4be4-aeea-132c582e94cd",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2dfbab8b-254c-4d56-af8d-049ac22c7455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054c560e-4510-42dc-a96f-35abfe47f544",
        "cursor": {
          "ref": "333f421e-a4aa-4709-8e14-aec31f6ec3cd",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b86b7f53-23e5-47ea-8819-829f848c1930"
        },
        "item": {
          "id": "054c560e-4510-42dc-a96f-35abfe47f544",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3b50e92a-59e2-46c1-b3e9-b7b099162b0c",
          "status": "Created",
          "code": 201,
          "responseTime": 1111,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e7c896f1-ddba-4e86-9514-5134080c7b8a",
        "cursor": {
          "ref": "2d10aaaf-5f2f-447b-ba7a-7dd5b80aea10",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "dd0ee924-26d8-4b36-a4bf-0e18d841e5ae"
        },
        "item": {
          "id": "e7c896f1-ddba-4e86-9514-5134080c7b8a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "40259e75-682a-4420-b8ef-aa69ecd8d64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1172e487-203f-4418-9192-7a518bb44c36",
        "cursor": {
          "ref": "46975f48-eb00-45e7-beda-a79661fee52e",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6835ffbb-7fef-498c-89ff-af558f9f0da0"
        },
        "item": {
          "id": "1172e487-203f-4418-9192-7a518bb44c36",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "485c19fd-03ed-411b-ba99-3c4d91caf039",
          "status": "Created",
          "code": 201,
          "responseTime": 6383,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "4cef6bd5-e940-4f5f-ab5e-9451ed1076d1",
        "cursor": {
          "ref": "b4a24773-002a-41ea-ae04-df22ac63b564",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "7a5d25d0-cd09-4f0d-8dd5-45e04b04ce9b"
        },
        "item": {
          "id": "4cef6bd5-e940-4f5f-ab5e-9451ed1076d1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b2aa6746-53c3-49fc-bad0-89c86006eb33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee1b6be-5b85-4b0c-b49e-a621ad3ffb3d",
        "cursor": {
          "ref": "72900895-35dc-4a27-93df-c78370e240dd",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7c510ff6-1038-4a34-bc82-d1ccddf74045"
        },
        "item": {
          "id": "3ee1b6be-5b85-4b0c-b49e-a621ad3ffb3d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ed49a905-975e-40de-826b-a2367a8227d5",
          "status": "Created",
          "code": 201,
          "responseTime": 5299,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "bb59187b-0c9c-49a5-82dc-7f380c58f2a1",
        "cursor": {
          "ref": "4085a3c6-a177-46f8-827b-405509e1c641",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bacf5df7-948b-4d35-9f93-24db6c332c14"
        },
        "item": {
          "id": "bb59187b-0c9c-49a5-82dc-7f380c58f2a1",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "cbbcd07c-1c3e-414a-8f4a-7b8f78325207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1011,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc4ef26-2c2e-4009-9bd9-2f81a173e4db",
        "cursor": {
          "ref": "34183a9d-16cf-4244-9d5b-1e66a88870ee",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "976f2166-16b6-4c13-92ba-fbd8927a33d9"
        },
        "item": {
          "id": "2cc4ef26-2c2e-4009-9bd9-2f81a173e4db",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9ecbe3af-4c5e-48cd-a726-5090ee1ad685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 424,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838fd2c0-9cf5-477b-8ffd-f34739eb9068",
        "cursor": {
          "ref": "0df274f5-1c96-4a4e-93f4-7d25b10f358b",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0e638134-f8a9-44d6-96da-21cd4765ca3a"
        },
        "item": {
          "id": "838fd2c0-9cf5-477b-8ffd-f34739eb9068",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b450415d-13c6-4495-8693-c0081d97d329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7654fd-c662-44bb-879e-92d3b7ff22be",
        "cursor": {
          "ref": "e85cfe27-b757-4a29-aa5a-2a52be35f4d4",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "12b415e0-9d06-4fe1-871a-1f1560fd34c8"
        },
        "item": {
          "id": "9d7654fd-c662-44bb-879e-92d3b7ff22be",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f5c86989-3475-494e-aa37-d2fbac00188b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 587,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b06083-c301-44ba-b890-9544a43cefbd",
        "cursor": {
          "ref": "8f2c7883-9719-4599-9157-96a001cb7b12",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5de8b37b-69cf-4268-8f59-c812e0febf94"
        },
        "item": {
          "id": "55b06083-c301-44ba-b890-9544a43cefbd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8ed464f8-168c-4d3b-a582-1bf0feed2192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161af747-1217-447c-9b94-c2fe5af08c42",
        "cursor": {
          "ref": "6562d408-e949-41eb-9e25-1b4d422731bc",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "df97d29a-1929-4fc8-9b23-c75f91db9623"
        },
        "item": {
          "id": "161af747-1217-447c-9b94-c2fe5af08c42",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "67dfc6be-12ce-40ea-8da1-1fc71d5befc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b0544b-43a1-41fb-91f8-9eec2f8239bb",
        "cursor": {
          "ref": "bb4fdbb3-b51b-42fc-85b4-642fad81eeb2",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "79e042d8-88f4-4d01-b22c-269ac4bc8d4b"
        },
        "item": {
          "id": "21b0544b-43a1-41fb-91f8-9eec2f8239bb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "75c1f806-190c-402b-9135-0c1602b5d8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56d72d3-47bc-497b-b6be-7bdcf0b3403e",
        "cursor": {
          "ref": "ae9d2bdb-e985-4a6b-bcc5-a23ccf6c87eb",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ec5ed80b-a6a4-4753-a685-5176ff724e03"
        },
        "item": {
          "id": "e56d72d3-47bc-497b-b6be-7bdcf0b3403e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f4388d4f-1e11-4bca-b410-895db0d0ed1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29338d90-6987-4ef1-9702-916ecbf9cf13",
        "cursor": {
          "ref": "196f798e-ad72-4e52-916a-3b6afb4f35b2",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "74270f16-4953-4056-9230-991151ad7359"
        },
        "item": {
          "id": "29338d90-6987-4ef1-9702-916ecbf9cf13",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2705159d-1400-4620-b65b-bfb2f0bec4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55543f96-a645-4763-bfcd-c071ceba51b9",
        "cursor": {
          "ref": "6200f89f-bc71-4fb0-8560-3eb0f6737c5b",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c187a5e0-11e3-4641-9b66-64a71dd9c648"
        },
        "item": {
          "id": "55543f96-a645-4763-bfcd-c071ceba51b9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1272567e-c42d-488e-b357-e6a465c81dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dab2f29-9355-4349-9fa0-9f479e568432",
        "cursor": {
          "ref": "f8da0155-b1bf-4605-a799-9d3b69b5f193",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5c969a76-f4c7-4972-896f-2c403499185a"
        },
        "item": {
          "id": "9dab2f29-9355-4349-9fa0-9f479e568432",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "03a06087-aa15-4eee-8d24-2d721f2f7342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c562096-0e2a-4005-ad07-ae0f50eeb7a8",
        "cursor": {
          "ref": "b092e93e-6772-4bba-b727-54b4a2dcf34a",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cfa20b0a-d9b5-4987-a4ef-5611e35107e1"
        },
        "item": {
          "id": "2c562096-0e2a-4005-ad07-ae0f50eeb7a8",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "087692f7-280a-4234-a6ec-880c7cbfe518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef65b5b-b83f-4e2c-a105-b92dd97c11f3",
        "cursor": {
          "ref": "5cb6e227-86bb-46aa-89c9-07248b69a980",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "42a78af3-2881-4992-98b2-b4d6d34ea15b"
        },
        "item": {
          "id": "bef65b5b-b83f-4e2c-a105-b92dd97c11f3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "883da4fa-d8d5-4b0a-a67a-0946c5480fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d30f8c-e9a6-4582-8a1f-f13c912a5126",
        "cursor": {
          "ref": "bfde512f-813d-4ac5-b63a-2809df9f91e8",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dea09bf3-78d3-410d-9628-5d4477b47cc0"
        },
        "item": {
          "id": "e0d30f8c-e9a6-4582-8a1f-f13c912a5126",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bd85daab-2652-49a3-8cbf-896eb768cf22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d560f1-a8d9-4dfc-b7b2-1d315084d210",
        "cursor": {
          "ref": "dc4e8643-3e26-4590-96df-7ef11e9df5b0",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b44a542e-7900-4721-916b-9f5618eb068d"
        },
        "item": {
          "id": "91d560f1-a8d9-4dfc-b7b2-1d315084d210",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0fc8ec38-0c2c-46c3-b620-2db4f6e180b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7496b0be-0cdc-41a9-811a-4f17085d2db8",
        "cursor": {
          "ref": "3f359909-52f4-47c9-9d61-7ac1e23d3acb",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0e80d638-7810-4cd3-a70f-848a6b96d4e6"
        },
        "item": {
          "id": "7496b0be-0cdc-41a9-811a-4f17085d2db8",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4a46ed92-85f2-4ef7-9b13-70fdbb98ab84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0090fcc7-b260-446f-964e-39169dacd3a7",
        "cursor": {
          "ref": "89aadbc7-c957-4172-a3d7-adec2bc6d958",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c2f199cc-9944-4664-84a6-ebe692266ba7"
        },
        "item": {
          "id": "0090fcc7-b260-446f-964e-39169dacd3a7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f3b3f09e-0dd6-4d69-b3dd-af08d5644eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec8add5-997d-4b1a-b3fb-afe328efd6c0",
        "cursor": {
          "ref": "ecbfab56-14db-4e2b-95a5-8321bb3034ad",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1b576017-55b0-43c8-b936-fb30769c3dff"
        },
        "item": {
          "id": "5ec8add5-997d-4b1a-b3fb-afe328efd6c0",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "120eac29-6b83-4b56-ab6d-3f510a45bf80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f972d4-95e3-417e-bae7-c2f0647feb19",
        "cursor": {
          "ref": "e6bac35a-f53a-4fa9-9853-d5f4fde0ab9b",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "24d43709-50ff-4f48-bfe2-0a7d92decf48"
        },
        "item": {
          "id": "02f972d4-95e3-417e-bae7-c2f0647feb19",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cd5ca52c-a5c2-4faf-b59d-708a5541ed9c",
          "status": "Created",
          "code": 201,
          "responseTime": 2896,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "edea0daf-fb2e-4372-872f-22cd22e5ccc6",
        "cursor": {
          "ref": "ff22b608-1377-4a83-8ec7-56548f6e67d0",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d916c9cf-f0f4-4c53-a2f6-2dc610c1c14e"
        },
        "item": {
          "id": "edea0daf-fb2e-4372-872f-22cd22e5ccc6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d865972a-83d4-4156-b38b-d4cdfaf39c91",
          "status": "Created",
          "code": 201,
          "responseTime": 2472,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6c011019-3ebf-4061-87ce-7b6bf41f4b98",
        "cursor": {
          "ref": "d9578b72-f3af-409f-9775-c637ef681704",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a2ea5179-4134-4aad-a814-bc4fc7aee684"
        },
        "item": {
          "id": "6c011019-3ebf-4061-87ce-7b6bf41f4b98",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fa6a1cb8-c0eb-4ced-a4f4-985750538d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "497d0929-441c-4a8a-9e9d-460b04eae29d",
        "cursor": {
          "ref": "1816e5b1-b7a8-471e-87a2-bc8757ac60f1",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "df73fb77-9aa5-462a-8846-2cdbd8d5f13c"
        },
        "item": {
          "id": "497d0929-441c-4a8a-9e9d-460b04eae29d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "91dcd8f0-705f-4b35-bb97-24e3e2bdc98f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ab7f2d-aae0-4e86-8c20-3a9987f01914",
        "cursor": {
          "ref": "9631423f-659e-46f3-9bb3-392bd263baa7",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "25164c62-301c-4ab0-b3b9-09c9b01023b9"
        },
        "item": {
          "id": "c6ab7f2d-aae0-4e86-8c20-3a9987f01914",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "73b862d0-7849-44bb-a28a-336429001e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7684fc85-fa65-4333-b97d-d61714931aa1",
        "cursor": {
          "ref": "53e7636f-ebf3-436a-9741-0b1fac001668",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a43be170-adb0-4e64-9324-4e8af19c654e"
        },
        "item": {
          "id": "7684fc85-fa65-4333-b97d-d61714931aa1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f68a354c-d629-4525-ba3d-3fc77cd41cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29dc8cd8-6435-4780-a782-e49290018623",
        "cursor": {
          "ref": "eb21c32b-d85d-49eb-a18f-7ddedf6abb88",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "84ca6082-2eb2-440b-bd68-fac62e6bb02e"
        },
        "item": {
          "id": "29dc8cd8-6435-4780-a782-e49290018623",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "005712eb-13af-4ddb-bd8a-5ee2c12e3ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f795f16-dcc2-43ff-84ab-726ddd5c262d",
        "cursor": {
          "ref": "f0b3c2df-24a3-4d00-ae25-ed8f44555890",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d7165823-24b0-4feb-abe3-709cc31f0348"
        },
        "item": {
          "id": "5f795f16-dcc2-43ff-84ab-726ddd5c262d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a0ed6ed7-7924-4191-b94b-b7142a4004a2",
          "status": "Created",
          "code": 201,
          "responseTime": 2310,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "57ff8a03-1b25-49f2-a923-ef9835a8df13",
        "cursor": {
          "ref": "4c58062e-249c-4fa5-b400-f5e5f77d172f",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "731c03b3-701e-461d-806e-21588d3d4ebc"
        },
        "item": {
          "id": "57ff8a03-1b25-49f2-a923-ef9835a8df13",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1e396791-39af-48c3-8d78-30e6fdca9d03",
          "status": "Created",
          "code": 201,
          "responseTime": 2285,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "ab07b08b-d5ff-47ed-b2ec-9371e62ef1db",
        "cursor": {
          "ref": "dda321d1-8b5f-481b-844c-60d4cc665b5d",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "37b2cd60-ea07-4a42-bc1b-06825048d056"
        },
        "item": {
          "id": "ab07b08b-d5ff-47ed-b2ec-9371e62ef1db",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9fbc6f16-c10a-4ab4-b89f-7dadd69b5bd2",
          "status": "Created",
          "code": 201,
          "responseTime": 4820,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "0f1c4046-b519-44fa-ade5-057edc1b47e4",
        "cursor": {
          "ref": "815aa5ea-283e-4f10-b011-bb36125862d6",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "43e40bbf-f176-4ef8-bba5-02ccf4a66b0d"
        },
        "item": {
          "id": "0f1c4046-b519-44fa-ade5-057edc1b47e4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4974bb3c-93c4-4057-88f8-ee20bff257e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15b8e89-f5a5-4251-ab99-cd1be9b5f608",
        "cursor": {
          "ref": "c11b3a75-503b-4d2a-8dee-85e75b8ad1e6",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4645e4cd-b569-4aea-86e9-7af19063d571"
        },
        "item": {
          "id": "e15b8e89-f5a5-4251-ab99-cd1be9b5f608",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3b8f4806-4482-4fb8-968c-f5a9444bd516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e810ba1-445a-4bdc-8340-50d44b81a62c",
        "cursor": {
          "ref": "bda37028-b432-4c78-9273-9cd7ad360d1b",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3b3fbefb-ede4-4432-9232-511924e35739"
        },
        "item": {
          "id": "2e810ba1-445a-4bdc-8340-50d44b81a62c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "34846549-34d6-460c-a8e5-2bf7a5188dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e11c62-7d7d-4a92-af06-f60dcf224a76",
        "cursor": {
          "ref": "a000e16f-ebfe-4483-b17d-1224d800b985",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5548a066-41b8-4e16-aefa-2d8051525b24"
        },
        "item": {
          "id": "66e11c62-7d7d-4a92-af06-f60dcf224a76",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e5f2cb67-e029-482d-9ecf-4e8f4f78c9ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a9eeed-1275-4ac6-88ff-6a224aa8b810",
        "cursor": {
          "ref": "efb9ed88-1d68-4b0c-92be-8523f686b5a6",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "425492de-9d81-49f2-b65a-64af34c42972"
        },
        "item": {
          "id": "28a9eeed-1275-4ac6-88ff-6a224aa8b810",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "72829a20-65a5-4d17-961a-adef1cb18a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4bd45b6-b1bd-41c0-a1e2-78fdb4738df3",
        "cursor": {
          "ref": "aa09f380-e5c8-4d5f-bbbc-398b5e97fe8b",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7307b805-6f55-4612-aa38-d7a09be2b647"
        },
        "item": {
          "id": "f4bd45b6-b1bd-41c0-a1e2-78fdb4738df3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7fb58777-137e-4ada-b854-340491dbd748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2991fc-e2e2-4919-8645-9eea9e84b226",
        "cursor": {
          "ref": "729c2cc2-6d80-4274-9a16-97f28808d33a",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6d5afe81-cad5-4a5a-8f29-e90343ef50ff"
        },
        "item": {
          "id": "ea2991fc-e2e2-4919-8645-9eea9e84b226",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "50736cdd-9bde-4833-a24f-00c7c788c51f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45db7db2-3c4d-4978-86b3-0e1950147e2e",
        "cursor": {
          "ref": "9f77f27d-d2d4-4a00-b864-1e48c77674c2",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b528c858-a596-43ba-86ae-35ed91d40cef"
        },
        "item": {
          "id": "45db7db2-3c4d-4978-86b3-0e1950147e2e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "86bf7291-f2c2-4454-a7af-e9e3521f0809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a31249-f6f1-4a0f-a26b-48021bd39611",
        "cursor": {
          "ref": "4a94c5d2-8c91-4422-8b78-bb07e97f8b72",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "53810fdd-8b99-4b19-9b46-04a614b2e5a4"
        },
        "item": {
          "id": "65a31249-f6f1-4a0f-a26b-48021bd39611",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0891093c-e727-4747-af0b-fcd0d9549a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4373c17e-2989-453a-be4e-88625f422a4f",
        "cursor": {
          "ref": "a762f587-39a0-4a18-b01e-fc16bfbbc6be",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5c60db9f-d9ed-4b4c-860e-0d3a5a0b34d4"
        },
        "item": {
          "id": "4373c17e-2989-453a-be4e-88625f422a4f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "362d5536-c036-49f8-b760-914397e45f46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fb9289-f7a4-4ce2-b11b-0b3d2975e99a",
        "cursor": {
          "ref": "3df4a325-d54b-4744-a4b2-1ee2f8a891f3",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "952e296a-c926-4f87-b26f-8cde37db9076"
        },
        "item": {
          "id": "96fb9289-f7a4-4ce2-b11b-0b3d2975e99a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "064d6eb6-f852-4917-a2df-094b1fe34a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d01da5-6d46-4d25-923a-6c1e4f9090fe",
        "cursor": {
          "ref": "2ce1472e-94f9-48fc-8c78-ed21631a7d77",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "eaa5710c-fae0-4b8f-9551-dd745460699d"
        },
        "item": {
          "id": "36d01da5-6d46-4d25-923a-6c1e4f9090fe",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "107154d4-4639-4bcc-9c82-3bf50a6f64ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b647393f-b1d3-45b3-908a-5ef43902ec17",
        "cursor": {
          "ref": "dbd69616-eeb2-4b13-ab99-63997138d7d2",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "04c33271-fae7-4b95-bc39-26e1b96521cf"
        },
        "item": {
          "id": "b647393f-b1d3-45b3-908a-5ef43902ec17",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "933ad204-a9d2-42e9-a73c-84fe2b46d332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b562968b-0f0f-4a6a-bea9-10b805a7fbda",
        "cursor": {
          "ref": "a53dc824-9d2b-42ec-add4-447036443f5a",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7b7cf073-d033-44ba-9034-7ff9081d9c6a"
        },
        "item": {
          "id": "b562968b-0f0f-4a6a-bea9-10b805a7fbda",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "84140c0d-ed79-41d4-a2ef-e3c4e9ca15b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d392bfdc-0c94-435d-ac0a-f6a832b92d59",
        "cursor": {
          "ref": "8f4d8983-cd8f-435f-b15d-0588a6a2ebb1",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "afa85303-afbd-4c79-be88-600837a7ca0e"
        },
        "item": {
          "id": "d392bfdc-0c94-435d-ac0a-f6a832b92d59",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "07e2b3f9-0608-471e-b93d-ce59136ab67b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ffbf9d1-1252-49b5-b5dd-58e41aaa7457",
        "cursor": {
          "ref": "0476b4bb-de2b-419c-af7f-5e1bdc2429cb",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c1ee89fd-9aad-436e-a7d3-18ade9fbcc27"
        },
        "item": {
          "id": "8ffbf9d1-1252-49b5-b5dd-58e41aaa7457",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ea147ff0-a7bf-4a10-ba8b-dd1907da114e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78026bf9-b89b-4eaf-ad28-96cb3301880c",
        "cursor": {
          "ref": "82999b85-3f36-4e8c-9a4f-93259794510b",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e54d66fb-0832-4ff3-8a01-5a0b7934a4bd"
        },
        "item": {
          "id": "78026bf9-b89b-4eaf-ad28-96cb3301880c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "58f2a323-e355-4d3b-8f90-47b45d0c0371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f81936b-b42d-4d7a-983e-c1c413e8e8e4",
        "cursor": {
          "ref": "be9095fe-5b79-4ab7-85d5-6c400186b5ad",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "892d418e-a1b9-41cf-90c7-72619881035e"
        },
        "item": {
          "id": "9f81936b-b42d-4d7a-983e-c1c413e8e8e4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6aa29b25-60f7-4fdc-8907-ca9d17941524",
          "status": "Created",
          "code": 201,
          "responseTime": 2725,
          "responseSize": 979
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "8b62ff71-3694-40fb-9cc7-4573602725c5",
        "cursor": {
          "ref": "b803a93b-8ce9-4719-936f-7dd7dac34605",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "514a8f97-79d1-4909-99f1-0013f6a4414f"
        },
        "item": {
          "id": "8b62ff71-3694-40fb-9cc7-4573602725c5",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9fc23298-9f37-4b44-bbcb-68d66ae488d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef75255-7df9-456a-9b5d-e79248d3dcbf",
        "cursor": {
          "ref": "3af6438a-45b8-4a50-b2e3-f2bfbe926744",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "41765e0d-d046-4940-8961-59e40d472ff0"
        },
        "item": {
          "id": "8ef75255-7df9-456a-9b5d-e79248d3dcbf",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "532b6e22-21b2-437e-85aa-871a44ae0aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "015e9f7b-8190-45b3-bfcc-7734f07cefec",
        "cursor": {
          "ref": "280d6d88-ebd7-4ac9-b137-c061164bd2d9",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7db45184-ff95-4a85-8ddd-d80a1b9c15d4"
        },
        "item": {
          "id": "015e9f7b-8190-45b3-bfcc-7734f07cefec",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1fd857b9-7b97-4adb-9f8b-402921b76985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a944c063-4210-4613-88dc-8a67f2690e46",
        "cursor": {
          "ref": "a544108d-c5b8-4985-8b4b-1b9c452cab2b",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ec6d3624-2f57-43d2-a498-82aafb124534"
        },
        "item": {
          "id": "a944c063-4210-4613-88dc-8a67f2690e46",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "eb483727-5573-4281-a543-77e43d804626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395dd367-1bdd-4829-a853-b9b885931457",
        "cursor": {
          "ref": "edb4d178-3430-45e5-b369-c9b0fee381d4",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "d3fb863f-b94d-4f04-8e90-637638fd6c4b"
        },
        "item": {
          "id": "395dd367-1bdd-4829-a853-b9b885931457",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "af662432-082f-44c5-8b99-c5eeff2392de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61eefd13-de44-438a-a419-07626d499734",
        "cursor": {
          "ref": "ef6f229a-b578-454f-ba1a-e171cb75a650",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "50601a86-b42c-4a2f-a372-a600714df67d"
        },
        "item": {
          "id": "61eefd13-de44-438a-a419-07626d499734",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ae369a33-93b9-4046-8a34-35f138fd9764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429aa91b-9ff2-4aa3-9df5-6d4dacbd5b51",
        "cursor": {
          "ref": "33c8ded1-468a-400a-bff9-ade5d72a32dc",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6cada665-12c2-47bb-8b5f-d8c2c4b100b1"
        },
        "item": {
          "id": "429aa91b-9ff2-4aa3-9df5-6d4dacbd5b51",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9dc249e0-a0df-4f7e-aad9-e0778900eec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def56f59-42e9-46e6-937f-b712de16dcda",
        "cursor": {
          "ref": "2cdd96f7-7acf-4cf5-93d9-78257513307f",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d54a3458-d819-4cdc-8bfd-e9f1777e212f"
        },
        "item": {
          "id": "def56f59-42e9-46e6-937f-b712de16dcda",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "db85725a-bdf1-4fa4-ac08-b63407f8a22f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7edd4c5-14dd-4fd6-9088-1b4968efb1e6",
        "cursor": {
          "ref": "ec6f6ae3-b476-4c4f-9596-e280f44473b8",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8a2894e4-1508-4664-a737-1dba618abe4e"
        },
        "item": {
          "id": "d7edd4c5-14dd-4fd6-9088-1b4968efb1e6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7f32e819-d70b-4b87-976a-5be9f03a78f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758f936f-5703-4777-bf7e-57d0eaed6457",
        "cursor": {
          "ref": "3caa78f1-20e7-4780-9676-8a378eb43ed7",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "dda5cec9-0827-45f2-927b-8ee0579ace12"
        },
        "item": {
          "id": "758f936f-5703-4777-bf7e-57d0eaed6457",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4e8e001f-3255-4961-a5f7-ce9815b64549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2fc679-fd28-485e-a72e-de95c8b39322",
        "cursor": {
          "ref": "d4539c4f-c405-4cc8-89ae-7cbd258edc97",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1fa742ae-4ab3-41ca-b14c-8a5e4ddfa602"
        },
        "item": {
          "id": "8f2fc679-fd28-485e-a72e-de95c8b39322",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a62b8ff1-66d2-4870-8082-9f0d16666366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725a1af3-9e55-4d29-aa63-5b2837cec28f",
        "cursor": {
          "ref": "6deaa0ab-388d-4bab-a20e-36d7d63f4b08",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7fbbc64e-9114-47d7-92be-1864303ba097"
        },
        "item": {
          "id": "725a1af3-9e55-4d29-aa63-5b2837cec28f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0c9b5d10-9257-43b5-a6c1-8ece5cd6e31c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80404850-f612-445d-ac36-dac7cb81d9fe",
        "cursor": {
          "ref": "c513e959-9617-4ed0-96bb-7af6e674c4b4",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "35028280-3f9d-422d-8b00-1fffa527c03f"
        },
        "item": {
          "id": "80404850-f612-445d-ac36-dac7cb81d9fe",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8d0a0a6a-7cda-4f94-9991-297616ea25f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53482289-49a4-4426-bf3d-7c3b8ba795b3",
        "cursor": {
          "ref": "ba78d9a1-0dd8-4cf9-a859-1e75f4939765",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "28868fee-6ca1-4eba-826c-9c8fcfeb0566"
        },
        "item": {
          "id": "53482289-49a4-4426-bf3d-7c3b8ba795b3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "46b03ce8-fed7-4444-aeab-13645d73da8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40905598-24c9-435b-a70c-b655fdde9a88",
        "cursor": {
          "ref": "fd2b87d9-d4c2-48c4-8a81-481a0f41c4f5",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "12e513c9-69d3-405d-9084-b1d5570a9eab"
        },
        "item": {
          "id": "40905598-24c9-435b-a70c-b655fdde9a88",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "03c6a828-81b9-4e83-b412-22b4aec9f3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4234ef1f-6cac-4e70-a25c-9645623f1829",
        "cursor": {
          "ref": "d7c78dcf-dc3e-48f3-84c6-5b52301a8039",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "359f7e87-4270-4397-bbce-060f59c840dd"
        },
        "item": {
          "id": "4234ef1f-6cac-4e70-a25c-9645623f1829",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2d9c0c03-9220-4c8f-b5be-4d3c4a4d435b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da036475-3530-4422-b517-f5da00a5dc49",
        "cursor": {
          "ref": "32f3c732-4493-4b80-a52a-cb1bc63cc1e2",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "79bb2164-194e-47fd-8703-0ae503199830"
        },
        "item": {
          "id": "da036475-3530-4422-b517-f5da00a5dc49",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0ad222b7-2b46-4d14-aad6-88157dcae10e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b35b510b-6809-4b25-8a85-592424f03d51",
        "cursor": {
          "ref": "347b333f-4d3e-4ae8-b26e-2487bec3cfa8",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "033d74a9-2f7d-4c50-a232-895f49cdf2cd"
        },
        "item": {
          "id": "b35b510b-6809-4b25-8a85-592424f03d51",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "04346741-3134-4988-8d9d-f835a29523a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c88b6a1-66e8-4449-8edb-46513b4b34a5",
        "cursor": {
          "ref": "810fd27f-f589-4a6f-81ff-0767a93c7172",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b21525ed-beb7-4071-8b79-1b2621ec1c6f"
        },
        "item": {
          "id": "4c88b6a1-66e8-4449-8edb-46513b4b34a5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "45d59b8a-6504-432a-82a9-d0142a3ffd1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5763c9ef-ce1f-4385-a094-ebd8a30df8d9",
        "cursor": {
          "ref": "dd794ba9-6c90-4b3b-b2d7-e5d5512ddce5",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d979bf74-b857-4b04-893f-4d82ca9ae9e3"
        },
        "item": {
          "id": "5763c9ef-ce1f-4385-a094-ebd8a30df8d9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "dee77165-680e-4bad-9cf1-9925ddc3a8cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1965ca79-c236-4023-b4b4-7d24acb1bf0a",
        "cursor": {
          "ref": "e8f2d53f-195a-4df4-b9de-f6ec2ca33066",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "46a58367-4383-4c1b-884a-db61e457fa73"
        },
        "item": {
          "id": "1965ca79-c236-4023-b4b4-7d24acb1bf0a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "26ae7a9d-4748-4806-a5f4-62ceb0d49cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c82ba4-c8bf-49d4-a167-1355834efe41",
        "cursor": {
          "ref": "819bad4b-4702-439f-a154-b0f0a56d1091",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "87c64e15-6712-4822-b023-95eba409e164"
        },
        "item": {
          "id": "e4c82ba4-c8bf-49d4-a167-1355834efe41",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ceff6810-2e5c-440b-90c6-27d06b00918a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786e8406-64ff-4832-a604-aabe962e87ed",
        "cursor": {
          "ref": "e50a73b5-87d1-42af-a3a7-1d530ddf22b4",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "79fda682-4de0-42b6-bcfb-1a1b1b853eb9"
        },
        "item": {
          "id": "786e8406-64ff-4832-a604-aabe962e87ed",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8154eea1-e30e-4520-bfb8-f2661b8cf06a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebb82dd-59fb-4509-bfac-6a09d37d2256",
        "cursor": {
          "ref": "cbc4b599-27b4-422d-aae4-1f677e2c39a6",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5de5ebf6-63de-486e-aa5a-2fde42fab4b2"
        },
        "item": {
          "id": "eebb82dd-59fb-4509-bfac-6a09d37d2256",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4eea5005-95d8-4c4c-9405-cf62f351fec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87694927-a6bf-4fba-b10d-99f87a087e33",
        "cursor": {
          "ref": "5db4c96b-fce6-4dc2-afd2-295f7d957958",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f63f266d-f3dc-4a22-b037-eed36d6034d6"
        },
        "item": {
          "id": "87694927-a6bf-4fba-b10d-99f87a087e33",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "590a9297-0917-4b0c-b885-c7dd02c96655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19db1492-71d5-4259-b814-bbea1a7fc9d7",
        "cursor": {
          "ref": "a463f1c6-06ca-4dc1-8e20-39203f5235a9",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "70d92ffa-992f-4bfa-8d63-7d9205557524"
        },
        "item": {
          "id": "19db1492-71d5-4259-b814-bbea1a7fc9d7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a454492f-e249-41e8-90d1-e39eba51bda8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa9b205-fbad-4d07-abc6-fcf10af7fc1e",
        "cursor": {
          "ref": "0f48374c-8e84-445e-89b8-d45070f664db",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "89678bac-42b7-4bac-ae25-2fb820a24cc0"
        },
        "item": {
          "id": "afa9b205-fbad-4d07-abc6-fcf10af7fc1e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9d5daf90-5e92-4b9a-beed-aafd007c9895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09560ced-ba0d-4b9a-9a5f-e21928b236f5",
        "cursor": {
          "ref": "36a14305-fda4-45eb-b2b6-5f3a4a17e80d",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4e0f00fe-eb0b-4fce-8ec6-feaf37d9dea8"
        },
        "item": {
          "id": "09560ced-ba0d-4b9a-9a5f-e21928b236f5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4f9fb54e-10dc-4eea-a5bb-ddda0be78e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2bd516-7075-4498-82d0-6e81ed74c9fd",
        "cursor": {
          "ref": "08dfab9e-2f6f-4f5d-8059-7840604fd6d2",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b35d07c3-fce7-4b27-8512-31ad072827c8"
        },
        "item": {
          "id": "9e2bd516-7075-4498-82d0-6e81ed74c9fd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "52b5ccbf-f5e6-4b96-a097-d6b0c0b35d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1746e301-cf50-4335-af1f-8b44a2aa332b",
        "cursor": {
          "ref": "12333c9a-7381-4537-ae1c-318f11dd77ab",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "180fb127-392f-477d-a1bf-f819a757687b"
        },
        "item": {
          "id": "1746e301-cf50-4335-af1f-8b44a2aa332b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7be466d7-fa96-4214-9db5-276984c3d6e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f70d03-f161-4002-9dc5-bf8ca68bd502",
        "cursor": {
          "ref": "312f0dda-ca83-43b9-a87e-e0901d82aa2c",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "86fa8ea2-0125-4816-a541-1ede584865df"
        },
        "item": {
          "id": "89f70d03-f161-4002-9dc5-bf8ca68bd502",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7ae8a7fc-6c18-4f73-a392-91ae7e165f5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "7ffae506-811d-47db-8bac-7bbb4604a294",
        "cursor": {
          "ref": "9c26329d-e2c2-47d3-93a9-5513d2e21661",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "69607bc5-5511-4754-8a96-8c9149bb8db6"
        },
        "item": {
          "id": "7ffae506-811d-47db-8bac-7bbb4604a294",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "97a46324-2dc2-4048-80c3-9f6c7dd3ec16",
          "status": "Created",
          "code": 201,
          "responseTime": 2702,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "41c90c81-3959-4165-89a8-41d40b343af5",
        "cursor": {
          "ref": "8e047769-4901-46e7-b5a4-4fc57ec1178e",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "87bfc6b4-5f5c-4d6c-982b-a267160ceed7"
        },
        "item": {
          "id": "41c90c81-3959-4165-89a8-41d40b343af5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4a4d806c-8213-4909-8cee-c7dcf02ab6ae",
          "status": "Created",
          "code": 201,
          "responseTime": 3441,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "24fab76b-f1ff-49f2-b337-deda77a03595",
        "cursor": {
          "ref": "79213a73-f0c5-4d25-a9c2-a1da9e7499d7",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "02196141-ed0b-4042-8a9d-a844cc25b302"
        },
        "item": {
          "id": "24fab76b-f1ff-49f2-b337-deda77a03595",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "16b79c78-7564-4d4f-a11d-a89d77dd68cd",
          "status": "Created",
          "code": 201,
          "responseTime": 3395,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c2e24a-7bbf-413e-bd5e-960de0972fb1",
        "cursor": {
          "ref": "e7fa64fc-e28b-4ef7-b6f8-02b04c45ec7d",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2ac37324-e02a-462c-8acf-555839027f57"
        },
        "item": {
          "id": "86c2e24a-7bbf-413e-bd5e-960de0972fb1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ee7be92e-ef36-46eb-919d-7902d1a2f225",
          "status": "Created",
          "code": 201,
          "responseTime": 2507,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a895beeb-348d-40ce-966d-db7556c75f32",
        "cursor": {
          "ref": "6b4fe6c3-0a48-40cd-aa1a-dbcdc03061ec",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "df3dc36c-deef-4c4d-b5ba-320d115df83c"
        },
        "item": {
          "id": "a895beeb-348d-40ce-966d-db7556c75f32",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "45c2fca7-b193-4816-a57c-4f1261890544",
          "status": "Created",
          "code": 201,
          "responseTime": 2588,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "224635ee-65fd-4acc-be6a-8bf92a88cd5a",
        "cursor": {
          "ref": "745af2fa-b533-4689-bffc-168335311c9e",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a8fb89b5-8a7c-4cf6-b50c-450e2b0fe4a6"
        },
        "item": {
          "id": "224635ee-65fd-4acc-be6a-8bf92a88cd5a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2641998d-f231-4a79-9008-3cda2d1c4cb5",
          "status": "Created",
          "code": 201,
          "responseTime": 2351,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-26T00:38:42Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-26T00:38:42Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "6dddbaa6-c4ec-4567-8a4e-740839771bd4",
        "cursor": {
          "ref": "eb8fa0d3-8aaa-4195-860c-1c66090dde29",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1160f00b-04a6-4d7d-838b-bc3116db9834"
        },
        "item": {
          "id": "6dddbaa6-c4ec-4567-8a4e-740839771bd4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "430930fa-c170-45f9-8b57-09c56415627d",
          "status": "Created",
          "code": 201,
          "responseTime": 2394,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4486fdf-87b6-49d6-bda0-043247c4ea50",
        "cursor": {
          "ref": "571f39b5-3603-4f57-bed5-93216a223fa9",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "48c29f43-0865-4e10-98f5-65659e1cc8f1"
        },
        "item": {
          "id": "f4486fdf-87b6-49d6-bda0-043247c4ea50",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "47618af9-4e58-4d3f-a866-4f3eb2404fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4486fdf-87b6-49d6-bda0-043247c4ea50",
        "cursor": {
          "ref": "571f39b5-3603-4f57-bed5-93216a223fa9",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "48c29f43-0865-4e10-98f5-65659e1cc8f1"
        },
        "item": {
          "id": "f4486fdf-87b6-49d6-bda0-043247c4ea50",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "47618af9-4e58-4d3f-a866-4f3eb2404fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab44729b-0ab3-4d04-93d4-d77733f6fd19",
        "cursor": {
          "ref": "4e0e9513-54d2-4370-8853-90cec4a11f12",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "93fb0509-9ea9-4e17-bb7f-8011447cbfbd"
        },
        "item": {
          "id": "ab44729b-0ab3-4d04-93d4-d77733f6fd19",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c5964d7e-3987-4c61-8876-1101cf328df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c4921e4-1727-4cf4-b5b7-35ac1fd589db",
        "cursor": {
          "ref": "25bbdc50-d30c-48f1-a6a4-7244004202cb",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5ac0434a-38b4-4a40-810d-0104bbabbead"
        },
        "item": {
          "id": "7c4921e4-1727-4cf4-b5b7-35ac1fd589db",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c95e1824-2b5e-410c-bbe6-6cc7769485f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16988208-5d45-4ddf-9200-c91adea93d8b",
        "cursor": {
          "ref": "272101f2-5e7f-4fa4-af91-deca838b0dfc",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "93731e5f-87a7-4e3c-8715-24686484f9f4"
        },
        "item": {
          "id": "16988208-5d45-4ddf-9200-c91adea93d8b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f61ac3a2-32f1-4c6a-adce-c3bf93beb2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382c3d6e-1c46-43ac-a463-69310decb455",
        "cursor": {
          "ref": "2b205349-8021-4701-8b4d-9196ef76f593",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1938bfd0-5491-44b7-a720-f9f958a556b4"
        },
        "item": {
          "id": "382c3d6e-1c46-43ac-a463-69310decb455",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "40abfc47-f60a-4943-a3cd-31c612cb5306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a3876d-9fd6-4550-be2c-f2085fce7102",
        "cursor": {
          "ref": "1179dd81-79bb-4e4b-a2da-b3ceabf347ea",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9e5582c8-f458-44f7-9d70-ef6bc46f4886"
        },
        "item": {
          "id": "82a3876d-9fd6-4550-be2c-f2085fce7102",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cf6ebbb5-712a-4b89-bb8e-eb1ba5ef1d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b33838-9213-4b60-a53f-732392832b54",
        "cursor": {
          "ref": "4d091ccd-9796-44ae-96d6-af9275c36f1e",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f9946514-320e-47b6-b268-dd70b704407f"
        },
        "item": {
          "id": "76b33838-9213-4b60-a53f-732392832b54",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "db14bd42-ff7f-41a7-a088-322a1d1e7b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2b2836-439f-40d5-b04e-81a0f7b34a87",
        "cursor": {
          "ref": "4ae9cd05-9346-4d55-afd6-a1ca3aaee750",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8916fbc6-67c2-464c-bee1-34af6073fdf7"
        },
        "item": {
          "id": "8d2b2836-439f-40d5-b04e-81a0f7b34a87",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0a31e5cd-6f34-4f68-a842-cf133ec2a8c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226b8091-41f5-42c8-8333-9813a9eef7ca",
        "cursor": {
          "ref": "aa3552fb-737e-4842-a2ce-4fdfdb3cbf6f",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9f17b0e3-6c1a-4340-8d8b-04ffa0d4182e"
        },
        "item": {
          "id": "226b8091-41f5-42c8-8333-9813a9eef7ca",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8ce16d1f-e5e4-4339-b010-c5a0c3d21195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b8ab33-f9b8-4c57-8bff-b86e6046d032",
        "cursor": {
          "ref": "feb161f4-c818-47d3-b368-a73729939e98",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "dc9b7fef-4f64-45d1-b530-8324fcc488da"
        },
        "item": {
          "id": "60b8ab33-f9b8-4c57-8bff-b86e6046d032",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "748a16fe-4f22-4be7-925d-9f8f2cd0ac9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a030017-a177-4dd7-a69f-a109d1235267",
        "cursor": {
          "ref": "1aeaff8a-d2fa-4f40-bbf6-66762777dbf8",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a31100d5-da8b-40b5-a91b-0469f4198c1c"
        },
        "item": {
          "id": "2a030017-a177-4dd7-a69f-a109d1235267",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a324f407-35c6-49cb-9a6a-855acddf7d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2257ce7b-ce90-4b2c-908f-298728184e9c",
        "cursor": {
          "ref": "82d8e025-ca71-4f2c-a0b4-2450f52c98ea",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "fd4feb5f-edc9-4a1d-9a31-224cca5f4bdb"
        },
        "item": {
          "id": "2257ce7b-ce90-4b2c-908f-298728184e9c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0b64e137-4ff4-41da-8716-115f32a2e2d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b7f8ad-4cfb-4456-b78b-f0ab5a7d1293",
        "cursor": {
          "ref": "cf6292f2-ba45-431a-86af-8780c5efdba6",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8df7752e-43ca-467b-bc6e-a92c540f5789"
        },
        "item": {
          "id": "b1b7f8ad-4cfb-4456-b78b-f0ab5a7d1293",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bc306a99-22ad-410f-ba94-f36d7ab6cea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b84c9f22-ac99-4fb7-8943-2ee3eacc2d90",
        "cursor": {
          "ref": "2899c04b-beb3-4da3-a194-60e281950f12",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dcea2d16-70dc-4f50-9ded-d4704e7181b6"
        },
        "item": {
          "id": "b84c9f22-ac99-4fb7-8943-2ee3eacc2d90",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5b3e9549-6b54-485d-af23-d7ed01fcf225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0174fc-c5cf-4935-84b6-665dabe60db6",
        "cursor": {
          "ref": "6e755c69-d0d0-49fc-97aa-03679616f0c6",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0651ab4f-7444-43c4-ac25-0556ec799c9c"
        },
        "item": {
          "id": "2a0174fc-c5cf-4935-84b6-665dabe60db6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "30e3dbd8-56e7-4bd8-99c4-42c9211803ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b39020d-93b8-48b2-8989-8831666190a4",
        "cursor": {
          "ref": "c44ba741-25de-439b-802a-681f227195d7",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e84813a3-7a06-40b8-8325-35aed3ab22c3"
        },
        "item": {
          "id": "4b39020d-93b8-48b2-8989-8831666190a4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ac865b59-4bd6-4027-9aca-035fbd933443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52164ee-4b1c-4441-93f3-6289c8ec548f",
        "cursor": {
          "ref": "5b9da4ce-31da-441b-bc50-558e220deca1",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d8027395-fc44-4a4c-bd10-490caadf326e"
        },
        "item": {
          "id": "c52164ee-4b1c-4441-93f3-6289c8ec548f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b55325ac-48e1-4fb6-8914-2f3df6356283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f761284f-b43b-4a64-afb8-b1fbe2981a6d",
        "cursor": {
          "ref": "de89766d-a157-4278-9e5a-6a5c510f3abc",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4c706096-dc77-4062-bbd9-235973b45dbe"
        },
        "item": {
          "id": "f761284f-b43b-4a64-afb8-b1fbe2981a6d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "24065127-6ae5-4dee-872d-9f8b7fe408dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a011d5a-079f-4b61-9d7f-b8e19feedb9d",
        "cursor": {
          "ref": "2f7588f8-24cf-40ac-bb7a-eecbf39428f0",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cd08e40c-47f3-41ac-91f0-e2b2c8d31c6b"
        },
        "item": {
          "id": "2a011d5a-079f-4b61-9d7f-b8e19feedb9d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "71f44223-d5fa-4e87-8bb1-94a8a1eab8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d130c7a0-ce4c-4bd1-8c5f-043619d5cc70",
        "cursor": {
          "ref": "f653a2ed-ceba-476d-8c2f-d568bef5e156",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d171c75a-0c44-4540-ac37-0eb53c1335a8"
        },
        "item": {
          "id": "d130c7a0-ce4c-4bd1-8c5f-043619d5cc70",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "91ed3cd5-1f34-45d1-8fff-7d1d7f368b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0f2003-37da-44e0-8ce5-a1b091d2091b",
        "cursor": {
          "ref": "776424e5-9f88-426d-9868-71b4d0b72044",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2a369230-20a7-42b5-a2b3-5c760ee52167"
        },
        "item": {
          "id": "8c0f2003-37da-44e0-8ce5-a1b091d2091b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c341e141-9514-4f0a-832d-5dac86124de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd4fce1c-f73d-4021-80e4-cbe5a0561fc3",
        "cursor": {
          "ref": "2acd2cbe-694c-4842-8d66-8be28dd424cd",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9e9a38e0-cf74-4388-8f3d-5a93e2688794"
        },
        "item": {
          "id": "bd4fce1c-f73d-4021-80e4-cbe5a0561fc3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "542231f6-7423-4c7d-9946-f17143ae0455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d250191-a7fb-4eee-9e15-044146343e3f",
        "cursor": {
          "ref": "ec496b18-6046-4ea3-abb6-c8f8e8310364",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "da27252f-81ba-4b66-b278-7b0e7a6c2e58"
        },
        "item": {
          "id": "9d250191-a7fb-4eee-9e15-044146343e3f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f58c4c0c-dcb5-463a-96e1-d4ecf6ecab74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ea1b2a-998f-4fc4-8051-2343477e64d1",
        "cursor": {
          "ref": "f45929a0-1f01-45e2-af35-db349ea194b9",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8acd9701-30af-44bc-84d2-5fdd35f6d529"
        },
        "item": {
          "id": "a5ea1b2a-998f-4fc4-8051-2343477e64d1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "53feb056-2996-4e71-a755-bbcb69f0adfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33251a1b-da38-4a67-a87f-0cdf10db657c",
        "cursor": {
          "ref": "a2b0e63c-a13d-463f-9570-b865495d0131",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3a637075-974f-48d2-9acf-67687b3e3bf4"
        },
        "item": {
          "id": "33251a1b-da38-4a67-a87f-0cdf10db657c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "755d12d8-029b-48d9-a256-b2921e970ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3cf6bf-82e9-40dc-851f-00e9d9de8445",
        "cursor": {
          "ref": "1fec3dcc-78c9-4e23-a91e-5050429a06c5",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "56bb7237-99bf-41c2-a7b0-a9e86088d8f4"
        },
        "item": {
          "id": "cd3cf6bf-82e9-40dc-851f-00e9d9de8445",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9d9da557-3f71-4dba-a03f-8f6171a4b2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a831aee-0b7c-44c3-b3d0-ba151f226ff7",
        "cursor": {
          "ref": "17c6c9df-8c01-4496-a672-c22ffd22f9b3",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "30829825-11d8-402e-a5b5-5a9b3b0472ec"
        },
        "item": {
          "id": "1a831aee-0b7c-44c3-b3d0-ba151f226ff7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "96796882-85d5-4a79-a330-6d75abf3681c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d2f2b6e-bed0-424c-868e-2cc43c039f74",
        "cursor": {
          "ref": "d0f1bb74-24c0-479f-9fc6-11ddd73214f4",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "87ae8021-d26e-4917-8fda-0faf58fe562b"
        },
        "item": {
          "id": "5d2f2b6e-bed0-424c-868e-2cc43c039f74",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4747a6fa-32c3-406c-b105-24876102afc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d605725-cd29-4f9e-aa76-6a475e2227dd",
        "cursor": {
          "ref": "38ef0531-2865-4e42-b070-1898eea3e343",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c7b421b2-a941-45a2-9328-3f318c98d139"
        },
        "item": {
          "id": "1d605725-cd29-4f9e-aa76-6a475e2227dd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c37227e1-2bc1-40fe-a42e-ee230688c121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5a33bb-ece6-4099-a399-dde7fb7b0bcb",
        "cursor": {
          "ref": "2ba3d885-098e-4ab8-8105-750235ae8a57",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "39dd6429-52b8-46a8-ab3b-02194e6010c2"
        },
        "item": {
          "id": "8e5a33bb-ece6-4099-a399-dde7fb7b0bcb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "de42308d-956f-4375-88de-231884888502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d742e03-990b-4391-b8e4-2e7b22e15bc1",
        "cursor": {
          "ref": "988eb33c-9b7c-4ba0-960c-6ad44fbf6996",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e0de0d27-460a-4d51-8aa1-b11f8e492bef"
        },
        "item": {
          "id": "1d742e03-990b-4391-b8e4-2e7b22e15bc1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "bfd7a29e-c32b-4be7-a7d5-52da380eaa51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764aad79-f978-4332-a334-03ac5d60bc49",
        "cursor": {
          "ref": "cc528a87-e23b-404a-9a58-e377e70046be",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ae138908-6460-4b7d-86b3-16407f936d25"
        },
        "item": {
          "id": "764aad79-f978-4332-a334-03ac5d60bc49",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "76bec963-0096-4c02-ac9c-c7c1c6eec1d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea75b9cb-d643-4b1c-9c48-a1ec3501b15f",
        "cursor": {
          "ref": "926e1d94-bcbf-430b-be7c-f84f87a430ff",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "16eb4b92-3a4f-44ed-b52e-1378ded7385b"
        },
        "item": {
          "id": "ea75b9cb-d643-4b1c-9c48-a1ec3501b15f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0046db13-dae0-4b02-a330-0fc7e760d1c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "1f9709c8-7ca3-4f19-b9af-b7dd1d396f65",
        "cursor": {
          "ref": "71dd525e-06b7-484f-a11d-78761d54525f",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "914ced52-77da-4c9a-88b3-4ad43404450c"
        },
        "item": {
          "id": "1f9709c8-7ca3-4f19-b9af-b7dd1d396f65",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d1006d24-7720-409b-b508-b60a3180e545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "8d0d60ad-2def-4a10-94c8-3370a4173a12",
        "cursor": {
          "ref": "2d5f288c-99ba-4827-92b2-e5d480fe24bd",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1e5a75ce-34d4-4d6e-a218-56cb2ad6327a"
        },
        "item": {
          "id": "8d0d60ad-2def-4a10-94c8-3370a4173a12",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f8e98cec-7029-4f95-8af2-f61a71c4c98e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0d60ad-2def-4a10-94c8-3370a4173a12",
        "cursor": {
          "ref": "2d5f288c-99ba-4827-92b2-e5d480fe24bd",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1e5a75ce-34d4-4d6e-a218-56cb2ad6327a"
        },
        "item": {
          "id": "8d0d60ad-2def-4a10-94c8-3370a4173a12",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f8e98cec-7029-4f95-8af2-f61a71c4c98e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ed5528-67e3-46f0-9c3b-3614cfa44d27",
        "cursor": {
          "ref": "26fe3ba6-aaac-48ad-a4cb-d2f261c04ec5",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0dab33c3-f101-479b-bfbc-9dd87600c836"
        },
        "item": {
          "id": "e5ed5528-67e3-46f0-9c3b-3614cfa44d27",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1aa27760-c1b7-4e4a-b4f2-f47254130d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed5a3920-070d-4b63-bed9-898ad7ce99ba",
        "cursor": {
          "ref": "15cb7c65-49e7-4b41-aff6-2c4f4570773f",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ebf63fb9-4662-4eeb-a7ab-e3a1edfbacd2"
        },
        "item": {
          "id": "ed5a3920-070d-4b63-bed9-898ad7ce99ba",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fa07d5cb-6995-445c-8936-7212f872c863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb774d6-3888-4589-9925-0c28c0ae67e2",
        "cursor": {
          "ref": "3afb219b-67bc-4299-9472-6826af264805",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e1a0d2fc-8428-49e7-b869-a7d567da25cc"
        },
        "item": {
          "id": "5fb774d6-3888-4589-9925-0c28c0ae67e2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "955ed51a-8470-4485-bfc0-5f8f6797ab59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b126d0ba-cecf-40bb-8c27-1886013c9fe4",
        "cursor": {
          "ref": "65ee5e38-94fd-4c83-8f11-2521b18fd3ef",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6629384b-031a-4dba-99de-547638408a61"
        },
        "item": {
          "id": "b126d0ba-cecf-40bb-8c27-1886013c9fe4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b3068dc9-5342-4888-a207-57f248bc6f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899d99ac-a391-4cda-8e6f-c9f3bbaa9c54",
        "cursor": {
          "ref": "61810ba5-1034-4a4b-87d0-ce3a14f346c7",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "96fbb1e7-f3ec-49c2-899f-2963294c8f68"
        },
        "item": {
          "id": "899d99ac-a391-4cda-8e6f-c9f3bbaa9c54",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "429b6d93-de17-4250-b9b1-f23669c4a517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9a3733-a0c6-46fd-9554-63bb21142f03",
        "cursor": {
          "ref": "a2552bc3-3eee-4ba5-8e1d-0bb2879576c0",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a1e4d161-61a3-47c2-aaaf-7748a3a6b353"
        },
        "item": {
          "id": "bc9a3733-a0c6-46fd-9554-63bb21142f03",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "602b4b89-5f6a-4c2f-8f8c-b324c320b216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3650d2-755b-4adf-9dcb-a6431d32da41",
        "cursor": {
          "ref": "bb2cbdcc-1f5d-4837-ac5f-8c1f767b4bec",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d1d78854-ffec-4f35-b757-d8dc80042c6a"
        },
        "item": {
          "id": "be3650d2-755b-4adf-9dcb-a6431d32da41",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b17a64f0-ea24-458b-8d1f-5b2f1c0595a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fb34f2-a9e2-44d9-9dcc-b1fe9b9e17da",
        "cursor": {
          "ref": "31dedd04-ff58-4e38-aab5-49f9b25d7d6f",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2d42a295-e60b-470e-8863-f49e15598cbd"
        },
        "item": {
          "id": "55fb34f2-a9e2-44d9-9dcc-b1fe9b9e17da",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "76c84b60-06cf-4b23-bf6f-e0f5381df953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af47c804-c7f8-4934-b74e-994f0e35f2a2",
        "cursor": {
          "ref": "b8b56716-bda2-44ec-87b3-cf0c22f336dd",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "3ac5c0b3-d1b0-4a85-ae7c-52423c9841ff"
        },
        "item": {
          "id": "af47c804-c7f8-4934-b74e-994f0e35f2a2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "333fc9b1-c2ba-47bb-a7cd-5b9cb73b6065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e55b95-9582-484f-a21a-9c95be7b466e",
        "cursor": {
          "ref": "269079ec-408f-41ea-9139-602fa718e017",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1760af27-0746-486f-b9b4-ae2fe948a966"
        },
        "item": {
          "id": "97e55b95-9582-484f-a21a-9c95be7b466e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "21c37504-5451-4c30-a31d-02a5fbbc94a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8890c9-95c4-41e5-9e68-96df992c9484",
        "cursor": {
          "ref": "ca4f0661-8b4b-43d9-82aa-d260dccd56dc",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5704a614-2df6-4937-8e85-d3bf2b29032c"
        },
        "item": {
          "id": "df8890c9-95c4-41e5-9e68-96df992c9484",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f3f0a1fd-be30-46d8-ba58-b30d3d0dcabf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95dc255d-49df-4e2c-b3cc-3a1e2452080e",
        "cursor": {
          "ref": "91226840-780c-4768-af10-457a1ea810ce",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "18912da0-62e7-405d-be29-38b77601a9a0"
        },
        "item": {
          "id": "95dc255d-49df-4e2c-b3cc-3a1e2452080e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "52aea7e1-d5a6-4a61-b255-51af2070dca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42105d7f-465f-444e-8fa0-abe9a254e1e1",
        "cursor": {
          "ref": "be0ab61a-9bcc-4cbf-80b2-a1aa8a762a0e",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c7e241e3-b956-494a-aea0-f796ac651d3d"
        },
        "item": {
          "id": "42105d7f-465f-444e-8fa0-abe9a254e1e1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "93969309-02d5-4355-934c-9765c8eac115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c44964-8be1-446d-8791-32c5914bab5f",
        "cursor": {
          "ref": "009aee78-6706-4913-b3dc-257bbac3a540",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f379931c-c9e4-48d6-ae0f-e1b14371e02b"
        },
        "item": {
          "id": "e8c44964-8be1-446d-8791-32c5914bab5f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f0a7a7e0-17f3-4a98-882d-0c692b3ec3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc55f06-c4fc-4544-a718-443c75407e22",
        "cursor": {
          "ref": "2bdb9c59-6a36-409c-89cb-1141979c3898",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ec7fb506-d700-44b9-9326-8491f3eb12aa"
        },
        "item": {
          "id": "4fc55f06-c4fc-4544-a718-443c75407e22",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2fa243c6-58e3-4e23-bf6e-65e4211bacfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44a0d03-8688-42ce-ba74-87e6321d06d3",
        "cursor": {
          "ref": "033c6004-b235-4afc-9141-caf6fdaf27ac",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3c21ecad-98d5-4c99-b831-359f9dfa9cd4"
        },
        "item": {
          "id": "b44a0d03-8688-42ce-ba74-87e6321d06d3",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "85a7a5d9-67b3-40cc-85de-5fad73143bbb",
          "status": "OK",
          "code": 200,
          "responseTime": 296,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "bd17224f-8de8-42ac-beee-d7a07bbfaaad",
        "cursor": {
          "ref": "778d156f-8ca6-43c4-942e-66212f99ca5b",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fcd25538-2a96-4ef1-9313-c2defda713ac"
        },
        "item": {
          "id": "bd17224f-8de8-42ac-beee-d7a07bbfaaad",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1478de06-10da-477e-a661-316bf3f36c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4ea4a3-f395-4841-bbf2-4f710153e3c3",
        "cursor": {
          "ref": "624811ea-a78c-4ea0-b540-ac03986777a6",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a29357ca-ebf9-4443-96ef-4291c78a0ed7"
        },
        "item": {
          "id": "ba4ea4a3-f395-4841-bbf2-4f710153e3c3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "fc328d9c-bf3d-4c28-a34a-d25a5d033072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2a0dbe-ccf3-4dfe-9b9e-a0209abb3bd7",
        "cursor": {
          "ref": "6a62eac8-2df4-4e68-84d5-94683653d9a2",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "20b01ef4-9f63-4534-978c-e475979262c8"
        },
        "item": {
          "id": "de2a0dbe-ccf3-4dfe-9b9e-a0209abb3bd7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9fb882b9-a708-4011-86d6-fb31b3475dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e89896e-f554-4263-ae0e-be4d183fb02a",
        "cursor": {
          "ref": "3dc4cd0e-ab51-468b-8f77-2b9324491766",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d2d91ddc-3cbc-49fd-b4e9-574732e3caf5"
        },
        "item": {
          "id": "9e89896e-f554-4263-ae0e-be4d183fb02a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3a2b1d3f-5bfe-4bfd-92db-59cccca8f7de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa624de-a2fe-4fbd-82fa-f6fb858c9e0e",
        "cursor": {
          "ref": "4d5e1e3b-169c-4677-8505-0b1b5f53124c",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "18a18fa8-5667-4df3-9f71-a9dca7908429"
        },
        "item": {
          "id": "3fa624de-a2fe-4fbd-82fa-f6fb858c9e0e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0f63c8d3-1ceb-42e3-b5a8-8cd59223b435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d905b07-c97e-4101-a685-7c291bb91f5b",
        "cursor": {
          "ref": "d2396570-dff4-4a6d-a3ef-8e5749bdce10",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8d0565e9-64d2-49db-abf5-9bae3fd9e947"
        },
        "item": {
          "id": "1d905b07-c97e-4101-a685-7c291bb91f5b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "830708d1-0637-4ce0-84ca-e4c2a64cf383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e582cac3-61b2-4def-991e-9d61cd57aa3e",
        "cursor": {
          "ref": "d57da26b-e589-49ba-be71-2f31251d93eb",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e4d036c9-ea65-4986-9c66-ba76baa93b99"
        },
        "item": {
          "id": "e582cac3-61b2-4def-991e-9d61cd57aa3e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "80ed2d9a-533f-48ee-ad8f-6c9fe3311f00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633b1e68-da94-4214-8202-80f40aa87648",
        "cursor": {
          "ref": "97a3d8dc-47b9-4294-b2c5-727b564753ca",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8de58b7d-1a1e-42fd-bf01-cba92223e910"
        },
        "item": {
          "id": "633b1e68-da94-4214-8202-80f40aa87648",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d047651d-3ee7-41da-a114-a8a78a9242b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c754512-6f06-4fcf-bfe1-104db975bac3",
        "cursor": {
          "ref": "af25bd93-ea5a-48e4-9877-6333d74cd24b",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "46a8ae97-2537-44d1-a7ff-9943dc0f3ac5"
        },
        "item": {
          "id": "9c754512-6f06-4fcf-bfe1-104db975bac3",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d70bb172-f288-464b-8ea7-c8ed6f93dbd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e070ecb4-911c-43ba-b030-0f3f561124fa",
        "cursor": {
          "ref": "c2024ea6-3969-4db8-bbbe-32ab5deeb59b",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "39612be0-48bb-46f0-9bb4-93d412b6917b"
        },
        "item": {
          "id": "e070ecb4-911c-43ba-b030-0f3f561124fa",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ca64d884-bd9f-49d8-be95-974a903bd90a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1962c6d-b0d0-4a9e-82f4-a434f138d9e5",
        "cursor": {
          "ref": "5ce9a137-514c-4602-99fe-b4d20735aa4e",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a816bbe0-5cde-40d9-9bbf-89ed501f2888"
        },
        "item": {
          "id": "d1962c6d-b0d0-4a9e-82f4-a434f138d9e5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6943f530-370d-4a9d-aab2-a54efc6fce0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12533e74-d639-419b-8537-14202e62cfb2",
        "cursor": {
          "ref": "3f0ceca3-c397-4a08-8dc2-f4ec1349b1fc",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ab6a22bf-49ab-491f-a452-b0c67bed7c32"
        },
        "item": {
          "id": "12533e74-d639-419b-8537-14202e62cfb2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "cd1eb55e-6ee6-4cef-a944-fad9fcfd19c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708f403b-027e-47c0-9476-09ac3c5a09ec",
        "cursor": {
          "ref": "c7013d7b-75e6-4fe5-a5cc-7241aa85810f",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cdd6456d-9221-4ea3-99ee-e993e7792f1a"
        },
        "item": {
          "id": "708f403b-027e-47c0-9476-09ac3c5a09ec",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b3b981d3-2161-4c72-a217-a83d9456fb32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4cc7ba-e936-4356-874e-06ccc97167a7",
        "cursor": {
          "ref": "c0c856b1-68cb-4a33-8802-163f825340b9",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3efc9d92-121c-46bb-b0ae-42b4e4e5cfe2"
        },
        "item": {
          "id": "ef4cc7ba-e936-4356-874e-06ccc97167a7",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8564bf61-67b0-4c1e-82ac-0629ed28b20a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05455f2e-f44f-4bcc-8889-865b3ee0ee8d",
        "cursor": {
          "ref": "34bbbd06-cf9a-4ab1-a4eb-62ac98ce7ca1",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "299cdec6-1414-4657-adc1-ef0c22c2c0cb"
        },
        "item": {
          "id": "05455f2e-f44f-4bcc-8889-865b3ee0ee8d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b90aad9c-cf63-4644-b973-255665824a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1140db5b-2cb1-4765-b264-e5a88a7bbf78",
        "cursor": {
          "ref": "b62f0e37-ae1f-4d0e-b759-b60e5b5dae84",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c9648563-f1d7-406f-b12b-7a9575f133d9"
        },
        "item": {
          "id": "1140db5b-2cb1-4765-b264-e5a88a7bbf78",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "81923594-c3c2-4cfe-a282-156b11e0d3b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16392629-a162-4747-b547-306234894ce1",
        "cursor": {
          "ref": "95252d77-674d-4552-b77d-229e7aeb490e",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "488f05c8-5f14-45a6-98b7-0bb3f93d5ccc"
        },
        "item": {
          "id": "16392629-a162-4747-b547-306234894ce1",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4ae6bc92-d780-4747-b5c6-dd5b808579b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b96bc11-aeb0-4914-8c3e-fc76cffdc19d",
        "cursor": {
          "ref": "d01188a0-6dde-44a7-b2db-1f5394e775dc",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f20feab9-adf4-4d80-a41d-a9b65356a7e5"
        },
        "item": {
          "id": "2b96bc11-aeb0-4914-8c3e-fc76cffdc19d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bcc587e4-7d4e-4f18-8dc0-d1fb2d316b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b33a5a-d4dc-4a03-918c-d6cdd6631dd2",
        "cursor": {
          "ref": "ab19f6ce-2e7e-47a3-a067-01575476a6c3",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9513631b-d020-4c73-a940-6ab4620dd7fd"
        },
        "item": {
          "id": "07b33a5a-d4dc-4a03-918c-d6cdd6631dd2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c5cbe937-bade-4d8d-aa87-4ef9bc8b2133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ee6fcd-f64c-4765-86d1-5794378e8a26",
        "cursor": {
          "ref": "684130f8-bb69-46df-80b3-8d48e384e37d",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "99504753-dd11-40bb-adac-e733081ff622"
        },
        "item": {
          "id": "c3ee6fcd-f64c-4765-86d1-5794378e8a26",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "12417706-6833-4846-be12-c2ebb97e7828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe44b56-e0f0-43bc-a3c4-697d347096b1",
        "cursor": {
          "ref": "93c40035-bb43-421c-a3bf-dfcbc94a55bd",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9c1b649e-2836-43c9-8930-7b5ac603dfe7"
        },
        "item": {
          "id": "1fe44b56-e0f0-43bc-a3c4-697d347096b1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e28374f3-cb99-43fa-a044-9ded96f27118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3798a84-c8fb-4117-8f97-6d3390656d4f",
        "cursor": {
          "ref": "2e82b48c-9141-4642-b09f-b3863bc1b899",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c7608f73-c202-4d74-adfb-e109703a7014"
        },
        "item": {
          "id": "f3798a84-c8fb-4117-8f97-6d3390656d4f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1720928b-21c6-40b7-8ded-ec0ce4bc10ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e758e1a2-98e4-4003-8402-60c2f5475ea3",
        "cursor": {
          "ref": "384f440f-4614-418f-bac5-81b35b46e66c",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ee543f27-f6be-401c-9035-fc0b5fdf562f"
        },
        "item": {
          "id": "e758e1a2-98e4-4003-8402-60c2f5475ea3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6bd4539a-7b3a-4c87-b3eb-5b60dd18ff7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe670192-2b08-4437-8978-2c1df2cdab3b",
        "cursor": {
          "ref": "0f5d604c-7b89-4bc8-80db-84261a513dbe",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1740e9fb-ead2-4e71-ba94-434c2001017f"
        },
        "item": {
          "id": "fe670192-2b08-4437-8978-2c1df2cdab3b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "20862747-3dbc-4dc9-93bd-147b4a5fee66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834c68dd-a43f-4cfc-99ae-67a5adf9c788",
        "cursor": {
          "ref": "3443e3cf-548b-4689-9bea-63a51da585b4",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "97c61d67-a365-465d-91bc-3257b7583de9"
        },
        "item": {
          "id": "834c68dd-a43f-4cfc-99ae-67a5adf9c788",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "538f1e69-8f27-4011-99c6-5c61f70eccf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e69b7d-4701-4f67-8262-a002cfdc6c61",
        "cursor": {
          "ref": "5960706b-4796-47a2-ac9e-7908c585f6c6",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "dbbd9b26-728b-4524-9ee6-b7df743cb092"
        },
        "item": {
          "id": "21e69b7d-4701-4f67-8262-a002cfdc6c61",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c698199a-699f-4d95-a2f4-0e2ffcb05c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3507c66a-4c8f-4395-8009-90ff1a78293c",
        "cursor": {
          "ref": "422bdab5-89d6-411f-ba4c-e1a5754576fe",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3c595175-e686-4961-b671-1a97b9649e82"
        },
        "item": {
          "id": "3507c66a-4c8f-4395-8009-90ff1a78293c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3f19bd54-7d8c-43af-8bec-0eb48821fecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6a9aef-abad-460f-9f52-81879f3345fe",
        "cursor": {
          "ref": "316338a8-18e8-4242-83c0-8e7186206e51",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7a48d411-934c-4aea-b695-033cc1fc805d"
        },
        "item": {
          "id": "2a6a9aef-abad-460f-9f52-81879f3345fe",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "11031cc5-5bc6-4a30-b55a-f5c4966c14f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92782354-7411-4de1-96de-789baaa34155",
        "cursor": {
          "ref": "81e5d291-8af0-4419-8b23-6614562f984b",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b50d058d-bea9-4d7f-a71a-b0307880683f"
        },
        "item": {
          "id": "92782354-7411-4de1-96de-789baaa34155",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7972ac21-fd1f-4129-b7e2-04d7a5a36883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cacb7316-7787-4e1b-8f63-79eb52991a93",
        "cursor": {
          "ref": "b12bf85e-e769-4bd1-977c-bbc4f836ef4b",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b8319535-44b0-4ce6-9684-04cb51601621"
        },
        "item": {
          "id": "cacb7316-7787-4e1b-8f63-79eb52991a93",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "800ae6c0-b70a-4ba7-92cf-9a2d6ef1849c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff21f480-785d-455d-9167-09bfe8327cf9",
        "cursor": {
          "ref": "4fb84e7a-1d51-43f7-abbe-ed1af16f2a24",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "03f3f3b3-897c-40e5-8147-62fefe542acd"
        },
        "item": {
          "id": "ff21f480-785d-455d-9167-09bfe8327cf9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "82124c49-ac8c-4340-914d-b82efc6d1cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a73cdab-7ef3-4cf5-851c-07f0b243218c",
        "cursor": {
          "ref": "3243126d-cedb-423f-a7cc-1f036c221ae4",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "81d059e5-02fd-4133-ab50-07dbe43b205b"
        },
        "item": {
          "id": "2a73cdab-7ef3-4cf5-851c-07f0b243218c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "114a81f1-b638-4e7c-8b7a-7a8a6cbe7b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7138ac03-262c-4387-9600-36c76d12277f",
        "cursor": {
          "ref": "a79b7b65-99d3-4d64-9994-11b05897c340",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "46a1c731-a623-47d2-a2f4-51be739b8c93"
        },
        "item": {
          "id": "7138ac03-262c-4387-9600-36c76d12277f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "67e434d4-4f63-4d14-8021-41a59111a377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ab381c-3199-402a-b209-56bf992f7477",
        "cursor": {
          "ref": "53081769-1493-4299-8702-501a22310392",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "33faa0fd-3f28-4c2b-a65e-a0bf974d330b"
        },
        "item": {
          "id": "d8ab381c-3199-402a-b209-56bf992f7477",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ae7db477-dec5-4c26-acad-704af219ba3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28892b0f-4b83-41f2-ba6e-df10d96fb7ff",
        "cursor": {
          "ref": "d0cc54c2-8016-42fd-8c81-d0da069494cc",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d12d5ac2-3783-4cf2-a748-7644e3820715"
        },
        "item": {
          "id": "28892b0f-4b83-41f2-ba6e-df10d96fb7ff",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "83de7c06-5a9e-423f-a40f-eea963ad2960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33742a5c-a460-467b-a5d5-0f30ebb1ab96",
        "cursor": {
          "ref": "1d07b906-1973-4a6e-9585-e09b65a58c62",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f4cfe00b-ee9a-44f3-9f32-81802ac33fab"
        },
        "item": {
          "id": "33742a5c-a460-467b-a5d5-0f30ebb1ab96",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1c008316-f1e3-41ed-9997-93619a8642c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac569c3-16bf-40aa-afb5-26b5f13395d1",
        "cursor": {
          "ref": "3b1cd372-3b93-4bf1-85ea-df4746c36b06",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2ff3b3a5-241a-4e71-8147-e5894f58e3d6"
        },
        "item": {
          "id": "4ac569c3-16bf-40aa-afb5-26b5f13395d1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "71f275ef-76d4-4305-bb16-30ca57c7e4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f87965-ae86-4c65-affd-9823d70b4ae6",
        "cursor": {
          "ref": "d948e5a4-6627-4d88-a47e-35915f83c1bc",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "426111b2-da89-4581-9865-70700bbb07fa"
        },
        "item": {
          "id": "d2f87965-ae86-4c65-affd-9823d70b4ae6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9bfa66cd-fc24-464d-90d7-b4394c464683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23301cf1-ecf5-49d8-8133-f148e3440c8c",
        "cursor": {
          "ref": "d1efed24-6d03-454f-a2af-87a9ac5e6bee",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2e229dc1-0911-4e66-bf0b-99c76283d4c5"
        },
        "item": {
          "id": "23301cf1-ecf5-49d8-8133-f148e3440c8c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fbee8bc9-4930-47cb-b106-47cb0179a3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245115fe-83e9-466b-9e28-e79da09d1a2c",
        "cursor": {
          "ref": "cd9482b8-4673-4e38-a115-d2bedea328da",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "549a30b7-0c24-4b37-8687-55954ea8d50f"
        },
        "item": {
          "id": "245115fe-83e9-466b-9e28-e79da09d1a2c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "20b46857-0286-44a6-870b-ea4a60f8d7e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f3bd17-7a40-41c2-a398-1338a4180c78",
        "cursor": {
          "ref": "7f5370c0-7303-4b52-8e7b-9cc55fb1a9f6",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "711068ca-f8bd-467f-becd-0835c41ecfaa"
        },
        "item": {
          "id": "c1f3bd17-7a40-41c2-a398-1338a4180c78",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fddbea52-669b-466f-98dd-5cb72543b787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414c15a6-4ece-423c-ad5a-0057ff786110",
        "cursor": {
          "ref": "73587f0e-a0a8-4d09-9fd9-5a606cbfdc05",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a5847106-3d50-4f77-90b5-b26177e820fb"
        },
        "item": {
          "id": "414c15a6-4ece-423c-ad5a-0057ff786110",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2aeeb6c8-0691-4274-b754-9139bbad63ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb7a127-5e67-425e-ac10-3120f852900e",
        "cursor": {
          "ref": "7b56287f-1025-4f5f-8847-f9588d34a242",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "463d0156-7ac5-4e1c-af25-5b9b3bd5c33c"
        },
        "item": {
          "id": "6bb7a127-5e67-425e-ac10-3120f852900e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e81786a9-1363-4883-84f8-71b558b19097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfac14d3-9e69-48d9-9120-722a17bace79",
        "cursor": {
          "ref": "6d6a76d1-6ea1-48c9-99a5-c8be107f3db3",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6af32689-0fa8-4f37-b354-82a23e73bbeb"
        },
        "item": {
          "id": "dfac14d3-9e69-48d9-9120-722a17bace79",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e3dca48d-aacf-4fb7-a024-53930d4db9a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a935c57c-55a1-49d7-88d2-615ed79d77de",
        "cursor": {
          "ref": "ccd2bb4b-9817-44c9-b78c-61fee92c76b9",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9162449e-6c7d-4cd9-bba0-e111da4dbfb5"
        },
        "item": {
          "id": "a935c57c-55a1-49d7-88d2-615ed79d77de",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0a4892e9-4995-49f7-a40e-9da0b5cf041f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b95da6a-d963-4e31-be40-08892958840f",
        "cursor": {
          "ref": "b1b17229-8813-4ac2-a3a9-02362ee81bc1",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d2bd5292-cbeb-48af-9646-9d3c3f738605"
        },
        "item": {
          "id": "9b95da6a-d963-4e31-be40-08892958840f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8fc92606-9a5e-4cb3-bd02-5dc2460e7775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144048b5-7aa3-47c9-a7cd-0cfb16650ef0",
        "cursor": {
          "ref": "1e61c534-2647-450c-aa73-c89c4f7c4cef",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "618de9de-a47e-46cf-b6da-473ceecaea61"
        },
        "item": {
          "id": "144048b5-7aa3-47c9-a7cd-0cfb16650ef0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a1a9fbcb-1955-43f2-b831-6925b3ec4097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "662ed938-bfa1-4a72-87bc-6208998f1be4",
        "cursor": {
          "ref": "8eed6ead-5618-43f3-a1cd-b2626cced02f",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d13d224f-f271-4ac7-89a0-456300df42fa"
        },
        "item": {
          "id": "662ed938-bfa1-4a72-87bc-6208998f1be4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "56473ef8-e989-4f80-b167-164a7923b20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7adcdb0-8aac-425f-90fc-3f34cec56f4a",
        "cursor": {
          "ref": "d08d1381-e53f-4aba-bcba-27213f4838da",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a8e78b2f-2eb0-4257-9850-808db34762d4"
        },
        "item": {
          "id": "b7adcdb0-8aac-425f-90fc-3f34cec56f4a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "97ba2076-6186-4d99-976c-b8fc4aaf5dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1778de-e6f6-4269-8ba1-f0ba35ff3d44",
        "cursor": {
          "ref": "81cc1c1e-bd07-409c-88de-8a488e116ad3",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2a385431-e234-46e4-8f4a-ecd14f628ab5"
        },
        "item": {
          "id": "9c1778de-e6f6-4269-8ba1-f0ba35ff3d44",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "68e7a25c-bbd7-4470-bb43-98abcf2f53bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668541b2-f51d-44be-af97-b1762acc23bc",
        "cursor": {
          "ref": "0b00c9af-ec68-4056-884c-42e5e224f8eb",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cbe22980-3a34-4f6f-bae0-fb30ea952a5e"
        },
        "item": {
          "id": "668541b2-f51d-44be-af97-b1762acc23bc",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e5a95417-9841-4646-a2d4-ae6e3ccefd63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6deea0a-68e8-4783-8fbe-cf04b4c8f625",
        "cursor": {
          "ref": "ddffb63e-5e2e-470f-bcd3-24fc5badc91e",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b4405e2d-4b02-46f1-8cda-68bfa7df6aa6"
        },
        "item": {
          "id": "a6deea0a-68e8-4783-8fbe-cf04b4c8f625",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "eea0a99e-a9a1-41d1-bd5b-3299b627d5c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e17d1c-0525-4e82-a062-7ceb23cdba39",
        "cursor": {
          "ref": "ef25b659-1382-4ca3-87b8-8b769ea7035c",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a5c01499-9562-4669-9b18-85b1042c4b2f"
        },
        "item": {
          "id": "28e17d1c-0525-4e82-a062-7ceb23cdba39",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d79ded25-5b0a-4e45-9dde-32ff11e3408f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c398c9c0-a96a-4e5c-83b7-5187793e65e6",
        "cursor": {
          "ref": "685de1f3-8c6a-417b-8382-626abcbcf608",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fb1a282c-35e8-448f-93df-7a634c8c8827"
        },
        "item": {
          "id": "c398c9c0-a96a-4e5c-83b7-5187793e65e6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bbe78a45-39ff-4a50-9719-44fd44f237f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f52319-a6ef-4061-b5aa-adfb6591acee",
        "cursor": {
          "ref": "284c0eda-2ea7-46f8-9986-f7ee3bcaa738",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "eb294215-ed3b-47a0-b0b9-78af5b453ee8"
        },
        "item": {
          "id": "b0f52319-a6ef-4061-b5aa-adfb6591acee",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a935c013-4f76-4e74-a3b6-46d5a3c705f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3de4dde-f3b2-42cc-84d5-4f7160960f80",
        "cursor": {
          "ref": "9c0ea746-70a0-478d-ba29-5da0977a8d56",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "358d37f6-0e63-41c9-8b4f-da7c2c25c487"
        },
        "item": {
          "id": "a3de4dde-f3b2-42cc-84d5-4f7160960f80",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "456d91ba-e673-41b5-a0f1-6e2a7e7d59c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e32937-a639-4533-8088-7b0aa37f7b27",
        "cursor": {
          "ref": "356d1005-9209-4b5b-927f-f3b3892ad634",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "6f7d5f35-5108-4827-a05b-f157beb2c55e"
        },
        "item": {
          "id": "45e32937-a639-4533-8088-7b0aa37f7b27",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "bb0434dc-5c80-4861-9945-4a6205fa26d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3f1b2b-ce30-41d2-a980-6ebc8becad08",
        "cursor": {
          "ref": "7e1576b8-fb04-4373-b7fb-b1cd40f5d0a7",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4f81bc76-a11c-47a9-876e-828dfc5d1cc2"
        },
        "item": {
          "id": "5f3f1b2b-ce30-41d2-a980-6ebc8becad08",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a2a38b4c-698c-4dd5-8168-f0f72bbcbb98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c7ddeb-f299-446c-a011-94238ad1b362",
        "cursor": {
          "ref": "f26a9d37-a229-4cfc-9b5e-6558e5167f4b",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d54f02aa-acd0-43e3-99fb-0d82629edb91"
        },
        "item": {
          "id": "44c7ddeb-f299-446c-a011-94238ad1b362",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f661dc15-a8ea-46cf-b8bf-80643d91231c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7e92e9d-3716-4b95-96b1-551444444254",
        "cursor": {
          "ref": "368c3f40-2b17-497a-91bd-219d6fc0262e",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e8d7f05d-34ec-4088-9a7e-523f7823e2b7"
        },
        "item": {
          "id": "e7e92e9d-3716-4b95-96b1-551444444254",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "35c10968-2068-4196-9761-acd48d472ebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e32c73ab-6be8-4af3-ac0f-0c82ccd35d24",
        "cursor": {
          "ref": "0af3698f-05a8-441f-8334-85b18681db5b",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e0bbb043-61d3-4d22-ad9a-dee8a0163825"
        },
        "item": {
          "id": "e32c73ab-6be8-4af3-ac0f-0c82ccd35d24",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6e2f230b-21f0-41ac-b16c-828e69ad1057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4fcdcd7-fd03-42ae-9103-307efb70e1b1",
        "cursor": {
          "ref": "2e1f1cd2-861f-4962-b299-51e83716e929",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8a136f84-1074-4f87-92a3-117f80ee3345"
        },
        "item": {
          "id": "e4fcdcd7-fd03-42ae-9103-307efb70e1b1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d49798d2-7e4a-4392-8d70-e9dc200a097b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb24d139-a0be-4aa7-9cae-b646bbddd4c7",
        "cursor": {
          "ref": "617068ce-5c5d-4c42-9d1c-28d5121c3bcc",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "bf6f28be-6bd9-44bb-a309-c934b00177e9"
        },
        "item": {
          "id": "bb24d139-a0be-4aa7-9cae-b646bbddd4c7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c31420b3-5ba3-4a85-b944-a0002742fd16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77efcf93-496d-411b-b073-7704d98ea438",
        "cursor": {
          "ref": "20e5bb0a-c3c0-43bb-8c40-cbcd9d6892f3",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "55140ab5-1a7e-43c9-9e5f-cda9d45637b8"
        },
        "item": {
          "id": "77efcf93-496d-411b-b073-7704d98ea438",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f1896f22-cdba-4f22-9c36-63d5ec91ca5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41746a75-76df-4a2c-bc79-180ef226fcfc",
        "cursor": {
          "ref": "82939cef-d99a-41bc-8065-694156f00431",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "62498363-b80d-4a91-9dc2-33b36e99244e"
        },
        "item": {
          "id": "41746a75-76df-4a2c-bc79-180ef226fcfc",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "57e4ee3f-c27a-47e1-9bad-62331ac36b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd63b36-a697-4419-bca5-2a4408cffd74",
        "cursor": {
          "ref": "cc37c3ee-f03a-4255-b32d-baafcf58e47d",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d83f9054-7bb3-45e4-b214-62650ffb80e2"
        },
        "item": {
          "id": "ffd63b36-a697-4419-bca5-2a4408cffd74",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "31295e22-cd6d-4ede-94eb-4b1fc38360e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d498516-8756-429c-8e8e-f0a180eb0743",
        "cursor": {
          "ref": "11738e3b-4c69-4ff5-a07f-4610929ddb84",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "61a01603-0220-4489-82b4-b5eed9400ba3"
        },
        "item": {
          "id": "5d498516-8756-429c-8e8e-f0a180eb0743",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "848f2feb-71d9-42bb-ae33-0d506f029277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33746e7b-2b0b-42bd-a21a-4d4d41efdfce",
        "cursor": {
          "ref": "60a4a936-dda7-4690-9593-1866d5027f31",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2f630f4a-59f3-4abb-94e5-3cef51ca90ca"
        },
        "item": {
          "id": "33746e7b-2b0b-42bd-a21a-4d4d41efdfce",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a459c160-0b9b-4cf6-9e44-b2a0b2d6799e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884e7534-0730-4ea6-a8d7-6baec7ac05cc",
        "cursor": {
          "ref": "67277a30-d924-4be8-b25d-aac0bfc26644",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ae070d3a-f912-400d-a5fd-ef72bf140445"
        },
        "item": {
          "id": "884e7534-0730-4ea6-a8d7-6baec7ac05cc",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "64917e50-14a2-42c5-b54d-31ab0ee760b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1876d9-263d-46e9-b5f4-3ed0b9277f42",
        "cursor": {
          "ref": "ecfe9831-7280-48d3-926b-b5e382c0d1ca",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b1f8843b-3916-4b7d-8f8d-71ae961aace1"
        },
        "item": {
          "id": "fc1876d9-263d-46e9-b5f4-3ed0b9277f42",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "daff7f95-ba1a-4539-b7c5-b2928a17a0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d462648a-8633-40f6-8577-a922ad281323",
        "cursor": {
          "ref": "4554a3b3-f453-4039-bafb-c21cf8eee480",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "00f42915-9ddc-45c4-a845-155a76d5fb0e"
        },
        "item": {
          "id": "d462648a-8633-40f6-8577-a922ad281323",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b22234fd-82e5-4620-b723-3d95d154d067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f02d349-0710-4bf5-98d3-141459307ee2",
        "cursor": {
          "ref": "b2f59a6b-6fc8-40e5-a311-1a344b3278f1",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "23a343f5-a66f-4d3d-9e9a-054cc4b7c49e"
        },
        "item": {
          "id": "3f02d349-0710-4bf5-98d3-141459307ee2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fcbc4fbc-7ddf-4c6a-8b48-9d2bb0479be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d2b06f-3d20-478b-b649-1232149436ad",
        "cursor": {
          "ref": "b8f81aae-7abc-46cd-9f16-21f698e70a73",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0116197d-a548-4b8e-b347-2be1307a353d"
        },
        "item": {
          "id": "17d2b06f-3d20-478b-b649-1232149436ad",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "307a61a0-92fc-4f96-8c80-632fc35efb47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39afb0a9-e7d4-4067-9064-1caa550dc14f",
        "cursor": {
          "ref": "8da67ec4-26c2-4070-9a6a-f80617350a6e",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e11d743c-ef85-4910-b400-dabcdb4a15c2"
        },
        "item": {
          "id": "39afb0a9-e7d4-4067-9064-1caa550dc14f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c8e9f35e-81fe-41ed-a8af-5cff2f5e6ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f594383b-573d-45de-bfb2-8ac319198553",
        "cursor": {
          "ref": "a618e59d-d4a0-47e1-8e68-636163d42929",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f2fccfe2-d85f-4375-8bad-afc4fac1d174"
        },
        "item": {
          "id": "f594383b-573d-45de-bfb2-8ac319198553",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "9642ad3d-9cbd-4b92-8d9e-9c7026319fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7fcc89-56ed-4de2-8010-9235fd54e5df",
        "cursor": {
          "ref": "1b7c0dfb-4a11-492b-89af-f5448c06a4a2",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1f35b824-0037-40a0-bee2-994b1585736f"
        },
        "item": {
          "id": "6d7fcc89-56ed-4de2-8010-9235fd54e5df",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c4eef98d-84c5-486c-9b7b-add4fe69c49c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c691ce5-826f-4edd-849e-36f9f2f4180b",
        "cursor": {
          "ref": "68bdb320-1f73-43dc-9ccb-682133e515d9",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "996082c3-5eac-423f-b021-c61d04ff2241"
        },
        "item": {
          "id": "6c691ce5-826f-4edd-849e-36f9f2f4180b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "078a9c09-f5fe-4e18-80a2-ccff23562a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba230b81-00a6-4e4b-8423-97be92a7adef",
        "cursor": {
          "ref": "a704d843-4498-4adf-91fb-e11691e68e12",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "8d546bc5-69f1-4edd-b33e-b2442692046a"
        },
        "item": {
          "id": "ba230b81-00a6-4e4b-8423-97be92a7adef",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "613b06bb-0ff5-4473-b91b-d656d63afacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5252e13-1d9e-4420-b305-07fb4b9cea14",
        "cursor": {
          "ref": "32b7b2f3-2f85-4aa4-a394-436fb72cb573",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "07f7a734-a9c6-430e-a8ca-c0fab05683f8"
        },
        "item": {
          "id": "f5252e13-1d9e-4420-b305-07fb4b9cea14",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a0eb7791-e47a-4a63-8f6a-d7190f150952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4cac289-b03f-4f5f-832a-c718d780edd3",
        "cursor": {
          "ref": "0c86ac12-7859-4253-9a75-3de580259688",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b1fc5f93-39f1-4962-8cab-bba88874c6c0"
        },
        "item": {
          "id": "c4cac289-b03f-4f5f-832a-c718d780edd3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "326065c6-002d-41e2-b813-4fe65b136d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5c29ea-8ae4-433f-8efe-1c24c80330a0",
        "cursor": {
          "ref": "7d863892-459e-4785-ae6d-ada2730c56a8",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0d3ce181-e253-4f30-8f3c-632249de9949"
        },
        "item": {
          "id": "1a5c29ea-8ae4-433f-8efe-1c24c80330a0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7bd4abc8-d726-4589-8bfa-5fececa65c10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f53242f0-a8c8-451b-82c2-b1a04c8e6d4f",
        "cursor": {
          "ref": "7c66a6db-23af-4684-b5ff-760b36d21bd4",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c26e802e-3693-45ec-b3e5-6df512e9ecb7"
        },
        "item": {
          "id": "f53242f0-a8c8-451b-82c2-b1a04c8e6d4f",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "4d8dfe57-e04a-4c5a-a183-a160aef7da98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "4545842d-44bd-4ac8-b924-031623840b36",
        "cursor": {
          "ref": "87a7c023-afcd-4cb8-8f6c-537e554107f0",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "45162592-196e-4ebe-8806-4937f1c6f1b0"
        },
        "item": {
          "id": "4545842d-44bd-4ac8-b924-031623840b36",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "327b10f5-4727-48b4-9590-12e1094e9c13",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "0209be28-d973-469b-af4e-6acf51379cf0",
        "cursor": {
          "ref": "1f766474-cdfc-48e5-bcda-f47906a4234b",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "03cb5c7d-eb6d-4828-b4d6-f47e92a941ba"
        },
        "item": {
          "id": "0209be28-d973-469b-af4e-6acf51379cf0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ec9534ae-b317-4d6e-a3a9-63c46c631a86",
          "status": "OK",
          "code": 200,
          "responseTime": 1777,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdae3378-d27f-40aa-a0a8-91da0d4132f6",
        "cursor": {
          "ref": "1c39d156-9637-4a19-b80a-8689e1fae26c",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "fc14575a-9fb6-4e16-bed5-5e264c466c8f"
        },
        "item": {
          "id": "cdae3378-d27f-40aa-a0a8-91da0d4132f6",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d1baeb3b-7f0a-4c63-b728-f50adfeaeb88",
          "status": "OK",
          "code": 200,
          "responseTime": 2502,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8125c2ce-a0cf-4d06-95bd-01d2f7671823",
        "cursor": {
          "ref": "2b5a31d3-7ffa-4d16-abb9-eb9359cf5bcc",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ad0bc31a-6b4c-45fb-b39e-f92f3568b47e"
        },
        "item": {
          "id": "8125c2ce-a0cf-4d06-95bd-01d2f7671823",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b7246d75-a302-48a3-849a-e254ee64e356",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "8125c2ce-a0cf-4d06-95bd-01d2f7671823",
        "cursor": {
          "ref": "2b5a31d3-7ffa-4d16-abb9-eb9359cf5bcc",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ad0bc31a-6b4c-45fb-b39e-f92f3568b47e"
        },
        "item": {
          "id": "8125c2ce-a0cf-4d06-95bd-01d2f7671823",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b7246d75-a302-48a3-849a-e254ee64e356",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "8125c2ce-a0cf-4d06-95bd-01d2f7671823",
        "cursor": {
          "ref": "2b5a31d3-7ffa-4d16-abb9-eb9359cf5bcc",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ad0bc31a-6b4c-45fb-b39e-f92f3568b47e"
        },
        "item": {
          "id": "8125c2ce-a0cf-4d06-95bd-01d2f7671823",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b7246d75-a302-48a3-849a-e254ee64e356",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "ba2571ac-6424-41c4-a3dd-86758f5cbc28",
        "cursor": {
          "ref": "ebae537d-f46b-4b81-be37-dddeee4e168b",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fefa4a58-adf1-4177-9130-a203e4ac6915"
        },
        "item": {
          "id": "ba2571ac-6424-41c4-a3dd-86758f5cbc28",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "916310ed-75f8-4cc7-aa63-7febae5669ac",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "ef3d3e72-70dd-4f5d-a125-4de8660dc191",
        "cursor": {
          "ref": "366b4ef6-acba-4539-9a4e-b7759549ea8c",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "106fe48e-ee3b-4f26-96f9-40cb452b629c"
        },
        "item": {
          "id": "ef3d3e72-70dd-4f5d-a125-4de8660dc191",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5ac49554-effe-4af4-adaf-99e6fddcad09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "ef3d3e72-70dd-4f5d-a125-4de8660dc191",
        "cursor": {
          "ref": "366b4ef6-acba-4539-9a4e-b7759549ea8c",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "106fe48e-ee3b-4f26-96f9-40cb452b629c"
        },
        "item": {
          "id": "ef3d3e72-70dd-4f5d-a125-4de8660dc191",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5ac49554-effe-4af4-adaf-99e6fddcad09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "5ae0eaf3-647e-4613-a546-bac911633f4e",
        "cursor": {
          "ref": "ee60731c-d26c-4095-a76e-be647ffd24a9",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "69080a5b-fc5a-4d20-91cb-4d8939bf1081"
        },
        "item": {
          "id": "5ae0eaf3-647e-4613-a546-bac911633f4e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "9ebd3184-8d8a-4068-a463-519011236714",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 110,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "30495f66-d93d-4711-93f8-5ed88e81cc4a",
        "cursor": {
          "ref": "b547ef36-75ac-4335-b571-f56e6d0d9c95",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5c81a3e0-a5dd-43d5-bdd0-5f4c83b90165"
        },
        "item": {
          "id": "30495f66-d93d-4711-93f8-5ed88e81cc4a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "896ad388-0f56-42cb-bde5-98a69b96e731",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "30495f66-d93d-4711-93f8-5ed88e81cc4a",
        "cursor": {
          "ref": "b547ef36-75ac-4335-b571-f56e6d0d9c95",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5c81a3e0-a5dd-43d5-bdd0-5f4c83b90165"
        },
        "item": {
          "id": "30495f66-d93d-4711-93f8-5ed88e81cc4a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "896ad388-0f56-42cb-bde5-98a69b96e731",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "3c9fe61f-2542-4a09-b03e-f8136b4004a5",
        "cursor": {
          "ref": "88d6b8f0-abf7-46e9-ab6e-9696da5e6552",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f0f30d5f-57de-4c02-83af-4cb3deef3c7b"
        },
        "item": {
          "id": "3c9fe61f-2542-4a09-b03e-f8136b4004a5",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "507da7c6-4451-4d44-bac6-a2eed6815058",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}