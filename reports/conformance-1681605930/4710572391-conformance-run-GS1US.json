{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "93886801-b96e-45c6-af06-2cbe0298be22",
        "name": "Clear Cache",
        "item": [
          {
            "id": "bb4c0a30-d0d3-4779-9b8e-3cd162d4766a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ecabfe31-bdf0-44d0-9598-77697198fe04",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3db1113e-404b-4886-a9d1-d66c8343bd22"
                }
              }
            ]
          },
          {
            "id": "6b368bc5-867c-4ca4-bd67-d26ed70fe85f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f3f8cb3-b59d-4a07-bb4b-29b88d694e7d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2f119c11-c68c-48e8-86c6-453caf1ab927"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "695e2291-c443-4bd7-aa09-f5823a55d3c8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f71f4658-b98f-487c-a38a-fe228ddc36a3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eb4139d1-296e-4125-8548-1a4696fe775b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a5693da-3abd-4bc6-a233-a318eb5c8bef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e50df5b0-0596-4b1f-ba67-69fc68f19c0d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4187d6bc-f35d-4e32-bd0d-780926747ec0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a134d606-9b2d-4726-b1da-c0ddf36b3254"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "72309906-0aba-4e92-9858-69cbc126d7c6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cef1d117-7495-4ef0-bff5-8d8e9a78d4d3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f79f4032-1784-4a21-803d-ccb13820139c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "006604d9-6084-408c-8342-3fcb114a4fec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37557e26-bae5-4e2c-b1d3-f55397706a0a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27497f49-201d-4c85-826a-e61f9b7be57a"
            }
          }
        ]
      },
      {
        "id": "328772f4-e1dc-4681-91e4-8a78f61d88fb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5dc3dd46-967e-4d4f-9c44-098d01a05d6c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "17b1f9e8-6c64-45d7-abef-9f8e956f43cb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4b9b9bc3-4ca5-4bc8-83fc-5b422b31564b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c27d264-4d6d-4e7a-a077-aa4293d19f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dda7e8f4-90f2-4274-b2e3-b6eb167ebd42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990bcc4c-912b-4fa4-bb9b-8b16f2660d4b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea78bda-4c18-4826-b455-22a647681e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ec17452-d599-4971-9ccd-67c1d966960f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292d2e75-7282-4981-9e26-eb1554a338bd",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0c1a92-78ae-41b1-bdcc-569e679cbcbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "191ea59a-836d-4590-aa75-027834ec7cb5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "747e8b4c-e447-4fa4-89e8-47e2b95da6c3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "120b381e-6515-488e-813b-57f054ba49f3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ec982c-9653-4766-8b5a-945dbd7e1db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ec0afc1-0256-40d1-ae88-306d5dd0342b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013c3d13-a6f2-4571-a24b-fb88d6d04b6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e41fd39-dc84-46b1-b55b-f2fb4023a46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa59fd7-7a10-43e1-b0ff-d256ad112e44",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96970c7-d11d-41e3-945d-ada826d605bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebbcc0d4-ccac-480a-ae51-d7ad724050de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86ed041-d0ef-4752-ba52-30493ab69c28",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "2a5caf15-2e64-41ff-8502-f88a6d162363"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "04328ebd-4ba4-45bc-8f2f-7ce59f887280",
            "name": "Positive Testing",
            "item": [
              {
                "id": "58cd521b-94fd-46c2-b6fc-4203fd5bfc91",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94e79b58-0a9d-4ea6-ab1d-fa9e05dfecee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7f67ccaa-9842-4378-8041-d5541e125d8c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6fdb88cb-576c-43b9-a7b1-30c77ac72cd9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "286822fc-067d-4897-81cd-5f5d92afdabc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eaf267ee-af32-4319-a3f4-b5d838122ea8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1deb0001-b573-49aa-991f-62ef8a720e71"
            }
          }
        ]
      },
      {
        "id": "57fa98c3-0aae-47aa-943e-64dc2c43087f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "53dafb79-a954-496c-93cf-de701ce6d70a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e375038-a464-4618-b069-0b9477c9ba2d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f797732e-265c-4eff-ada0-0f5a5d435b10",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69037002-16a1-4aad-942a-9351930111ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1865099d-84ab-4185-b482-57d3040da9d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7aec4b3-7cf9-4971-807a-dac1dc12166f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c959c70-a380-46bc-b8d3-f55183bbf393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b21eaf6-8c6a-4bf1-ad47-8933740db6ef",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e12d74-d67a-4672-aa65-20d44315716c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f9d5a07-f0ec-424b-9e5a-e2024651b64d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b37f304-34cb-4114-a6e3-014b3f8b0fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7e0ca76-4368-49dd-afd3-a99532d8deac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07715bd1-e071-4780-9b2c-809ad8abfbc7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d94917-e708-4757-8d4d-0340baa2afc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "682388ea-7109-4087-a11c-b1b5924d83ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1fe9fa-580b-4e52-b62a-78810d6ad4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99419fd4-6c49-4515-abd5-7507e554b303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7bbcaf-aba9-4034-b9d9-fbbab324e7bc",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "582cbbf3-7a03-4fa7-b502-2b1aab1b3762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74bfd55f-2042-448f-9c48-919d15459aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43bfae36-9064-42c7-bc7b-a124f05341d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "933b53b1-4a6b-4485-9da9-5881aee96c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9621eca-8759-447e-b9eb-1d88d929d9fe",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecef699a-f0e6-435f-9913-0d2bacafc2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c6a682-a194-4c3f-9ac3-f89954e97f58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9159242-d623-49d2-ad4e-3336a8ad5f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92faf8f3-0339-4ade-ae10-c900c0053f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce7a7e6-4757-4b3c-a448-fd082a29709c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d475ae9a-7587-4df7-871c-8c014e39c462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f1c841e-98a1-48b0-b7a5-ef5ff20ca9f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87113362-16f3-4e3d-88ba-61853805ece1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fefe87f-41df-4c24-afac-b24f3214144c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "073d37fb-b507-4eba-be70-faf95ca42f23",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7600a9-fff1-4151-9f40-34a67e2a3713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "069bc901-8432-4c6e-aa04-2b4e4e81f3d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbdd4bfa-84c1-4898-9908-09b57e8efc1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6503d858-7d70-4af8-a6af-f50a8315f101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d01084-2e1e-44b4-9ebf-dd135f2307e6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9929d94-dad9-459e-b16f-dcedcf09a84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d288727d-2d35-4f58-a781-4c69979bcb1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eced523c-3d0b-44ae-bb07-50d586090882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c885b899-215c-4f36-963e-22cdbe9822d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42cde344-18a6-49dd-9c35-dd4fcd849f2c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd332cd8-f630-45b1-8814-4375bce00169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c76a84dd-68a6-4611-9ae2-1446514f1a11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2349845c-e034-46be-97f1-54e0fc8cef7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93c5eb44-3cf3-4967-8f5f-bfd8d6ddf307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfdfcd7f-67ad-4084-aee6-bda817cdc465",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "122acd9b-949d-4c98-87e4-ba3c36fb0b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b44a74f-47dd-488b-916f-f2e841f5d1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c177d275-01d4-4f81-a895-f6b91b16730f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e04e05d2-50e6-462a-92d4-e9b91b1d186b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2749ac-a587-4d40-99ba-54562fe0b800",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa23025-e1ef-4a14-ae82-222c30090f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d842a52e-dfaa-499b-af76-cb24e751e2ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7bb3b8-491a-4c14-acc0-5d0735a8f072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3cca953e-072e-4c52-b5e2-d64f8a5376b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0771756-0843-4d94-b838-02cadf6cb1ec",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b583d0e-c449-4edf-a1da-1b6a653f02df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03302518-f207-49de-b5c7-8c552ce5d82a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1719ff9c-3ecd-43d9-89fa-b1838d5cdc42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "445f1724-207e-40bd-b105-b2a115546dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b96fcdd-1e8f-4971-bf8b-d9ebcc9f4b46",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39fc670e-51bd-4c42-a05e-cf61241e02f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa1ee51-e406-4358-a883-564ad22d0e0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15362fc6-f84a-4b55-8a1f-ecdbcc34c4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41f6ec9f-ddce-41da-b357-2fb4d9776e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80eb5dc-903b-4db5-9bbf-6fc11f1f3e7f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61a6026-6707-44ab-8675-12fc00ae8d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cdc9dfe-359f-4876-9a14-cfae0e82e3fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc42ece7-b183-4147-b5c6-b6e7eba0b00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b7054f3-362f-4121-99b8-c054e5df19c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71bac17d-34ce-4ca4-aa66-20191d80b1d6",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc31f7a7-5fd0-45d9-b4d5-b0974e314684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8cc6513-d994-440d-837c-dd06727542bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8115541-7e2c-4cd6-9336-793ed0027d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "211e35d2-fcfa-49da-bdd2-44a8fe82a7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3f054c-b638-49e7-adb6-04367cf0c1a9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c22001-2044-4442-87c6-6e34a17c00d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da0a3fa5-ec9d-4af9-993d-dc8cede0aa1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21f8b1b-bb7b-452d-80e1-29a0158b15b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61d1757a-53c4-4486-92ad-280acf26b175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e141961-7219-44f8-b7d2-62eeefc19742",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e155de-00c1-4ce9-ad40-9349b645d566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dec55f3-6527-4f51-9dc1-109e5b47327a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0cf76ac-084d-4d58-bf38-0dd659b39f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a437e121-838b-4c2f-ac5a-68adf3ebde5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99848f5a-724e-4e9c-aef2-7ea683cf253c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0338ac-0edf-48c7-98cc-e82bbf762148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57dfbd8b-287c-41d3-8d2f-d2279ab6cf32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee02f690-db83-4afb-a657-c45135a4094d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "41c0444e-aa20-4a24-8ca9-479536fe9f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c427d3e-4266-4c0c-adb3-c3a098585f18",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adac1a47-e3ba-4a53-9752-220d15a76e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d9b0143-083b-4621-9aae-70fd0fc1defa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0144398a-5558-4e01-b7d4-6391d5ab9c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6188018-1008-4df4-b75e-8e62627a41a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d5770b-fbc6-4212-8346-ab5372706a28",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f562c8-5579-4799-8e69-5ce62d2d084e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50190162-0e13-4ecc-894f-a831e0709136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a41535-9f1a-46b9-a87f-6b0e92461984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2c6e09-bd27-4352-811a-7a9178a018dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b352c0df-b338-4efd-a6c9-bb583fe62475",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8366ab59-f9de-4974-af08-c3a236d917aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83cd6349-73be-453e-bb67-a21635fcfc42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f650c6-f2c7-4dbb-b388-b5a943e1e100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccff3dbb-a619-4366-a7d9-5647da35b107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3137092b-c02f-4c48-bd8d-0d5bc38ac2d0",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05d1492-66c1-4345-b99f-a4fe94300c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54798dd3-36fb-4dd9-8bed-8e98371329c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0acd2f4-9dd7-45ac-baf2-0b0a763d7f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "58eb94b5-fb0a-4bef-8d42-d9696a6afa16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b6d797-b1a7-4ab4-9ceb-1854e32c3698",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e6c97d-83bc-4342-a9d6-d7a7d5183a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2a02d54-98da-4ec4-af38-b6bdb95ce215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6cd7488-ee02-4d52-b09d-a6e8e3f38741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7fa780c-ddc0-434e-be43-ceff325eb60a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1faefe5d-5c18-488f-a1f1-ef7526fec0d1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92818626-ee2c-491e-9876-b4b238267282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3705d5c-92d4-475f-b7b0-4ae12d49d3e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcb9994-7c1a-49f1-b812-afaffb2d308c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3cce5d8-d146-4729-b1b5-8ca19f0f36a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371c2b0d-3dcd-4d94-a5e7-05b148b20dec",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "590fa9be-1bff-4dcc-ad10-9b9c85c23ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a849025d-57ae-4487-9aa2-932e74d8b1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce0ccf6-0ac4-43d3-96b1-5a890fdb0e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8aedfce4-b2ca-4a46-984d-e3d99c3b01fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32aecfa4-bf9b-4fdb-9c23-488f188fe418",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfeba419-5abd-4544-a1de-32443abc438f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "686dd424-2637-4932-bbba-f334a6204f29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da8b81d-aa06-47ec-9665-c9ccedecdc69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3895f43d-5896-474a-bdc2-1b4172a79516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81940e7f-7296-43cf-8bf4-7459ee1ac324",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee6f6a5-6587-42c2-8a01-9176b783ca19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb0da1e-222d-4c9f-ae3c-53bf9c2c05e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee933177-74b1-4ab7-89b9-0f30b5005b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0a98d1d-fe6a-49a9-b759-72a057e89a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84231fa-4fb4-44ca-9877-c513aadfa61d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f6c0b9-bc9e-4724-8538-a54a2236ea73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb8441c5-11d0-4315-82a8-1a69f930a516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1acff9-4fa2-4738-870f-cae49d5ce7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "102038e3-33f3-48dd-b5af-3a34aa91f67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ba9395-3eba-44e0-a90c-b91f7ec8338a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e8905b-0c50-46ec-aedd-3fda03bd8eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a6c3c17-d2fa-494e-9a95-af47bcc702da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6101512a-727c-49c2-9502-9634a3e18e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f87d0ac3-9046-485b-8573-c779335e541c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f78170-25a6-4ebc-b491-0a4302045a28",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1ed6fa-9861-4d8c-9960-5bfb0da1c457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9257e1-f89b-461f-ab1c-dc3d567a6748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e624d1c7-0d1a-4a9b-af6d-648f27e7aaa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce8251e0-6e32-4422-bcfd-05293b567ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e61d30-4b9c-45c8-80ee-ab21c1697db0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd79ed31-3208-480f-abea-def543cac782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30946f35-d898-4117-a1ee-aeee9ae21b6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed68999-d5e1-41a2-b258-d1065e0233dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8c807a7-779f-4b07-8131-9aa1bbb13136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbece7e-2829-41ab-8554-e60066fdf07d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb2618f-f4cf-46b7-8e94-dc774a8819c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f8e763a-44a5-4249-8d1d-bddb377e4699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a0c2a8-6299-4c51-95ec-73f6426a9fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b4c9e73-8492-490e-84bd-326f0b546477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ffc6449-25f5-42c5-ae19-1c6727dd0384",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4759eb6f-f121-4cab-88b2-7299daa0a882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771d7485-d940-40ae-8072-2dd5ec963799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d0ae09-d763-4d8f-92fd-d53f7161e2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47562055-a90d-405d-9072-fc304bc87c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a87f4da-f956-4da4-b05c-394f69d3f987",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "749bd70b-ab18-4bd6-805e-ead34ce9ec13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "414f9c57-d04f-4210-b8f6-0b01498a1600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a617162e-c0a3-45c9-8c34-6fdfa7336455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "509eefb0-b66b-4b10-8648-4857d5114446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345bf012-ea95-4d82-ac93-a0c1a141dbf4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "435679d5-6523-41de-a039-9d12d8a4d131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b5e5ecd-28c7-4e5b-a601-66a32524ee51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3c084b-1141-471a-97ae-daef30a4a524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0372a954-2dc6-417f-b224-1d0ba5cc60bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d9098c-ed55-4ab7-ab19-495ab389f21f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ac5380-f17c-451f-b228-08198b9d2db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3207f8b5-4505-4d2b-85a4-0236158e2d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b64702-04f2-4ff3-bb59-0aca5665e7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9f3cac8f-5f70-4aa6-a0d3-ebfdd6be9273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ab0676-2221-475f-a32e-1c1af8509d73",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da95534-a111-4020-94a3-9b72b1e3bda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9112fd5e-4b3f-4e80-a483-00696cd95d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3c0018-0402-4dfe-89a6-b68fb6fc2885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d515d3af-88a7-4708-8b9c-4bc4dd206b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fead9216-c3e0-4f17-a0b1-19bd5f8e7f87",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "065366d0-62c8-4f67-a686-aeb637e3966c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aba61b9-fd29-4ad0-a64b-e05c72208ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e719f6-5973-46ec-859d-cec4b4974973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9375f2c1-5e80-4c16-a92a-6ef44a3223e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc778f5-0b49-494d-aae1-63e3fcd74ef6",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f521ec-8a27-4440-a751-6b2e8d0d7ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c585d3-6c23-4a12-876b-9a5aab6db1f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30a37de-98fa-4ff1-9e82-bc9f76419395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fea93f2-daec-4446-9f4c-5dbb2c2e8fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66323438-5cd8-4090-b4de-50960d56f04f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b54965-e981-4414-a60a-cc0e625fb0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7726e4dc-9526-49d3-895d-63e4bb8b9978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd595c3-8155-4957-be00-c57b028277c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c0f8178-c943-4957-8047-10e6c17fe52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64ffc24-0349-4aa2-8805-477fe36cabb3",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4613c8e-a756-425f-9f34-a1125e008e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18263a99-7e03-482d-bead-d761953c5868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7d062a-53c8-4c58-b240-559f3822d101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9f4f315-2674-4c25-81c9-d1eb67ecbdce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6c0b24-bdef-426c-bf0f-06784361e60b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85832314-6106-4b7c-ac5f-154e32a5c334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd620376-1d93-4b69-8b50-ff630b4affdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fcbd115-1f00-4f32-bd0a-57cb0f73f7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9b1f40d9-6112-469d-8afa-9dc9526393e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f87b072-35bb-48bc-9656-a7ba39f3135a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c48a51b-6dfa-41ff-b5f0-f863f183ecd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b630f5f2-0f32-47ab-8acc-7226cb45346b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed17080-cff1-4af3-b039-b2aac2c4d5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "507feadc-d68a-4a00-94fc-49b1ba4a55bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b42521-bc7f-4266-b538-445e357f0e8b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5971db-ef49-4e90-99e5-21415bf732e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77eb3560-79dc-4f11-97bd-1c4411613657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fd3e81-2b4a-4226-9a34-305631905062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ad060d5-e4f0-4b03-af69-7d7321726a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90eb50c6-f0af-473f-8491-66cbe73c9c6f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50d2fb9-fe08-45cf-b00d-f9e7e85886eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5db9dfce-dcbc-41c2-949a-178af6dcaead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ff0abe-0b73-4475-8588-5382b322cb03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "19c613d3-1410-48f8-9c34-f4eaadcb1834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6eb171-8d3f-42e4-acbe-c0ff15779b43",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3014c18-566a-443a-b2a4-27231a2b8efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633b59c8-c051-4008-b7e2-208dd51771ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5b33ac-ea9e-4634-b002-4afcb3d9726f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c48a4f9-df13-45bd-8bde-a687facda071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd0e0f4-8307-4da4-a9e4-49484d54cfed",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7572fa-2315-4d1f-ae21-397feebbb82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72ed7b15-2012-46c9-84d6-084772c33e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5eaab69-12bf-4343-b937-5d78e4859345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "592f8452-e40a-40f4-8aea-722b03b4fbea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc60cab9-2e6d-439a-a65f-9cab349c16c7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38bb9ef1-f9ac-4dc3-9234-3611e6e48894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc4d6161-b62d-40de-bf34-1bd68576b29d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e440f73-5c5b-4771-b6a7-fbdcea0ca932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d7cf3fe-000f-4f6e-96d0-804e71b9923b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c96ccd-ac13-407d-9f37-9c0f2476d2a0",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9be8196-8829-4f24-a99e-6d70f217c343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b325ee0-f235-43ba-8c02-95e33de17ee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee36cad1-4aea-4452-8bb9-e08179a8ea50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccc8eba6-c331-4af8-9240-8d2ab3e5e000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce4984a-ee6b-4d10-8bcf-e7aafd1fb992",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1756d908-8e4b-4935-9faf-9ce9a9f0f0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee607a1-8b86-464d-8f31-14193dc97e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13bc8674-d940-44c7-ae23-5dd8c3ec0a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "19c1e3fc-29bf-4e65-8bba-9bcf4cb799ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4dd8c8-78d9-477f-a5ed-b4b3fa4f48ce",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49b8f0e-7e74-406f-992c-9b4f4693505b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b25817-11f7-4004-a142-b2da5798408c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8fdbddd-f9d7-4682-a0d3-e70975ad9a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce5a4479-edb4-401b-ac27-16d5848e645e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463470d5-149f-4064-998e-71bc3fad491b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3097a5ab-41a8-45e1-bf01-6535ca386667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c29da58e-a727-4972-92bb-bf86a47d0334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d525a0-b349-41e0-996d-db48030e8085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "80a500f7-c42a-4b03-9721-375e6acce33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e908b7ee-728f-4e55-8c0f-270088ded6e6",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba54643c-bca3-4008-a714-57be4aedd184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "854fcce7-e486-4693-bd4f-ff61d41664b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3baab440-5cc1-4a97-973e-410a438a167e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac2a41b4-797a-4765-bee7-083d7e7c07dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef8ea16-a8dd-45d0-a6e2-cd071828c624",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9f4b6d-6c16-4bc4-8ffd-f02f51fa676b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b28ef03-19cc-4c71-92c3-19a6be2c0743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c742bfd-baf6-4f40-aca3-6915fdb90692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2d77a3a-1253-4fba-bd01-86e0ad7d396c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ad50a4-9a81-4c02-bef9-f83ad2435d86",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6745bd-7719-4503-9a50-ad92696312a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29663d51-7e42-44aa-ab0d-a794e452dc8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9370d1e-b4b3-40ae-a41a-38853f7d7e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "108e7381-6a91-44df-ada9-735ff10c8ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4900ec2a-657c-4499-9160-c75e653ff716",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c59f955-5b50-41f4-bcd1-09e769e1a3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0111b039-ebea-4091-aafe-2a3d210aef70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0d73cd-812e-4676-892e-bbf006853345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f5a14458-e631-4b45-88e0-38ae6db97e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22e912f-653b-44a7-a9e9-36bed65a905a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724f0090-3408-4289-a219-f1241e896223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22fdacfa-ae8f-4680-a81c-6a5e6fd6c61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3221c7b-be7b-4c86-ac84-aaacfec9e4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc9fb541-9b32-4240-b7bf-de18a92502f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c509d72d-88fb-4faa-a756-b08182470a70",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824f6cc0-e5f5-4728-947c-24d65205b5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "749c7fa2-3dd5-4a20-810b-e325b8a60298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e70815c-574b-4f0b-a46a-0b3fa1f9b5a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c649480-4dfa-441d-b47d-3daed5d2364f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85177b0-5903-4c7e-a20f-52640780402d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f032a3-dd70-4d2a-9534-3b22177ac320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b43dc9a0-ffe1-45de-8e26-13a9594abef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3ae400-b7fa-4bfd-a10c-e32e796745d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "300d36e9-621a-42f7-a368-027e5b5ad8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fab6839-9eef-4959-aa90-4245d6b192b2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05626722-7ee9-475e-ac3d-7b6e6765ed6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "023921f3-0d9f-48fe-a2be-86c384e268f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da761991-ba40-46fc-81f6-a1688b9472aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ea7240f-0870-4af3-9479-96428040e580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc05ef6-c7c7-4067-aa8c-ab862033c668",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71335fa7-f3b9-4db9-8a9d-96613604ae76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c301905-e75a-49bb-bae5-f55bbf8f1ede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c746530-1b10-44db-a0c0-24c9fb8b4608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa2bce1-2c4e-4fea-9aa1-661f09d326c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69be1696-c5d7-4950-a121-7dd9ef89cd42",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "205408a8-2d91-438b-98db-bc04a768720e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de85db4-5951-4f37-9fe3-8e92ddfba10e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28928343-6a60-4dcd-8e1d-7e31965fbc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d91d65d5-e932-4b01-9897-6f16a8cb248f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50650578-b849-4a48-a19c-9473dc0f845c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34abd83f-10bc-43d2-931a-06356f29dc8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f321e71b-8e58-45e2-bc3a-680824149411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb06cf8-2185-4b2f-bdf7-d84882012586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3453aa6b-90b3-4ce3-9870-8f7539166418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60144b3f-04cd-4d15-9c05-05e36cdf81fb",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8632de7a-7286-4ec6-8e7f-601b35e94394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab24b1d9-f024-4ed5-84a2-5e5dc5a71c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d78c9a-1c12-4521-9f58-ebdf6c015e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb777fdc-07b9-4fb4-b3d6-7ddf7e13b1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea10201-1f46-446d-82a3-1a6170f97a6b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd48f176-8736-43bb-895e-e6d94f6a9af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5945de1-b54f-4890-8369-d7b07ba41975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621db74d-cdf7-42ae-90b9-07a483550c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "281a174d-8ed8-4819-bcb2-3bcc37d61542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d115279-a211-4e55-98b8-e268260b664f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "704bbdf7-280f-4376-b3b2-9d03cc5d9eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "650698ed-f6ee-4e27-9ccc-b05134706ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f04381-b8a3-486f-b9e1-294162678412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4bd813e-da7a-4f1a-a17f-66877460c68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6915d32f-472c-4753-a742-59a55f6b25ea",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ff246c-7dab-4007-af13-0d1d66ed0d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ad445d-978a-47c9-85b5-8400a3775391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2cb2044-c469-4f59-a6c6-ed50ed3550fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3e9ff2c7-39ec-4655-9d4e-a5791bbe9e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79259072-d1dc-4216-93a5-6cbd0a0a05b8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "398507d9-491d-4d2b-bfac-ba8df76c08bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f71a1c2-7803-478f-9854-b2e50b9eb398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb3170b6-e953-4509-a263-c1893dc078fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb0d5e3-e620-4d9b-be43-d00eb7c16884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad52e87c-a6c2-40e3-8ea7-9bb13c0a28d6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ecd290-5b9e-46b9-8b4f-2dcca5744081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ac69ae-fe89-4788-8180-9f319a37139d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1f58c5-cdc5-4863-80c3-32b300a5a238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8bbca3b-1149-4a68-8dc8-a78064f5310e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddb4d5f-e1ce-4a08-b936-4350f2d303d5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "443df3fa-59eb-40f9-aa94-2438515bfa5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dbc79a7-5a03-4a40-b009-aaf5a2dc38fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82d7ba3-ad1b-4511-90c5-e1b594d612e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "35cdb99b-fa82-460f-b7dd-9c3fa1fda364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60f4432-254b-4476-a7ef-f9a97bb28d0b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ea5235-4c89-453d-b297-e9335a1c330b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "986babc7-024c-499a-a874-858f269d2057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369b6360-8875-407f-8a9b-f09e1e02c308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bf34f70-89ab-4304-ba7a-29a6ec2714b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8766d6-a4f3-414c-b37a-d6f4ce7c25c2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "580c6f5b-1002-4d42-aa78-a7381a6c8bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c184af8-aed7-4527-b5d5-5bd732c91475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5476a7e5-6c00-4be3-af1c-972f7aa6e10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d17b365a-36e3-4fb3-83a3-6aef4c55a8bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f443edd5-ec48-41e5-8e8b-745eccfec76f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e376375-fcf7-429e-8d04-23aea2288c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "170fd711-6053-4e70-884b-f66e7f48920d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34440a5-3db9-4209-a39e-f915004d1435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "05a54396-ccc1-4f46-b8d6-1efd1de2a332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e5309d-b112-4a2a-97bb-ba3a300c2229",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f452bc8f-b2e9-4021-9c0d-8b138f2192e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd6cbee9-62d9-47fd-bc72-47037b30a75d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2feae98-866a-4340-88e4-937af4404222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0b45f3d5-b7b5-45b5-9da8-195f48d0d7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4576d275-70ec-4c29-98e8-c1ab2c7c80e7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "539543cc-b49c-4983-9ba0-1beb41802d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "276096ba-68bf-43d9-9abf-5a49d43213f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2434d852-ef1c-419c-a8a5-8ce26f3ae5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b170b5c-469c-4f58-971b-68b4b494f1a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf52b95-252e-476a-aef5-69ba6d44d350",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f720b6d-de88-4ad2-a2d5-c5ef2dacc927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e39a29-f238-4628-9f72-3df5ec124b44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9cc276a-d80b-4aa1-82cf-6e92afb3fe13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4260ad6e-5ee9-4262-aa9a-72461e069eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28acb2a7-a1cd-40d5-a1a9-84bbb33dc18e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e26e75-0d90-410f-927a-d381ea5a3fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8127e319-9dc2-430f-aad7-acc09b350442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9970dc-8dbc-4f92-82e1-174967fb5c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f56ec3a9-441a-4804-aeaa-edef65129662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4efe7c-4816-44b2-9a67-53043ea65a70",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a467b619-a36a-4f90-9347-289dbd854329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b8adcdf-bcc5-4989-be2f-9b8d426195e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db98168c-756d-489f-b3f7-680b7b83d56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2192774e-83d1-426a-81a1-ff308176892f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3977664e-47c7-405f-bd62-cc3b006fb4f9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d985bdb4-bf6f-4473-9d31-2a00c7afef3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e42d7a-1f7a-4d40-9a30-719ef3eb8d55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1478ee9c-721e-4541-815f-8de70c6a0e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "61aea531-505c-4ca8-8938-a325ab3068e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "520759a2-989a-47a7-9515-1e3492af5ce5",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "364abac7-63aa-4b23-becf-6e6adf6ae48e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "796c49e5-4b9b-4af8-8406-b066e886fe9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa2b436-5c70-4607-b57b-ba7385a3fe17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f4899ae9-3367-41aa-8231-ba75f4483c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059ee890-4f6e-426b-87f3-5ff0e2694908",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c925554-400c-4d08-aa83-3cd01bf34eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d36c138-5202-4472-94d9-9d72d76c393c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc849da1-2522-4121-84a9-b5d031f371c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb162be-429b-4ce7-bc5d-784e95b5082e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2be890-f2c8-43f3-b918-173a95f834cf",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32bd6b0c-f80d-4011-8dcb-a299f6d621c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "341e4e08-3dcd-4d75-bd11-fd2774d27845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eff17c3-a313-4487-b667-fb681df10cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae833c62-8ee4-4be2-bca3-4a0be5d4df53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a200bf-0390-4424-b796-bd207efaea72",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9da0028-cc4a-4afc-a7d9-e9cfc43b5da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01dbabfc-70b8-4bcd-ac08-e6188341b404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a1d675-945c-4d32-bd37-430bb36c5c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca70dce4-87d2-404d-96ce-250509c4cd41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed269fcb-fd0b-4e75-9578-3e5716127caa",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f97170d-d587-4e53-a554-b17aa50a18e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e157c65-e4e8-4c71-9691-d218458a9206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a0e900-7734-4be7-89e9-941d8159e4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9766d068-55da-4748-b140-12ac85595e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2c8191-d842-4109-92ee-3add9300b7e3",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbca7948-f3a6-4151-a7b9-e4c35ecc474c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6917abc2-4686-4ca4-9ef3-a4d339c93af1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebc10ab-3a62-4886-b322-7fec4508b080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e620c9ca-eca6-492a-b409-832b5cc046fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a1fbd9-d88e-450c-ac40-fbfdba5fa701",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2379dfee-e227-4be6-a1c0-366368bd68d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89944110-7f48-4cc0-ae29-483436c37ed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767ccdc7-e195-467e-a298-05461473efd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1542756-fd42-4981-9412-e6e26e47cd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05aae091-7862-4e36-b23c-617c88892aaf",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404ef042-61ff-4a02-9ec1-dfdf80aa64ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9798b7a5-122d-456c-a439-2e06574502b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8386f0e9-1b61-4488-a192-25e9ccd596e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "960005a2-bc05-4472-90d4-feb7df2248b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95dbbc6f-9338-498e-ab8e-45b57acd8a8c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff98b9d-a1dc-4038-a7d1-ce9c624ca0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f33ecd-77f5-43e8-aa0c-9225b9019e1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2c5a51-65a6-4850-9d32-335a3c8ccbbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2afb65e4-bebc-47a8-a22c-f31498d365bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc2915a-5522-4913-93ec-e705bb66a06f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4608be-f400-4de5-8d75-c97313af3029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9358c388-5d13-43ec-98bd-ebca00e61b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f6fb5e-4f53-4067-9d30-da5c6153872c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f218188-63fe-4c5d-bb21-a5e2559885fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4a31f7-ddd6-45ca-9f1c-be5bbd5cddf0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "576aadc8-ede1-4267-ad82-d0208aa5f4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90b461ed-7e20-47f5-9edc-9c14447b6c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393ea25c-9323-4626-8047-6e941f8c7c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a681bd8-d0b7-4963-97db-f63b04b2e2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "369bab81-e50c-48ca-b48a-cdc83e030eea",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f62315-3daf-42a3-b918-23a4e2f507d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d886066-c4dc-4e30-a522-65ce33723fc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec57402-ef67-4494-9d94-f00be02c049f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe0c4308-a477-463f-badf-31ba13416736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aedee179-38b7-4c14-8724-4669537a5989",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79807f29-c31a-4649-b6a1-84718d5babcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bdf01324-ce4c-4ec3-a29a-fe5de5b8b7c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2050230c-455d-434d-b8e1-e3d874d40f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fce465e-2973-4baf-b1b9-f6be17834f1e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3b2ba551-3e1e-4f82-af8e-edf5b518ea8f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c60746ee-01be-4af2-a224-c2e76d46a366",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0633b1f1-3cb7-4c4d-8ae3-0978796b508c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cfda1d79-67da-4b15-aac7-79bee0109750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d7d008-c903-4839-abd3-be03d7246019",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5eb4481d-e01a-4329-9f3a-ae2b5585ad5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2be334-1eab-47b0-9faa-160ac103b67f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a852b8-d680-46eb-b549-0e93c62bad6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "560df178-0656-47e0-8fd8-5be5b5d6cca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c82187e-014c-435a-b460-814a11b516d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67a06e28-237b-460e-ac82-cecaff1100ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76b1071e-fec7-4340-97b8-bdf19ac23571",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9a46ff1-6d90-43de-9383-d24b75eec3a4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "881be0df-edb6-42f2-a1bd-c33dc1f706b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7a9cacc-9ed8-4081-bbbc-9979f6897c71"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a1bb09cb-5418-4eb3-92f5-d380b6475eb8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e7700471-bcf2-410c-a168-4335143bf5cf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2bb5dc5-1b6e-4a9a-93a6-164211d01828",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "15d86fbd-8d56-4541-8855-367a5d5c2e5d"
                }
              }
            ]
          },
          {
            "id": "c78b907b-ea1f-4ac9-9983-c66ded5f4025",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6b18af43-528c-4399-bbdc-c42394e68239",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00cac6e6-1648-4509-91f6-44d4f4617c1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "617a6d1f-42c1-4512-b645-8d7444fdd350"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d60d1039-65c3-42c8-b8b9-44053dc7f0a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "173022c9-c579-4663-9014-cf6db634056f"
                    }
                  }
                ]
              },
              {
                "id": "717c38a6-f2e9-4f3e-9f7c-2e904324ab0d",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6126e56f-ad5d-40b6-bc3e-8df86d5987f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a022653e-5823-4dc2-8a58-3ad430b66a33"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f98903fc-58fd-4b2f-af16-9d808b1fe203",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a8e0a48b-5a00-4916-8e68-fbaaea0aadf8"
                    }
                  }
                ]
              },
              {
                "id": "0bcc5353-7e9e-46b7-8713-16f063f72bf9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff704497-b07e-45b9-8e12-44a5763a45cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "766cf911-f372-4768-b9d7-2b7336bb9cfe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90023d02-4f27-4abc-b808-8c09cfd6d18f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "56ea253d-36e9-4ed1-9682-12074703e2b7"
                    }
                  }
                ]
              },
              {
                "id": "21a6b014-e688-4f3c-9ce6-c9a70b02b0e7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99862ed8-e6ff-424f-abbd-7290008fefed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "12e72499-518d-4061-bbfd-cdeaf54659c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68b5b426-567c-41b7-9f84-cce8b5534a6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "cb66ed6d-1c84-48b0-8de0-c3f083669bbe"
                    }
                  }
                ]
              },
              {
                "id": "34c2664a-6eb6-43ba-bafd-b947f419f98f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9f1c11e-a2f2-4218-8fa3-d345d34392c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e9c1766e-26c9-4f8f-9387-f72f0f49ad09"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b188632-49a1-4d14-a874-f06724ee1c3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "eef1ae14-d7b5-4eeb-9edf-b8dfd387ebf1"
                    }
                  }
                ]
              },
              {
                "id": "40eb2cea-98eb-45ec-a57a-711f8bb62ff4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6407a515-0e75-4aa6-a512-bdf76d376cae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "feb6e251-a0d0-4b90-b78d-91967f865af4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "179e0514-1c75-42c5-b5a1-3c9b413b6c00",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "939f8631-5607-42a0-9d40-65de19e408a3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8ef25e75-9a45-4890-b7d3-de067761180b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d97aee46-a02c-40b7-9d5c-86e77e36422d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2da20d5f-235e-4a77-bc9b-7d643b521536",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1acc79dd-22bd-4e2f-9cd1-bc829cb263a9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09984369-d0e4-4643-8cb1-541421641c72",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "bd5ff727-cfd6-421f-b817-ff5627901e17"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a6af2784-138e-4be3-9b9f-6aa4f6cb00b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c22093ef-8b27-48d0-933f-c424ed7c8baa"
            }
          }
        ]
      },
      {
        "id": "6f94f014-3937-4ff7-84ef-4fb62571d97c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1f48df24-4d8c-47dc-b030-8eea5873aedc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c4716ff8-35c0-487e-bf2b-a12d7a0cd8ac",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "55908d00-4d1d-4831-a34a-060f25c558ee",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd289d8-8bfe-4a2e-98fe-d8e81e1586dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37aa92c4-39e5-4495-839f-5c887893d9ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2edf7ee3-9a6e-4a0f-9051-d0a3e74b39f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f2d8d2e-e6e1-4437-9ceb-491a6145f2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c6718e-d2fb-44e2-a106-65f919580323",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c669a9a7-fd3a-4fd6-98d8-6c59335eb986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b990817c-f025-4838-bc67-6783345e85d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab13c1c2-612b-4380-8bba-9307eab3d58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "064db5f0-0b35-4c81-bf07-79cb8b40ad48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e09019f-4d86-4202-afc1-4d0353f45824",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "747e0afc-65d6-413a-9582-e5b384fc7fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68af0c7a-d3fc-45fe-afc6-6ce445ffc5d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4b35e4-4804-4cef-b506-9e128f49cdb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85439af3-fac8-4ab7-848e-51203b9e7dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2a782b-2faa-4a03-b0a3-bc4fbb5f5a8e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f61dd5-5d5a-4695-b95b-8639fff48348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd90f4f4-0012-4390-9c76-b80831cce8a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7863ab-b38d-444f-9693-421611d83692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a20322d1-33d8-4731-a771-e071d76c4806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a006d33d-cd70-439c-946a-7ec3e294b510",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47617ece-3a84-4c1a-a8d0-2bc57ae19c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f43091-a644-4cd4-a49e-9e0dba2ea818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10a374b-ceb0-4ecb-b452-f2c84a7950b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83c7ce0a-cac8-4294-8ee9-18c11345821f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "facbfb2a-eaff-4fbb-a2a4-68ee1a568a1a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8688b37-ea7c-4b86-bb8c-18d0d85560a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f833ce9-7d8d-4c19-9f91-28dda515b620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507789c2-5e99-4a0b-bede-ed9889df209d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "26b66a03-617a-49c4-aa52-e817bce5986d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55b3c22-0e75-421d-a630-ab7db7d17264",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2940fa-850f-4c79-82a1-55a1081db2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1261f49-f4bf-4c0c-9807-2f4e847c4374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af14504-e2be-48cc-bbaa-9b20cd975497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b54f1c91-a1f8-4420-bbe0-15daee61aac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dbd742c-19dd-43cf-8e84-e36bdc3d8077",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855e350f-1560-48cf-808a-ceff50b56e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a683438f-c8ed-451a-bee5-664f59f94bdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4f798e-14bf-47c8-9579-7a8bf1a01c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c59086a2-3243-4d35-b630-00266e7ad7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66ba4b8-4727-48d7-b6dd-248c3decc435",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb7a38b-5467-4743-975b-5ac76967201c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d4da42d-c8b5-4bb2-9b92-2de2a1282fea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2294e3d-ec5b-452c-b67c-f1994685aafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ea1646-0c02-4208-beda-4f5241b8e158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e56c505-6c0f-4766-83b7-c5293636cdeb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e0def3-5d80-44cf-b2be-9998949ac2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "274a6651-db67-41a2-a830-5c439e15b2b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61cf4af-fef3-4439-a267-863dc2d54096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "411b4592-455d-4b2c-ad75-9c7ab48b0faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71e4ee6-6dc1-4a59-85fd-bd1e97d433d6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2b35b8-b35f-49c2-a322-9f50ea2c1302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c8b6fe-9d07-417d-a19f-2327a3f0f5c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30275986-3c60-46cd-a9bc-c721719c256e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b5bfdeb0-c4ea-46f8-816a-6bb6edc9bf93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa35727c-a41c-4f4e-9984-0e0ac5425394",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e154d8-bb24-42e8-857b-f8d0df9f125e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dc96d74-3d94-4a8d-bcd3-3d295f72f32a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45385ff1-f62d-4e4e-b9b9-8e65a0eec7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4343539f-5683-4b3a-be76-5c1837b0c7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d2b97f-e145-4a6c-8e83-a45e96e4c1e6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9211d2d4-ff57-47e0-b839-af198e5688d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de9728f1-60ea-4cb0-a551-6fd144539af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74a9f86-fbfa-43ab-9493-ff7882701a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fce2541d-ed15-495b-b95f-18e0999becc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c45d67-88c3-48a3-9b87-97044b786c7e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "122069ad-1a35-412a-82dd-33debc3305d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "914c28c9-153e-4c08-a3a0-88fdad87d729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97f7f95-af50-4953-99c3-068f7e4aa7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f2d719-0504-4948-ab71-aa0354fd550b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fdfd363-8d4a-4f21-9767-76504a7d199b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8679c0-bb44-42e7-a945-67020c609467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b7ac3c3-d760-4c4a-bd11-fd557cd48e28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6515a1-3309-4b59-b6e9-a678f6daf1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "39460892-9853-47c3-8918-159e8435ea89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd55a72a-9b9a-4d4a-a4d6-4afc3b2fea85",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20037edd-caaa-4df5-ad61-326c1810920d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb48d25e-2cee-4160-89b3-f49c23269004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee142fb7-a4ac-4f51-abf9-762b83b96af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b460027-52f9-4c2c-8704-3c9955f4a226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fef0cb0-75a0-4e3a-8e4e-a93f3e3d1666",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d6fe8b-929d-4083-a2d5-f3ec3e9c45a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "648b194e-8319-4ae2-b2ca-479da4cb29f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60999163-7a20-483c-95c1-c89ac3cf01ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2476d55b-b9bb-441e-a930-46d760ed7279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62beab19-ba4b-485d-a325-d934d3769a92",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d72295-de89-4ffa-8a5c-41ea2c7c2a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8215a8e6-7f12-40e2-8573-5d1bba31c97c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df16a550-6ff6-4b0b-88bd-61ac975693e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "08788372-ec4e-4a7b-b973-dfb626209c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dbb9a10-a430-4bd3-a542-b9e9318f51f2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "052b2ac4-c54d-4ca3-aef2-6b4696317314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "852b25ac-8ecb-4c91-b500-5f5efc8aa98b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067acf10-f8a9-4ad7-be3d-a492e4ddfa4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b88a4bb5-ddb2-46f7-9ea6-785643067052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e8543b-4994-4181-a7ea-e92a7069211b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9950327-30aa-4cad-a7d2-13f9b7fefc1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db642cbd-3cb0-427c-9503-cb7d9c52d187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f617e8-7c53-43bd-bb91-56c19718a7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2303ac9-43d2-4a92-af0a-2b2d2ed2c834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36a8e86-263b-4bba-bf48-292cfca718f6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac42bd3-bc74-471f-a2d7-8c7fd5c8806c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b72668-5b66-445c-a19e-3eb2cdcef8d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf5a9b7-0980-4d16-8a19-74270c825d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b05890b-5d85-49df-9ea7-f458eb776fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ea0cb3-5a74-4534-8f98-f7e4cd44dc9e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4d55b9-0eb8-463c-b8e2-f541b5d9a368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1404a215-253b-4b69-8fd0-9d64f974258f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd32714-df8b-4826-a2df-4fad1ceee4bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2334a6d-c25e-45d9-96d6-45b8807b430e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4017a9-10ff-444a-ada4-ebc8e830c938",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f0bf52-59bd-4ada-8249-a6ce4c9983b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a96f80cb-e3c1-4f24-a748-f57ccbfb8fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20754b7d-658b-4756-a775-fa8df6624375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "327ba738-93ff-4be3-8c5d-5dc0384eef53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b865bc4-bc2a-418c-9df2-8b195f56cbf3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99cffba-a060-4fe9-8664-04a9064c6310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d82e41b-bf31-4cab-b999-837f8ab2a739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966a77ca-342a-4714-8c78-72a544801f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8fde05f-33f0-4cae-9c67-08bc74dc03f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75940f68-173d-43b6-b75b-dbb3f4bca44b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de2113c-4370-4411-9ec7-1688d61569d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e7f559f-1024-4bb2-a4cd-460bd67aa895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "396babae-eca2-4ee7-91df-18013fdb96d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ceeb190-dade-4d4f-bbed-bbe546a8f6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fedcf3-0ce0-4dd2-b41b-8f979793a10e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb62d2df-c53f-45d3-9226-45f5f76ba50c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7551dad8-cabe-419d-9417-427a5cdd174c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0af65a4-7ec4-47f6-a477-31d8ef965045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be330cb0-71b3-4dc9-8114-806e77b5bf77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac68f53f-3f2b-4b0e-ab64-ff42f2086465",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aef3e1f-0712-471d-b4be-e9618e0f4b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f888e8b5-caf9-43c2-b61e-422c78bd41b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ced4ac4-09cd-47a5-877d-e4e14d49a33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9858f319-e2a0-4baf-8f3d-b942cd077436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a04ca0-2f41-4b71-a998-31f68b7f9cf1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e6bb67-19e8-46df-9436-6724fda198ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ac9e3d-e16f-4962-aba2-20b8da63a9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2968b3c6-12bb-48b3-8d2e-be635a9cae52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d25d7a18-4aa3-43ff-bef4-d13a1171e43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2bc6648-c461-4b89-8e7f-bbfb48301aad",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401c83ff-6e54-4b9f-a7a5-f3fb33d7c745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c4be40-b26b-4a7e-9647-699ed034e54b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7959522d-55bb-441a-a2bc-85a64866c508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cd43937-b15d-4628-ba8c-582390bd2421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e288688-35bc-4a69-b9c0-28fd6feb9d54",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b31fef4-c2b2-40ea-91ac-632c0df2c19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23cb8936-fcd6-492a-92c8-198f045a424d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620ec296-f3e7-494c-ae4e-0f8186e9e483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad7b007-f37c-4dc2-895d-25bd27968b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc85b7a-9376-4204-93b9-2dc987a88035",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e35cf6f-d62d-4637-baa1-38f31b41036d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c952b2c-a38b-47ac-adc7-90e233e0df3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4aacda2-9f05-4c7e-9227-6367c9a45d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b005a76-e299-4995-9d16-3590203b1add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076d5d9e-5ce7-4050-bcab-fa7dd4ef117b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7815c67d-6276-43ba-ad94-f6c9c8251df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c7d88a3-9d24-45bb-a210-5fb57595ee26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f9cb8c-4275-4666-94bd-d9627a0f5df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "027b7ed4-c0a2-4564-b69d-2c32bcae3486"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "edbcf071-b6b3-422a-905d-05980d709693",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "489e989d-2d8d-496e-aa05-9495fb175018",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7773078f-4fab-401b-ad79-8d3b28192d75",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a7dceab2-0a07-474b-9698-f77ac560be7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9428904-1190-4b8c-8c97-89f96950a22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19654a86-21ce-49bd-992f-f8a3f892bf99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a9d181-1e35-4ebe-bfe3-5e49758c5df2",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8353deed-e453-49dd-99be-48492d631072",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "173bc229-5db0-4ae7-a68f-f14511869418"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d212cd2-85f7-4e19-87e5-ed5ebee914a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6807e58d-6c84-41b6-85b4-64bd81943120"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "516a502a-711e-4bef-ade8-635f30624aa2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fa2a1a4-0ca9-4f3f-9c30-055b9b7ce9f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3635317-4836-4158-82ef-663960804f38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9d45311-f06f-4e0b-866f-950097ebec8b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1128027-6aab-40f6-803c-a264356bdd44",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7ddda2a5-1b57-4bd5-940b-d9945ed28832"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff50a099-8241-4614-8a9a-7e9957da7147",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1570d905-8985-4b3a-8c3b-ebf43ddd9d7c"
            }
          }
        ]
      },
      {
        "id": "6c01ba2f-370f-4ac4-9469-c061a9e95a73",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "fcaf8e13-02f7-45ca-b821-30769b5585d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f8a350c5-2903-4bba-8466-e411f543d9cf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "935d3e02-1aea-448b-8ae5-e1e300e1b956",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb31151-26ef-467d-a016-daeaf9eb150b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c22b314b-f4e5-4749-aa94-3cbf6ff64ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e89c4b-7832-4e25-b181-45061765177d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0614c2-8f53-4b23-9799-b9aaf510fe37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdce1651-1761-48fd-922c-2900b63a5749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d35178-6b13-492a-a4d8-e97af4469c84",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229f4d04-f6a6-4a4d-a286-790cd4ab6110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d825da85-d6ff-48ec-9d70-b5ac11ba8687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660d53b9-0c52-45c8-8c9b-20339abb8975",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb06bd2d-8360-4926-8578-dd4acf7f26f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fe37cef-9a75-4d62-9f7b-9e7f053dbe36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b6e50e-8168-4030-88be-56df148d6ba6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc68862-add5-458e-be23-648236c3a915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837a0759-63f5-4859-8be8-61de9b72aaaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b397f36-22c1-4efd-8c50-ccec83740f46",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76cfc51e-3d15-4208-8ed6-75778100f3b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff27b3f-fe09-4dcb-ad8d-688ff2f1403e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43453bfd-de79-4606-8366-611729eea2e4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ffc1c5-a633-4bfe-829c-edebddb3830b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b59c738d-d59b-46a8-8933-6056f9cd0267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78274764-57b0-4310-a67b-ac63701a2fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d141693-b66f-42f0-9d1d-7c5f48375597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085a0ea0-38fb-4ba4-81aa-21b9f81062c5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56af945e-bd6f-4141-865e-7102def12547",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2830d17f-550a-47de-a9b7-f0aef4e5f726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b9c55e-76ae-4932-81c5-dafc6ce68cf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2413df-8b58-472c-9fe3-b56bea1f3000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae8f44a-6ae9-4a8b-8207-017862ddd29c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be4568f-fa7c-44e3-b911-8acbe411d10d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b87245fa-80db-4d23-bfb4-3618a8d3cc11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf90f16-391e-4af0-801f-d556ce33149f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "068834f7-0de6-49ee-a2a0-fe9b44aa572a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f13908-5d08-4c59-833f-b453940855c6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "facccbf2-7217-4842-ab43-a7b4182bcd6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "030a091c-ee52-47bf-b527-9fe17bc6c63b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cc3574-411b-474d-b33f-d1490f175e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61f98c4-ada5-41c4-9026-2577274daf0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad4851b-6a68-4eac-b021-06ed2073036f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "926afd17-9809-40e4-999a-ebb3be74bc29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4adaeb50-8402-448b-96ac-4794b49eda74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f60a82-c496-4f2e-b0b1-374fc267580a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cbc7260-c8d5-4439-a66c-1907b11a2e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f95efb-4243-4716-812f-1ccab54f21ee",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80a7a21-b962-425d-ac2e-70ee98a8df02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1dff5b5-7c1c-4000-9672-d227404700f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc5c7a8-80a3-48ca-92cb-ff2bda1b6c4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "646f46c8-d488-4293-adee-d40523fc5c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a93f563-fd28-4523-b2fa-1b1b2abb532a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8b5f9d-08b3-4a47-9dd2-99d6b347e1cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66542eb9-80ae-4509-bbf7-c8ae3dee83f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fecdbc74-58bb-4990-a9c9-e81a186a2d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4b781d0-996c-48f5-ae1e-18f12e1a4324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9311c1-41e1-4e8a-b20a-10ac0513ab94",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af390a0b-1096-4688-8da5-421ba608a673",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44fec721-7b7d-47af-b2d2-bc06e8a8f1e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9974377-76a6-40a6-90b3-facdbd9defb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acb633ab-c677-4f02-853e-12142cb44205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e48a317-c91a-47b9-8662-fed43e8b2cb5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e9efe6-e92f-4314-bd2c-66a74481af1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7438386c-05e8-4a2e-a158-f5c960f389e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8bdd71-0faf-4af6-8c47-c05641118f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3931c1a3-3fe8-476f-8b23-032b052a02fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea784a44-5cd5-45f8-88ae-1933a93f3388",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16c8535-fac8-4adf-82a3-3c8f6ba501c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e56c58e-1a6b-4a98-803f-67fe01457dac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3560700-69ca-461f-9c78-6067d555963e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc700235-2ccb-4057-9d97-7c0bc65ba741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e666de01-fa1e-4ca1-bf64-3d3cd61332ab",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9a182e-7007-420d-b9ed-6dd18afed3f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb9b9eda-f4bb-483d-aa53-4bdcfd9b7fa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7a538c-5ac3-462f-bd27-808c9160f771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d43de048-a580-4ca7-ae53-ac4cbe929f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29572df-1f0b-4b15-81ab-743d809d2873",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a291b9dc-6f53-485f-a83b-873b082aac8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1582bd0-a886-4b57-a544-e40d0b4e3c4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f368653e-8f25-4afb-a824-b3c77e591c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f127844b-8cc6-4b29-be7e-e09328b39ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6c56c8-5f7b-4025-9397-84c86b52f7ba",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fe7f19-24a0-4fec-ae9a-6e94a68db251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41921318-bb01-48dc-8d26-25653dd80037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dbbf02a-e517-42ba-bbf5-5523c5865907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a1873c7-79d9-4f28-8cf1-2b06f0f94a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4928cc-156f-4ffa-a32f-f903dfea016f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9f7989-fd8d-4853-9cde-be244e9de5a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a3065f7-b7cf-4884-86d3-03a3949b97e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "451e0470-b004-4740-8ca0-442089799a9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84c7c328-2452-4f64-a527-7c7f9db8da37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e35f8bd-d2ea-4345-a0f3-29b81c4ca1f1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69b8b76-6e4b-425d-a9c3-5ef592f14d30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfc1a994-0e20-4bea-abc0-a89ec3c2343d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96d38fe-808f-4a37-8a1e-dd7c9e26b876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9308eb21-c291-4307-a482-91bcd3c4019a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3598af5b-c2e9-4c64-a1c0-5e51f6e8220b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6788629a-cb40-469e-ade5-4e3e563fc809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2473b3de-1a38-4a5a-a897-4e51599fd96c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53325921-240a-4894-834c-9562d9e09523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1fa0009-f8c1-411d-b21d-8b6cee1fd64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2f80a5-e360-45e9-b3cc-bec54c618805",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4636106b-66ce-4f6b-ba89-b03564df4153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b7dce5-428b-462a-9085-bce6ec06584b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ea254a-e86d-4245-9421-1714a1aa9b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15f513c5-4607-4047-98ba-518c970b75c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00cdad21-611c-4667-b87e-361d82c4ac17",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c86161-66e3-4882-aff4-a330af18ceb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2321510-e5c5-4a75-99c0-513483dfa8c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "934e9700-3611-4244-8908-cc8a75c3b9fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "396010bb-029c-4ffa-82a4-60c8fb5d5c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d16148-c309-4db4-9be8-9263f4395fd6",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c735ca08-2de2-49a0-8bbc-98e4daeaabd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f165c4e6-5a0c-486c-93a5-7950f095a07c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df339545-72aa-4b23-b4f4-25f2a7def178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0f7014-3c5c-4ab0-9a0e-fe861944135a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5d60b1-d88a-4518-8987-36a9f32f6d25",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b52e93-2d28-4e6e-b1a3-30cb11a53106",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8048a44-b863-4ef2-9613-0e33a0c1009d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc104884-73a7-435c-8995-dafcbecadd94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d2eec16-8075-4411-bdc6-9dd5516a5831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f56894ae-95b3-4f77-9f44-12ee22bbc414",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d9ea49-7f0c-4ec0-8b6b-0bcf7eb37999",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6ca2818-5852-47b5-b417-433318c77b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b31384-e927-4b2a-abd7-436987456e4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd5714e5-25a2-4125-8b28-e1b0c1bf215f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd5ce8b-ebbb-444a-a9c0-432c1a74292e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177ebb37-976b-4dd3-8093-57053706fc83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ab9388-e098-4d81-b281-5cc087d7fc64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6253da-211a-4289-a7b1-354c5b2e0f83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bfdf2d3-ed81-45d6-bafd-52275af372ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7dd542d-d192-44e7-8e29-003c7c23cf2b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cee1833-931b-4ebf-84dd-b9843ee0767a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e066826a-7268-4395-9177-b76e85090a9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e219cf8-12fc-4656-9c20-7c3d8c08553b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1276156-c896-4b42-8b81-3eba0da5585c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a444473a-09e6-4dab-8666-e072ee6dd6fd",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a04a24bd-3cca-44d1-8525-f7a2fc052444",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c56123b4-0c9d-4f60-b26b-00698fd45e41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87959f42-1950-48a0-99c5-ef92396aaac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a826e58-be2f-4854-bcdc-e42f51afd61b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965a300a-6539-4fd8-a3ce-f0862a659fa1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db29a57-a45a-43e9-9e8f-6e579ead7d19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77a8a5a0-fbba-4788-af63-dbe0cd53ecea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34230284-e0c5-4873-8e11-e8ffa366d788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f272aa-5e6d-4ea3-930a-310d0e61796a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e334c3-9d73-4efb-91c2-2b247e7cccb3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6c76a3-7169-41ee-b189-4351088884a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "942f5227-29e6-4af3-bf96-83d2431a8ac0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2dac13-2c8c-4c53-b860-794b08779cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd6f1193-c6f9-4a0a-94ef-09c4d65adba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0f8751-11d7-47ec-b36d-a8835756f8df",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6fdf58-62a8-4e46-8477-ccd28b053a5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dae5ca74-8f4d-416e-895f-508d38498d3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7a02c4-30b5-4765-8eaa-a562b821f1fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "053b8e3a-b515-4bd4-9320-027fced5424e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b397242b-c4d9-4faa-860a-79e4cf2d6df4",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd10971-1bc6-4fc8-b1eb-d4308bf0de99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f0ca846-23b2-4b66-9ab5-360ab691d721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d6ca1c-b566-45bf-bfb6-a2c47fbb2c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a3501f0-f18c-4a61-87a3-a36e3163b2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b15e347-5439-478b-b264-09854948e5eb",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7999418c-441a-4ec8-9a7b-b1e3293f0c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6545de5-f4f0-4d47-a54e-a5cbc9ef0ea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "800e5a8e-231b-4dde-8d78-fa95a989c620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d6fb4c-5cdc-4636-b21d-87bd457fc869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce722d92-7fed-421d-a38a-40c827c99c3c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5582dc-1681-49d2-8c05-8e832734756f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8041612a-7fa5-40ae-90dc-7f5b8268fdf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22196c32-d7cd-4985-9596-d551225c0a91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd9b7cf4-2603-4490-900f-33ce5fa417b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a1034d-9a9e-4c03-a134-fc56c3ab8917",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d28580-95d9-4e63-b0d3-1e080eea6017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f813b6c5-6efd-4277-ab74-5f1ed339cd3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53040563-fd4e-48db-8aa2-bfd69285c76a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2642aa2-5bf4-4c1f-bb10-a59dad2e2d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d6a4e0-4dd8-46ca-ae96-0db63b9bcaa0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161c702b-57c8-42bb-9b6f-a9c25a2805ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e9fa79-f1d2-4a4c-9ebf-c55bd1e5d02c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b1dc06-91c2-4be4-97da-20d0e4540f03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e4e4d4e-c9a7-44e1-80ae-9098a8155b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f03be9-0bbd-46a2-9df6-e322fbaa032e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebc492c-2778-4ad4-b3a6-671023a77bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0edbbf3c-c0a6-466d-918f-954244c41fee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7060e0ac-10cb-408b-8cfe-d72b5a11b874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99f519e5-8b2f-44ab-ab23-0d3663a3d651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da63dcf-a393-4fa9-8b6a-3161cc45755f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e602d7db-e05e-4e04-8ee5-094552f91aaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64895730-4ad8-4b30-a2bd-362083e19b55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b92bd7-97ba-41f7-b459-ee6affb8a060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ac990b-051e-480f-8205-63690b24f788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ddff11f-bdaf-4835-8068-a5d7cf9221d6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b612f81-2d38-41de-abdf-34ef27efbe2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05675db8-895a-4f62-ae1e-9367cf9f3d87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee2ee98-99b3-4b9b-83a1-f2ac660917d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bebaf50-7043-47e4-ba5f-985a3f7c7998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16eb693-4130-4729-bed4-a0ba9f4b4522",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d98f89a1-13d8-471a-a411-4b453d03a1e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ea1becf-b661-46cb-8b56-6efb7b169d5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fff8177-9384-4739-a44d-811bc1e68058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e017b5e3-5816-415d-8982-d7cf4d662628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bf2c00-bedc-4dbe-85e1-049f4eaf5e64",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e1024a-d947-407f-99bb-a7d0c9616a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6941f8e-51ee-4a38-aee7-7acf679fffc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18152a5-6bfc-4953-9c6c-41a8292d80a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda8d80b-0fa2-4eaa-9e0e-1cc0f10d0654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1d1dc2-c356-4213-97a1-a97bb7c1bc43",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7294fb44-5ae7-4004-b16b-d0914facbeff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d74ea6fd-cb8b-4592-be82-93ca63055615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d379076-b170-4ec4-b02b-c2b91c5ddf0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe71c92-1b15-4168-9b2c-15aef17b270e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8953fda-3a6f-4c15-aace-1786111fe602",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da615b4-1dda-4c48-b279-71269ee1940f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f60e798-1f1a-4049-b4e1-fd8be0f6a57c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efad1bd-df94-4aa6-8e41-5382a9190232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18cbec0-372b-418f-ad68-29b34d73432e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f3ecc8-6d6b-47c1-92c2-b8366475a626",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924a0e82-ff89-4a9f-9e2f-3540f90c61f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac9ae40f-0a13-4fd7-a532-229e7961414e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ea7049-8526-4cd5-98fe-28b2a8e91f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec1530b-7a9a-4327-a747-283c8e55998d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f8674a-bffd-462d-afbe-bf5b16e6dc11",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0150b3-1a7c-4a77-8801-6b7264582db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d55450d-5ebf-40d9-bac5-8b3cbc2245d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a2d7cf-f059-49db-b83c-f3aafa263016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef76280-a580-45f9-8b44-acfe57a6730a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8417b1e7-dcf6-4eca-a273-8a40f260dc62",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7011214-92ad-4db9-9439-33de11af51d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9947faa5-dd63-4879-b658-0d833a343447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe8099c-7af5-499a-8f11-d584069c8577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f14dda92-443c-40ca-a236-4327c1dfbc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60921725-041e-4874-afa8-283ac6a250d1",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106481ad-8eea-4851-9bed-17def051bcb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ec7542-fab1-45e4-bc34-c4dfd1973f73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "162b1c53-f49c-4d4b-a838-188dedc4bca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62faf5b3-0ea8-426a-8607-116306f44bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a571a8f1-3c89-47f1-abe5-33300efae1cb",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205963e8-1714-4887-b6fb-1e2f89a37d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0600183-453e-435e-a133-6ae1b283d846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef011c2f-f4dd-441d-879d-ff5493e09f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7dd9e3-e3ce-4421-823a-c821a12c19a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5764cd8e-5121-473d-abb9-438297582646",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a956448a-7032-4501-9fb0-a92deeb751ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abff22ef-b235-4339-b574-29b71af2bf05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4b986a-1812-4f89-9304-43189e72acb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47fbee3-5f0c-4e73-9865-51e1a3019acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d357f7b7-2ad8-4be8-9329-f40eb3af5fa7",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d31a3c-126d-4cc9-8b13-8e496f35e29f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d315e72-9240-4b4b-93c9-94b0f2734831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d8dc8d-da3b-4183-9aa3-241d141cf06c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb0aa136-1ed3-4cff-9f34-cc99358b26db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3742661-31d6-4578-aa7d-cbeb6c419fee",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8f1d1a-a330-4dae-9deb-7b88f0f5d97b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be831e0-cf28-4749-ac19-094c9b6d634c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f405e29-e271-4d6a-a245-de284eeed886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f8f9be2-a0a1-4a11-87fc-4a1ba88bbae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb84df9e-700f-4cf1-a104-3896fad8cf77",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd9d5ba-76c5-43ab-8a5e-9f3f8147bfb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b40a3a9-9348-45b2-8f58-7b50f969a7db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf23ab7d-51d9-4a52-aa11-3e538da01bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5dbc017-dcc8-4bba-a314-1b7d7f3fdbb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b98e238-5031-490e-be47-7c29f82fbcb0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75f13fa-b8ee-4f15-88dc-eb797ca708f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2abd53bd-1e1c-4bf2-9cdd-d897f4ffa7d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28b7331-01ed-4c1d-ba9e-c6c526ff764b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b932bf8-0966-46c0-8bd9-8cbc4091c1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4641e10a-7a20-4003-a0c0-604d4e7a9ea8",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5878bdd9-6d7b-4414-99e9-70b5c4d60fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f86884-569f-4e7a-9012-a35f0f9f8f98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0134fc3a-40fc-4cf2-922b-572a027663ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d21a065d-800a-48de-8a10-51c1a37f138a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "844dc1c8-1b74-46d1-aedd-ab5b8c9c0d3f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce37cc52-d217-4edd-a87a-33816316d967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f736cfb1-3a55-4ca1-8714-38351c76138c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c32dc7-16f4-4fd1-8d3e-1f2bc096f749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "210a966c-790b-423c-82c3-3bf41028225b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee814de6-e6f0-4531-8402-bbaa69463490",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582cd32a-29b5-43fc-b7b5-9410b1f883d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "964e9b4b-041c-4512-9f3c-9ea0cf5fdbef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc4f940-78b1-4b1f-9266-46687c0592a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15eec2bf-c042-46cf-8d1e-e4b8f655bb93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be467d4-61db-4058-8046-808045d06b88",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9d1b43-2b9e-4781-a822-b06fbea82259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f1214a-9a41-487f-88e3-ada0fadde721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f68ed41-57c0-4dd1-b3b8-539d64ef9598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b0c67dd-0489-4757-982d-d5b2a70bcca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ad0e47-7b19-4427-a80f-ac426904e64a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6e310a-1cd0-4468-924f-0248dd9ed15b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f76cb3c-eb20-4451-9e77-62f495420b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0cbe1a-a2e7-421e-8753-5b3edfd25a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcd6fffc-5532-4cfe-916f-d4efb907158c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0696a67-7e37-44fe-b112-a2cc501eda97",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e283346-0541-4e0b-a9c5-aa47f148f9b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27304878-1bb6-4066-9aa6-7c1155102ca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bed5bbf-d3aa-4918-ba10-4138a963edfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af8a7e5-7e93-4839-b124-7dc6c4f04bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdcb18f5-db07-4db4-a3ce-aa5b45cbc19f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117952ee-f5b2-4739-8d5b-105cd4c7afdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21245e2f-936f-4aaf-bfe9-6c7d6062b7dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6a4062-907d-462f-94dc-88fe2e5a21b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39d0ffb3-0654-4445-9859-2c579128d4ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19bf7a51-2caf-48f2-aeed-37ecc818eb29",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786a29fd-139b-4a3e-8ba3-d60b780586aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79bf57d1-9149-4926-b0e8-1a10122046b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ac8141-3ed4-4c73-b9c1-fb8d4532c59a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b49b483c-08bc-481f-a622-c099e8b5e35e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4645352-bdcc-47c0-a6f4-4382ae300c70",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc7c390-2b71-41cb-b298-bbe126a89007",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae866f4e-1256-4d4c-93c8-a5ed7890629e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f4e595-3981-4b42-948a-a807f17b95f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2394799f-6146-4f66-83fa-ae44927ead62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806b2e1a-cadb-4880-a49a-0a3703827a29",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2659f52-26e6-4541-91f1-0a6f2c4e9989",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39016f8e-22e3-4faa-9887-1dcbcb131386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5a2199-3993-466d-8c71-a3c8c5fb28f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97f218e2-e030-48ea-8b75-7af58fb0c144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86d0e28-b7d8-48df-8f25-dfaa26ec93c6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b111f7-6f1d-44b0-b94a-f74ff089f0c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1404d167-3dc7-485f-abca-124dbf18976b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8391e113-de03-4f01-b115-a7142e456e19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a1d7e3-b1e7-410e-afc0-aa01d90f0040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f8d2c53-f661-4303-9e17-3fae70e22a9d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3f93eb-2b7f-4201-b8ca-4abe64f8576c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb197d62-89a3-486d-a28f-750bdf87d788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "501e9384-e37a-471d-9a7f-074548d8ab1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3bf605b-2a0a-4e92-b60a-ef5a2aab007c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79a8d0e-8bd8-40f0-a930-76e556d77deb",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5671173-4931-4554-81df-52a44fdd0f3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01022407-7dbe-4e56-ad4c-e5317aafa464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c4967b-f868-4bbb-b449-5cd61fc6252b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7015a85-6adc-496a-b9b9-b09f045148e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2499b7a-fb04-43e4-9dd5-b503e0a96a6f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915d154e-8878-45b0-8073-3e83613682bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6efa7617-0688-4a98-a9b2-e41f39cc26e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c9a0be-c041-44ee-94dc-a192ff16e7df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "166e4400-dc42-4d76-8fa2-9bcb645a112e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d41ff2d-042c-4459-bfbe-01c16e7c9b94",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48499667-294f-453f-8847-4c4915c288e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7235aa96-0f5f-4391-a910-c87ab6ad0548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80889b1c-ec9b-4832-ad47-76cff457bb69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a026a58d-a8c3-4c27-95ae-e90157bdf006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c4700a-af18-496b-9061-efb05ae77db8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c880abe7-d9cb-4f5a-8d12-0bbd690c9412",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41f6f44c-dbdb-4759-a351-15ecf0f5acdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3c59e7-b07d-4ed3-b596-ff1a8a2841fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2722f7-9733-479d-b8c4-ec052d69fb3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19e1d80-c7dd-46ee-9ae2-5ac5b980239b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5aec299-eccb-4a89-8924-2010566a1c25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfb64d69-4818-4316-ae21-c76ce09e4c80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb6def3-ce82-441d-b064-e2800392ca04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "088ff9e2-a29a-4233-a02b-de1b15abd23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0533d6-1052-4212-8f04-7c104d90486f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f92eff-49fb-4ca6-bb8d-24346ffe67a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "034ee048-5433-4dd6-9e81-527f6a05707a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "177e83a6-7bd1-434b-8865-fb7ee79878a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85dd9174-0385-4e09-8c57-981ca2e775cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd21fb1-57c2-47d6-bc69-0c7e0d20baf7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93d5979-1222-44a1-bc62-e8f076160ee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c78f4c0-1765-472e-98f3-67e9c8886803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1b349c-d5ac-4bbe-a2ea-52a7e6c06a88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf61cdcb-e28b-4814-b89f-f22dfd603f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b420db-757b-4bfe-b0d3-98fb53015c2e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ad939d-07e7-4f07-9e53-f1932170f47a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa7df298-06dc-44aa-939f-cc4ed333dc17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a8d0bb-7959-4075-a3d3-282144c7611d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2062fa43-8a85-48d5-a50a-077483349b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5417b4-5f2d-4fea-8281-e1cb7f60c696",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe84772-aeed-451a-a38d-7bcdb97d29c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "138fd6e2-8641-40bc-8b91-bcdec9f65e2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8003e0ec-2c83-4c2b-922f-424ef50d26c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b99683ed-3298-4e70-b567-ae3ce1182847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ff7a71-6944-43b2-bf52-69350a5523a7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ff5a08-f7c2-4ca1-89bb-bb9254d1f67a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83ba5fdb-5e94-4544-a314-85162f8862ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d49bd5-b5b8-4e44-9145-6a9643b58af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01ebda1e-702d-4312-9d9d-538634c6999f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a0c41b-5720-4f54-903b-6c223445f00f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3e2860-f5fc-4c7e-a45e-157136a623a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56bcc03a-8fe2-47ac-9c46-ef26cacc55a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc09805-ae70-4bf1-a719-008939aa97b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b17e57-c917-403e-92ac-27d878b1e469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778bcdb5-e341-4d76-b2a5-29e443e3343b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26379be-9677-4ee5-83d8-49409686dc05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4afe4031-7eea-456c-b41f-cb69441c0cb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b96a26-6b5f-45fe-9d36-5c19b16a243a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2403ac06-a5f5-45d4-a586-46f405003f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ed3ade-3417-4258-988a-fb25c112a64f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604f6531-477a-4cc8-9655-dad345e64117",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c571affa-20f6-419e-913c-86b0d41046b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b16d7b-1a0e-49cc-8e26-e16a6b92656c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "316a2ef6-272b-4d8f-988f-32808c51bbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80663fd-688a-45be-aaff-1820dfcddfa2",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b84a780-7357-4d73-8ae2-bdefee7ebfc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c1d3462-b969-42ec-a4a6-f049abd6d2a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4066207-e15c-4158-95db-84948aab0cf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f23267-fbfd-4201-b5b3-6af3d97ac75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a562c9c1-c467-41bf-8ba0-02e16f320f29",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef8d449-40a0-4c88-b653-ce033ec89fa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38467828-1756-427d-8256-f7f6c5b20a0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f0b30e-639d-4436-836b-56d15cdbe4df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d8c47e5-ce91-4bb3-96af-7f2d6735e847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057166e6-6a67-497f-a937-b6947b8fbc7c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc4d22d-3d1e-4c88-821f-450bc09ae391",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "274d2b8d-20cb-4237-b53d-4817706e6e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7752c34d-5ada-4d45-9df7-cf8777fe4266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abbadf90-4b84-4482-8022-555322cc70ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c597dfc1-6fcd-46c6-a2b6-8e6f1eb2aac9",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae28b1e-723e-4289-b3cf-2bb436cf3322",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38d7e735-b683-4e44-a6d4-df87bd44e867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10bb6830-bf60-4452-a352-91c32d35b28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f214b066-0e2f-4c6e-86bd-fca697982e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d33041c-fcbc-4543-883f-c69ed4136fed",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ccaed3-0c08-449e-abb9-57ff9b18a85b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ec0257d-fb01-4d88-b001-ce6bcecaef22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de0b151-0bcf-441f-a549-a23a8caa851f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e10582-c582-4c2c-ba71-570b71260565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b241605-7a3c-45b0-aa73-ba4950d288fe",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48dc81b6-8d4c-4c3d-9322-391a2eda82b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61afc2ac-83e0-414d-849b-127b3859b9be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebcdabdd-b208-453c-948f-c1cc88a15f2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78f51063-8f34-4741-8b47-2afd22ab50bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81944648-cb86-4d12-8b33-af6ca2eb02cb",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "823ed9ac-c0c0-49ae-9648-75608901fbf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cfa1e17-4ed9-4db2-b76e-c7713de8c24d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02cdad72-29dc-4848-b23a-b21c87afbd43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e39d135e-1b77-44e7-a871-8dc215212201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b3dc55-49fd-4c8c-9d01-d929befe7a9e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a56159f-70c6-4adc-9972-bd854007e4aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c443c00-66d8-427f-88a0-0bad225323fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcff9a4b-6714-45f0-a388-82e8f149b5d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea02bd9e-8d91-4df5-a025-5e00db5f8ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e313d03-630d-44bc-b7a9-3169a02ab157",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e9f5cd-9165-4693-bcf7-e4fa1687ffe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "244b68ef-7e60-49dd-a3e9-2ee6ca574e5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "697c7466-bec9-4bed-8f0f-faa1a2f0836c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c5a90f0-47e6-40fc-ae37-10c5d9e0ea1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b2aeb0-0b48-459d-98ea-e19030289390",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61d4e04-8114-496b-a384-90a3469fb1e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d7f918c-4102-4cc4-945d-fd87bc15408b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aad6def-1254-416c-adac-2ebc77f9358b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f926760c-041b-4783-b770-5d778b136441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc6ec4e-8fe2-43e2-9131-19528fe67687",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753c3f9e-7b3c-40d6-a727-d6d37a164538",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aab6c164-00d3-4c82-ab6c-dad034a1909e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "977532da-11c1-4f3b-a106-4f41e9074417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39791859-fd5e-4b9c-854f-aa4bcb9579c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7baa57ea-96e4-4e2b-af6c-b182d60acb86",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033c2bd5-5c12-49d4-bda6-e1932aadf986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fec0e91c-a05b-4bbc-aa4d-96ef45d909c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3f24ec-bd8c-4e35-a985-8f72b718c471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49f06799-ebcd-4a5b-9002-d0e18abdfda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57412bd1-f21f-4a6f-86ec-461259b91e0c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e301c2-12d1-403a-ad81-26a198d12703",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1c58b96-6191-4a01-a11f-5e25407158fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d648a7-7a99-407e-8c1c-2f85170ffb1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4a01c9-907e-4898-beaa-f97e822f5f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ab7e1a-5349-49ef-9715-7c9909d9b722",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c768e6-a111-4fb4-bfca-fc23a68b5165",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "700eff95-451f-4696-985b-120b178ec045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd531aa-2742-4afe-a511-20643d452e9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c14968f-8d77-4238-a6b2-104603e87874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf39bd8e-d195-43f9-a644-93d3e09bedf6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1866c57b-a785-42dd-9388-9f4bd0ccd7cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b42080d-cf0a-4e45-8b44-c68453b9683e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "915508ab-c7a7-4dec-a39c-f8698c198d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce3ebc86-82f2-4ac0-acd4-4d4571a4f274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df598d66-728d-47bb-a43b-1d38b6e1eebc",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1110f48a-fda3-459e-a6a0-48b8840fbb08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "152b2f6f-7362-4ef7-b9f2-c2d6a416061b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6461c238-cbad-43fc-9068-23839ed38149",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff0ca969-f409-425e-88f1-f72d1fe444cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9624d75b-01ae-4018-935f-6e2257616857",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfafd900-4c15-429a-bb3a-428a1bb8656d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8f32036-9a40-459e-9d8d-240cc98c797f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93e9a40-5de3-4062-a48d-b350a152861c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d10ff9d-f462-47fa-9e85-34dd986793b2"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7696e05-94f8-48f1-82fe-34f71c7dff77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b7262e0-3f7c-40a8-857c-fafdd921213d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0dea8b18-74e6-446e-b24e-d10778685bd8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "811482f4-5560-41d8-a638-257ae1ce1482"
                    }
                  }
                ]
              },
              {
                "id": "3adf310c-c716-40b9-969f-3aaf00a0934c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "982ad810-2063-462d-ac94-1da80d97cbe8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc7b176-da2a-4be1-bd9c-3a60e291bdc4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0821b905-0862-4b33-8a72-e8e6cc426210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c26963a-67c0-43f3-add0-624ce38a3c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce6f5296-f49c-48f1-9009-0fe148a672a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508dadc6-f644-4eb7-82e6-dcbd0cb1aae1",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495c039a-94d8-4c87-8646-764806a249a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3922086d-00cd-448c-b253-ca4de05bb101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd292307-1998-4522-8fbe-10ac44938b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29a60c0e-c270-4f0e-b1d0-71e544e8bbe6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1ecc9ad-4df5-40f3-a8d6-5fc87c52c192",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52c650e4-4862-4084-a03a-3a74f30f26b6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "63a062e6-fb56-4507-949e-fb53967d3b3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d017444e-2535-4566-84ac-8e3e8b7c2d0a"
                    }
                  }
                ]
              },
              {
                "id": "829898ab-67eb-41f1-bbd9-e61e25ea4090",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c7eb08fd-5a84-4640-907d-e738880375b6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29006f8-63c4-49e4-862d-cec26f7ccec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e005894c-97cc-4b42-ab48-1c6083222e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96046b9-f3ad-40c2-95d1-36dac12b8c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05cb94a0-112c-4b69-bea4-d73ebf0d269e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "efc03031-8de5-4d1f-9eb4-25c67a9f1bc9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6afefa70-21e9-4a59-90d1-c283d2bb2bb2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1167b1e-9830-4601-9e12-4c4af8369db9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "85d20994-74e3-4196-92d8-4e83f45b5ba4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d8d80ad-f174-44fa-81c0-9cac3f9f22ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf3ea2df-a8e9-44b4-b46c-af23c5e96542"
                    }
                  }
                ]
              },
              {
                "id": "7b713ed9-3744-478d-baf8-9246bdd9f429",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba497fbd-6371-44ec-ac88-670e1db0dd06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "edbd1cf0-283d-4491-aa06-30b30885f15a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf83bcb7-3454-4faf-8acd-4e9c42bb3271",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a615cd69-070e-42de-b653-e3e7ec4682cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d987b87e-4bf4-4d04-a50c-f649409ad700",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "943e3d5e-6aec-4cff-8a30-04264f76c3b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba89ae5f-ffb5-4cf1-95f9-c8127c8ba85d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ec287485-c953-4312-9873-06771c9191fb"
            }
          }
        ]
      },
      {
        "id": "45ed5522-1798-4df5-8c9d-628b7f0842b4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e17f6065-b6d7-4031-866e-53dcd8b748f8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "721c831f-92fa-4ff6-a340-4d118e038773",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9af06c24-10f5-4713-a392-f1c707c661d0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48dc19be-8d36-45ac-878d-cffa16c6c453",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1256faf9-e69e-4647-a4aa-dba4bfb4448a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0cb9f68-5064-4599-923c-0c9f1f93fd37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba2ccf64-d5e1-4c31-afb4-d5e3d3bc3212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669a3414-fd63-4fff-82eb-1d337bb29792",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8396877-0dd5-4a9b-9819-fda756e7bcad",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "323ccfa4-40ac-4146-af6b-a8fca8bfbabb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63202f8-16b7-4322-a61e-de4a53702eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fec27a11-138a-4821-af03-615b7234383f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3df56945-5ed3-4b16-8ddc-a1762703f8f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "755451de-654e-41e6-94d9-a6dbe1b4ba22"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "692416d6-7164-4a72-babd-a2879f6d02ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92359b34-55c6-4297-a7b3-2d59f8be5ae0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2c45d8d-9b4e-41f6-b2f8-75607f46a512",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8b50d727-0ab5-4431-9693-712b8cac82b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "033c3433-6e3c-44ab-b2c5-c0c6bf253564",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a64a0949-66e9-4f2a-ba76-57eba644472e"
            }
          }
        ]
      },
      {
        "id": "3b5a0690-7ef3-46d2-b607-0b31733ae212",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e6434f70-3306-4eff-8621-8fc33c1bf8cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d625d5a9-d1ea-4cc4-acbf-dbfbd9264171",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "70631159-b77b-4ad1-af6d-a66ef923ecfd",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfb904e-5ea0-4485-9fe8-df087145a808",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a298608d-9a54-4e29-ba51-a1811725321a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d083622-2799-48cc-ba0d-e03b84f18b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "318b2312-5cc7-41a1-b12e-ac2f05de1cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16439b15-1c59-46c3-9e23-3c90b0f68bd4",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f177a22d-da6a-4986-82e1-798be4cf7564",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "36df9a36-7d0b-4021-9422-91dece1336c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d041d0-c419-4e6b-aed7-dd820b9066a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a4941f3-0b8f-41d7-a667-3fcee70322a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6e60a45-f571-4a41-8b70-175c458f5bb7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1f2ed15-f753-4600-a242-6f67f7152760"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "875793d6-f01f-4cd4-a8ec-0922a111a671",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1c63988-0ea8-422b-bcaf-05ba99087fb1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a9c3b480-fd3a-48c2-a8a9-843f565eeeeb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "adec5097-bbbf-4683-ae74-0272c30b24ca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18e50dec-e0af-484e-aae1-bf3f3c27c2d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c06af812-8f07-49cd-83a4-d17a9b908903"
            }
          }
        ]
      },
      {
        "id": "c05058aa-1bcf-4c75-9e5c-70d1bf3cde84",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7603de06-91e4-4dd7-b26b-19b00900a491",
            "name": "Negative Testing",
            "item": [
              {
                "id": "22f6df0a-e0a7-4dcc-83c7-0350bff779c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06c87013-8d01-4040-9a7b-bddd594a499e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ecb783-b0d5-42cd-a66e-88e70d1359a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58448b32-e477-40fa-ac5a-d0b73b03715e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55741b04-ff93-47cf-8466-b032355ef132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35567665-4fcf-40be-9978-d0c9fb1e5dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714d3fe8-32a3-44d9-bbd2-7194aa927d1b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76eca5c2-c641-464b-baa6-e4bdcde16e2f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ee78dca8-e73b-4168-a491-72b09155de44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "132cb141-e29b-4f55-9bc0-b8d1ff8c8092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82811d41-66e7-4ca9-9d9e-6cd996b18b63"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "deac6e65-4c36-4b6d-839d-53f15d185e2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8c416ca-a0ca-4b0c-ac4d-08b43c66d750"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "483fca34-d689-4ca4-bbd3-e29905bf3d63",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25f9ad24-9907-4884-bad4-8b0cf1d80e01"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d814cf01-615c-43c3-ada2-5987acd23f94",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "53c77897-9f96-4427-8d34-8657791aad61"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c35d8e60-474c-43ca-9382-1b34b23fceec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "210c93e5-1dde-4d27-b1c9-f1575723ac7a"
            }
          }
        ]
      },
      {
        "id": "ed23e3fc-32d8-4963-8a66-4933adfd9ebc",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3beee063-c9f1-4fc9-8d6b-b50a145423a9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba817a3d-0ad7-4b62-aa27-6458a9f99832",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "411c57c6-4489-49ae-a03a-423b9762bd2d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b696e364-a059-458d-847c-452b6b7a4cbf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51f83af1-d40c-4be8-badf-20b0fd6dbe57",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 368.78076923076935,
      "responseMin": 16,
      "responseMax": 18161,
      "responseSd": 1340.6731209815773,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1681605514109,
      "completed": 1681605624033
    },
    "executions": [
      {
        "id": "bb4c0a30-d0d3-4779-9b8e-3cd162d4766a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a039c8f1-1063-41f7-9147-89cfb7beb007",
          "httpRequestId": "c194697d-75b1-4106-b6a7-10e11d7fa38e"
        },
        "item": {
          "id": "bb4c0a30-d0d3-4779-9b8e-3cd162d4766a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9a21aba7-a3d6-45b5-a942-0e6b1589344e",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 0
        }
      },
      {
        "id": "6b368bc5-867c-4ca4-bd67-d26ed70fe85f",
        "cursor": {
          "ref": "59053cd3-0a4f-4527-9452-2e22228bde2f",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7dbcf75b-0295-4cb5-aa66-6eb8be7bc30b"
        },
        "item": {
          "id": "6b368bc5-867c-4ca4-bd67-d26ed70fe85f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "64c4f077-27da-4e46-9735-f9eb033b779d",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 0
        }
      },
      {
        "id": "eb4139d1-296e-4125-8548-1a4696fe775b",
        "cursor": {
          "ref": "e6141a24-a07b-4daa-b27c-d87ee1b47f4c",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "85d19927-2e05-4003-9db6-462a1a1d155b"
        },
        "item": {
          "id": "eb4139d1-296e-4125-8548-1a4696fe775b",
          "name": "did_json"
        },
        "response": {
          "id": "e900dda1-0535-4695-a031-7a7ef8487e19",
          "status": "OK",
          "code": 200,
          "responseTime": 778,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b9b9bc3-4ca5-4bc8-83fc-5b422b31564b",
        "cursor": {
          "ref": "abb8ccc2-5fae-4fa2-b238-f2058becf231",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "138f8b4c-f536-4301-92d7-0827e9a76619"
        },
        "item": {
          "id": "4b9b9bc3-4ca5-4bc8-83fc-5b422b31564b",
          "name": "did:invalid"
        },
        "response": {
          "id": "488a6c3b-9cb7-4956-8748-75f14ad63db1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5357,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "4b9b9bc3-4ca5-4bc8-83fc-5b422b31564b",
        "cursor": {
          "ref": "abb8ccc2-5fae-4fa2-b238-f2058becf231",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "138f8b4c-f536-4301-92d7-0827e9a76619"
        },
        "item": {
          "id": "4b9b9bc3-4ca5-4bc8-83fc-5b422b31564b",
          "name": "did:invalid"
        },
        "response": {
          "id": "488a6c3b-9cb7-4956-8748-75f14ad63db1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5357,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "990bcc4c-912b-4fa4-bb9b-8b16f2660d4b",
        "cursor": {
          "ref": "589e9938-2bd8-45d1-ac7d-d104e6ad376f",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a4575a18-38fc-4fc2-a75e-d0ad600a859e"
        },
        "item": {
          "id": "990bcc4c-912b-4fa4-bb9b-8b16f2660d4b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3666ab4c-8984-44fd-8628-fcddd3fd0077",
          "status": "Not Found",
          "code": 404,
          "responseTime": 77,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292d2e75-7282-4981-9e26-eb1554a338bd",
        "cursor": {
          "ref": "e0296320-a9f7-49b8-b306-4ca09e0b8b19",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "cf2df10d-0746-4425-8031-9a8b508d8399"
        },
        "item": {
          "id": "292d2e75-7282-4981-9e26-eb1554a338bd",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6d97267f-aab2-484f-b58b-506b6a912d69",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120b381e-6515-488e-813b-57f054ba49f3",
        "cursor": {
          "ref": "36a319c0-9b0a-44c1-abd3-df3d03f53881",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "11a4955c-6c46-40a5-b00e-b0f81577349b"
        },
        "item": {
          "id": "120b381e-6515-488e-813b-57f054ba49f3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4cb2b913-3906-40bc-ae76-f69fa24a7764",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "4fa59fd7-7a10-43e1-b0ff-d256ad112e44",
        "cursor": {
          "ref": "6e55dd8d-f576-4dfb-8be1-249a0ce3e575",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "89ec219b-3aef-4ee6-9ae9-669b8c8d493f"
        },
        "item": {
          "id": "4fa59fd7-7a10-43e1-b0ff-d256ad112e44",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "28ca57fd-a44a-4b30-822d-1d5a154627f5",
          "status": "OK",
          "code": 200,
          "responseTime": 223,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4fa59fd7-7a10-43e1-b0ff-d256ad112e44",
        "cursor": {
          "ref": "6e55dd8d-f576-4dfb-8be1-249a0ce3e575",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "89ec219b-3aef-4ee6-9ae9-669b8c8d493f"
        },
        "item": {
          "id": "4fa59fd7-7a10-43e1-b0ff-d256ad112e44",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "28ca57fd-a44a-4b30-822d-1d5a154627f5",
          "status": "OK",
          "code": 200,
          "responseTime": 223,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "58cd521b-94fd-46c2-b6fc-4203fd5bfc91",
        "cursor": {
          "ref": "9209a785-a9ba-4bf7-b332-bf365e06d115",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6d68cdc0-5501-4393-9476-36064b22ffeb"
        },
        "item": {
          "id": "58cd521b-94fd-46c2-b6fc-4203fd5bfc91",
          "name": "identifiers"
        },
        "response": {
          "id": "b63134ab-a74e-4bd3-8b0d-561f8a52d0fc",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f797732e-265c-4eff-ada0-0f5a5d435b10",
        "cursor": {
          "ref": "19b7f700-dc6a-4444-80e7-eb9826731268",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "291a4d05-8abf-4a9d-803f-525a769eba63"
        },
        "item": {
          "id": "f797732e-265c-4eff-ada0-0f5a5d435b10",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a95d9c3c-42a6-4b8c-982b-ce206f300b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f797732e-265c-4eff-ada0-0f5a5d435b10",
        "cursor": {
          "ref": "19b7f700-dc6a-4444-80e7-eb9826731268",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "291a4d05-8abf-4a9d-803f-525a769eba63"
        },
        "item": {
          "id": "f797732e-265c-4eff-ada0-0f5a5d435b10",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a95d9c3c-42a6-4b8c-982b-ce206f300b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b21eaf6-8c6a-4bf1-ad47-8933740db6ef",
        "cursor": {
          "ref": "a516b951-6248-4d9c-a86e-5e2270ab5bdf",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4701e3c4-1192-47af-8a2b-4372e48a27b0"
        },
        "item": {
          "id": "1b21eaf6-8c6a-4bf1-ad47-8933740db6ef",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "04712021-acbb-48b7-8788-9af0fae83785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07715bd1-e071-4780-9b2c-809ad8abfbc7",
        "cursor": {
          "ref": "f3f3b833-8785-4f72-8509-c231ff083989",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "fcf330e5-77d4-458c-87b7-7b6e495f4da7"
        },
        "item": {
          "id": "07715bd1-e071-4780-9b2c-809ad8abfbc7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3ab8173e-8516-4564-8d17-d739dc122859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7bbcaf-aba9-4034-b9d9-fbbab324e7bc",
        "cursor": {
          "ref": "cf93ce04-455f-47ca-9b6b-d54bf5aa9d01",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "148d51f2-62af-4321-889b-32024b9e0529"
        },
        "item": {
          "id": "db7bbcaf-aba9-4034-b9d9-fbbab324e7bc",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1bb2b86d-268b-49bd-a739-c856d15ec3d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9621eca-8759-447e-b9eb-1d88d929d9fe",
        "cursor": {
          "ref": "65990e7b-27d3-4e8f-ac46-7785653d7855",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "30863835-ea45-4ba3-a2eb-bb58b950ab88"
        },
        "item": {
          "id": "e9621eca-8759-447e-b9eb-1d88d929d9fe",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3e2d6c67-f5f0-421a-837b-74dbc51f4aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce7a7e6-4757-4b3c-a448-fd082a29709c",
        "cursor": {
          "ref": "480319b1-81a0-4377-8fdd-e7640a9b9690",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "47242747-deb1-4b7c-a191-a646d96060bc"
        },
        "item": {
          "id": "7ce7a7e6-4757-4b3c-a448-fd082a29709c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9995aa4d-e23c-48ee-a93f-68080e631383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "073d37fb-b507-4eba-be70-faf95ca42f23",
        "cursor": {
          "ref": "8ce1ba76-56a9-4627-9c0a-e2559cc7a401",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "68fa34ca-c24b-4ecb-ad41-2544610b43f1"
        },
        "item": {
          "id": "073d37fb-b507-4eba-be70-faf95ca42f23",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c076ba1f-fc21-43a2-a5d5-20b69050b73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d01084-2e1e-44b4-9ebf-dd135f2307e6",
        "cursor": {
          "ref": "ddad9f14-fb89-4d09-8cb0-918d0018c1b2",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "180579c2-383b-4873-87b2-6fd300095e89"
        },
        "item": {
          "id": "75d01084-2e1e-44b4-9ebf-dd135f2307e6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "3af5441e-c4f7-4b7e-b859-c9f13ab713de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42cde344-18a6-49dd-9c35-dd4fcd849f2c",
        "cursor": {
          "ref": "e8b4fb80-3d2b-4af3-be37-d58d2ca7b0a6",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "de87a003-7041-4e8a-8ffd-a8c5c994d31d"
        },
        "item": {
          "id": "42cde344-18a6-49dd-9c35-dd4fcd849f2c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "56c02b9c-efb5-4be6-ba6c-a27ad10aac61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfdfcd7f-67ad-4084-aee6-bda817cdc465",
        "cursor": {
          "ref": "3124dc92-b53e-401d-bbf3-ceb8ed9246e2",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "78718c3c-f645-423c-854e-39400179b2aa"
        },
        "item": {
          "id": "cfdfcd7f-67ad-4084-aee6-bda817cdc465",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0480344f-c1a5-48b9-9aa5-85807e164f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2749ac-a587-4d40-99ba-54562fe0b800",
        "cursor": {
          "ref": "f2b6fad2-9572-403a-b3ce-5a1e9f15545f",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b7a94988-25f8-4531-8e6a-0ce8d0d1becb"
        },
        "item": {
          "id": "7e2749ac-a587-4d40-99ba-54562fe0b800",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9c2b4b63-98cf-44ce-a0c1-627f7acc58b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0771756-0843-4d94-b838-02cadf6cb1ec",
        "cursor": {
          "ref": "5a94d6bf-6d18-4644-9d77-a0507f3dfbe7",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a7f9c536-2105-4a0b-b404-91d77579e30c"
        },
        "item": {
          "id": "a0771756-0843-4d94-b838-02cadf6cb1ec",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8fef759e-b305-4968-be7f-30fb87365df2",
          "status": "Created",
          "code": 201,
          "responseTime": 2444,
          "responseSize": 980
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "0b96fcdd-1e8f-4971-bf8b-d9ebcc9f4b46",
        "cursor": {
          "ref": "fdc1f53c-bf45-4d72-bcef-13d178e7892f",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "69e0e7c8-b1c2-48fa-bb61-cca57027c507"
        },
        "item": {
          "id": "0b96fcdd-1e8f-4971-bf8b-d9ebcc9f4b46",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e53b0e18-8c2f-4e85-9a93-cde6682bb6cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80eb5dc-903b-4db5-9bbf-6fc11f1f3e7f",
        "cursor": {
          "ref": "5ad1c897-78de-4271-96c7-93d55fd6e0b7",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ec83a5e3-29af-4de4-86d4-2eb29f871be2"
        },
        "item": {
          "id": "e80eb5dc-903b-4db5-9bbf-6fc11f1f3e7f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "94eb89e1-c633-41ae-a209-a60d247aab50",
          "status": "Created",
          "code": 201,
          "responseTime": 18161,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "71bac17d-34ce-4ca4-aa66-20191d80b1d6",
        "cursor": {
          "ref": "d45e4c4c-73ff-4b7b-ac8d-f24f20be42e8",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "115609e7-5e74-4e44-ab94-8e17e4221796"
        },
        "item": {
          "id": "71bac17d-34ce-4ca4-aa66-20191d80b1d6",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ec5b48fd-0baf-4561-bcd6-e1cf98311a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3f054c-b638-49e7-adb6-04367cf0c1a9",
        "cursor": {
          "ref": "074b0958-bf10-49b7-b693-98ffc8b26626",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9b47d91e-873c-4032-88d4-7c5e593f3e8a"
        },
        "item": {
          "id": "4c3f054c-b638-49e7-adb6-04367cf0c1a9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3b2c7943-f124-46ba-8edd-527de196d0b5",
          "status": "Created",
          "code": 201,
          "responseTime": 3216,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "9e141961-7219-44f8-b7d2-62eeefc19742",
        "cursor": {
          "ref": "e5734a76-fa0a-4842-bf14-4690dc9ccc4f",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "27c5323d-a257-43b2-8777-42c347ed04b1"
        },
        "item": {
          "id": "9e141961-7219-44f8-b7d2-62eeefc19742",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "586c1092-1d97-480b-92e5-f66d5b742609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99848f5a-724e-4e9c-aef2-7ea683cf253c",
        "cursor": {
          "ref": "167396b0-a83f-4f4a-b14a-a21ce267ee47",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5c333e1e-6f1a-4ccb-b2ea-9feaab1211ec"
        },
        "item": {
          "id": "99848f5a-724e-4e9c-aef2-7ea683cf253c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "36fdf9c9-23dc-4ced-8c01-3927b63c96a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c427d3e-4266-4c0c-adb3-c3a098585f18",
        "cursor": {
          "ref": "a4407cef-f7df-4bd2-a43c-55202c008d3e",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "bbc36391-ca84-42d0-97d7-09aaf325b85e"
        },
        "item": {
          "id": "0c427d3e-4266-4c0c-adb3-c3a098585f18",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ede12172-9c89-41bf-b8e7-89917ea66366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d5770b-fbc6-4212-8346-ab5372706a28",
        "cursor": {
          "ref": "5e337f32-2d89-44f6-a645-2c8aa224ef87",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2c8cb4cd-59ee-48b8-9ad7-154396e9581a"
        },
        "item": {
          "id": "b9d5770b-fbc6-4212-8346-ab5372706a28",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ee99f4c4-483d-4480-8885-eb87334923e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b352c0df-b338-4efd-a6c9-bb583fe62475",
        "cursor": {
          "ref": "cf702acd-b22a-472a-827e-557e7cfe240e",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "140bf13b-da88-404b-907d-550731e65d3c"
        },
        "item": {
          "id": "b352c0df-b338-4efd-a6c9-bb583fe62475",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ac751144-885f-4328-8558-2c883abe5465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3137092b-c02f-4c48-bd8d-0d5bc38ac2d0",
        "cursor": {
          "ref": "40c6838f-c30d-4a8f-8c2c-fe05e71ea502",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d5d79242-4f18-4429-ae22-118f7b5432d2"
        },
        "item": {
          "id": "3137092b-c02f-4c48-bd8d-0d5bc38ac2d0",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c8a8c7ba-2282-4aeb-a805-2fa2946cf5f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b6d797-b1a7-4ab4-9ceb-1854e32c3698",
        "cursor": {
          "ref": "a261fd6d-32fa-4ac6-bf65-6940d5db4603",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "52bea3db-29f5-4d86-bf54-3831bd475cab"
        },
        "item": {
          "id": "89b6d797-b1a7-4ab4-9ceb-1854e32c3698",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "47db7436-6f4b-44c5-8d53-e11ed9a74106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1faefe5d-5c18-488f-a1f1-ef7526fec0d1",
        "cursor": {
          "ref": "c69805a2-22ad-4be7-94a6-8ba46c6b9347",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "68b3929d-fd1d-442b-801d-564cb5e8549d"
        },
        "item": {
          "id": "1faefe5d-5c18-488f-a1f1-ef7526fec0d1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6c5dbf54-e090-4a1a-8a9d-3b860a7992f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371c2b0d-3dcd-4d94-a5e7-05b148b20dec",
        "cursor": {
          "ref": "7ba35202-8431-44ad-90b3-396a1b7fea75",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "08cd4a2e-9760-474e-a150-ee2a52ad4cc8"
        },
        "item": {
          "id": "371c2b0d-3dcd-4d94-a5e7-05b148b20dec",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4b5d77c0-cc37-4807-a629-a884a4adc9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32aecfa4-bf9b-4fdb-9c23-488f188fe418",
        "cursor": {
          "ref": "d9079c00-7912-4846-a93e-717b787e7851",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d72a5a1f-470a-45ae-8a9d-c8ba981b4499"
        },
        "item": {
          "id": "32aecfa4-bf9b-4fdb-9c23-488f188fe418",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "816c5b4b-7b9c-4a5d-9ebf-fdf8218e0b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81940e7f-7296-43cf-8bf4-7459ee1ac324",
        "cursor": {
          "ref": "86e4ee4a-7292-4336-9cc5-9fce7459d7f8",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a839af20-383e-49b2-b40a-ee8290fcb7f0"
        },
        "item": {
          "id": "81940e7f-7296-43cf-8bf4-7459ee1ac324",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "dbea9720-b91d-41b4-a054-906e9ddf972c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84231fa-4fb4-44ca-9877-c513aadfa61d",
        "cursor": {
          "ref": "927d4411-56bf-4e15-853c-53db19ac9828",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b659e60f-4ec1-40b1-9ff2-4de8ed9d9d9f"
        },
        "item": {
          "id": "f84231fa-4fb4-44ca-9877-c513aadfa61d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "103bf680-fdb1-4fbd-85a4-163b7f27c0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ba9395-3eba-44e0-a90c-b91f7ec8338a",
        "cursor": {
          "ref": "aff610bb-13aa-45ea-9977-22815ed10695",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "769495a4-0158-4596-bf80-1c362058a9e6"
        },
        "item": {
          "id": "e6ba9395-3eba-44e0-a90c-b91f7ec8338a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7c46c080-3e90-4b27-9ca4-5911e10a679f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f78170-25a6-4ebc-b491-0a4302045a28",
        "cursor": {
          "ref": "aabbfa91-0617-4c6c-a829-a25122245bca",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c525f6f5-64a7-45b2-8ca1-4ac86e659e29"
        },
        "item": {
          "id": "74f78170-25a6-4ebc-b491-0a4302045a28",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "28af5924-68da-4e71-ba48-95b94fea4d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3335,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e61d30-4b9c-45c8-80ee-ab21c1697db0",
        "cursor": {
          "ref": "5035ebd1-3656-448a-89cc-729a890026b7",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5d607b16-4fe4-411b-8777-ab5240f5927f"
        },
        "item": {
          "id": "e4e61d30-4b9c-45c8-80ee-ab21c1697db0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "28b841b4-91a6-4997-8881-62592df1a2c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bbece7e-2829-41ab-8554-e60066fdf07d",
        "cursor": {
          "ref": "32c0ae83-0fd8-45ab-9283-266f2f38ad9d",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "cd6541b4-656b-48c4-9dca-6cc54029e77b"
        },
        "item": {
          "id": "5bbece7e-2829-41ab-8554-e60066fdf07d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2e12e829-42ae-4caf-a95e-96ab33a80101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ffc6449-25f5-42c5-ae19-1c6727dd0384",
        "cursor": {
          "ref": "dec0a3cb-530f-4521-a3b0-681696915fa1",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d80e7973-7568-4cc4-b049-9070f6f9e523"
        },
        "item": {
          "id": "8ffc6449-25f5-42c5-ae19-1c6727dd0384",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1e158a6e-b7a7-4d20-b9e8-5d9539eca5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a87f4da-f956-4da4-b05c-394f69d3f987",
        "cursor": {
          "ref": "79ca3f57-cdcf-414e-82f1-3890e7e22f20",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d93b0081-07e4-436b-9abe-8815f3248746"
        },
        "item": {
          "id": "5a87f4da-f956-4da4-b05c-394f69d3f987",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a5f867c4-941c-4406-9074-9bb8aadc58e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345bf012-ea95-4d82-ac93-a0c1a141dbf4",
        "cursor": {
          "ref": "27ccfff0-bd4e-4895-8ff1-84888a16e7d3",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2383d383-eca3-4b7a-9fa6-1f5af5f6dab0"
        },
        "item": {
          "id": "345bf012-ea95-4d82-ac93-a0c1a141dbf4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6fb3bfe2-8b63-474c-8424-cdd07cfca6cd",
          "status": "Created",
          "code": 201,
          "responseTime": 2290,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e8d9098c-ed55-4ab7-ab19-495ab389f21f",
        "cursor": {
          "ref": "75cbdad7-7c7f-4524-a479-562b9094e430",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "368337eb-56c7-42fb-9fca-c6663203f2d4"
        },
        "item": {
          "id": "e8d9098c-ed55-4ab7-ab19-495ab389f21f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8a05c64c-7e6a-426a-891b-3ccf6c44656b",
          "status": "Created",
          "code": 201,
          "responseTime": 2507,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a4ab0676-2221-475f-a32e-1c1af8509d73",
        "cursor": {
          "ref": "78ee3f76-dd88-4278-9919-98e22efd9e26",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "97641c3c-d922-4971-bf78-5a121f21b3dd"
        },
        "item": {
          "id": "a4ab0676-2221-475f-a32e-1c1af8509d73",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "37cc125e-065f-4ebf-a52e-1d819e0eb87b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fead9216-c3e0-4f17-a0b1-19bd5f8e7f87",
        "cursor": {
          "ref": "53583c2c-91e7-44d2-beff-f700ed394b92",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fc422643-f2ec-4e6c-a936-eee65cb6cd87"
        },
        "item": {
          "id": "fead9216-c3e0-4f17-a0b1-19bd5f8e7f87",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7c72bf08-c439-4163-99f7-f48d512caac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc778f5-0b49-494d-aae1-63e3fcd74ef6",
        "cursor": {
          "ref": "771284b5-352d-42f9-b9c3-694034b59e35",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "56393131-2185-4fbf-b1e6-71d58a209df0"
        },
        "item": {
          "id": "ffc778f5-0b49-494d-aae1-63e3fcd74ef6",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7dd30fcc-70ae-44ec-af55-6c93510c6fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66323438-5cd8-4090-b4de-50960d56f04f",
        "cursor": {
          "ref": "0d1e7b28-f01e-47b2-8087-8ca312d93722",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9f239aab-a416-4f00-980e-e03acb60bb70"
        },
        "item": {
          "id": "66323438-5cd8-4090-b4de-50960d56f04f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "726b6349-3267-450e-9b42-7b834fa5405d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64ffc24-0349-4aa2-8805-477fe36cabb3",
        "cursor": {
          "ref": "49c2b376-e0b9-494b-a49b-40763366ad49",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6e5b9b29-9b45-441f-9eed-8ec0ddff28b1"
        },
        "item": {
          "id": "d64ffc24-0349-4aa2-8805-477fe36cabb3",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e4419ee5-4fa0-4188-969a-5219d3727885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6c0b24-bdef-426c-bf0f-06784361e60b",
        "cursor": {
          "ref": "c63bfc9c-7c01-4bc2-bf3e-473d987342a8",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "78237a21-13b4-4cc3-b5e4-01e8c3a29a37"
        },
        "item": {
          "id": "3e6c0b24-bdef-426c-bf0f-06784361e60b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8e02f8f5-1f71-409e-87ed-73e25a5988b8",
          "status": "Created",
          "code": 201,
          "responseTime": 2832,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4f87b072-35bb-48bc-9656-a7ba39f3135a",
        "cursor": {
          "ref": "44657e21-405e-40ac-b5c2-d71662da6bf6",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2aa9fd9e-e590-4e12-b3cc-4e6673271f9e"
        },
        "item": {
          "id": "4f87b072-35bb-48bc-9656-a7ba39f3135a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "32e5459d-aaaf-47c3-8677-c3386d2bf0ad",
          "status": "Created",
          "code": 201,
          "responseTime": 2527,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "85b42521-bc7f-4266-b538-445e357f0e8b",
        "cursor": {
          "ref": "561fcf6b-0014-4d16-ac72-e9cf41b09527",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "cbce62dc-093a-4665-9af1-9eadb3d76952"
        },
        "item": {
          "id": "85b42521-bc7f-4266-b538-445e357f0e8b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ae1012b9-ae20-4281-b908-c683b58f8736",
          "status": "Created",
          "code": 201,
          "responseTime": 2368,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "90eb50c6-f0af-473f-8491-66cbe73c9c6f",
        "cursor": {
          "ref": "40cc3261-b546-43d2-bd0b-c8c9fa163c3b",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c5b54105-8336-4256-ad40-55dcf533cda5"
        },
        "item": {
          "id": "90eb50c6-f0af-473f-8491-66cbe73c9c6f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "22355516-f3c1-4eee-9545-8e1ac86f4517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6eb171-8d3f-42e4-acbe-c0ff15779b43",
        "cursor": {
          "ref": "cf5feab6-a68e-4c9d-90c2-f6e2fa5cccbe",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "54fce029-c632-45fa-8b08-d6116338b768"
        },
        "item": {
          "id": "6f6eb171-8d3f-42e4-acbe-c0ff15779b43",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "489c6686-9434-4e88-b5c6-76e81f2e8bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd0e0f4-8307-4da4-a9e4-49484d54cfed",
        "cursor": {
          "ref": "22b09839-0f2f-4166-8b70-4d489d12d3f7",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8fffaf8b-8287-4391-a002-c4f938e77579"
        },
        "item": {
          "id": "bdd0e0f4-8307-4da4-a9e4-49484d54cfed",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d0f8ecb2-f3a7-4a2e-9252-ed29eccd30f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc60cab9-2e6d-439a-a65f-9cab349c16c7",
        "cursor": {
          "ref": "8854868a-14bb-4bb9-9738-b3ba6441d801",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8111462b-44c2-459d-af58-cc086061d35d"
        },
        "item": {
          "id": "dc60cab9-2e6d-439a-a65f-9cab349c16c7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9b6da97f-636b-4618-aea4-9dd65d53a37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c96ccd-ac13-407d-9f37-9c0f2476d2a0",
        "cursor": {
          "ref": "279e0c27-eb09-4911-8d64-af456a79d8f9",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f0a8aab2-ea1d-47cf-8c7f-69d796bc0a6f"
        },
        "item": {
          "id": "11c96ccd-ac13-407d-9f37-9c0f2476d2a0",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1c59900b-fc96-42a7-8789-aaf231db85d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce4984a-ee6b-4d10-8bcf-e7aafd1fb992",
        "cursor": {
          "ref": "401fddfb-83e5-4dba-bd82-6e2be39f0a11",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4215140b-47f8-41b5-be99-0c109a143e07"
        },
        "item": {
          "id": "6ce4984a-ee6b-4d10-8bcf-e7aafd1fb992",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "62bdc70d-217c-4be3-aeb3-fec663341ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4dd8c8-78d9-477f-a5ed-b4b3fa4f48ce",
        "cursor": {
          "ref": "989b83dc-7d93-4696-8ea6-a3145a48513e",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7b9ddce8-e608-4efa-9db6-345599d26937"
        },
        "item": {
          "id": "1a4dd8c8-78d9-477f-a5ed-b4b3fa4f48ce",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "07684a6a-0dd3-4949-aa16-cead12c67471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "463470d5-149f-4064-998e-71bc3fad491b",
        "cursor": {
          "ref": "19f78a0b-9799-4be4-b7c1-bcc7fb8a79cc",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "07d62af3-5925-4977-b9cd-10d7e2551034"
        },
        "item": {
          "id": "463470d5-149f-4064-998e-71bc3fad491b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "63e1879f-1fb8-4fab-897c-cace17ce5dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e908b7ee-728f-4e55-8c0f-270088ded6e6",
        "cursor": {
          "ref": "1caf8156-d91b-441a-baaf-ed5e71af4654",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4c6ecc00-662c-448e-932e-011a10f78b2f"
        },
        "item": {
          "id": "e908b7ee-728f-4e55-8c0f-270088ded6e6",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "14f13481-8325-45dd-bf89-e4546ba4a64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef8ea16-a8dd-45d0-a6e2-cd071828c624",
        "cursor": {
          "ref": "4af561e0-b0c1-4d4a-a95a-cb5c157670df",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5888c1b9-76fc-4e66-98ce-1d05f8aa1053"
        },
        "item": {
          "id": "3ef8ea16-a8dd-45d0-a6e2-cd071828c624",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d8a8ac3e-d4fa-4428-8cc5-479bced1fce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ad50a4-9a81-4c02-bef9-f83ad2435d86",
        "cursor": {
          "ref": "b80ec832-fb6d-4433-a4bd-763065ed172c",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "aef1d331-4c89-4701-a732-c47ee23910ed"
        },
        "item": {
          "id": "68ad50a4-9a81-4c02-bef9-f83ad2435d86",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d1a18fc5-7716-4cde-9e6b-138bd1cd934c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4900ec2a-657c-4499-9160-c75e653ff716",
        "cursor": {
          "ref": "220ae912-d4e5-4943-adce-ac33d5e0ffc5",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "929b866a-a832-491b-a16b-dffe8c18b05f"
        },
        "item": {
          "id": "4900ec2a-657c-4499-9160-c75e653ff716",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7b6fd868-44cd-4b5f-9129-d0e32dc1c5ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22e912f-653b-44a7-a9e9-36bed65a905a",
        "cursor": {
          "ref": "885ddebc-4018-43f5-8beb-fd7c6abdb5b5",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "647c62dd-04ed-4125-bc89-eea9a6311f0e"
        },
        "item": {
          "id": "a22e912f-653b-44a7-a9e9-36bed65a905a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9dec7da6-e5a7-4873-a4e4-0d71fcbe7099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c509d72d-88fb-4faa-a756-b08182470a70",
        "cursor": {
          "ref": "039dd028-c905-474a-a772-16f8079c9519",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a7ced42a-3a6b-4780-889f-d2dd4c5f7e3a"
        },
        "item": {
          "id": "c509d72d-88fb-4faa-a756-b08182470a70",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "bd58952d-c5ff-41e0-b1c6-8ba6987d2dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c85177b0-5903-4c7e-a20f-52640780402d",
        "cursor": {
          "ref": "47d84d4f-4d01-40c2-85e6-021a5231c4ed",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b127ba46-05d4-4865-82e3-862cf3999e69"
        },
        "item": {
          "id": "c85177b0-5903-4c7e-a20f-52640780402d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b6aff886-8337-4ccd-a157-ae3cabc1fa1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fab6839-9eef-4959-aa90-4245d6b192b2",
        "cursor": {
          "ref": "45af8b25-b95c-4b38-b9a8-ab12ae1d8373",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "98c871ce-2cbe-4c85-b2db-a34881fa60d5"
        },
        "item": {
          "id": "3fab6839-9eef-4959-aa90-4245d6b192b2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2fea6ec6-0b59-4b04-9c09-4ddca162cb2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc05ef6-c7c7-4067-aa8c-ab862033c668",
        "cursor": {
          "ref": "865ecf36-90a2-445e-b930-542760885fd6",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0301fc2b-a7eb-4b3f-b199-0d254e30c8be"
        },
        "item": {
          "id": "dcc05ef6-c7c7-4067-aa8c-ab862033c668",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2c2560f9-4dbf-4f07-91a7-8e282e13d2eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69be1696-c5d7-4950-a121-7dd9ef89cd42",
        "cursor": {
          "ref": "988a4348-a221-485f-a0a7-3b9caf6dae9e",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5244ff97-98ba-4769-bdc2-491eaeb59e2b"
        },
        "item": {
          "id": "69be1696-c5d7-4950-a121-7dd9ef89cd42",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a1876dd6-5f29-4413-99bf-bf88db7016a3",
          "status": "Created",
          "code": 201,
          "responseTime": 2135,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "50650578-b849-4a48-a19c-9473dc0f845c",
        "cursor": {
          "ref": "1158e1bb-bf1a-4d3d-90c3-a09b554692f3",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f16f73e4-ddb6-4d5f-87d0-7f69939a92ab"
        },
        "item": {
          "id": "50650578-b849-4a48-a19c-9473dc0f845c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e3178cfc-7a99-42f7-9a18-a7e9e95e4991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60144b3f-04cd-4d15-9c05-05e36cdf81fb",
        "cursor": {
          "ref": "6c17953f-77e0-4a9c-9f38-c05748a1f40c",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "770393ae-2328-4e44-94eb-a776384b628a"
        },
        "item": {
          "id": "60144b3f-04cd-4d15-9c05-05e36cdf81fb",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3fc0c5c2-a0d9-444f-9dbc-bf8fea9f30d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea10201-1f46-446d-82a3-1a6170f97a6b",
        "cursor": {
          "ref": "0448a201-c24e-40da-a5ea-a479104438c2",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "55cc1811-1012-4e20-b37c-e622625f27b7"
        },
        "item": {
          "id": "1ea10201-1f46-446d-82a3-1a6170f97a6b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "10816ffa-bec8-4435-838b-6739f603a60a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d115279-a211-4e55-98b8-e268260b664f",
        "cursor": {
          "ref": "2a700b4a-e877-45e9-99cb-9cd832a6b60b",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "858c6bbe-5218-466c-a6a9-3d71bdfe2cc0"
        },
        "item": {
          "id": "6d115279-a211-4e55-98b8-e268260b664f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5eb55093-4b9b-4354-a4b1-cc9a11d2023d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6915d32f-472c-4753-a742-59a55f6b25ea",
        "cursor": {
          "ref": "20748a55-87ad-4fce-bcae-d301a268b6ce",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "73e9173c-8815-44fe-9232-335234decac2"
        },
        "item": {
          "id": "6915d32f-472c-4753-a742-59a55f6b25ea",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6c495e9e-3381-4447-9d38-4f31556e8ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79259072-d1dc-4216-93a5-6cbd0a0a05b8",
        "cursor": {
          "ref": "11ec3f12-4878-41eb-99a0-b5100bda85d8",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e7e94f01-421c-460a-9d47-22c0422c02d3"
        },
        "item": {
          "id": "79259072-d1dc-4216-93a5-6cbd0a0a05b8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5f268f02-c5b5-4756-b436-368d1f104d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad52e87c-a6c2-40e3-8ea7-9bb13c0a28d6",
        "cursor": {
          "ref": "361aa1b6-d7cb-433b-9e09-e48639953623",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b43191e9-6322-4171-9e00-85f192ff1784"
        },
        "item": {
          "id": "ad52e87c-a6c2-40e3-8ea7-9bb13c0a28d6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2f0cfb2e-73c1-4783-9fc8-c540b4148b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cddb4d5f-e1ce-4a08-b936-4350f2d303d5",
        "cursor": {
          "ref": "eeeff404-8bb6-4844-9c64-6c1f63569fa7",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f694dbd6-70ee-4f83-85b5-c8d0290d09da"
        },
        "item": {
          "id": "cddb4d5f-e1ce-4a08-b936-4350f2d303d5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3cb9216a-716a-4b3e-8fb2-b2862573b330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60f4432-254b-4476-a7ef-f9a97bb28d0b",
        "cursor": {
          "ref": "16fe9b97-b476-4e0e-97c3-77953c6725f4",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2c435305-4918-4659-88c2-a2394297012a"
        },
        "item": {
          "id": "a60f4432-254b-4476-a7ef-f9a97bb28d0b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "843b6dc9-627c-4303-9f1c-fa70b9fa0aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8766d6-a4f3-414c-b37a-d6f4ce7c25c2",
        "cursor": {
          "ref": "c5a2cfd8-6ffa-4a08-a903-7c400298bd95",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9509fefd-47ee-4156-91b8-0f793d5b66a4"
        },
        "item": {
          "id": "ec8766d6-a4f3-414c-b37a-d6f4ce7c25c2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0cb83220-c9e7-402b-ade2-ab29db15b820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f443edd5-ec48-41e5-8e8b-745eccfec76f",
        "cursor": {
          "ref": "575917a0-a492-4ebf-957e-bc85edb2862b",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c42e7dd9-3046-480f-8ef1-753a69c2ba4a"
        },
        "item": {
          "id": "f443edd5-ec48-41e5-8e8b-745eccfec76f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "115b968a-f64b-45de-8da1-20a502f7623d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e5309d-b112-4a2a-97bb-ba3a300c2229",
        "cursor": {
          "ref": "2e6152b4-54b3-484a-b7bb-55af143dcccb",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1963c74f-f09f-472f-bb49-09cf7b5f4169"
        },
        "item": {
          "id": "d3e5309d-b112-4a2a-97bb-ba3a300c2229",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "50081acd-0e23-49da-a0cb-6ccde34336a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4576d275-70ec-4c29-98e8-c1ab2c7c80e7",
        "cursor": {
          "ref": "f924862b-d55e-468c-95c2-f855a4455c7e",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "81d0eeaf-3da5-4a63-b192-bb42e0cfa964"
        },
        "item": {
          "id": "4576d275-70ec-4c29-98e8-c1ab2c7c80e7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "711c8867-1a79-4728-a04b-56aa18bc29ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf52b95-252e-476a-aef5-69ba6d44d350",
        "cursor": {
          "ref": "a08f5c59-c66f-4d54-a3b2-b49bde5e954a",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "dd31c90a-42f9-41d5-8f19-a863da527feb"
        },
        "item": {
          "id": "9cf52b95-252e-476a-aef5-69ba6d44d350",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ce57aec7-89be-45dd-ba00-dd531d00a1b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28acb2a7-a1cd-40d5-a1a9-84bbb33dc18e",
        "cursor": {
          "ref": "f7f04c10-2799-4113-ba12-1245b2066460",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7e83de54-221d-4fbb-aa92-b51481de9ca4"
        },
        "item": {
          "id": "28acb2a7-a1cd-40d5-a1a9-84bbb33dc18e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a5741ca1-31f2-4c95-92d9-52158cebd829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4efe7c-4816-44b2-9a67-53043ea65a70",
        "cursor": {
          "ref": "f43f9d4e-9459-45f4-8a36-4d26a0968815",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cf6b291e-caf5-48a5-8fd0-b2a5dd9775a5"
        },
        "item": {
          "id": "0b4efe7c-4816-44b2-9a67-53043ea65a70",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "482ee8b5-a408-4a8a-b563-d6f276ff6d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3977664e-47c7-405f-bd62-cc3b006fb4f9",
        "cursor": {
          "ref": "c26680ef-a8e4-4a47-b380-37430b15c71f",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b69edd6e-6f55-4877-a9a6-963ea87039e1"
        },
        "item": {
          "id": "3977664e-47c7-405f-bd62-cc3b006fb4f9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "02057f8a-b808-4b10-8e97-a76f5edac328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "520759a2-989a-47a7-9515-1e3492af5ce5",
        "cursor": {
          "ref": "f017fb08-bb8c-440a-8a70-1a90b995fd19",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1bb508da-faef-4252-83a8-582456be84e9"
        },
        "item": {
          "id": "520759a2-989a-47a7-9515-1e3492af5ce5",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c449df61-2872-474c-8b5d-67af3ee85eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "059ee890-4f6e-426b-87f3-5ff0e2694908",
        "cursor": {
          "ref": "96e589fd-d1fa-4067-8ef7-f068bea4b001",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ef78453e-e14e-4a84-8ad0-61635a2f630f"
        },
        "item": {
          "id": "059ee890-4f6e-426b-87f3-5ff0e2694908",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4ce8e993-6c2b-435b-b439-e8f90754adff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2be890-f2c8-43f3-b918-173a95f834cf",
        "cursor": {
          "ref": "5b27ef01-1234-4063-a24f-fdd1a6043fe1",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ef3f3abd-f84b-4ac5-80f0-e4008fa0ec75"
        },
        "item": {
          "id": "ab2be890-f2c8-43f3-b918-173a95f834cf",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bc47d8d3-b52b-4510-856a-fecae56fa5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a200bf-0390-4424-b796-bd207efaea72",
        "cursor": {
          "ref": "e70fc13c-de0e-46bf-a055-cafdc4d5c45f",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "cc306253-9b31-4ff3-9d2b-50a7dd9a2a90"
        },
        "item": {
          "id": "62a200bf-0390-4424-b796-bd207efaea72",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f891dccd-b549-476f-a662-c61d5e22444b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed269fcb-fd0b-4e75-9578-3e5716127caa",
        "cursor": {
          "ref": "29f05fc9-5f8b-4d6b-8ae3-bd289edd4bfd",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "dac948cb-ba1c-413b-9638-9232eb1b0837"
        },
        "item": {
          "id": "ed269fcb-fd0b-4e75-9578-3e5716127caa",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f585cec8-4b43-4932-badc-45a0bb2c0486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2c8191-d842-4109-92ee-3add9300b7e3",
        "cursor": {
          "ref": "7e0194fe-3576-4fdc-8b43-bc3824dc46cb",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9497bf29-ef26-4603-be0e-d87ef7af7c17"
        },
        "item": {
          "id": "6d2c8191-d842-4109-92ee-3add9300b7e3",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d7de48b3-072c-495a-afe0-ba886c0e285e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a1fbd9-d88e-450c-ac40-fbfdba5fa701",
        "cursor": {
          "ref": "3ddce9cd-e25e-47b2-9d3e-6e33a633a68e",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "18274fb4-a054-46a7-9fad-e53260eedd43"
        },
        "item": {
          "id": "76a1fbd9-d88e-450c-ac40-fbfdba5fa701",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1432134c-da2c-45a1-b031-373650210a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05aae091-7862-4e36-b23c-617c88892aaf",
        "cursor": {
          "ref": "9aa2d1ea-7487-45b6-b77a-14efe1ee09e3",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4123f918-eee1-424f-895f-6fda20119e2d"
        },
        "item": {
          "id": "05aae091-7862-4e36-b23c-617c88892aaf",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2ff25bc7-6e3d-4ddc-9f43-05295daba24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95dbbc6f-9338-498e-ab8e-45b57acd8a8c",
        "cursor": {
          "ref": "83767182-a807-46f0-bfd0-697aa52180d4",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3de72fea-05f7-4841-97c4-b588c0a5668a"
        },
        "item": {
          "id": "95dbbc6f-9338-498e-ab8e-45b57acd8a8c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7e620d13-d73a-4044-bd76-16793edef344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc2915a-5522-4913-93ec-e705bb66a06f",
        "cursor": {
          "ref": "755d279d-2aec-4538-968f-5533c4d5698a",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "db1cb9fa-5f8b-4d58-8c26-2f0b9f6c3680"
        },
        "item": {
          "id": "0dc2915a-5522-4913-93ec-e705bb66a06f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5ea0da92-2738-4b35-9ce5-02f89aeb73b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4a31f7-ddd6-45ca-9f1c-be5bbd5cddf0",
        "cursor": {
          "ref": "3c7e2a67-b9a7-4a10-b599-0772d5440d2e",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "127213d3-f4ed-46d2-b1d5-dd96ae80bb48"
        },
        "item": {
          "id": "3b4a31f7-ddd6-45ca-9f1c-be5bbd5cddf0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a6349786-081d-4e77-a4a1-fbfa82005359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "369bab81-e50c-48ca-b48a-cdc83e030eea",
        "cursor": {
          "ref": "cc6ef9ed-eabc-45a1-b36a-f91328ad90e0",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "abe808af-2317-44e4-8206-9a9a1093cb40"
        },
        "item": {
          "id": "369bab81-e50c-48ca-b48a-cdc83e030eea",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5492c3bf-fc18-40a1-8fe0-1cdcfc8660c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aedee179-38b7-4c14-8724-4669537a5989",
        "cursor": {
          "ref": "e762a04f-cc7c-4a3d-a91a-152b12b6d352",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ff30dbe8-fb39-4044-bee2-0021669427d3"
        },
        "item": {
          "id": "aedee179-38b7-4c14-8724-4669537a5989",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0d35b0d0-17aa-4a77-b2aa-69a13db6752b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60746ee-01be-4af2-a224-c2e76d46a366",
        "cursor": {
          "ref": "57d7e813-e522-452b-b311-dd5d1e19c13b",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "402d0d06-c2f4-4851-b2df-75eff9dfb5d7"
        },
        "item": {
          "id": "c60746ee-01be-4af2-a224-c2e76d46a366",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "82f1f89d-b969-433a-b6da-cd32d59aee9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "8d2be334-1eab-47b0-9faa-160ac103b67f",
        "cursor": {
          "ref": "039f2d05-6af7-4530-b33e-cc55781d2506",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c93f9943-12e3-48e0-8ca9-211511a84301"
        },
        "item": {
          "id": "8d2be334-1eab-47b0-9faa-160ac103b67f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b08c8776-af9c-4fc4-9037-2518e46c459f",
          "status": "Created",
          "code": 201,
          "responseTime": 1954,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "6b18af43-528c-4399-bbdc-c42394e68239",
        "cursor": {
          "ref": "273505ad-9563-4099-8b80-32dca0d954db",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f48c1a7c-7448-47ad-8f90-27e54a5cf6de"
        },
        "item": {
          "id": "6b18af43-528c-4399-bbdc-c42394e68239",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9358b1ba-a064-43c7-af98-2c0f70b0211d",
          "status": "Created",
          "code": 201,
          "responseTime": 2289,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "717c38a6-f2e9-4f3e-9f7c-2e904324ab0d",
        "cursor": {
          "ref": "0368285f-9530-480b-a2ab-0d9c9964cc62",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "111eed41-c9a3-468c-9d38-8b903b77adaa"
        },
        "item": {
          "id": "717c38a6-f2e9-4f3e-9f7c-2e904324ab0d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "50851292-a7b4-4b4b-96ca-95e3d19ea663",
          "status": "Created",
          "code": 201,
          "responseTime": 2498,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bcc5353-7e9e-46b7-8713-16f063f72bf9",
        "cursor": {
          "ref": "4fb016df-94d5-4cb1-9c6d-e2d7f25e517e",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6f7d1b26-a7e6-4bef-86cc-4598e0511bbd"
        },
        "item": {
          "id": "0bcc5353-7e9e-46b7-8713-16f063f72bf9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "525af356-c6be-4ca9-905f-849e86354d9c",
          "status": "Created",
          "code": 201,
          "responseTime": 2251,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a6b014-e688-4f3c-9ce6-c9a70b02b0e7",
        "cursor": {
          "ref": "a1e16e74-9d6b-4143-9d5e-6e991a2dae13",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b7ffbc26-0baa-4b29-937b-9fbafa5b1bac"
        },
        "item": {
          "id": "21a6b014-e688-4f3c-9ce6-c9a70b02b0e7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bd96fe37-4f47-4e1c-ae9e-5fd5053acac8",
          "status": "Created",
          "code": 201,
          "responseTime": 2258,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c2664a-6eb6-43ba-bafd-b947f419f98f",
        "cursor": {
          "ref": "dfcabf8e-1189-4583-9941-c4139b37537d",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "475b441a-9b04-46fe-99c1-51559b77d423"
        },
        "item": {
          "id": "34c2664a-6eb6-43ba-bafd-b947f419f98f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "60ca62aa-d252-43ff-b4d2-69809038c6ee",
          "status": "Created",
          "code": 201,
          "responseTime": 2284,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-16T00:39:52Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-16T00:39:52Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "40eb2cea-98eb-45ec-a57a-711f8bb62ff4",
        "cursor": {
          "ref": "136490e0-9ec4-4bf1-be3d-9012f0080572",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "60236309-23f2-4a00-9cf5-649511d06394"
        },
        "item": {
          "id": "40eb2cea-98eb-45ec-a57a-711f8bb62ff4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6a3d79d5-7e25-4695-ad94-dfefc227ec4f",
          "status": "Created",
          "code": 201,
          "responseTime": 2344,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55908d00-4d1d-4831-a34a-060f25c558ee",
        "cursor": {
          "ref": "ac5f4e0c-2830-4185-9097-b72d457a316a",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0a6ce16e-d0ea-4616-87f3-4777ed094f77"
        },
        "item": {
          "id": "55908d00-4d1d-4831-a34a-060f25c558ee",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "801384bf-9eb5-460a-906d-5ee9d5038740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55908d00-4d1d-4831-a34a-060f25c558ee",
        "cursor": {
          "ref": "ac5f4e0c-2830-4185-9097-b72d457a316a",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0a6ce16e-d0ea-4616-87f3-4777ed094f77"
        },
        "item": {
          "id": "55908d00-4d1d-4831-a34a-060f25c558ee",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "801384bf-9eb5-460a-906d-5ee9d5038740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c6718e-d2fb-44e2-a106-65f919580323",
        "cursor": {
          "ref": "1d462663-8f8b-40df-a1c8-64a5c9f71932",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "59a39f3a-75a5-4ea2-93e9-8e09fde10455"
        },
        "item": {
          "id": "43c6718e-d2fb-44e2-a106-65f919580323",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f1b0d297-0416-4531-bb4b-358bfe01910d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e09019f-4d86-4202-afc1-4d0353f45824",
        "cursor": {
          "ref": "94cd8846-49a0-483f-be83-059826566e69",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ffebe719-fd06-4ab9-88ae-00845cd74bc1"
        },
        "item": {
          "id": "5e09019f-4d86-4202-afc1-4d0353f45824",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "23fff5ae-33a7-493c-910d-c8744f48b9a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2a782b-2faa-4a03-b0a3-bc4fbb5f5a8e",
        "cursor": {
          "ref": "e3dab3ea-5b66-4599-bf5a-817793f53d01",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "fdf9d5e6-7ccc-463e-92ea-c4b304518bb5"
        },
        "item": {
          "id": "8f2a782b-2faa-4a03-b0a3-bc4fbb5f5a8e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b5908808-311b-427f-984c-6f2bdfcda2c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a006d33d-cd70-439c-946a-7ec3e294b510",
        "cursor": {
          "ref": "30529bd9-5b9b-4a16-93c4-7ee66f0980fa",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "856e5838-4fb2-4d6c-a5df-d9e377f65004"
        },
        "item": {
          "id": "a006d33d-cd70-439c-946a-7ec3e294b510",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "01738edb-68be-4169-b19c-944527e6765e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facbfb2a-eaff-4fbb-a2a4-68ee1a568a1a",
        "cursor": {
          "ref": "51c0ec05-2043-4158-8ab9-cc300c93db02",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "36c25afa-9a8d-4813-9e58-ceab81678775"
        },
        "item": {
          "id": "facbfb2a-eaff-4fbb-a2a4-68ee1a568a1a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8eb13a7b-d142-4211-8ff3-5fe357e4439c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55b3c22-0e75-421d-a630-ab7db7d17264",
        "cursor": {
          "ref": "a672ef18-3373-4dab-948b-33e8a2c702a6",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bdb9f527-c1c0-463e-a6f6-98482b2b21ab"
        },
        "item": {
          "id": "a55b3c22-0e75-421d-a630-ab7db7d17264",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8d4e98fa-c86f-4528-ad87-3bf5c9d66e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dbd742c-19dd-43cf-8e84-e36bdc3d8077",
        "cursor": {
          "ref": "b1c0c14e-e03c-4b84-b5a1-15f3e85b8b6f",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7d4fea66-a38e-4cb2-be98-aa12053796da"
        },
        "item": {
          "id": "3dbd742c-19dd-43cf-8e84-e36bdc3d8077",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3ae24881-c4bd-4c1f-a2ab-a8c0ded0b0f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66ba4b8-4727-48d7-b6dd-248c3decc435",
        "cursor": {
          "ref": "31690f33-7be4-4c94-85e2-b74e307e6527",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a2816f99-1c87-47b6-bc6d-2650f0f0ff81"
        },
        "item": {
          "id": "e66ba4b8-4727-48d7-b6dd-248c3decc435",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3c676e00-5c1b-46a3-b389-58418e43d82c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e56c505-6c0f-4766-83b7-c5293636cdeb",
        "cursor": {
          "ref": "6fd14804-407e-41b0-b03c-3b5525b559f5",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "be01b9ef-7adc-44e2-9bb1-9fbc31359b89"
        },
        "item": {
          "id": "8e56c505-6c0f-4766-83b7-c5293636cdeb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "afd1023a-a7f2-44fb-ba86-52dcc627f2c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e71e4ee6-6dc1-4a59-85fd-bd1e97d433d6",
        "cursor": {
          "ref": "34be1977-6ee6-4b85-a918-0e8e15e20f30",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8d496da9-0d19-44a4-95f0-8947168d08ce"
        },
        "item": {
          "id": "e71e4ee6-6dc1-4a59-85fd-bd1e97d433d6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b4861e6a-327d-4ad3-9b01-fb66ddaa9972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa35727c-a41c-4f4e-9984-0e0ac5425394",
        "cursor": {
          "ref": "9ad639db-1fe0-4a7d-a2d2-49578a9a4da4",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "671e4409-869d-4b69-a1c2-e26146d50fe8"
        },
        "item": {
          "id": "fa35727c-a41c-4f4e-9984-0e0ac5425394",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3fe62c74-148f-46bc-a33f-ff8d4d666c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 324,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d2b97f-e145-4a6c-8e83-a45e96e4c1e6",
        "cursor": {
          "ref": "1ad47639-331a-4a17-93f5-2252786fb9a2",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "451a537b-f9a9-4fe3-84be-bdfe0e8b22e4"
        },
        "item": {
          "id": "10d2b97f-e145-4a6c-8e83-a45e96e4c1e6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d339c434-c484-4a7e-8a0d-c241fe25410c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 474,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c45d67-88c3-48a3-9b87-97044b786c7e",
        "cursor": {
          "ref": "2345f635-da5e-4bd8-8224-d49006eb6fa9",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "167060b0-dc04-4dd4-8b3b-1e361e88bd6e"
        },
        "item": {
          "id": "a4c45d67-88c3-48a3-9b87-97044b786c7e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ddc18787-24f3-4fb9-9fdc-ed4e309f07d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 408,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fdfd363-8d4a-4f21-9767-76504a7d199b",
        "cursor": {
          "ref": "976a9f87-1170-4628-bb27-18eef7d2b0a9",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f3eb7c69-5e6e-42dd-9586-f4a84f1f4c33"
        },
        "item": {
          "id": "2fdfd363-8d4a-4f21-9767-76504a7d199b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1aa71d2c-db04-4c2a-9de0-bd173e1a5b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 369,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd55a72a-9b9a-4d4a-a4d6-4afc3b2fea85",
        "cursor": {
          "ref": "a5863084-aac3-4b1c-98c7-4853cdcb4047",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f48ce6f1-8e0f-4432-9bdb-d19011050297"
        },
        "item": {
          "id": "bd55a72a-9b9a-4d4a-a4d6-4afc3b2fea85",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0d52e5e7-ae03-48b5-b07c-884c5de529ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fef0cb0-75a0-4e3a-8e4e-a93f3e3d1666",
        "cursor": {
          "ref": "32ad6fed-09cc-45cd-8895-504f8853ad64",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "28f6721c-b1f6-4666-9224-e95e25a73122"
        },
        "item": {
          "id": "6fef0cb0-75a0-4e3a-8e4e-a93f3e3d1666",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b630c45f-4185-4aa1-8809-d9303fd9159c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62beab19-ba4b-485d-a325-d934d3769a92",
        "cursor": {
          "ref": "9e3b23dc-7ef8-4c60-a1e5-667a2a2c760b",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4bd9019a-57e8-4eb8-95d2-5d565aa75c52"
        },
        "item": {
          "id": "62beab19-ba4b-485d-a325-d934d3769a92",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c111b876-fa68-43a3-9dee-209d9c80de13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dbb9a10-a430-4bd3-a542-b9e9318f51f2",
        "cursor": {
          "ref": "e9a61814-9cba-4865-b5b7-f4f0c0c33d71",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "40f2dd5c-1100-4ef7-a21e-42ba4c24a889"
        },
        "item": {
          "id": "1dbb9a10-a430-4bd3-a542-b9e9318f51f2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d6f092df-3c72-4d5b-a175-8c72d8c51de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e8543b-4994-4181-a7ea-e92a7069211b",
        "cursor": {
          "ref": "23dc23f7-33c8-478a-b214-3df75686b682",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9b8dec33-59f0-4d90-9ec7-08a9b3308f0b"
        },
        "item": {
          "id": "b1e8543b-4994-4181-a7ea-e92a7069211b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "081edcef-f5c3-4f74-97ce-46e0964000cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 384,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b36a8e86-263b-4bba-bf48-292cfca718f6",
        "cursor": {
          "ref": "e7a39f12-8e08-4137-8705-1e399dd8e850",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6079684c-a82b-473f-9a77-587af0f26bbc"
        },
        "item": {
          "id": "b36a8e86-263b-4bba-bf48-292cfca718f6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8eb6f1b8-1f0c-4b11-8dfd-af25f9dd3a03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ea0cb3-5a74-4534-8f98-f7e4cd44dc9e",
        "cursor": {
          "ref": "9c434afd-f63b-4cb5-9fdf-5643afe7a419",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "628eb312-6c20-4383-a473-44fbb7d8b062"
        },
        "item": {
          "id": "34ea0cb3-5a74-4534-8f98-f7e4cd44dc9e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "608a51ee-29b4-45a9-b920-5ff2d20bc4d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a4017a9-10ff-444a-ada4-ebc8e830c938",
        "cursor": {
          "ref": "3d804457-dbd9-4f64-9dff-5c8239ec8445",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0c8fc197-fdf0-4d4d-8398-95e06aceff62"
        },
        "item": {
          "id": "2a4017a9-10ff-444a-ada4-ebc8e830c938",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fa89b7e9-952f-4283-b8f5-a6513d96cb01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b865bc4-bc2a-418c-9df2-8b195f56cbf3",
        "cursor": {
          "ref": "9fec7016-b055-4e5b-8e59-a0f1f369e77c",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e6e96544-43b3-4135-b312-73b71ceac2df"
        },
        "item": {
          "id": "1b865bc4-bc2a-418c-9df2-8b195f56cbf3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1251bce3-559d-4073-bb15-1f32c1562d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75940f68-173d-43b6-b75b-dbb3f4bca44b",
        "cursor": {
          "ref": "5b285f6e-0551-465e-8833-a652b559b01e",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a69a15d1-a8b4-4d75-b8b3-1ca4165563bf"
        },
        "item": {
          "id": "75940f68-173d-43b6-b75b-dbb3f4bca44b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bdb56196-fb65-4c7a-86f3-d8bd96a838b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66fedcf3-0ce0-4dd2-b41b-8f979793a10e",
        "cursor": {
          "ref": "8fd3d376-3c7a-48c7-aaa8-d759c85e506c",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e3e090ae-0086-4409-8060-aa3f977a8677"
        },
        "item": {
          "id": "66fedcf3-0ce0-4dd2-b41b-8f979793a10e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d43ed386-b7a3-4b22-927d-67d4bfc1df33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac68f53f-3f2b-4b0e-ab64-ff42f2086465",
        "cursor": {
          "ref": "da492bdb-0119-40a2-b5d2-399da576e265",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d1369d64-d40a-42b0-8900-c69b64e1d9a3"
        },
        "item": {
          "id": "ac68f53f-3f2b-4b0e-ab64-ff42f2086465",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b23f2a69-6d86-4ebb-8b31-4a52c6aa2fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a04ca0-2f41-4b71-a998-31f68b7f9cf1",
        "cursor": {
          "ref": "0d1ffd96-6391-4b82-a10a-d5e93757f803",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a73a36ac-04af-4fcd-9f21-c218713a3c6c"
        },
        "item": {
          "id": "f5a04ca0-2f41-4b71-a998-31f68b7f9cf1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3865e88a-f82f-4cd5-942e-781ef80289fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2bc6648-c461-4b89-8e7f-bbfb48301aad",
        "cursor": {
          "ref": "5c021992-56fa-4855-8333-5c93ea4bfb7a",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6fb6ccb7-40a0-4f38-bdaf-df77777bf371"
        },
        "item": {
          "id": "b2bc6648-c461-4b89-8e7f-bbfb48301aad",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "efbcdddf-7754-4ee4-8cdc-466ef669e6b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e288688-35bc-4a69-b9c0-28fd6feb9d54",
        "cursor": {
          "ref": "187c91fc-2f94-4b0e-b230-7ac9a19f1cca",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "5202cf6e-ce51-4351-aff6-857040f8185e"
        },
        "item": {
          "id": "2e288688-35bc-4a69-b9c0-28fd6feb9d54",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c6905e7b-9f70-4521-ab54-2835a6b4c2d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 689,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc85b7a-9376-4204-93b9-2dc987a88035",
        "cursor": {
          "ref": "83dc4dec-13a7-483f-8095-56792eb49399",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "186b0866-1793-422d-b9cc-4622ab27a02e"
        },
        "item": {
          "id": "6cc85b7a-9376-4204-93b9-2dc987a88035",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "29690e9c-835f-4a20-9e26-9c3cb6043562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 422,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076d5d9e-5ce7-4050-bcab-fa7dd4ef117b",
        "cursor": {
          "ref": "520c92fa-fe9b-461c-8a0d-97492cb4ff13",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8a6d32ff-7b4f-4508-817a-fcf4127b317d"
        },
        "item": {
          "id": "076d5d9e-5ce7-4050-bcab-fa7dd4ef117b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "786cf0c7-2b05-4694-9caf-446aa59ea747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489e989d-2d8d-496e-aa05-9495fb175018",
        "cursor": {
          "ref": "1187ac94-21ae-4291-a04e-9336bfcc2440",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ff174e60-2a4c-4c26-9e81-14eb38755e56"
        },
        "item": {
          "id": "489e989d-2d8d-496e-aa05-9495fb175018",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b157df91-1c13-442d-82df-3e5b12834392",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "78a9d181-1e35-4ebe-bfe3-5e49758c5df2",
        "cursor": {
          "ref": "732a1592-3129-4aa3-acf6-13de6fb0cc34",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8348e922-04f6-4fd9-b390-233d5610edd8"
        },
        "item": {
          "id": "78a9d181-1e35-4ebe-bfe3-5e49758c5df2",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "b244e23d-97d8-45a1-8786-72b47f6d4354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "935d3e02-1aea-448b-8ae5-e1e300e1b956",
        "cursor": {
          "ref": "b96efead-15e9-457c-9203-ffb208d5cdcc",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7c954c8a-a5d8-4d0e-947d-70311f6cd036"
        },
        "item": {
          "id": "935d3e02-1aea-448b-8ae5-e1e300e1b956",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6e7ca97f-710f-4afa-b720-2a8d9e9d4123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935d3e02-1aea-448b-8ae5-e1e300e1b956",
        "cursor": {
          "ref": "b96efead-15e9-457c-9203-ffb208d5cdcc",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7c954c8a-a5d8-4d0e-947d-70311f6cd036"
        },
        "item": {
          "id": "935d3e02-1aea-448b-8ae5-e1e300e1b956",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6e7ca97f-710f-4afa-b720-2a8d9e9d4123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e89c4b-7832-4e25-b181-45061765177d",
        "cursor": {
          "ref": "40f34250-7874-4b20-9a3d-b7991a208daa",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0c618173-7dbf-4ef8-bc28-dcf6e4b97ed7"
        },
        "item": {
          "id": "a7e89c4b-7832-4e25-b181-45061765177d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "df54323b-480e-4177-932e-f5f29bc1ab55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d35178-6b13-492a-a4d8-e97af4469c84",
        "cursor": {
          "ref": "71be669c-6a6d-4a24-866e-91e69262dd4a",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "dd2827c7-9661-4289-b9dc-732eb12cd17e"
        },
        "item": {
          "id": "e4d35178-6b13-492a-a4d8-e97af4469c84",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a170efd7-3df5-4709-96f7-d3a4b9b3b3f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660d53b9-0c52-45c8-8c9b-20339abb8975",
        "cursor": {
          "ref": "78686138-381f-418b-b7c1-04207fc9723c",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f967aa06-9bc2-48b0-86ef-59ad115b76fc"
        },
        "item": {
          "id": "660d53b9-0c52-45c8-8c9b-20339abb8975",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9f68a364-a2cd-432b-adc1-7e3f5f81ce21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b6e50e-8168-4030-88be-56df148d6ba6",
        "cursor": {
          "ref": "1de13572-359c-4bcf-b5a5-577e410f5c62",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "66513aa7-291c-4746-8ee9-44197c50dc7c"
        },
        "item": {
          "id": "a5b6e50e-8168-4030-88be-56df148d6ba6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "db3260eb-f0f2-4720-8a4d-473fbcf3a9cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b397f36-22c1-4efd-8c50-ccec83740f46",
        "cursor": {
          "ref": "5be90fdb-bd68-4775-b820-cf35106a02ea",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e7f5856b-7a0f-4b51-a026-ec5331d7f1eb"
        },
        "item": {
          "id": "1b397f36-22c1-4efd-8c50-ccec83740f46",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7faed3bc-e122-4231-b9fb-36fcb7b56a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43453bfd-de79-4606-8366-611729eea2e4",
        "cursor": {
          "ref": "5d01b26c-0ee5-4826-a25d-05d1fd7d38e7",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "801f5aed-4c53-4d8d-aaca-8abc8cf48b56"
        },
        "item": {
          "id": "43453bfd-de79-4606-8366-611729eea2e4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a1d475f0-c06f-4521-b031-d99711ecee73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085a0ea0-38fb-4ba4-81aa-21b9f81062c5",
        "cursor": {
          "ref": "a5208696-f390-4f14-b99d-a0c01f1dbc3b",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5fbdb612-162c-4bd2-a373-ac1234303cf2"
        },
        "item": {
          "id": "085a0ea0-38fb-4ba4-81aa-21b9f81062c5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "263f087a-5fd7-4644-8bae-76609ce3968c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae8f44a-6ae9-4a8b-8207-017862ddd29c",
        "cursor": {
          "ref": "d93c86e7-91f9-48b5-89e9-5653cfe6e1fd",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4e5d41be-037b-4ea7-83cd-a2aa25407041"
        },
        "item": {
          "id": "8ae8f44a-6ae9-4a8b-8207-017862ddd29c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7f562bbd-10e6-448e-b88d-7ccae10a035e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f13908-5d08-4c59-833f-b453940855c6",
        "cursor": {
          "ref": "734f758f-ac11-4b70-a259-0f3110722f56",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5b2faba7-2e5d-484e-9e6d-042768c0428b"
        },
        "item": {
          "id": "95f13908-5d08-4c59-833f-b453940855c6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "edd4b527-8d9d-4b65-bd7a-9147cf564b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad4851b-6a68-4eac-b021-06ed2073036f",
        "cursor": {
          "ref": "b800a443-fea8-4ea2-b904-9a423b5e28f2",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "14d42f0f-5069-40d1-bd18-bc2209170485"
        },
        "item": {
          "id": "1ad4851b-6a68-4eac-b021-06ed2073036f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8c9a07da-634f-4ba5-9d8b-3cc58f6bc6c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f95efb-4243-4716-812f-1ccab54f21ee",
        "cursor": {
          "ref": "7a936602-c7db-4ea5-acfa-fd536499bb9a",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d6a6f09c-d494-4a54-9ad1-6dfeb5d6e45e"
        },
        "item": {
          "id": "59f95efb-4243-4716-812f-1ccab54f21ee",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "dfbbd125-038f-4309-9e87-5ca2d95657af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a93f563-fd28-4523-b2fa-1b1b2abb532a",
        "cursor": {
          "ref": "3385d89e-79e9-406a-b4e2-fdccdf05f2ab",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3ebdf747-f64e-419d-8a01-ff266f8645a0"
        },
        "item": {
          "id": "6a93f563-fd28-4523-b2fa-1b1b2abb532a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1609ca53-3ad9-47fc-b7cd-594160c73c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9311c1-41e1-4e8a-b20a-10ac0513ab94",
        "cursor": {
          "ref": "f4093d9d-0e3a-4db3-831d-7c9a8b36e57e",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b27ac7c8-e00b-4259-99f7-2fce8942700b"
        },
        "item": {
          "id": "5e9311c1-41e1-4e8a-b20a-10ac0513ab94",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "99ded3d7-70fc-42b1-9487-db751e31e7e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e48a317-c91a-47b9-8662-fed43e8b2cb5",
        "cursor": {
          "ref": "920b9ade-64b9-40c5-a7bf-10d96e70fb83",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "38869bb1-895b-41d8-99c3-2f11e963784a"
        },
        "item": {
          "id": "9e48a317-c91a-47b9-8662-fed43e8b2cb5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5a9ee248-c607-479c-921e-93a3f86ffd08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea784a44-5cd5-45f8-88ae-1933a93f3388",
        "cursor": {
          "ref": "b101b5c4-e7e0-41c6-a71f-56e45cc0f0f1",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "16494570-1228-469d-8653-e0d267746ee5"
        },
        "item": {
          "id": "ea784a44-5cd5-45f8-88ae-1933a93f3388",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3939a862-9626-4636-b08b-ad2e1e5a1bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e666de01-fa1e-4ca1-bf64-3d3cd61332ab",
        "cursor": {
          "ref": "e8408fd5-f4e9-4076-9173-4a30e0329340",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d094372b-d89a-445c-b1b4-d0bd7d8e9c6f"
        },
        "item": {
          "id": "e666de01-fa1e-4ca1-bf64-3d3cd61332ab",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cea29387-b9e3-4729-b939-6330c5c42230",
          "status": "OK",
          "code": 200,
          "responseTime": 245,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "e29572df-1f0b-4b15-81ab-743d809d2873",
        "cursor": {
          "ref": "c3872ab9-3946-4e3d-9f65-1190a841932e",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1bf62767-5c22-42f0-a0dc-9b7fdb139487"
        },
        "item": {
          "id": "e29572df-1f0b-4b15-81ab-743d809d2873",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1f06f446-1c0d-48e9-9f08-ad783f06ee1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6c56c8-5f7b-4025-9397-84c86b52f7ba",
        "cursor": {
          "ref": "5f5ac8fb-efb7-4621-8e68-5f7c075fc0b4",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "721f7b16-6ae9-4dd4-9794-49b4439d29d8"
        },
        "item": {
          "id": "3e6c56c8-5f7b-4025-9397-84c86b52f7ba",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c0bec0ec-ea2e-4382-b47f-192a42f4d6cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4928cc-156f-4ffa-a32f-f903dfea016f",
        "cursor": {
          "ref": "0afb59be-faf6-4557-8de1-0aeebc56ac8c",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "16223814-72fc-4b30-8709-95b552271e7c"
        },
        "item": {
          "id": "4b4928cc-156f-4ffa-a32f-f903dfea016f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "49b08b36-179f-4e5e-8ecf-2148e806d9cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e35f8bd-d2ea-4345-a0f3-29b81c4ca1f1",
        "cursor": {
          "ref": "503c4480-849d-450e-9717-e173207617c9",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "912c5233-bf9e-47b5-9de7-b457f89aaebb"
        },
        "item": {
          "id": "0e35f8bd-d2ea-4345-a0f3-29b81c4ca1f1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "adac89a3-b182-451c-a141-b3d4467b2e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3598af5b-c2e9-4c64-a1c0-5e51f6e8220b",
        "cursor": {
          "ref": "fb7cbccd-d67b-4268-b6b3-f67e91a0bc34",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6ae35ea4-e9d2-4d24-93c1-01748f40a132"
        },
        "item": {
          "id": "3598af5b-c2e9-4c64-a1c0-5e51f6e8220b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "709256a8-c45b-47d4-ba99-d04188e1f8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2f80a5-e360-45e9-b3cc-bec54c618805",
        "cursor": {
          "ref": "8f82dee4-ac4e-4467-aa69-dd3f3eea9aaf",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "06235e78-a674-4335-a309-8f3c36b1a5f5"
        },
        "item": {
          "id": "3e2f80a5-e360-45e9-b3cc-bec54c618805",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ab2fc5d3-32f0-43cc-9e09-4dc4c83ca944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00cdad21-611c-4667-b87e-361d82c4ac17",
        "cursor": {
          "ref": "8e08ebae-720a-4fae-9420-eac833dc6c32",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b88c320c-579f-4708-b6a2-81987be74b04"
        },
        "item": {
          "id": "00cdad21-611c-4667-b87e-361d82c4ac17",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ca12693e-6e5b-46d2-a459-d2b171b33b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d16148-c309-4db4-9be8-9263f4395fd6",
        "cursor": {
          "ref": "0ab38996-bc63-4ae7-bcd0-69f93af1a513",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "29ef360f-b26e-44c0-97e5-f485d79bde43"
        },
        "item": {
          "id": "28d16148-c309-4db4-9be8-9263f4395fd6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "25e1e03a-a1af-473f-ae88-588af0c608d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5d60b1-d88a-4518-8987-36a9f32f6d25",
        "cursor": {
          "ref": "312c1bb8-7d65-47ab-8048-4124affe02d0",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9cbde938-b4b9-4aa3-ac19-1a139aee059f"
        },
        "item": {
          "id": "df5d60b1-d88a-4518-8987-36a9f32f6d25",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3da79828-613c-4872-8625-16d3bf09877b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f56894ae-95b3-4f77-9f44-12ee22bbc414",
        "cursor": {
          "ref": "f4bd3fe5-ed70-40cd-9fa6-fd1c91c978ba",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5e8a4840-c646-451a-bfa5-1c3dfb08d2f1"
        },
        "item": {
          "id": "f56894ae-95b3-4f77-9f44-12ee22bbc414",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "834e731b-8212-4676-abb3-5b00d4b28a32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd5ce8b-ebbb-444a-a9c0-432c1a74292e",
        "cursor": {
          "ref": "04f3ec40-b3ea-4a7c-9078-1e9ea88d4295",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0053b35f-2c88-4d6e-8195-915151f7bcf8"
        },
        "item": {
          "id": "1fd5ce8b-ebbb-444a-a9c0-432c1a74292e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f7870142-6a1c-457d-8cac-1cadc13381a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7dd542d-d192-44e7-8e29-003c7c23cf2b",
        "cursor": {
          "ref": "b7fa6969-224e-46a2-bf56-48bba60f5c92",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5f375041-bc75-4abf-af52-51b772b3c18a"
        },
        "item": {
          "id": "d7dd542d-d192-44e7-8e29-003c7c23cf2b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "838bdd16-4f24-4ab6-9979-f34a8fac8a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a444473a-09e6-4dab-8666-e072ee6dd6fd",
        "cursor": {
          "ref": "5b845c11-3b17-40dc-a829-ec8c3f7bbae5",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bfb970b1-7872-4834-9bd8-074517059e81"
        },
        "item": {
          "id": "a444473a-09e6-4dab-8666-e072ee6dd6fd",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d541e78f-e9bb-44bb-bb2e-d63ae38a7200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965a300a-6539-4fd8-a3ce-f0862a659fa1",
        "cursor": {
          "ref": "2cde041f-c272-4793-9cdd-1e753cc4ac16",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "bc66861a-1f6c-429f-955d-4bcb8c3ccc63"
        },
        "item": {
          "id": "965a300a-6539-4fd8-a3ce-f0862a659fa1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "75fb4cdb-917c-4550-ba86-ca167437976b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e334c3-9d73-4efb-91c2-2b247e7cccb3",
        "cursor": {
          "ref": "6ebf4815-e2d6-4e3e-9ae3-aecd02bf6c8e",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "505a204d-0605-45b3-ab27-a253fe3045aa"
        },
        "item": {
          "id": "36e334c3-9d73-4efb-91c2-2b247e7cccb3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "85b16607-5964-47ff-9ce9-5453a03c9e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0f8751-11d7-47ec-b36d-a8835756f8df",
        "cursor": {
          "ref": "f4477bd6-2e83-435b-9070-8c0d10d167df",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ef2b56d6-bcf1-4b22-a5e6-81917aae7d66"
        },
        "item": {
          "id": "cc0f8751-11d7-47ec-b36d-a8835756f8df",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "910b5104-af3a-400d-89e4-89646e3c2241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b397242b-c4d9-4faa-860a-79e4cf2d6df4",
        "cursor": {
          "ref": "03001015-377c-4db9-8663-4fcfd094fb64",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9865e0a7-3c40-409f-8d3d-d14f29106436"
        },
        "item": {
          "id": "b397242b-c4d9-4faa-860a-79e4cf2d6df4",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0405877d-2538-4038-8cb4-c511d35406aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b15e347-5439-478b-b264-09854948e5eb",
        "cursor": {
          "ref": "8bdccfa0-2674-4e34-8df6-0051315f5449",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5c42dcc6-0908-48be-93cc-74438ca46397"
        },
        "item": {
          "id": "3b15e347-5439-478b-b264-09854948e5eb",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "06ee3139-2d0a-4f46-b1da-448076bd47ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce722d92-7fed-421d-a38a-40c827c99c3c",
        "cursor": {
          "ref": "393140fe-5a00-42bf-a24a-8f04aca7d547",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ce6c2ed2-40dd-4da1-8c01-874dd4d1851f"
        },
        "item": {
          "id": "ce722d92-7fed-421d-a38a-40c827c99c3c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "fe8ea4c9-6b65-40df-aa65-a170bc07b02b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a1034d-9a9e-4c03-a134-fc56c3ab8917",
        "cursor": {
          "ref": "3e7e89f1-6681-48a2-8b59-02d0168626f4",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7d6d1e2e-bfa3-41d1-b0c6-dc3617843d6b"
        },
        "item": {
          "id": "a5a1034d-9a9e-4c03-a134-fc56c3ab8917",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a2ee6653-661a-426c-bb91-b08dcca8108a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d6a4e0-4dd8-46ca-ae96-0db63b9bcaa0",
        "cursor": {
          "ref": "e373de05-2316-4927-830e-620d3794b5fe",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "888a26f4-9a38-4624-83c0-575cee74160a"
        },
        "item": {
          "id": "02d6a4e0-4dd8-46ca-ae96-0db63b9bcaa0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "806e6dd3-2885-48a9-8780-61d09c005787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f03be9-0bbd-46a2-9df6-e322fbaa032e",
        "cursor": {
          "ref": "1dad1de2-9483-42d8-9998-373d0c002194",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "869564a1-f404-4fdb-8aa2-bc92e8ac41e7"
        },
        "item": {
          "id": "b7f03be9-0bbd-46a2-9df6-e322fbaa032e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0097d535-e86a-43b5-b3e4-9c83dba242fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da63dcf-a393-4fa9-8b6a-3161cc45755f",
        "cursor": {
          "ref": "b57dbd5a-b3c6-421c-9a86-d292357f8fc0",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "77d045b0-6d05-47d9-9d8a-8f7be8f2bd80"
        },
        "item": {
          "id": "4da63dcf-a393-4fa9-8b6a-3161cc45755f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "976ec0bc-d0ed-4f52-a1e0-ba40e7bc1f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ddff11f-bdaf-4835-8068-a5d7cf9221d6",
        "cursor": {
          "ref": "559b525f-8c69-46d6-b492-148493ff1a2c",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8f7f811a-0185-4a57-b584-88008298ed4a"
        },
        "item": {
          "id": "2ddff11f-bdaf-4835-8068-a5d7cf9221d6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0bc228ba-7a13-4bd2-aa8b-6776c0cc88c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d16eb693-4130-4729-bed4-a0ba9f4b4522",
        "cursor": {
          "ref": "8939c4af-f930-4a37-8329-864594a6d257",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5041af4e-f036-496e-bed7-77f638872534"
        },
        "item": {
          "id": "d16eb693-4130-4729-bed4-a0ba9f4b4522",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "101546f2-13d7-46b3-8a51-53f315fba77e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bf2c00-bedc-4dbe-85e1-049f4eaf5e64",
        "cursor": {
          "ref": "847d21bc-6657-4fb9-b12b-ab4979973c4a",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7cd1393d-47d6-4fe8-9f0d-0ce64aea1c59"
        },
        "item": {
          "id": "03bf2c00-bedc-4dbe-85e1-049f4eaf5e64",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "fd0b178f-f96d-4767-996a-ea9586d98461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 961,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1d1dc2-c356-4213-97a1-a97bb7c1bc43",
        "cursor": {
          "ref": "12609efc-0d75-4ebc-bc8f-80d40ce67860",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d2f69cca-6079-49b1-a9a1-04abfa46fae5"
        },
        "item": {
          "id": "9b1d1dc2-c356-4213-97a1-a97bb7c1bc43",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "02b720d2-8212-42c1-904a-6c38b17820a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8953fda-3a6f-4c15-aace-1786111fe602",
        "cursor": {
          "ref": "af5d1b0f-b80a-4500-8ab0-2a4b80e4a3e7",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9e9cfccf-6c0e-4eec-9580-12fbcc30fcfb"
        },
        "item": {
          "id": "d8953fda-3a6f-4c15-aace-1786111fe602",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b0a6ec10-65bc-44ae-8b46-9d6f634113b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f3ecc8-6d6b-47c1-92c2-b8366475a626",
        "cursor": {
          "ref": "e5e3315a-dc28-4821-b986-74317a4af691",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7b5fb7de-3d07-4c3b-a965-8fc5a526b074"
        },
        "item": {
          "id": "69f3ecc8-6d6b-47c1-92c2-b8366475a626",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b787c667-44c8-4220-8eb3-ebf1f6093237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f8674a-bffd-462d-afbe-bf5b16e6dc11",
        "cursor": {
          "ref": "7e100273-612c-4200-baf9-d4571f5b002a",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "eca1e39d-c18c-44c8-82b2-480cf12dbe56"
        },
        "item": {
          "id": "89f8674a-bffd-462d-afbe-bf5b16e6dc11",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7809f92a-c330-4cb9-8ec5-73d684e0c688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8417b1e7-dcf6-4eca-a273-8a40f260dc62",
        "cursor": {
          "ref": "25a70834-1005-43f8-95bb-7b57d72e338a",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "56c07afc-a345-44e7-800b-eda9bbdccf5f"
        },
        "item": {
          "id": "8417b1e7-dcf6-4eca-a273-8a40f260dc62",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b8c9c256-fd8e-4c66-8d20-4336cfe25034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60921725-041e-4874-afa8-283ac6a250d1",
        "cursor": {
          "ref": "b44ee81d-7fbf-415e-8cc3-46d3ab1ce6c5",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "378d5d32-292d-488f-8cb0-27b190085d9f"
        },
        "item": {
          "id": "60921725-041e-4874-afa8-283ac6a250d1",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b54c44ad-5563-4f2f-8b10-ed58c0ce4c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a571a8f1-3c89-47f1-abe5-33300efae1cb",
        "cursor": {
          "ref": "5256d8bb-7857-4748-92bf-f423d9902ca7",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5c6672ea-6362-43fd-b21c-9a80aa3969cb"
        },
        "item": {
          "id": "a571a8f1-3c89-47f1-abe5-33300efae1cb",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "49c7e976-2dd2-4b02-af8a-3b5fa751a599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5764cd8e-5121-473d-abb9-438297582646",
        "cursor": {
          "ref": "19d58a4d-1f4c-46d7-bf99-e81ea18de98e",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "dd82f588-ae9c-4672-b0cf-2ab7bc4a2cc6"
        },
        "item": {
          "id": "5764cd8e-5121-473d-abb9-438297582646",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0069bfff-b03f-41e0-95d3-8aee534813b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d357f7b7-2ad8-4be8-9329-f40eb3af5fa7",
        "cursor": {
          "ref": "4f78f71f-1ea6-42de-9fd1-f5b6adecbc9e",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5e835b14-b298-4b64-ab3a-d541bfead6bf"
        },
        "item": {
          "id": "d357f7b7-2ad8-4be8-9329-f40eb3af5fa7",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ef2e2584-eb40-487d-afc0-eefe4476c7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3742661-31d6-4578-aa7d-cbeb6c419fee",
        "cursor": {
          "ref": "bc4cf5ad-20d7-4d88-9fcf-c772df489b39",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a0b8bb93-254b-4afc-888f-cec1e17aa270"
        },
        "item": {
          "id": "b3742661-31d6-4578-aa7d-cbeb6c419fee",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "104fe43d-72bc-4960-a366-4c55f0f78dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb84df9e-700f-4cf1-a104-3896fad8cf77",
        "cursor": {
          "ref": "c67c6131-4ef3-440d-86fd-6356a64d6a5a",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5c4d955b-44ab-40ca-8bf4-da2dae359484"
        },
        "item": {
          "id": "bb84df9e-700f-4cf1-a104-3896fad8cf77",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a4c0377d-5913-4fd6-abce-8d9a8305339b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b98e238-5031-490e-be47-7c29f82fbcb0",
        "cursor": {
          "ref": "368db510-8040-4aba-8dcf-d0823d0814f3",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "bc3617af-1e10-40ef-9028-6c7a1209757b"
        },
        "item": {
          "id": "1b98e238-5031-490e-be47-7c29f82fbcb0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3987b067-e4ce-4ad8-894b-4f3933539103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4641e10a-7a20-4003-a0c0-604d4e7a9ea8",
        "cursor": {
          "ref": "fe68c741-8470-4ba3-b7a2-eee51e421df6",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3e7d6e16-c790-44cd-9dce-561ec19b655d"
        },
        "item": {
          "id": "4641e10a-7a20-4003-a0c0-604d4e7a9ea8",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0165d01e-e79d-4a32-b01d-6977a8e1a159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "844dc1c8-1b74-46d1-aedd-ab5b8c9c0d3f",
        "cursor": {
          "ref": "5b017394-f380-4386-89e1-234f6ec25e71",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c6d0db14-f722-4710-bdac-7720a6e119e0"
        },
        "item": {
          "id": "844dc1c8-1b74-46d1-aedd-ab5b8c9c0d3f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f42db8be-e392-4f1b-ad9e-6d81cdace94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee814de6-e6f0-4531-8402-bbaa69463490",
        "cursor": {
          "ref": "907f8bfc-93c2-4b24-a210-78701ecc6b92",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "60b6f335-db4a-46d9-ac18-448533b97ee5"
        },
        "item": {
          "id": "ee814de6-e6f0-4531-8402-bbaa69463490",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a37d7a45-0c6e-4691-a639-660c96b2854c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be467d4-61db-4058-8046-808045d06b88",
        "cursor": {
          "ref": "07d84887-b3e8-4369-a10e-ec5b6a8788b9",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "985060f0-28ea-47c7-872c-03c17b3f58f6"
        },
        "item": {
          "id": "9be467d4-61db-4058-8046-808045d06b88",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "30f27e91-a92d-4f31-9fc5-7dca92455a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ad0e47-7b19-4427-a80f-ac426904e64a",
        "cursor": {
          "ref": "8765a139-f529-4f15-88ca-20f67d273d66",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a85cdca9-7c4e-4dae-8255-18ad846591c6"
        },
        "item": {
          "id": "11ad0e47-7b19-4427-a80f-ac426904e64a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9a917a2b-b4a3-4a5b-a21b-5ae9ccdcbbcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0696a67-7e37-44fe-b112-a2cc501eda97",
        "cursor": {
          "ref": "e4af91b2-0d46-44f6-a03e-b86a809e381a",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "38eecd25-7050-424f-bc83-6ff343448ca7"
        },
        "item": {
          "id": "b0696a67-7e37-44fe-b112-a2cc501eda97",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "67b451ff-647a-420c-bc11-18ccc6d6afb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdcb18f5-db07-4db4-a3ce-aa5b45cbc19f",
        "cursor": {
          "ref": "849e9f6e-8532-4f1c-9964-5f5172a34b46",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fb5801f6-9125-48c6-af6d-01c716d8a9e8"
        },
        "item": {
          "id": "fdcb18f5-db07-4db4-a3ce-aa5b45cbc19f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9dc3ba63-edc1-4da4-a3cf-129f33f158b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19bf7a51-2caf-48f2-aeed-37ecc818eb29",
        "cursor": {
          "ref": "21d69345-6d78-442e-bcc4-8bb5fafe3a4c",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "eccec80f-45cf-429f-94ad-0a9c9f5ff732"
        },
        "item": {
          "id": "19bf7a51-2caf-48f2-aeed-37ecc818eb29",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "faa9a5db-b3e8-49e8-9d64-5cc1019712de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4645352-bdcc-47c0-a6f4-4382ae300c70",
        "cursor": {
          "ref": "28c3a41d-cc69-4d4d-bc68-438d7ce93b79",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "362666a7-7b67-4316-a3de-50f9fa049d31"
        },
        "item": {
          "id": "a4645352-bdcc-47c0-a6f4-4382ae300c70",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "73698192-13bf-43a7-8284-39e3b40672fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806b2e1a-cadb-4880-a49a-0a3703827a29",
        "cursor": {
          "ref": "ac7d5b4a-8c67-4543-b657-45ddf9ce3275",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a9049310-92df-4b81-b6ab-4df9772c6a64"
        },
        "item": {
          "id": "806b2e1a-cadb-4880-a49a-0a3703827a29",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f68748f8-2140-4a0a-9d19-9d41dde2c070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86d0e28-b7d8-48df-8f25-dfaa26ec93c6",
        "cursor": {
          "ref": "4add7dd3-0efd-48e2-9149-3c2db0974c9a",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e5fb4d4c-2e50-4a4c-b5ec-c393bf307f86"
        },
        "item": {
          "id": "e86d0e28-b7d8-48df-8f25-dfaa26ec93c6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "13484c99-b40f-4dd4-b756-f16128ed32ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8d2c53-f661-4303-9e17-3fae70e22a9d",
        "cursor": {
          "ref": "79aa3b3d-103e-4fc8-b535-d225171f323a",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4550b3ba-0473-4f34-a5b7-e51d5aee886e"
        },
        "item": {
          "id": "8f8d2c53-f661-4303-9e17-3fae70e22a9d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5188983f-b567-439a-8fb3-7a852fe27ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79a8d0e-8bd8-40f0-a930-76e556d77deb",
        "cursor": {
          "ref": "5d3acf75-574a-4e83-9b64-91cdb7ba45d1",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8b9b1f41-4f8a-46ea-9c84-e0c7723ef620"
        },
        "item": {
          "id": "c79a8d0e-8bd8-40f0-a930-76e556d77deb",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "399eb9d7-d84f-4c94-8502-56198702ce30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2499b7a-fb04-43e4-9dd5-b503e0a96a6f",
        "cursor": {
          "ref": "ba44a4bd-1ff3-4c88-b2f5-65f1e926ba1e",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8a480aff-f536-424a-831b-89cf8d80c679"
        },
        "item": {
          "id": "c2499b7a-fb04-43e4-9dd5-b503e0a96a6f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1b0aa2af-893e-400c-9488-4cf4fd09a38f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d41ff2d-042c-4459-bfbe-01c16e7c9b94",
        "cursor": {
          "ref": "3c78ec34-92e0-4fb6-a1e5-ef87af1ffd5a",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "dc83aa0b-daa2-41fa-bde6-4b1564c0ad2b"
        },
        "item": {
          "id": "4d41ff2d-042c-4459-bfbe-01c16e7c9b94",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "be68fb29-4276-4c3e-bd51-ada229d13294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c4700a-af18-496b-9061-efb05ae77db8",
        "cursor": {
          "ref": "167e9602-870b-4394-a0b0-154b1c9833d6",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2785dd60-bc28-4712-98db-b432cbea2567"
        },
        "item": {
          "id": "49c4700a-af18-496b-9061-efb05ae77db8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "27ccdc95-ebbe-4553-b7e8-eec94d2546be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19e1d80-c7dd-46ee-9ae2-5ac5b980239b",
        "cursor": {
          "ref": "662a06e5-716e-4cfc-a1a4-1c07f8c3c25c",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7b3597d5-fa9a-4b09-909d-5d550a8f255e"
        },
        "item": {
          "id": "a19e1d80-c7dd-46ee-9ae2-5ac5b980239b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7ad8636d-3d8d-4d0d-b209-0f4865b9c01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0533d6-1052-4212-8f04-7c104d90486f",
        "cursor": {
          "ref": "23bb2cb6-a8ab-4957-88ab-fbd5ddd83495",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "eff834fa-556c-4b37-9481-32dfce18fffe"
        },
        "item": {
          "id": "9f0533d6-1052-4212-8f04-7c104d90486f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "722df27c-2255-4c5e-9d56-df90311bef1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd21fb1-57c2-47d6-bc69-0c7e0d20baf7",
        "cursor": {
          "ref": "b0cddcff-74b3-44de-b128-1490c14632cf",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "75c611c8-1ee3-4cea-b4ab-f01eda2caefb"
        },
        "item": {
          "id": "8dd21fb1-57c2-47d6-bc69-0c7e0d20baf7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "001cce9f-a55f-45e5-bf2a-bdc4857eb8a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b420db-757b-4bfe-b0d3-98fb53015c2e",
        "cursor": {
          "ref": "35e0ca82-61f4-49af-a3ca-1819e544f266",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "37d17c6f-0ea8-43e0-a260-a6cd77745f41"
        },
        "item": {
          "id": "d8b420db-757b-4bfe-b0d3-98fb53015c2e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5b0bd9e7-0cb4-4986-bcdb-483a3635f9f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5417b4-5f2d-4fea-8281-e1cb7f60c696",
        "cursor": {
          "ref": "63f478e8-f194-4b62-923b-c89530326834",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "148ac3af-db2e-478a-9fda-d581b6dd1cf8"
        },
        "item": {
          "id": "af5417b4-5f2d-4fea-8281-e1cb7f60c696",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "50e57bf3-05f3-489e-9be6-eac3a0cabd6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ff7a71-6944-43b2-bf52-69350a5523a7",
        "cursor": {
          "ref": "a94f5d44-63aa-4d7c-baa1-9f1f3dbbfa8c",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ecb17a51-6d91-4775-897a-2bfb067bd571"
        },
        "item": {
          "id": "42ff7a71-6944-43b2-bf52-69350a5523a7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e2b58ec2-35ce-44ad-8a36-8e7326fb0cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a0c41b-5720-4f54-903b-6c223445f00f",
        "cursor": {
          "ref": "1dc26b16-af5e-4dc8-8384-dcaafb1520c6",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fa4181b4-7d2d-434f-b4f0-b5fe475a47fa"
        },
        "item": {
          "id": "43a0c41b-5720-4f54-903b-6c223445f00f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8594e03d-162c-4b3a-8ff3-b1d87bf20da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "778bcdb5-e341-4d76-b2a5-29e443e3343b",
        "cursor": {
          "ref": "c703934c-497c-4894-8243-9ad6ef066205",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b42d2072-5742-4397-9779-3eaca6c667f8"
        },
        "item": {
          "id": "778bcdb5-e341-4d76-b2a5-29e443e3343b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "05ab709b-8234-4fb6-bbcf-24d858398fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ed3ade-3417-4258-988a-fb25c112a64f",
        "cursor": {
          "ref": "2b0d546a-22ea-4820-b516-c4a706f1a5cb",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "233980a0-760f-4de8-97e6-b3bda66668db"
        },
        "item": {
          "id": "36ed3ade-3417-4258-988a-fb25c112a64f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8e780713-eb92-4cfc-8f13-1fc31f4b1705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80663fd-688a-45be-aaff-1820dfcddfa2",
        "cursor": {
          "ref": "fc2021fe-7450-4589-9c24-a40ac8664df2",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "05d4a92c-f55d-4a12-9f10-0c97206ec7c3"
        },
        "item": {
          "id": "f80663fd-688a-45be-aaff-1820dfcddfa2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "77fc9fda-39aa-485a-bd40-95f7cae0c1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a562c9c1-c467-41bf-8ba0-02e16f320f29",
        "cursor": {
          "ref": "e760d085-f041-4971-a0a5-ddbcc6ca8284",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "234d8706-14f6-471f-bbd9-bef0717ce091"
        },
        "item": {
          "id": "a562c9c1-c467-41bf-8ba0-02e16f320f29",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d1e839c3-7998-43a5-bc87-de5700b602fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057166e6-6a67-497f-a937-b6947b8fbc7c",
        "cursor": {
          "ref": "7f34da62-edbe-43ad-acc5-264ceecc2d61",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ff126506-700a-4030-866e-89479fef28c4"
        },
        "item": {
          "id": "057166e6-6a67-497f-a937-b6947b8fbc7c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8d42c984-af45-4af3-97e2-9dc9b87e5c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c597dfc1-6fcd-46c6-a2b6-8e6f1eb2aac9",
        "cursor": {
          "ref": "94eebf4e-63a0-489b-b4c9-df1fe920dfe7",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "facda5c5-3641-4dce-866a-f715fab9dc05"
        },
        "item": {
          "id": "c597dfc1-6fcd-46c6-a2b6-8e6f1eb2aac9",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e22df16f-1e64-46c2-8be9-7de40737f967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d33041c-fcbc-4543-883f-c69ed4136fed",
        "cursor": {
          "ref": "7c7a7ca0-a861-4e23-8355-5ce48b04a40e",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ba31e1bd-0815-46d5-a6d0-cf2f409720a3"
        },
        "item": {
          "id": "7d33041c-fcbc-4543-883f-c69ed4136fed",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "86cbdeec-7336-483a-9706-84dfc32ded47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b241605-7a3c-45b0-aa73-ba4950d288fe",
        "cursor": {
          "ref": "d799becb-bd46-48e9-8c95-f28f51dfcf37",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e18ca899-5e2b-4ea5-8952-ca930d329981"
        },
        "item": {
          "id": "1b241605-7a3c-45b0-aa73-ba4950d288fe",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e7bd1cd9-4d54-4e7e-8eb8-2a52846ceaab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81944648-cb86-4d12-8b33-af6ca2eb02cb",
        "cursor": {
          "ref": "a3ac4ad5-137f-426a-88f4-0dc4825408f7",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e9460441-e85e-4907-8368-50f16f315d7b"
        },
        "item": {
          "id": "81944648-cb86-4d12-8b33-af6ca2eb02cb",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "bd4dbfe0-9828-493f-b10b-2811cd5db369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b3dc55-49fd-4c8c-9d01-d929befe7a9e",
        "cursor": {
          "ref": "f08c23a3-b6a5-45dc-ae3b-e4808b6dc932",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b399bce7-8e33-4002-a395-5fa8a553ddf5"
        },
        "item": {
          "id": "a4b3dc55-49fd-4c8c-9d01-d929befe7a9e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8a33c63c-53a5-4d7b-83db-1c1f413b6daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e313d03-630d-44bc-b7a9-3169a02ab157",
        "cursor": {
          "ref": "cbd207b2-ac57-4f8a-8930-ef7131330241",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c24b8ac7-dcc1-4182-93af-b27056365ed1"
        },
        "item": {
          "id": "8e313d03-630d-44bc-b7a9-3169a02ab157",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "13111ead-c517-43a4-82ec-3d30e01f9d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b2aeb0-0b48-459d-98ea-e19030289390",
        "cursor": {
          "ref": "5756782d-0d68-493e-b357-09d7bd0cb253",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "70edfb5b-9a70-406c-936e-0a297a2cb05a"
        },
        "item": {
          "id": "c1b2aeb0-0b48-459d-98ea-e19030289390",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d7712a7a-1e3e-4fe6-8416-31015d0af8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc6ec4e-8fe2-43e2-9131-19528fe67687",
        "cursor": {
          "ref": "88e69c39-1dd7-4fdc-924f-9d352cc7ec72",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7d33795c-3238-495b-83f7-a6469bafe430"
        },
        "item": {
          "id": "7dc6ec4e-8fe2-43e2-9131-19528fe67687",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a9abbd44-bc66-4c22-82b8-d1a5ab7b74b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7baa57ea-96e4-4e2b-af6c-b182d60acb86",
        "cursor": {
          "ref": "9d121ac1-a30f-41da-a421-d0ed22d19fe7",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6a425057-c0ae-4b94-802f-1fc41a8c89d7"
        },
        "item": {
          "id": "7baa57ea-96e4-4e2b-af6c-b182d60acb86",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6c2a5397-4107-43a6-84d3-e4c5ca81b6b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57412bd1-f21f-4a6f-86ec-461259b91e0c",
        "cursor": {
          "ref": "4de2b2d5-6962-4970-9be9-072524e7c467",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "934aec6e-7402-4b67-8e2b-af065383d684"
        },
        "item": {
          "id": "57412bd1-f21f-4a6f-86ec-461259b91e0c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a7dff9bf-cd75-4912-b793-f4e1e6c8c292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ab7e1a-5349-49ef-9715-7c9909d9b722",
        "cursor": {
          "ref": "f964d3dc-dd98-4a21-a63f-dbd26c978272",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "122a673f-1dac-4447-887a-bec46da1241d"
        },
        "item": {
          "id": "b0ab7e1a-5349-49ef-9715-7c9909d9b722",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ff6d5d93-be29-485d-96a8-a7d981caf113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf39bd8e-d195-43f9-a644-93d3e09bedf6",
        "cursor": {
          "ref": "f3003686-3efc-47ba-bd78-dfe4ff1d842c",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bc1c83c3-d3e8-4805-b5f8-8cf5a0e34726"
        },
        "item": {
          "id": "cf39bd8e-d195-43f9-a644-93d3e09bedf6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f3c71251-8b92-4f57-9fc7-8a44278549be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df598d66-728d-47bb-a43b-1d38b6e1eebc",
        "cursor": {
          "ref": "e1af2062-3aa1-45b6-a945-a6d9a257f1b9",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1173f9ab-9326-4376-be5e-09e5db22b709"
        },
        "item": {
          "id": "df598d66-728d-47bb-a43b-1d38b6e1eebc",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ef6b870b-59bb-4401-80d4-13f7a8a3f960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9624d75b-01ae-4018-935f-6e2257616857",
        "cursor": {
          "ref": "be6fa3e6-07a2-47c7-bdf7-65f1afcf4d35",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b7632c0b-996b-48f1-8f23-bd8a94710338"
        },
        "item": {
          "id": "9624d75b-01ae-4018-935f-6e2257616857",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5efe8608-380e-4345-89ca-3133ab324d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982ad810-2063-462d-ac94-1da80d97cbe8",
        "cursor": {
          "ref": "a4e1827d-5e6d-4c71-966b-76922077452f",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "00fca3e0-a906-4bf2-9693-57e709c2a1e5"
        },
        "item": {
          "id": "982ad810-2063-462d-ac94-1da80d97cbe8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "990888f9-a8c7-40b5-acbd-e7489c533c05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "508dadc6-f644-4eb7-82e6-dcbd0cb1aae1",
        "cursor": {
          "ref": "79047e22-7655-4a57-9024-382078d95847",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "fe43d91a-8352-4537-80c2-d34f63763856"
        },
        "item": {
          "id": "508dadc6-f644-4eb7-82e6-dcbd0cb1aae1",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "bfe5ce7e-e5b4-46e1-8126-22b69c21c3f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "c7eb08fd-5a84-4640-907d-e738880375b6",
        "cursor": {
          "ref": "4cf38110-0514-4bbc-9536-5c571203b390",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "83547e60-2b77-4949-94c5-11fa4794cfbf"
        },
        "item": {
          "id": "c7eb08fd-5a84-4640-907d-e738880375b6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1c4c2066-dfb4-489b-b1a8-d72eca91152d",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afefa70-21e9-4a59-90d1-c283d2bb2bb2",
        "cursor": {
          "ref": "80fc1941-824c-4306-a97f-b3f191d8e583",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8cb68752-9639-4405-b963-bd659fdbc6d7"
        },
        "item": {
          "id": "6afefa70-21e9-4a59-90d1-c283d2bb2bb2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "22617a0f-0f8a-4d7b-ab16-0ed3c77ec358",
          "status": "OK",
          "code": 200,
          "responseTime": 2578,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b713ed9-3744-478d-baf8-9246bdd9f429",
        "cursor": {
          "ref": "9000bddd-087f-4ca4-b42f-256144c1a642",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "de1f7bec-9b8d-4443-8cfa-26d2ef00e650"
        },
        "item": {
          "id": "7b713ed9-3744-478d-baf8-9246bdd9f429",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9e92107b-006a-4469-a3ee-d9379fcc6667",
          "status": "OK",
          "code": 200,
          "responseTime": 2161,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af06c24-10f5-4713-a392-f1c707c661d0",
        "cursor": {
          "ref": "14895496-725b-4623-adbc-179359d4c7be",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "adc07145-267c-49dd-943c-0b32878015cc"
        },
        "item": {
          "id": "9af06c24-10f5-4713-a392-f1c707c661d0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "76d772d3-efc9-4eee-9ed9-127089c5b129",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "9af06c24-10f5-4713-a392-f1c707c661d0",
        "cursor": {
          "ref": "14895496-725b-4623-adbc-179359d4c7be",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "adc07145-267c-49dd-943c-0b32878015cc"
        },
        "item": {
          "id": "9af06c24-10f5-4713-a392-f1c707c661d0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "76d772d3-efc9-4eee-9ed9-127089c5b129",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "9af06c24-10f5-4713-a392-f1c707c661d0",
        "cursor": {
          "ref": "14895496-725b-4623-adbc-179359d4c7be",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "adc07145-267c-49dd-943c-0b32878015cc"
        },
        "item": {
          "id": "9af06c24-10f5-4713-a392-f1c707c661d0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "76d772d3-efc9-4eee-9ed9-127089c5b129",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "669a3414-fd63-4fff-82eb-1d337bb29792",
        "cursor": {
          "ref": "ed375c68-a6df-401c-9b92-0f7c32654ee9",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6793cb08-e025-496e-96b0-80c7252357b3"
        },
        "item": {
          "id": "669a3414-fd63-4fff-82eb-1d337bb29792",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "6b4db5d8-0b2c-49a4-854e-fe6fcc18f7fb",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "70631159-b77b-4ad1-af6d-a66ef923ecfd",
        "cursor": {
          "ref": "a252e34e-d03f-4a71-8858-8785c5759299",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5f17789e-3ec7-4191-94ed-af87c4a9463a"
        },
        "item": {
          "id": "70631159-b77b-4ad1-af6d-a66ef923ecfd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4c4798ab-db3c-4ca6-9467-5f4e87e0f2b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "70631159-b77b-4ad1-af6d-a66ef923ecfd",
        "cursor": {
          "ref": "a252e34e-d03f-4a71-8858-8785c5759299",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5f17789e-3ec7-4191-94ed-af87c4a9463a"
        },
        "item": {
          "id": "70631159-b77b-4ad1-af6d-a66ef923ecfd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4c4798ab-db3c-4ca6-9467-5f4e87e0f2b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "16439b15-1c59-46c3-9e23-3c90b0f68bd4",
        "cursor": {
          "ref": "e1afe17a-66ae-4625-8e3a-cfc5534ec0c5",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ebe258b2-b309-4447-bf0f-240448822eb3"
        },
        "item": {
          "id": "16439b15-1c59-46c3-9e23-3c90b0f68bd4",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "30ac8c86-8565-478c-a42f-18a6cb3fca05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 171,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "06c87013-8d01-4040-9a7b-bddd594a499e",
        "cursor": {
          "ref": "511596f3-2e94-49bf-9319-06503189cbd1",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f324e137-523b-469a-af39-c76c6bda2888"
        },
        "item": {
          "id": "06c87013-8d01-4040-9a7b-bddd594a499e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c9477d74-3586-480e-ab73-f5d5bafd09e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "06c87013-8d01-4040-9a7b-bddd594a499e",
        "cursor": {
          "ref": "511596f3-2e94-49bf-9319-06503189cbd1",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f324e137-523b-469a-af39-c76c6bda2888"
        },
        "item": {
          "id": "06c87013-8d01-4040-9a7b-bddd594a499e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c9477d74-3586-480e-ab73-f5d5bafd09e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "714d3fe8-32a3-44d9-bbd2-7194aa927d1b",
        "cursor": {
          "ref": "27696ac0-1814-49f8-bc0d-a8043b4e4320",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ef841653-57b4-4cb6-a065-b4c5973060d5"
        },
        "item": {
          "id": "714d3fe8-32a3-44d9-bbd2-7194aa927d1b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "00631c56-7950-4f33-a052-37df8320b5af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}