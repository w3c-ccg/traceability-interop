{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "16deea77-bfa5-4f84-96d4-0d9b9a0c7463",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d2838608-cfa1-44ab-abb4-59be7a39a9e2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a317f07a-c499-40a2-868d-dc40c95d49de",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cf043c07-7003-41d2-925b-6b6d32aaeefd"
                }
              }
            ]
          },
          {
            "id": "caaa1bb8-7541-4709-a5d4-c68d0cb3c450",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4b2a8226-bc7b-406f-bbee-f1eb87f44147",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ef960172-6a05-4266-afbc-5729ed4dae98"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "49497253-db79-47fd-bc9d-4c42d3427884",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c65f0cf5-6a2d-41cb-92a1-8c210b5c18a5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5d3155d0-6b02-421f-b29d-4fcb0bb9d5c8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6da2f096-f4db-4e9f-bdd3-0fad851ee397",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "77d88d93-1a56-4761-bfd7-8f2404c3bf71"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4865f0cc-742c-4c16-9cdd-295e5784cedf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b0c4168c-109b-4c8e-808a-a5601ccf475d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "61c15d3c-86fa-4a2f-892d-fc9dd3b00758",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f068258c-82e1-4608-a8c0-22b7ba481313"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8a30b687-3660-4497-aeb7-aeff3de5f529",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2255fcba-7b64-4ce1-98fd-525bcc902a36"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "633055f1-dc2c-4582-a12d-9bd7396d850f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e57d9292-302d-4c2c-96ba-f2fafe3729a3"
            }
          }
        ]
      },
      {
        "id": "a302cdaa-4f04-4a12-b173-74bcc0f12416",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5ebc5e43-15b1-4f13-84ee-8411265283b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b686ee4-393c-43d2-ad44-1cfbe4331df6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8e34c0a7-14d3-43ca-8629-52e9cef6b88d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba4c396-fd38-42f3-9b60-4e90d5b33396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3191de4-8462-47ca-b355-36429ffc93db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bfb615-d08d-4725-8c76-1197273a4897",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "740014cb-1de8-4278-a9a4-6b3357dae6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f255326-2057-4bc0-8c22-800ab1dab7f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1b0a7e-dad3-4ed7-ae50-58810e3184b5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb61f1e-10fc-4330-8e81-5c683fda320b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fce502c2-ca3c-4dd4-9b85-becf369c49c1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3b0ed8f6-9d70-40cc-ad44-a5349d1b92a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "571028fe-cba4-496e-a37b-3c6a495b8510",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8921d73-ce55-40df-bf6b-59f9be3e68b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19eefbfc-5488-4b63-85c7-befc09fe9240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aba0758-4ece-4cc0-8624-04084b9a5179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b74991ad-f59d-4290-8424-8fd9b3501a44"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0ac62f79-bde5-46a4-88f8-89f322343411",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f33a9ff4-7f01-4f60-9688-47c95a41bba3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c936aca-da79-48f5-94fd-faec434ce6e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "456ff463-9060-4c18-a38b-7e2c1a5d8b35"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e656b36-0eb8-4090-b0b1-83330e010616",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "75f4829d-fb2d-43cd-b952-149d30b0b74b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c4a62577-180b-4196-bbd9-3341a6cafb99",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b2815b6a-166b-4de4-80d0-8af3b3fe53d3"
            }
          }
        ]
      },
      {
        "id": "2c579e90-8801-48e2-9647-fe4520f02387",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c36c84d4-baac-469d-a120-aacca4d796f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d7181ce8-be41-43a3-b3bd-8983801f6fbe",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "02591b19-248e-4eac-9c51-1281fdadb640",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe63019b-b992-46ba-b3b2-5ee9cd6a03c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d484f1db-e3a8-44ff-a30f-3443063aa764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c305868e-eadc-453f-a047-2b39ed4c348b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1232f4e-8bd1-4ca0-8503-a7c1750db7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb23264-6b48-4625-bd14-a0e074e9431b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da303cca-8024-493f-ab7d-0ecec2c853a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc68d0ac-528e-42a5-bd32-7c91cdc98cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1b3419-140f-4675-a9c7-53d07da618d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c4451e4-6f8c-4db5-9d79-668f4f07d621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01aba2af-fe2d-415e-903e-2865abcd6454",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbce523f-cd8f-44bb-99a9-6153d411c12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ed1306a-6788-4f56-a8cb-1637efc8a17e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84c59e6-7ed3-462c-abd2-a30c5b66369c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "671375ba-9b20-4b3b-9f35-fdcb177dd9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78871eba-f5c2-4eb7-a3fd-488bfcfc73a7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabadd3c-3d05-4fc8-801d-5e38d467c00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5414bdf3-cbe1-49d6-9acd-d2597b0558d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52623f6a-e4df-419f-8483-61170a28b847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad4591fa-faa4-4141-8cde-7d91f1f1f91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c74fb72-200f-4afc-be57-9a584a873206",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f673042a-e176-4c0f-9806-51b351a76eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf5531d6-bb6a-494c-b161-298bdc383eee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629a4d64-2f39-4dd6-8a54-31fa722d0536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32b8942a-c360-4879-aa74-be1caff13f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba68e4b-5afe-457f-afb0-b38d3d7a4815",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64542239-946c-4221-9090-76571d9f6a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c9d572-5205-407b-a785-6c0f6ed7590b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a5b254-50d9-4d36-896f-38460c0212cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91b06edb-530d-4ed7-9467-236b99b835fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47d6172-4441-48c0-84e0-9f14a15cfba1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735dda31-eb15-49a7-b031-1e5ad09ef09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6303393d-6c0f-4655-94e0-94758373fbcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0764c257-0f06-47e3-92e6-5f97b89d6ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "527be987-5467-4d30-9811-c5164cee956a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c4e7b1-b189-46a2-bdf6-f23a5d7f7848",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5a7636-a6a4-457b-a38a-4444c91301de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3d5393f-3989-47c6-9f63-d1207651dc4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae042bb-a9e3-4f7c-a84a-d3f4440656b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5d4ee13-f9e4-4125-824e-1a345b3f11d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa02a507-748a-4a6a-ae1d-027f8be58871",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036b195a-257d-4649-a8d6-cb8eb0f8c205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5a3f50-2458-4c54-841d-632fb8dde4af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a129a4a9-2a72-45c7-aa67-da9fbcc6d51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2caefcb8-3dd2-431a-865f-065c6b0a9663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3aff835-2be6-4200-aea1-e544d539b48b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "914e223c-f53a-40a3-a025-c08dfbcabe0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf719b27-0da4-4810-b8c0-b3e10ba61ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47adf272-e6f0-46f0-be92-1f80d36645fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83cb4de9-c0bb-471c-833f-cec857fdb037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a05a67da-9f79-4aa3-9d25-03ad40ceb53e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0871a862-e05a-49f5-910b-6e162d86e376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977cfedb-0cf0-4f22-bc72-635a8248a876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91dc8d9-ca79-4fff-b9a2-406a9eefc16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8bba5ec1-bd97-456e-80ad-96fcd1a587ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85d2dea-437b-46a2-93ae-de40491e165b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373218f3-1462-481b-bf8a-0ec57c140831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a71d51-77da-4c3a-88fd-baacc4b9eeb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d39ec5-a943-4fe1-af0a-450c23a09423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c456c904-f422-454a-943b-f3d2ab057763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2615d4ba-bf37-40e5-af08-26862d828672",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b5970a-d2e8-4d40-a3f7-50b23d53db8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "523fdd3f-4c30-4753-86e8-d34b57fe789f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7df9a8-e4b4-40f6-a8da-6a05cb00f133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00950d5c-7758-41f1-8da2-0abc1a33673b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614da8a9-a814-466b-973c-9bee94d21ba9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90374b22-684f-4e70-bd4e-9026d7052eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70375d71-b061-4cec-9ff1-b2671cf93593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973b55ff-c4f0-471f-a88a-e4a07e1734c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b07ed10-69f7-426b-aa26-5ca9873c8e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d28227-937e-426d-b79c-89aacd3c6773",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb8c53ce-9974-4a42-942e-ecb28e3bc36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1653b8e-16b5-4b2c-b6ff-9d1bab936e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe44c72-1687-4f8f-b917-adc8da122270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d33fe10b-8eb1-4b4b-b470-3970623f45a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99677b61-907f-4ed1-8cbe-1ba9621b2dd1",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2148fd65-80e6-4de8-8229-c4d656c47927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "040f97e8-6c0d-4807-ad14-becb6f42c408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b06e056-28c6-483e-a70d-ed073c64b4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62e2be07-d2ec-4a93-b5a2-8267a143519f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6221021f-bff4-49d2-98f1-2dcb5e9115fb",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd21195a-d2ab-4fc0-8641-bbf686e7afe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b360123a-d456-4fff-97e4-ea1450b25f31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d45b02-2da9-43d7-8fd5-86397a6aab78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fde848fa-9287-4422-82a2-6a0febfa953c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041e1a8d-4d5a-4b63-b253-1da8148e4df9",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad561a19-2404-4967-b1fd-7a72d82d622e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc8775d0-6c81-4870-95e0-fa48e2d8ff8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21fb400a-6b78-47b1-8fb9-79bcdd924ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f810661-4866-4e4d-9938-a44eb7ca733e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa5581a-95b5-4fed-b398-1139d4683464",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d400504f-42b2-4e91-b16f-94b50851be57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b26bf13-03ce-4772-991b-1ee4c989be45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b2a084-5246-4f54-a0e7-1f374612a2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c0f1ea2-9239-41f9-beb1-892cc8166f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f813fc-9ee7-4a58-adb1-19dfa2dc2e2b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c25a95a-6fa6-4bea-9b6c-198455a11214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e4874d7-0edc-466e-aefe-b16976bc0e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a13129-6b83-4b69-898b-0ef1fd6f7999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d57f8bcf-4a8c-4b60-b43a-7358c047b25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b543598-a758-437c-b10f-e38506d22771",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "487e17b3-2a9d-4ad7-9ea8-1c8d9d6c08b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b686283-5ede-46c9-9170-c07ff5557f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8fd83c-f161-44d3-9060-02355d64ed1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1071c9-2020-4a45-a704-393c1779656e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235b8540-160a-4324-a3dd-70067bd6e700",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "889179cd-bde3-4f2e-ba83-45185a59d9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819c4e75-0883-4ff8-8558-f592341aae57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a5a685-e4ad-4b5d-830d-452279a4f48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "937a2ee4-2141-4fb1-808b-86f7783083fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb32918b-d510-46b4-8837-c7ea00879529",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7c4235-2bc0-49a7-b898-6502269915fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5c7a04-13a5-4aa7-9e58-5ad9cc17bfba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbfc9573-362e-434e-bf0c-3505ca86ecc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e47a1cad-97d1-4561-9f62-76ce28a49684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215e6bb1-665d-40d7-abc0-3f8b48ee6008",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b793635-8414-414f-bc58-9ecc4e418bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "169c0bfa-40dc-45d7-8c65-4e385a42851f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f529923b-efe0-41d0-aaac-9590306c5cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "13888f7d-7036-439d-b578-37cbada9ce7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6923ddc4-1ab9-4922-bed9-4c524956e323",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32bbc1f5-733b-43fa-9eab-81c99e593ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e238394-bf99-4bed-89d6-8d927161aa4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3010efb3-342f-443a-b939-0e62e4ec4aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "48f4d9cf-23c1-40a5-a07a-4f3680751812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a663fc0-be55-40b0-9181-747a91ee4eb8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8c0c3d-3ccf-45ea-9bba-570764e5b8f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ace53d28-73f1-42d8-b159-7bdfdd4317ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9fb143-d291-4c63-ba75-45b52ac53ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e34ec5-909b-4d02-823c-641765787090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a9a68a-c3ce-4fdc-ab11-eb0826da1a3b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d427da-0c9f-403d-b0da-b55791dce4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "606f68a1-b71f-487a-afae-065b98126347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca16dc3-e1dc-466e-bca3-913565b1a28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb8b14a1-66e7-40ca-b04a-d3b1257fa3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b06c36-86ad-4651-af79-7d2d07668023",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05710cb8-d63c-4162-b997-340c04c10dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2048c42-9f3d-416b-a5dc-7109f89eec4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19569e96-fb2f-4c07-87e4-d034fe55f90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "130a6e13-01f1-4817-b873-a6aa92d12c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30ec481-db9b-4417-b5e8-bb6fe6c8bae4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1f9e58-9e4a-4659-b662-03c79b8df633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab9e1ce-7296-4893-bfb3-12cece09597f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b556a437-c2f6-41f4-9b70-0f56e99243b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f1cf325-3644-4854-bdf6-75fb953e0cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106be818-65fb-4931-ad17-d62d4a1c3657",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb16032-2f10-4ee0-9627-75e60a476d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32110c92-b772-4e97-b6d0-0ee13d73bbfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f355a13-75bd-45fa-bee9-462cd41b38dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8930b835-f943-451a-a153-1cd420e60d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d13aaa-318f-4d3a-b82a-4b4c0e849f6c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "695add79-ed3d-4e6d-b91f-e417627ed5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e8d80df-cb18-4528-8af6-9e8d3be1fbcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f39a7d9-f013-4ae5-8343-b10efb7393ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ac3029b-6ff4-463d-9dd7-e280f4d87e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0348fbbd-8c4f-41a1-ab6e-cc8df139d23b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a810f4-4f5b-47ff-9687-ecdf61b78efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf2090f5-f9d7-4949-bd5b-09173344dfaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1ed45d-e3c3-4865-8edc-29ea58b7ee2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3031ed34-563b-4395-9242-3a7d411b5fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca01f51-54af-4803-a4bf-767de1549151",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d31813-170f-42e1-b29a-9d1560bda762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb8188b0-824c-4228-a130-427a1fa04fea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f73d2c-5e09-4a69-abf3-91a79594e347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a88101d-7493-4378-b106-41b35286a5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe93777-22b4-49ad-a944-82a966efc1c4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9779188-ba29-41ef-8dbe-2e01f7e700d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd079425-eade-4353-b954-7843f81f4c8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199e335f-f213-4bc9-9efa-cd0e4b4fe97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c02798b8-ffe0-4f8a-baa6-c29aa8ed10f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b745ea9-ee94-4f25-a773-03bf77b460aa",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74f2bed-f8a2-46c2-a7d7-478ab6e07cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0559904-67dc-4a7d-9fa1-966f2b5adbda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c174e6-5d7e-4f37-badb-945aedd3d93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "547d8c48-9733-4d70-846b-4672de40609f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd66832-08cd-4520-afe2-22a0b9b8860c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6c2d75-611e-4681-9fcf-b444dbb7dc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "babb384e-c811-4118-901d-24da236f0197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc97e92-8db8-4816-af68-f97eca23baa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "518b3b7b-8470-4235-abab-b0f6a56b863a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7a8ecd-e212-4669-bd28-71e096a2be1b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53811cf-cce9-4900-b899-39e8e758762e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfcc91e9-2bf9-4ba3-adf9-b953c0e0ca6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91cf4594-012d-4140-bfdc-f8c0ed39cd01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "86a43253-36b0-43cb-9c70-2bd6483d9a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319ea7fd-e62b-4dc2-bd17-2ce7d9df6da6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfece90c-7516-4c55-b568-8e5daf113524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba49bd84-15c4-47ec-822d-e8c4de493166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6555afed-4002-4d89-a41a-3eea0df038f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbeaf03f-de92-4b5d-a9e4-9c5c4b67dfeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c601ec58-30fd-4809-aac9-d540b7660d34",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af459523-cc98-4fbf-9771-38e7257c4892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0586285-22f5-45da-b8bb-63c255a4f04e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5563e8c1-6c26-4c32-87ff-2476fa45618c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "98023288-59bc-42c6-be4f-bb8cc7778372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11552942-450e-4ea6-9cd9-642b6e0a48ad",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd79cac0-89a4-4703-ac79-292fe40b3dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013b0e72-1b81-4567-9797-1a6f04ffb451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47324076-5ebb-48a3-8f7e-ba72d4b55b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b12455ab-f25f-4069-b3e0-fcc877b34ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c909743-dc25-4f9c-aa29-0cbf0aa75d8a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3fd1ec-3689-463c-a23f-38341c20f8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bcb7e74-b956-4b5b-8c75-f04e5af0513e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7933eb7c-2ac8-4511-a2e4-badd3dcec632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb45b1b-9770-4141-b859-2c619a119c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac39fb71-750f-4789-b8bc-3de693b36d3e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138fe48a-418a-4c5b-9869-13d52d14b5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c559f78-812f-4fb1-8d54-746743a052c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90239f88-1ad7-4ec6-ab30-e158a09bc122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8b2b7305-ad92-4e2a-8985-356a95cc18fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78c3ce4-2bc4-418b-a93a-a64dd428b99d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b96931-aed0-4628-93a0-e58766f96a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a65888-cd7a-4cc5-8116-fda21b6909e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dca9bbf-ec53-4c9c-9825-daab8af8a7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "817f4c2e-ddcb-44ae-9d0c-74b064013ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f4facd1-ad25-4b1d-b5b3-e95ac7929836",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79eb1d19-eef8-4943-aa2c-2e0f7a207d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "305a6b43-9f6e-4cfe-b014-803b0b67cbfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4e5686-e045-433f-88bc-d522585f7449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "38dfd4d1-cfa5-4452-9060-cd4e7786dc13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b7f754-82c3-479a-b45f-2028600d4675",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c49393b-b8cf-4b53-a961-c46ff98d04ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f89999f2-8913-4281-91a0-78456901e08c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9183007d-4660-473f-befd-d7d9781bbfbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af32e991-14de-440b-b3d2-1ea1d274bacf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b83b4f5-1f38-4988-a619-1e9059f10428",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7173b2bb-9931-42de-a475-9f37156f68df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd298dd-e797-42aa-a4c5-264e05c8b843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b3be57-790f-4c81-a618-95ad82e95f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e74c9a10-7093-4a99-b9c5-4b02aa0e1271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd338c6d-d1bf-488b-9106-87c904487553",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5197b5f-7abc-489d-b41c-16d6ca35cb44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5975418-184f-40bd-9995-11d9d1845271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb1534f-b3e5-481d-a458-3500e6505127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "830d1bbe-84f0-4080-8a33-da9ce9497f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3d927d-352c-4809-b08f-f4dcd2320b9f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3ec153-00a1-4c9e-ac86-3203abeb3911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "810deafb-786b-4da5-87c2-8963a5621715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d722c2f-0347-4bb0-957b-bc24f0b7f8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "affed649-6f97-447a-a319-fe7d0db4c437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa425b9-a5bc-4b59-96df-6c1db0d77d09",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65d8814-fc7a-4572-a84f-e54959ec8296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451f1f0f-9092-4adf-82d0-5317dd4914f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23075e9-730b-40a9-bf22-f4eb5603355e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3232ad79-58c5-43f7-a9cb-c13622bcc459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caaaeae2-9c36-4d3d-a152-47621740b396",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4a51ef-1632-4971-b5a5-1813163c5d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18d9d1f-df0a-4d26-b0b7-9ae3c7801c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b82a5a-9e99-4e88-bb0c-4adc846d8e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "84cae06b-0d24-4680-b61c-b3293fd82fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bdd3aac-68b9-416d-8994-f3084a4b5ede",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb8950c-d3cb-439f-9cc0-9e1a0b80632e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d423bd9e-b840-4790-be18-23a74da1030e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8809bab-fc06-428d-881f-087999a1ed46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3671fde5-c7e7-4ae3-960d-38edc5219301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f782a2b0-2071-40d3-9c59-3abe651285eb",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f89d688-7bc2-4914-8066-4c9dd3efb8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e4e6b8-95cd-40b7-ad2f-4d6a7896e21e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3ac3da-287e-40ab-b13c-9a755c7e86b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a361cab-f8a6-417a-a26c-1e23560f5e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34009df4-4f27-483d-886a-3d3814dbd541",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a82b89-6925-4177-8ef5-9d2c6876d169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b128f774-ac96-4059-bd64-0ad5afb71d7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c410c986-b8ce-4d96-88cc-cc2a8658c117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a703210-8828-4b37-a5fa-a9d70d510be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce05863-0882-40e5-b00c-d90817f91a41",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df646976-db76-4333-b955-6f9cdd5ed2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ed81c0-6d2b-4ef6-a720-4dcbc65b6b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0eeabb1-b5c3-4f3d-abe1-b7e38b995aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "885ade2a-fffc-412b-be70-3edc5618d531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "757033f1-aa46-4582-b9db-f148ade29128",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c95335-9c04-43ac-a9e8-263c67a95779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb0d0827-48a3-47ae-ba4e-687abd192d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05997e1-db9b-46a8-b46f-5d003686d08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e194c1-9d3d-46c0-a6b4-685ea8fd0933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0793f636-12a3-4e31-9e7e-b7d814461d51",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "434897fc-a4d1-491d-88ec-3ac158d4ffe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64ef303d-e545-479d-9c78-eacbd9af5a0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11abe287-5ab3-4944-ac7f-63d3f0b95508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e0dd4fd6-890a-4dba-8fee-6d02b500705f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e9264d-89f2-4af5-8623-93b45866a1d1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e518b085-8404-48a4-9c2c-34ebf25c03c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba6f8d7-d418-457b-8aca-2666d5bd0480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3d4f6c-2eed-438f-948a-11d1163fe206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6d54d8f-f57d-458b-8ccb-718a841651f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe129f7-af7b-41d9-b476-6a5b0811baf0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bfe1282-efa5-4c5c-81ee-9190079cc95c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6816d1a6-33ea-4a26-ae27-0699b0492d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82d197f-dd93-4f4c-92e3-f51494f1d995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "353a6190-a9a2-4efd-acd1-79176cd6c869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6e2f8b-1c1d-4015-9af3-d1b90134ca0f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b33383e-c840-4ec8-a01a-0411bd28562a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b91be88e-a35b-41d8-93e6-2cb7846c5369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859101e9-1a38-442b-b857-4b9a14f34932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "504c5e0e-bb6a-4016-ba18-69cfd26fa697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27735fe9-3942-4fae-afe4-be16b19928f7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88455d57-5914-4ea5-85a3-744689987989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b19fb30-02fc-4b7f-9abc-e36ba702a2e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce23edd-d613-4e82-9bf1-181f9466ac6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a10cc213-b885-45c5-902e-180109d2d486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54dbcac2-c216-45ac-84da-f9ddf11e1340",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c52373-ca45-4923-b3f1-069794a6caa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d270c8b1-9c82-4f28-8b0f-f9a02627da66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55def10c-8837-4ec6-bb1e-4ed732015dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "24f33cc5-27f6-4b29-a952-7357d7a4216a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91e57e2-0e49-422c-ad60-6f2b6878d73b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f8e017-e041-4e41-a74d-0918c3d56a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc6d18f-7edd-47cb-81e6-55d077723363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e843626-973a-4a55-85a9-0f2377d192cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "eda729c7-a62d-4302-80be-9f18397dd9c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40bd199a-5872-4660-839a-3a06e45f9fef",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead82f60-1558-4a2a-b3c4-164bf5b1789f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f45973-7dcd-4586-b372-827c5c32f8e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c73c58d7-39f2-4884-9496-0e2fbb0690a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "84943912-a58a-4113-bb8d-f6fd634f1d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8004b6c9-7b30-44b8-9dcf-fb8b9ca12e57",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70372ef8-f867-4718-98c0-6df6791ec631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edabfab4-a81d-409e-b245-53fff97274da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d3e5ba-e4f6-4d43-b4a2-7c32a84c96b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1627ab2c-ada0-49b6-904d-582979d2ec19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c226717d-f674-4911-a75c-9e37115cd29f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4d75b6-dd1d-4b4c-86bd-bcbdef333f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f56aa65f-dc82-47f0-9255-60646fe6050a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6639a4cd-c565-4d69-9d09-5e7aeffa8e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef37cc44-c878-4087-a8ed-a0f3dbd068d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac1512a-25fb-4428-ac65-6f4d5934fa2d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7116169-c8ad-48b7-8986-2144160c3b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff826fdd-ca6c-453a-ab47-4fbc3774f874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a128eea-d0c5-4da3-b8ac-dbc1a4892726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3843e6a4-82e3-4250-a492-a6af8029b695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac7da73-d035-4aba-a3a5-15902c473851",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf804e12-7526-43a5-9139-221f7d6defd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c81c656-4629-40da-bbcc-433ce807ef52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d66bfc-366f-46fe-9ec0-7bb5e8be948b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f30c46e7-bd1f-4dad-9eee-7cfddea94f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4266ce68-e2a4-43b2-92fd-593e3beed71a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "219dc831-f684-43f0-a2b9-ae90b0aab282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cbf3c4b-1bd3-480d-96ca-6b84307d9071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e6e0df-8080-4eee-aa64-b0cea5bf2104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b40b93e0-b788-4b5f-b2d2-6a3ed3d0f9db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f29db7bf-0284-47b4-bcb2-c92eaec3aa01",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315d5e81-c1fe-4d61-803a-de00d0d91ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6c71718-2610-4091-a121-26e8f46011f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f67a4af-bb69-48e7-aed3-25c822b1baa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f4d64a6-dd90-4360-b9b8-2875d87ed04c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb4d749-b901-43d3-a8e5-e32270be9f08",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a11665-71bd-4656-b28d-582169718c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955a9635-c469-4bbb-b3b9-f9d89885a96b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778dcc53-751f-4f93-97d5-cfc4a9847937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "756c390d-408d-44de-9a77-0c67cdfb2cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34a342c-2adf-481b-b087-30537f037602",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2168cca6-d629-434c-bab6-d5b5fff2a8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a012ee35-01db-4cbb-8298-13e21ae515e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef2468b3-fd69-42ed-924e-d038a70f3c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "efe168e9-b931-42a9-8108-2a75eee70b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4762a4b1-69c7-4e37-831d-1f2fd7ed00d5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a89df07-8767-4e65-90ae-f0ac998c4697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce7fa35-8dc1-42b3-9eb4-f514a7a70719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc08d3c-e45f-456c-9808-034a2e3bd370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "147bf923-6d98-4b8e-ac69-5c1aeed2c152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6a0338-02c5-4754-93a6-74464774e91d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc900bc6-baa6-4db7-9d77-a79dd33bf568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df95d5ab-e22f-4335-869a-1beada38a916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b45cc8-9ce3-4bfd-86ec-24fa39c8837a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0313a6a2-1376-435e-b0ca-1a005b7a083f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c857d2-2cf0-4111-99e6-8649cbb37d00",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef22579f-bcc6-4c3f-b217-2e878357657f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d405dd-ed88-4ecc-bf2b-3148b3224e67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03424727-3274-48b6-86d2-6a10ee58295b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cfa3aa93-2b48-4be5-8af2-f1d18c4234a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86aae4ce-23d0-4eed-92d6-9487a4e6d3c3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db58f4b4-955b-43e9-bb41-70ef950d3a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35e3d526-1858-441e-b00f-8e06816fdcac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a9e75d-7c9a-4f93-a38a-e32da0212555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c968ed77-0228-4471-9b77-bba8eaa41656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863cec9b-b9b9-47f3-bea8-4a34202dd5cc",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3f234f-cadf-49f2-8ca5-983f846bd385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "466f700f-aba5-48fa-ada6-d6a632193891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc042b3-19fa-4e69-84c8-ef6099fb3d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "00687905-3ebc-48aa-9581-63909f21766d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e17e824-40f5-4886-918f-e013ecd45193",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0cd9ed-d70e-4ef9-babd-3c0ae9e42c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c953d9d-8a4e-4d71-9f41-e09a6be4ef55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346c0eef-9d3b-4336-b878-5ea09c00f666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c9b8cd-874a-4e6d-a903-0d7f00a692c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bc6219-b494-4f94-9851-c5cd94e0ddb5",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c6f997-f437-455f-8753-5a08e1378f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df5176b4-3e47-49cc-adda-e2d328062408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30dced8-49f0-471b-a260-01fdea7bc5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "725d0640-83a0-4df3-af13-9f62817c4fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db793b87-2b7d-44ed-8cd7-d0c42d5812c6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e4b7be-be3b-492b-92d4-799237bc8894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0627feec-97e9-4d25-84e9-fdb125739ffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9ee268-5da6-48ea-b44d-41b44ed2bef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e94eb10-316c-416a-b5de-5c08846634c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc09970-8696-404e-83d5-b8e4c9ed7dc6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13420996-8526-42e1-bddb-d39d229879cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "953ba524-6c7c-45fd-9199-80249e02fd77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54a7226-cb40-4cdb-abf9-9830bc15cf23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "007abc28-bb28-4adc-b058-74223a03c900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6869512b-0ca5-40b1-8f84-21bc0d97d67a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2360c0-c2d8-44a8-a4e0-0bf7a20ffa07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6020b48-8723-4d7b-96a1-9bf8ebf9e35e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e3f824-a581-4dcc-829b-080cdf84aedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cbcadeb-60b8-451c-891e-7fc7e109b438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02c950e-5a4c-4a88-bfcb-1a5a23585477",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd49aade-8548-45d1-8ffd-46ea0d843eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c85067-e1f5-4f81-bac7-01eb301fdf08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d27b52-8fd9-438f-b2c7-aa4d7f92d151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ecb5363-c208-4380-bfc0-d3bef7928f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639b6528-acb1-4736-98e6-1ee48503a664",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3030f3d-ab69-4f00-8d8c-26f6427cae58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1974aa06-e319-472f-b498-a4f5ea855ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8c21db-69a6-45e1-9159-780784170c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98783dcd-6116-4a69-884c-ea5977a68b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271c3a05-6c16-435e-88c4-b2900fd5b21e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2db3969-507d-48e5-9222-47708d6d1fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19c04399-42d6-44fb-8a22-eaf3a16028ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b825a50-6057-4aa1-b734-0f75169ce52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d969692c-41c2-4c74-93e9-3fda6eb4d892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2818bf-d5d4-4561-9005-bb930dfe7fbb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6811224d-67be-4967-8264-ac8a2d5fcb2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e7c7972-3a72-49bd-b203-8265b465f436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971c99f4-ea9f-4498-bb23-8e030dd5993c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "17db546b-e468-469f-baa7-2ae7229a356a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3f129f-84cb-4d7a-a54b-a9b416336fed",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "992d4d9f-0d4a-4247-bbe0-cbe220f31b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1ae33e9-394a-4e04-a7c1-4fc6b4f5d652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcb02c4-d667-40c2-b5bd-54d7efec4954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a6f34f4-3b43-41e7-9cfa-d2eb4272e971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9ae8c3-febb-4c3d-90c3-0b5366bf5d32",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a490faac-3397-4ed9-ada6-4d84eeba07ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "663c4c95-4a0b-4748-9e47-5f97714a8bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2357ee-a406-4c96-b7ce-9407d3a5982c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "71384190-97a5-4303-aced-058e8cfd1a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66202b6d-9da6-415c-aa42-4c34522d8a80",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a81c60b-06b1-44e3-b9e5-df884eaefeb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01e782d5-815b-4717-829a-2d8b51fb7ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399fa470-cf1c-4329-a1cd-95d9aed14e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f1cbeab-22ab-4070-b7b7-e982465bc5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114fcf77-103d-451c-8ea8-9911439a48ef",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6f28e7-27da-4b39-9ac2-b9d338c4d633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5899024a-658b-44cd-b425-9827963f37ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06db59ce-f3a6-41b7-8abf-ce7cdcc58bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc45137-0b81-4fd4-bf49-dd363aeeb887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8b37ef-39e6-44a3-af95-7629bb38b106",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952880a0-545d-4180-9003-0e767daa4508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff725473-30fc-4c3b-ac7c-de37160ba758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a341cc90-ca0f-4b05-b51c-eff927504e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5db8d31b-7afd-4543-be6d-6d746e0da7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a177134-60d3-4d9a-b0c6-5800f8ec0be5",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e398268-b8ba-4d97-a2a6-8c3f3eb6e108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5516e85-957e-46e8-91df-2ad9b17ed18d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9000e7ce-a57d-4669-b7dd-2e3a2496f81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f546471e-04f5-4d29-b988-be23f90a54cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f01f4f-06d1-41a3-ba8c-ce9e350beab4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9156ee9e-ebb2-4278-a6ce-4fb0312d182b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "40755124-7f5f-4987-ba08-ca59c9da0b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a968db62-1f85-4b2a-9390-c67b00dc7fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd59c325-59b4-4ca4-aa4c-60ffc0a568fe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "80a93374-13df-4a41-b801-d8d546244775",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2870a085-0408-4f55-a4a7-b0b56d9bc963",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b58d24e5-3b7a-4e81-a6c3-d865c50f2c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81daaa48-7ae7-42df-b85a-0a5428886149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51440a4e-27a6-4968-be52-484286268823",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d5e6029-f879-4c6e-a85d-aab97b10075e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb567d98-e424-4b1b-9e04-a6a9f83f1c90",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2adc062f-463e-40ee-b787-3fc9db9ebf4e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6dc2b1d5-505b-4c36-b9ad-99e0c097f7df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50d61f84-5291-4c8f-99b3-09e083f3ab6c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fcf43fbb-bece-426a-940f-e88ccdd586d5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e2a7a50c-cdc4-4a85-978b-16e685b9a0ae"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9cdee6dd-5a5b-49bd-957e-715d1a4ba472",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "44f575a5-4485-4965-bd79-f2603bb09500"
                }
              }
            ]
          },
          {
            "id": "18afa439-b4de-44e1-8b1d-efba29f4626a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f88095ea-a4ae-4493-b911-e9831bf1fd65",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "0fbb5cba-f9e5-4402-b327-f98269e4a605",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1e281a-acef-48ee-86af-515c6f888130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6885dc48-9d18-4fbf-9500-ec7b62cc124f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250b3347-d6ee-4ec8-a2a8-34a42173b59b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3ab823-e90a-4a3e-848f-aa759c2e5c7d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ed00db58-56e1-4962-9ee9-8d6d42d3dcbc",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f98b6bd4-049e-4ba3-8eb0-7dc351b588fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2e21b559-0a63-45e9-bf05-0e774d236758"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16085929-5a23-4415-9a94-6bf288b8c3f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7ef34e9d-a84a-405b-a685-33be13514531"
                    }
                  }
                ]
              },
              {
                "id": "55d148a5-eb67-4157-b92b-6784cc4d341b",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5917539-890c-4be2-a241-4ac959a53171",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "394f2e54-376a-47f7-91d2-c312ed10dbd8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d54275d-648e-46fc-9b48-4a7514845f1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "28a91f8d-055b-4705-aedf-58a38135783e"
                    }
                  }
                ]
              },
              {
                "id": "72b12f62-d07e-4959-a642-3ccaa7cc0b2e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3eaf0f61-9476-4355-8151-a6008905f5e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "901ee65b-67ce-419d-80d9-4f2c89486c37"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17658105-e73e-4561-aa5e-f9d2186b3e74",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "155cb19a-ca8c-45b4-818d-7e40b40dd0e9"
                    }
                  }
                ]
              },
              {
                "id": "7042ff85-f624-45b4-9f21-32255b1a4a48",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f87b3a1-1ed8-41e2-a6a0-4de05b1738dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f08e2dd-3c72-4420-8494-ed6bfe75b266"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "edd77ec8-1259-44d1-93f9-7174f4f36981",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b0603d94-b277-472a-ba70-1613f7a1dc6e"
                    }
                  }
                ]
              },
              {
                "id": "3c691324-d820-442b-94d7-a762adbcfe04",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f728ca9-6cd9-41ce-9ccc-c509a2458dca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "96704c88-c95c-4324-8fbb-beeab10f497f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85c070ce-68b5-49ac-891d-abec154d61db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c1590309-8b92-4791-a505-6164e2357a4e"
                    }
                  }
                ]
              },
              {
                "id": "4c702c78-abce-4715-966f-1fc4bcfc42db",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1f0c963-03fe-49f8-9eea-bd145d1ee28c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9af0b347-c211-482c-8a0e-52bcf5930286"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "336e8e9f-37ff-4416-b5dd-a0ff1bdb4824",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b39c2d82-d150-4a36-8c66-366b1a581357"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "81733634-8840-4e4c-8c7b-c521633286e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b312e2b-71ba-4fe4-9c8f-a0f3ec3c4861"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "519115c6-a263-49a3-941a-6ecf9d4135a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4ea94fa6-b8f0-4462-8862-38a1651b0037"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f57d813-9209-4776-9f90-329f91d41bd6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e0c84069-e2c8-48e0-aaf1-3f35e059ba1f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "82340db8-27f0-4b89-870d-5952d897ccad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d89f1288-e7c0-4569-ab88-c00e8d99df25"
            }
          }
        ]
      },
      {
        "id": "1da6ba4e-ee2a-4e1a-8d6c-dc9312f928ff",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ebe4e8ed-1e26-4b6e-a7af-f7d532362243",
            "name": "Negative Testing",
            "item": [
              {
                "id": "13a9b35c-a02b-4959-a92b-d2fa1ed96a15",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "917f62ac-8199-460a-965c-cb698912620a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371a5522-1e3b-40c4-a3c1-cfc63b4a7bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb556842-4ecc-40a1-99f3-9ae09ea7aa25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb21405b-2d27-4ef2-8448-028c778bc7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6855d6-035b-449f-8694-a1d9766995d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61470083-cd10-45e1-9fd2-b9ab2fd3172a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0743afc4-15a8-4701-ac58-ef0489a933e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ece38d-376f-40d0-96f0-8a53d5c67e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c773cff9-029d-450c-b065-79951a1749bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf7592ae-214a-48d6-9719-ccba220812e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98d3d58-aadb-40e3-8486-53a71b456159",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc88bee-42e9-41f0-a4b8-9c2eff3bac0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "752caf06-e515-4374-99c2-c090e3674f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78b6164-8bf1-4b0a-846b-89e8b4ddc777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef3a2a0b-f403-480d-a10a-3a1373cd21db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8993c33b-28bd-4f71-82e3-d4bacc1d078d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa985e2-e968-46e4-9b2a-9f6965ae0ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23605ddb-1b00-488f-bbae-73372e7e6c27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a3b288-93b6-4ee0-9dc3-8c736f54d2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c816173a-04af-49f8-82bb-1bcd5c1f2d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ad5b9a-ea6a-40b2-9673-e8716a63a189",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31eb71fa-816f-4a59-8ffc-e0301d22e6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a9b1dd-bfe5-473e-82f8-de190de380af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d9cc4d-3719-4602-b635-24bd798d111c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "01ac6595-68b9-4616-813c-a60b8d234249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3365d9-111d-4631-90fc-1834a2b4c7ba",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca6ef7d-6bd5-4687-94a3-12b1c81e7ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40d34673-2bed-4362-a3b2-fef5da389a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8a5685-ef84-433c-8769-5c4cd4fc706c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8788db8-b494-4127-890d-d14097814a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72482333-a44f-48f7-bcd2-ee784fa14f97",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1522d84f-aff3-4553-8a3a-b15543b7c947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "743acb3a-ec17-44a3-a9da-d5a3a9b16d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2618e96-f9e2-46d8-a424-9aa06e2f26e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d69f6178-51d2-4918-a748-5f4127e029c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a942f7c-2cad-4693-b384-a7303e89832c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa871a34-8262-4fe2-8066-d034d2cac94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c252c3ae-3a13-4a9a-8b34-6f6f930364ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30f4715-5503-49a0-8f67-8a575c023b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "089e44cb-965c-4c89-8ff8-b3bd56b53cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099299ee-3f74-41f2-9b8d-d4d47ebc377a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7816de12-5ee4-4f4a-8821-09987b3fbc14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d184a69-7016-4158-8904-1cf059b3b6c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae759cc3-1ca8-44a8-bd23-1116fd664981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65eabd6f-0bd8-4db9-9a7d-93402f4786c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9048d3-e3d6-4f49-ab22-e1ef2f754aea",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b898d4-e872-4880-b189-6f32ac9a0acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c1d8bee-ca7c-4aaf-9781-8cba1c2a0047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf83a6f-7f53-43ea-bf5b-a3613f6172a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "962f41c8-1e90-407d-b84e-58fdd7b6e447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc936154-96d6-4a29-8d7d-9316a2f36c5a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c00f1a-9580-4f5e-9827-c038681619b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f66cd5-5ace-4c95-b778-b05d350fbf90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b0867d-5ec2-40fa-b8dd-23cfda0549e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "38e8522a-977f-4714-9bcd-d9356c8045d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14886f1f-1908-408f-8043-576847a5eda6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e77d52a-86e6-47be-b640-1e0deb67f9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba5e25fb-252a-438d-8bcc-70c11aada398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52c5cd7-5f93-4569-8531-3531a4fe25b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c20ba902-5df1-426f-9bf6-53b01bf381cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6011ef7b-7d51-4091-bc22-09f78818e281",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18ac21c-c753-455f-a8c3-4497b5fba8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab557fa2-2fe8-4f8d-b1fb-faa5b0de9d3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d076e89d-a0bf-42db-92c6-96348336013f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "183cebd7-ad20-465a-9389-013d79fbf1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a330f28d-31cd-4234-b11c-47a3312fdb03",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8afbf9d-e666-47a5-94a2-36586ac4fac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe59e147-1b25-4f27-b925-313b661ffb27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee06640d-7165-462d-a1bd-ebc9ed71c420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d6a17c7-47f8-467d-a052-7fedebce46b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b68503-ea38-483c-8b44-ee019c526961",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e5a4be-00fa-4894-b49f-6b3e0f5186ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34b2a826-f37a-412c-bc20-1d6ebdc108ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0acb1754-4841-473f-9b95-6f2c4ee2a56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f881f333-81ff-43ef-ad74-c79750692372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e9e865-922d-4d9c-9c46-f8e3d0550f6d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5793b488-a91f-4944-9af6-40a168104481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e413b290-ec38-4ce4-a357-3415428eb5aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ea203b-749e-4fb9-add1-7277a82b24b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "254d2956-6a1e-49d9-a6c5-76be05f88785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe50cef-62ba-4f52-a417-0fe0d6cf690e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c56ebc-4ee0-4c96-a72a-ca601fd294de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c41cd9c-5c43-4543-902a-9b4d1b2bb20c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8571fb96-4025-4982-b962-329382376e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1809adda-b247-4cba-bf49-fcb7f7e4d737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28afa483-7f22-4935-99b1-974402a92d1f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8cedefb-19d9-4d49-85f8-23aab178cba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d46da33e-6f4e-4328-83e0-20402d1c941c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e376328b-38ec-44f7-8c70-8360b8c25090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c256295-236f-4145-8638-2e82843c0526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66b289a-044d-45e7-b142-0b8044eb90f2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cfcb4c2-3173-462d-86fd-729c199a1a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcf6c4f0-7af4-4ac3-9f0a-1c35717f1aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb922175-7929-4f69-a13a-f0260249965e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c25cf5a-6b40-4b17-aaec-ebba6a5dd5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02abaa6-54db-4bb3-97cc-48f33b9689e0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "503338bb-9a46-46df-8520-9852e6dd4667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fda163a-c533-4797-af3c-e06910d40a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864d9961-af2c-4d5b-90c5-fad516236ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80af249a-6d9d-42c0-b295-56638d8ad26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4b8da7-1830-4b0b-a54b-f3b181da4527",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa3ae27-c916-4422-a79c-8324ac3d9b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf1ba74b-a850-4d1a-aaf2-83434be724ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024b68d4-0f84-4b0d-9919-1e11233ca00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad193c6-920a-4053-a14c-242597b6de34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac399745-dce2-4c2b-b1b7-7692470f1167",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e2dcba-6645-4899-84cb-9d4be716d56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c58a690-36a1-493d-8dd6-8d5681f9c245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75476a6-b5ac-4d7d-afad-bca86a77042b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04dfeada-fa0a-4d63-ae19-cecfdc8d21c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3624d958-8382-4458-9be2-5b4edebabeb4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80bba6e-35d2-4b21-94e9-3176cb536b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f0d6ce-4c18-456c-805a-61428f710af2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92192d1f-f6c2-4712-a0b6-3d74ba516a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b576bd0c-0aef-4140-b098-1d76d4fe3371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f5aa3e-5c12-421a-93ab-65415829f35b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a3497c-626b-4b5f-811d-b5332399ad23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec334d39-e8f1-45bf-8590-fae2f4c7e464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3d3d35-9c0e-4bd1-996a-04e2213ff1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb414f4e-fa8c-4cca-985f-de6847e8a3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3822ed3c-2495-4c20-9adf-be4c64fd4dea",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020734f9-ae56-4bd0-bb8a-1b6635fc4b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec6c66d-8ca1-40be-af45-abc2f7d277d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8aa3494-2471-4f7e-9109-82d2a9283afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c35607e-cca8-46ee-b163-34b2ba720d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba50474-a89f-404e-8a15-50a70714b413",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb71aa6-d480-4ad8-b786-1e54fbe689b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb8a8e6-d54b-487f-9d88-fcd658bc5712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db17d269-81ab-4584-8d37-b4f8480a52e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24f683fe-715b-4e8e-9b15-0d5c9e2d6cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f52c4b0-1742-41b2-9619-1272974f1b5b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f551a9b-ded8-4959-8733-9fdf904e7ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4685f98-0c50-4331-a5dc-5683c3116614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0de38cb-9fa6-4527-a81a-d729122040eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1f2868f-71bc-4bb6-9a86-26a161c99bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bea5c29-2a53-46fc-b3a2-c421a856f246",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4271fd-526d-43bd-a650-512d150f0e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e8629e4-ac48-45c5-b33b-49fb518ea44c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977b3adb-d496-4d0e-99dd-86077f537987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a217f995-75d7-4b97-b930-331160ff32cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e972c095-a181-43a3-bd87-3f89d942f68a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d294e210-b516-4fb5-98b8-07f3ee82d5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42794d2d-ffbd-48bb-ba2b-f81a24df0cf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6178cb4c-ebf9-4200-b54b-a15d0539063c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56de6ab4-5345-41bb-9861-9bba36a04737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e91f0a-c3e1-40a8-981a-d86bd2eb26cd",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8709226a-bdff-4f16-bd08-8116722b059e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c74f4f-8b98-4042-ad76-c1fda27cb06a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e4752f-6833-41ed-a739-325520fdc5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a94d885f-d80a-4303-9d0b-9a0b84dfe987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ab0f1f-d273-486b-baa2-a344450f7217",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365a5df1-ef41-45d0-9702-cf8ec95bbb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80468d61-7289-4751-8a16-f40de559c9eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a63a095-6a9e-4231-9a87-d27cb5115ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be29b2cc-a1c2-44d7-965e-42512230ada6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5d29a0-cd7b-4821-b0e1-5ebac5bae8eb",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b576d752-a817-4e0c-902b-ea9accaec034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3081c8b-12f2-4957-8383-53cd71d31eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5cd7b0-7295-43e4-a474-75beed031ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b75c04-2c72-436d-acf9-46c1f79412c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973f6557-8f28-4aea-a0fd-951d0a62bb69",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2811decb-e10f-4c4e-8bb8-9f882b76733e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f09cd54-c82d-4be0-9aa1-6920fc221bb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fbd3b9-b85f-49bc-aee7-23e338f64d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dff68b9-f5f8-478b-b360-f2d6d66dc2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2bda15c-e241-4ad4-bcb3-7e8e20968554",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f724db-8c5f-4be4-9d00-e57aae69e0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3e1fc28-eb1a-4551-9f6e-9df182c60892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026aa7cc-24c4-4c01-89b3-bf7fc01b628e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f344933-3004-4116-8d27-a1c87a2f11ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9b5b34-4f7c-4c6e-b5b3-bb4ca7d739bf",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b3516d-db33-4e52-9f49-cf6f396e43d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7cbb46-76b9-4093-8440-36cded9b5e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c87310-a1ca-4135-b740-99f28e02beba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e38384c2-1157-4c5b-89f3-e436b22aa3be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643a9fdd-0ae2-4f0b-8113-eb7bb0b51b4e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6fca5d-c4da-4a06-8828-ac85d6587080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b86452d-1dde-4dcd-b23d-306dee6e23cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a421148-ebb1-4f5b-9bfa-2a132ff4f8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7022bf6-ace6-465f-a902-a0af00bddcfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26c6405-b5af-44a9-be60-54fe7e6f352a",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eced305b-cee9-4bae-abcc-f69870ceed56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13f7c3ce-1e9c-40af-9d5d-05b4e6a7dd05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbdcd7dd-f8af-4aca-9b12-28ba0e25c956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15d7398c-3da0-4ee8-982c-86b4c0ae37d9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3fc78e85-74a6-4311-bbd3-4bfe46d509c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cef1bfeb-d911-47d0-9d18-3774cb1d5568",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336520f8-9d78-4202-a364-ca6c648a62c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4d72df12-e8f9-4f40-b65d-7433bab6e7ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf3a919-3356-4634-b006-fa2e47689120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc754e2e-f046-4039-83c9-faf4ff694542"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aedec198-bf38-4e04-bb70-d68412083a21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "daa94fde-0ef8-416d-8bab-69d2d4a81192"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c11fea93-c470-49aa-a0a5-e472fef303eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a24be282-192f-4b6b-97ce-37fac06698ea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f72b340e-87c7-4ad0-bcbd-426ba285e44d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d90e23ff-c397-4192-bd5c-6a9ad21f98b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8678878e-964d-4200-b3b2-6a282b35b67d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f1a7f3a-2b81-413e-b385-1cbf2600ba52"
            }
          }
        ]
      },
      {
        "id": "e41b722a-9d0e-4a6b-8f31-7157011c1329",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e461ba47-a392-4b3d-89c2-be25b0e74a33",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cb6bdf21-33ca-465d-81d4-d98a8f840cac",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9259b23b-e865-42be-b5be-646a27ecc20d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "116cc34f-7f0f-4d98-8a11-aee987b365bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99bbeec2-0be0-436a-be8f-6dfc17148f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13851efc-764f-4147-b89c-65398b6a1cc0",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f80efa-3e8c-4e06-9053-fb157b6577d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c2f2609-4d8c-416a-ad5d-0ec92e4533f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1521f8-f18c-472a-be07-c979fd3832ff",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4043b8-fffb-4886-8532-791ce6611925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07f0135-9045-4919-b0c1-f74379771e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ed6e90-a653-452e-aad6-940c01aee927",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04194cfe-e6c5-4951-9145-87dc48be246f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10eb912-5585-4090-b97b-d3785d97c848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0cb1c9b-1d3c-4aa0-98a7-391660909d4c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35dfb1f0-e12f-4928-9169-6b9518d83b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba327b85-7160-4d55-a65a-a38813f90eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae59436-0dc7-4233-8618-9eb1d7587a6c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce981dca-a1f8-41c2-9b94-cb43b87aae7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d37852c3-2377-4b85-a19d-c2304078a7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5390ca1-64c5-47bb-a72a-b38a1924be2d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9a5393-c35b-4d31-b300-2c5519fd0e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ef74f5-9192-4ae1-8ffb-1fc26de13a37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9defcc-d04d-4457-a9cb-80d919004a0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c12568-9c60-4a22-af2f-b7bdcd34533d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12ae79c-3c43-453a-b696-ee5d767600d2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17cea25c-0e80-4637-87d1-48674216c8bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69dbd052-3541-4bab-bc4d-9fbb53e4e4c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7050e0f-c1b5-4d36-bb99-d524358411c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "462a3a1d-4bd4-4b04-a583-29b40fdc7800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211946e8-f8f9-41ab-b35a-495b12726bcb",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae1e735-fb20-42a6-9982-9064ebce5c8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0db1b245-7af8-4eaa-82e0-d510a444821c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c7dcbb-d12f-40d2-92f7-3e20961226c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7690373-ec7e-4ca5-bfea-990e48823b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a36353-9f50-4e80-9569-ce773136c438",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "affa486a-8234-4090-8682-d44a4300b239",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34d7d9e4-da39-4fd9-980e-9f97d26f795f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4be28d-2802-45f1-a778-628657d8f25a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b081d76-8d05-46a5-80ea-2a1150431599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29b7d6e-6157-43d2-adfe-162dde3082dc",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6bf5f3a-5e1c-4229-98b4-c2d2482c0a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a1a50c7-f673-4ca1-bbb7-ea5c03d2f155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ebd260-9c7c-4e86-9390-06403064ce13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea96b425-96c5-48d3-a4fe-6af6788ae8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8908c4-1679-4473-b55b-2e2f47450c3f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80723d61-857c-45e6-b1ec-1bd46c48e040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af453f50-ce6e-4319-bdb3-d257a9070cef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e771fc5c-3101-4671-bf52-5b2f6f8fa37e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e13e0eeb-772a-4e30-9b1d-735083c721f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051e987c-e0db-44c9-88cc-ebc92ee14894",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159088e2-d207-48e8-af4f-f321578827ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4853e608-91af-4cec-8caf-e7016c11255a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d01714-524f-4972-9ffc-82dd3eb3fcfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f326149c-901b-4325-b4b4-c9eb81d15dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939e553b-ffd0-4cf6-88ce-a8479c8febc9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c1066d-55e9-4caf-98ad-7bcb88d54760",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4371a24-0430-4a9f-85e4-6112c670d999"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23bf8e21-b47a-4a19-88e8-8bd6aae575ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e6acbce-dde2-457b-bc07-aea08f18bbd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad06b57a-6a92-4683-afa1-7de000b8b808",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9222e167-12dc-4006-80b7-3c72e3740294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5867c245-567c-4d54-8317-31d487a4ab7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ebac2e-fb60-4850-b92d-ce1221c169a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545aedef-6f46-4db9-8678-ef6db1b7b0d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111edd20-5af3-49cb-96e4-71047f5e8bfb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b8fe0d-c06e-4096-969b-3bfbed09b75a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11225ace-5438-4da0-9651-881f9dec3611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fabf1fd8-1361-428f-8c56-61f6634630e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0302d6f9-c1c2-416b-b2f1-dff6ad026b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25fbc2a3-ebc7-4e79-b435-49deecd30a24",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd92f711-be96-4560-add5-b33f80c66762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1fe4c95-c99c-4440-bad3-595fbd376534"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a027388-ba5e-4ed5-bb3a-2af03746cb87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4663e48-b062-43ac-8b8e-6839d1c00248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e129e33c-9a4e-4b7d-aa13-7faba7f17327",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeeef97b-1361-4ba6-a56a-e2ae97d164af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c6d503-902f-405a-8c6a-cd69f81b9301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a785af85-badd-4ef1-a183-df1820f247e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e79e7d9-58db-4588-b6f1-b1798db7c5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb71c6f-a0ad-4a2e-b104-b7efa7715a99",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef47ff47-1478-4089-bb4f-3a4c4a48b76a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23d24717-1e86-4663-a2ea-2396ba38489e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a18f85e-e0cf-4c1d-80cc-6fec0c465ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e99308bf-48bd-4057-930f-99466d6aaacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b2d833-e78d-433a-a60d-39c055737346",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f01094e-6dea-4ccf-ae2d-a78cd2df025d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67fa1040-1bae-47f3-a458-08c36d09e328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c2ccec-eb59-455a-9a8d-c9e97386dbcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fdcbdc4-c955-4be3-ae06-a048947562a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396af264-0297-4526-8052-eed5bd08ed1b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d9bf69-ce7d-4551-8ac1-22924c100bc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3150c49e-8a7a-4e17-90b3-72b95f191f5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9cd5c4f-7c0c-44fb-a49d-dd7046b9954b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daa1496c-8fd8-4ecf-9880-160b32a27d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886df11d-72ee-45d7-bb90-b2fbdd089e63",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d76a5e-f502-421d-85c0-33266259e3d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c83d394-6200-461c-a9ad-398940f0da1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77daad10-b727-41c1-b511-c17a92528e28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e873f2e3-4f26-449f-aa47-a559980b8efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d725b6ec-3a5b-4c77-ac27-76d0616a97e6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980a23bb-14db-4886-bd01-e80b57639e67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b307ff-a0a4-4692-a06c-ca90934efc67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1ceee9-0257-4c3e-9cef-85f350a9a3f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc09c53b-0046-4680-9f30-13114438af7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db4b4ce-d5f6-42f5-94e4-0ced8cc6a886",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e48a20-5b1b-4d7d-a0a9-e52b3512b984",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b864e8f5-2d3e-40a8-99d8-1924988b089d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1447481-aed9-4fb9-8e3d-5579403cdf7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "314576bb-e0a7-4d09-9315-3c1c9929a628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29edecb1-9cea-48da-b640-9f7e74a4315d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533b54bb-50ea-48ab-ab62-80cf4d1a9cca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc0c3959-5404-4d7e-826e-5f19ea5015eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ed1c24-f646-47c2-a721-2ef9588a7667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db60c4d-4eee-4e81-8e11-d196ee97bb28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db06a1ac-4d51-480c-90ec-875625c417f0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0c16b7-6dec-4ad1-8360-c3b7406e7dfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f78d012-36d0-4ffa-87b2-11ddb18059f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a0e843-8eea-4cba-9a4f-39a9d1146041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d73e8f-4841-44ee-ac9f-0eab358ee1eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a669e7-36ae-40af-9e28-87b16576258e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37494e16-9dec-449d-ba0b-01b9117685c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13bd650e-dd1a-464a-8e66-bc2113bd10b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "551cc515-5a08-4d56-9102-017b2ba3b0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee0ad03e-5cbb-4097-9d1a-b5c20ffc6081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a448e007-1812-42fe-b390-23ecebb3a68e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14cfb526-ff80-4bfd-9c65-b7e7dad38227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cdfe57a-015f-4902-8799-2076948c47e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22915e3-5df9-4cb6-a567-e79ee2e426bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34db4c38-f52a-432c-8b83-1d15d495d972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab984e9-36af-4f0d-a047-fffb8c20130c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d88af06-c033-44dc-9238-70d7c57523b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b437b28a-aca9-4e49-b923-6c64461e1498"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2039d16-3877-45b6-89b7-703e9171c560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26bc9d20-93a5-4fb3-bc20-e25c1676f000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63754325-fcee-4ed2-9462-856eb16dd947",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd380b3-e9ab-4811-9654-b35fdadd732f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e676a389-6b7f-41a8-88aa-bdea8f169443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f42230-5696-46d8-8e55-74577336149e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca91b2cf-aac6-43b3-901c-97443055f1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211453ca-36ad-4832-9425-9e1b44a71b3b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c293898-31ad-4fa7-ae5e-29ca89138d1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e1eebee-40f3-4f82-99b9-a18e346d9a3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8853a0-4fed-4967-9ed8-abf4da752f44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c69afdf7-2adc-4a80-b241-3391fa3c92f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2094621-5ea4-4c66-a06c-c8fa6eddc28d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e5de6ae-6d8b-4754-8a24-7e31696f8445",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1491ef71-26e2-4852-bbfa-42b00ae5d308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1773b699-e585-4aab-928e-c296a71c3e7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0539ee21-92fd-4e21-a9c8-ff26b822578f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f2497b-582f-4039-864f-007444bdd2e0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58115e27-54f5-4775-8dcf-eb45143bf312",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b577476-2121-4d9d-9197-d9634ec92368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b2b77cc-2267-4de1-81d4-48a3e37fcb7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a53425-02d2-444b-9e45-4b5c64d9822b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b32e8b-5f09-4432-843e-ebb6120fe8de",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f8f79d-3861-4088-b982-8c664ba8eae4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "197b9882-eb62-4579-9a78-9c221d135718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e5a839-900d-41a3-9c28-5cfc8f5232da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512c8683-c1ed-4e16-8949-2a852db8013d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec0034e0-3501-4357-8e7f-2edd70ff082c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85488a9d-bb80-452f-86ed-aa9c8dddd410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc1f7cb2-c47b-48dc-91a0-8072cb657824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf35c1a5-e5cb-4ae6-a605-149f8f43ff71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3059927f-b2c0-4ab5-9d54-f991863c4dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e853c9-049b-44ff-b96d-fafb9c2acfcb",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed25fb0-0c1d-4c0d-a465-7839cac9552f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f70fd41f-72b8-40f2-9581-7bf27c5368d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "208ca21c-0929-4137-8ce2-770585ab2488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96d7fcaf-e4de-417f-b8fb-045a436cf30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f20452d-0596-4509-9828-5445b3e8ff2a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b96d82-886b-4a9f-8c8e-70bafe663567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "894a6f54-5b5f-4c87-be53-97246d4715ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e046c052-7c20-4a2d-8b54-a5b427f97b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5bc74fc-8157-4d00-bea8-cd7465c27f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3068343a-1d06-46be-9ec6-a184e20392b2",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd28ae9-cf95-4d74-a28a-bf8c432e8eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "221165ea-a7c3-4250-a460-a62e55cc22f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3755d606-3f4a-4efd-a51a-d9f4970a9764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c639ee0c-0147-4db5-a947-f9ee95e4e204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324f45a7-5e69-4232-800f-7b6614fe1ab3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93bed062-0832-4d47-beaa-246195883444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb22b09-7a4c-43c4-be17-e44836a634fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522585c9-cede-4ca4-8e5b-148b233d034c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df894dad-66bb-4df4-8298-0b19eac6ee3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110afc4c-0a95-406e-b7dd-03eda2a5cf8d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62402c63-c396-411c-953b-5b7a465affa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a4d676-05d1-4aaa-8434-e11dd7cb0d9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00724c1d-2c1d-4f9f-a8d2-77e7119dc7ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce5e0e7d-bb1d-4f9e-9cc2-67cc7658dc2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec39f863-5965-4150-9f84-a0e240df1cf2",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edd658b-829f-424d-b995-fad777c781da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c991290f-d42c-43f9-a6ff-2803612dc4b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64582e3a-c2d5-4c11-afc1-24b2e4b7d779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cfc943b-a3db-4f49-882a-e256c013df44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3136bea1-6c33-4f01-b96a-358b2863e951",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959a05ed-edd8-491c-88a2-d5ae0f0efcd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b87f638a-be38-47e0-8f9d-c56b1be30911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d396f99-5f54-44af-9161-93b1dfd71288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac52b9a9-885f-4a49-9ff9-2440a0c0bcdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca678f81-a57b-4f04-889a-3c4d6c60255f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010a680f-fb77-4c54-a247-9533583d3bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "462bde92-b264-41cc-9e53-1674a7038ae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "351d7685-34c7-4640-af14-4cd3a5a76f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99a4b85-d46e-40b5-a390-b356f21df847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9a4a6d-04d0-4201-ac5d-7fce320ed356",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66be2775-9642-4c6d-a330-86e38937da6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f1d6b57-5861-49dd-942c-5043339f6a89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2221bd26-1fb3-4029-bbbf-edef66c49dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a51d14d-1177-494a-9ded-07e87c3def07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa6236e-2a81-4a90-90af-64029227eafc",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda6047f-18ee-4026-8d22-121f64b0bf27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9f521f1-6adb-4950-99ee-fcc70a0f7e84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d37fd2-825d-4447-9293-b352853be5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f79e73cc-86ef-441c-b3d8-75c0e03ad8d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddecea0c-994e-4d00-909f-6ebaae78af0e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e25f95-b47e-40da-b61e-d1ac51e2046d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f2a9a3-9541-4f69-9e47-060f4cffa7e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8659e937-8e4c-4764-b55a-3e535daf6cbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4075a2ee-f71b-409b-a024-b13b81d58b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1ff6be-f154-4e64-9dd2-9e423b257edb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd50bae-d374-418f-9c8c-1123802b77f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc116d5-f3aa-444a-abc1-61d563d3ad03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d4fbff-959b-4446-a3cb-6525c594c2af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b2258f-881d-4c21-8bb1-1fdf5b4f9270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2883bf7-a3a1-45de-b84b-65096449aa68",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680adab5-f229-49cf-8ad2-1a05af5904cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08724675-54cc-458d-97c9-3309108e665b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5642da-e2bd-4224-911b-dbb5d69d2f1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72b1ec77-f9c5-4bef-837a-2c9612c3b98b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe67c72-fdc6-4bcc-a3aa-29f95bf75b61",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576e142b-d85c-4e48-8f22-a7c70922c9d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79ada5bf-7e89-4124-a954-fc5b0e0949a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6d49aa-0981-4181-9c1c-2eea2b622a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6bb1093-6272-4d9d-87c4-27d93ab29a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b154a9-06ac-484f-b7d5-68e6ab88cd20",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1029f0d2-9e93-413d-bd4a-26b98f4c385b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ddc3c68-6592-4004-885b-bce38e10f038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57088620-93ac-45e9-8a3b-7aea497852cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "998300aa-5417-4b7c-81c3-0e5ebe39d8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "982ad089-cd1f-4fca-98d4-e29a3df839c8",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada258fd-e6df-40de-a43e-f0dcdfbd1778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe6d2783-1e57-49a8-bc2f-c6d40a3b16c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "521a26c6-43d6-40b8-81fa-de49a712f670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad2126be-dd63-4558-9d22-2bc1c0fd9963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d52fd3-07e2-42f1-a1de-be4aee9e75c1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6ddb51-d38e-47ba-b437-a681f92413be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9396ac4-4cf1-4d3f-9bfb-187a0671ddfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3739eaa8-6b65-41b4-8fef-71a1248aa243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b256a1-e98d-4704-b3fb-a94e620643f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c8a77f-1e13-4871-9f01-876c619a4ae9",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12389507-5e40-4f12-8526-bb940466c5f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37b17e06-79e1-4a72-9a27-89652ad7f670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c1b2bb-eacc-463b-af86-2e33064696d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e856e4f-f3c6-4874-a8ee-8b468fe5bbcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b179883a-e050-4520-a986-4087400cdca7",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79c8d11-9f92-4e0c-835f-44520bbcedfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcca4e1d-4455-45ae-8954-eb0164d01526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25eec1e-c7fd-46a1-987f-0c1cb8d766c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a61225-305d-4488-839b-aa6653894e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f44f57-c874-4463-9b36-a91ac3ab26e5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a5ab7a-d73d-48ed-b4d4-2003365a4c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "004b1bfd-617b-458b-b765-283ad3f76376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "042cb709-9bd9-4816-851d-5e2cfde05a1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db7747f-c140-4b60-9943-982e2bd2a416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7790c705-368d-4033-bdc3-c56e2cbbbd41",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90684cba-90c3-40f9-98d4-7ee7dd9b5dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b335ac98-0f66-4f2a-9bc2-8f410f14b63d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbc7cd5-00e0-477e-88b3-9979077be139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "455cf316-a6fc-4cad-8510-7b1df3479a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfa8633-4f44-4c9a-8915-6ee63bd2c9ae",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca2e989-282c-4a83-b6b4-10be0dccc2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc36c2d2-2513-4993-bc7d-21f124855c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "417202cd-e86c-4b7c-8240-a8483fc90dfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6397e53d-4e3b-4b7b-9e0f-e21db723a2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ed6956-3f90-45ab-b11e-da08f1c599a3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04328f2-8a68-43c9-9463-cf0a6059821d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdd2d1d4-08d5-4639-818b-585b3f4b7f56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7ff76d-d747-4c5c-a327-f99416e2b1fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "022e1cf7-9f04-4621-9e43-291d7b0de080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e1909c-b18d-4255-88c3-cd0394f0c265",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58011dc-2520-453c-a404-150b6c8fc708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a75c3289-a5fb-418b-8c8c-b93da9d71b2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b2941c-fc73-46f3-9abe-81f5ec93beae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77bb901e-acfc-404a-a55a-ffc03d7b30ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba0917a-737f-42c5-a768-9a40ae51e7fe",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1761d2c-5e5a-436d-953b-25790b6100f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa56858a-5cdb-46ea-b43e-8217343894b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3cc3a4e-64be-4963-b34e-e48b0abdcc95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f540b1c7-e596-47fe-bb85-a3eda7703997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929c1e08-71be-4bb8-af90-7f61e5f240b1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb077483-466d-4c2b-b7f8-3c0dddb6628f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4370d778-41a8-4fa4-bbf4-1abc7ff84021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b87272-c02e-4a43-be04-dc9910b904c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f403eab-1b86-4561-804e-692aae47bf2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ab8ca4-a6a9-4ff0-b6d0-4cc94d7a4674",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21fb241d-36e6-4b7b-9cee-02f159abd999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b50b0bf-d28b-4b0e-94f6-efa97c52bd8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac83bfe-f0e9-45b2-aaf4-611a562d8f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd97838-7a9d-4f77-9301-1551039d7615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc704ab-84ac-458b-a53c-594b11f552b8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8408bd-4eda-4a24-aaef-a79343460f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dafd1874-bab3-4ea9-8614-c83f4d067cd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b94398-a074-4b2c-9b0f-9c2128e9c976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "697d53dc-b26a-4e5d-982d-bb456b9102f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091fbd97-0df2-4f0c-902c-09dabc06fb83",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711281cc-83c6-4056-931f-4664d0caf4b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "482de217-1ca2-4cb4-8efc-9279dc4ed149"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f139d0-000c-4483-9bfd-b4302cab1043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdbe4d9d-f135-4037-8b58-c8e13e1f1c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c9c55d-f92d-4b1d-bb30-acf997bc911f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f221fdf5-a3a8-4863-8c31-b0e7b4af27b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b96f299f-db8f-4179-9aac-2fe77a0fa109"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94dc06c6-a46f-4afa-8ffb-49eaee351c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbcc13ac-9e6d-4097-ba4a-4885c80c92e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a5ec0d-3fc3-49ea-b278-5a0ef5e9c221",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a12e3c3-7306-46c8-bef5-77124571b211",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c8dd4e6-741f-494d-aee4-342e8f5a9ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e0e2c7-12f8-4384-8f24-57f2bb51741e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a02b7ee8-62ef-495f-807b-8d180c71aaf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744d50b2-516b-4b4a-afec-daac93ed782f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b86809-874b-461f-ba99-eda0fbdb86ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7703109-c8c2-40ca-b135-ccb7f667d0a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f957ea0-4a55-4c28-8d12-fcf239051f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a005add-a681-4bbd-8995-4a97f3aa284e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c38526a-a950-4221-be7f-3222cc7daf05",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77fa293a-c32c-4aec-9c7d-be093605ff8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0604c20e-2a5b-4a63-8e7c-41da1ed9067c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "433c01a5-f8e6-4e9c-8a12-ca11cc03a31a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f4f7cb5-5204-4da1-80fd-9a95554c1154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a0cf5b-7b18-43e4-b08f-18e09a0e9661",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6f6184-8e83-44de-a191-0ae5d4c4ddd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6290226-599f-4616-9430-68160d03d089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1b4932-eed6-476f-b651-be39a7514841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "828667f4-f1c1-4894-b4f2-a306596296ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f814b5-b9e5-4d39-aea4-fd0703b448eb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1d4685-cf17-427b-b86e-2e007c6f003f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f367187f-2848-46eb-a30d-5e6005fd7c22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e741084-a9dc-417a-98aa-3fa9074898aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3de7d040-f1ed-481e-bc49-0ef442b55b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd404417-4d4e-45d4-8bba-5f2adb0e7220",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cefa7bb-e651-44c2-b2ef-cf477424ecb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d05bfa1e-064e-4135-8572-8891ba8b8bfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c58666-037d-498e-a41f-54b08bb8a33f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e77778-ca02-4e8b-a7c1-cce82b4d631b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22499a3f-03b3-4be2-b11c-8e1e1026d800",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b5800b-9dd2-4caa-b52e-d1c41676ba07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a2cdc21-d410-4737-b4f8-5273ce30344d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6adec48d-a15e-474d-9e2a-386373862e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad0d329-5ef0-4b8a-a479-23419b3d9930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c3d3172-41e3-483a-8e7c-5a1567e596d2",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12143727-53c6-4de1-9e04-0e7182365d08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ef524a1-a9b5-4efb-a073-c09cb0606bb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6dfa263-9e6c-4215-bcd1-a58b1fdd1061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d6ac60-9801-47fb-a993-46c4ca4e2b40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63694983-8d09-4f51-8c1b-e55fbd3bd9af",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6404875e-49f7-4267-a88b-2381c266caae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9116ead-e73d-4f5f-ad10-750b8ff49c7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca3d688-926d-42d8-9eb9-86f5476d98f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b1eadff-c9e7-4a7a-980a-393b062d9ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ac51af-bef9-4384-8d76-9c84e824b149",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e494c0-3320-4f5a-af8a-b556d3776137",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa73179a-0f31-4fe9-bd92-258c91ff6ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79735735-137e-496c-9dca-df54793207d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc36e2e6-476d-4544-81d5-a4aa92fe4908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c0ccca-db58-450b-a68e-88f7a8423fcf",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd6355c-83d5-470a-a332-cb48a1c0b744",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5d2bf63-e6d6-4092-ab42-55a5b59a7aed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "091f15f5-08c1-4ca2-9c1e-95b697323d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc53bb93-fecb-4e85-a4d2-b6ba1b301a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1293aed5-4e5c-4c2c-a730-26e7efa0073c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d157d53-4289-4e4e-a63e-459b27b6f518",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcb23d90-7781-4720-ba4a-249a18187ecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ccd88d-9178-4c5b-9c0f-a79cfeb88e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a464679-49b5-40b9-985a-74d8cbb816e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac6d082-9110-40be-8451-17a41838fe63",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81fd3ed1-aa01-447a-8a8c-b28b6a6caf95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32c7a452-511d-4c90-a675-5344ba185dc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98496920-ebf1-4c23-8d71-1e5d20ee561e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675e55ab-2f05-4630-b9ed-b4011db98919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53efd1f-8b5c-48b5-b21c-c3392120127e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01ddd34-24f0-42c4-ae5f-013603864aea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b90304d9-2dd6-46ef-9248-5ac801766d66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "183779ce-39e0-493b-b4b7-92e36db9b1de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "917b48fc-5a69-40db-bb43-90bc2e9f448f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c082ec54-4b1c-4759-8357-40f831f8dc07",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90e2f44-8da9-4c11-8e4c-1c119b9a8fa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81856307-7a30-4f40-a4d5-409f63176945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbe0fcb-7288-461b-93cf-09294ad5149e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4591d1-badf-4922-9a48-fe6b9cfd1cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78fb657a-430d-4da9-a445-b69b0f8bad5c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7d508b-44d7-43f3-88bc-bd3387bc5959",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29c01a6f-abd3-4159-82b9-df8b76fca75d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9cdd98-091d-47e8-9abb-824b95d6dc58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "202ca8ac-9065-4b7f-9826-e9adc95fd5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362b8a5f-7f73-42bb-b3d2-e547e88e28a4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99548c9a-305d-438c-b246-bd46ab592dcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6660bc4-9154-458e-a83d-ba492b0b54f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5baf37c0-6ddc-4211-8cc3-da3fab2d849d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1602ac67-fe04-4f06-a233-d9c57de5a185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63362548-0b84-4213-9f59-2526a2fb99ff",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31d3e86-4336-403d-9430-81784befc253",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aad31db4-0722-4092-aec1-6dc51302f536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84cde08-231f-4bfb-9646-be0689ba4077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8183d8f4-01ce-4bfd-a5a2-3d3c6f1f4c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d896a9-8a99-467d-bd7d-07b2862a0783",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0c2620-d2b8-4aa7-807f-72ab468a4924",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b7370ef-ce3d-463e-ae9d-90b75e80ac47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d56b2d7-75a2-431c-8128-06e218e4a5af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fffbe444-8c43-4e78-a39e-c631f814115c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3c9020-0eab-4011-a183-5f58c9a0752c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083cefcb-bebb-4537-a6ba-6c8b5b35d855",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "772ec6fc-3561-4b1d-a25f-144d3a5e8458"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8601c30-9ea8-4b0f-9869-2a572317d0a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2c058a9-4935-4608-a564-f0dda3beb1ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb82d57-6ba1-4cdb-9e30-69d651d78f74",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92aa3232-4ade-4971-b842-c3065c5ae135",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c060663a-feac-4508-bfac-b07a1d8735d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be80ec6-6b0e-471b-8277-99647dc3db6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "256a6524-62ec-40e9-8716-4fed6d4b95a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf7a2f1-3ca1-470d-9a01-817dbc4a786f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4864d8-79b1-496d-89e2-3410808378f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a62351c1-210f-430a-88b1-2ab82daa0686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1db6d6b-708d-45ac-a609-7fdffd6ea99a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d0b00b-7421-49ca-b7f0-96781761cb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7788cf-9358-4f89-a664-020fe23614bc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc897d4-37a2-4fa5-92fc-ef9b3af8790e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf1a810f-e62c-4a1b-87f1-23ccdb92b51e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c412e5-cac3-4062-aa98-aabf3114a890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a8e88b-e3d9-438d-9f5e-de77d3eeb5e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7821a5e-fcf7-4601-90d9-c7514f29ae52",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd306ae-1be0-4e2f-8b3f-93f9d4a14a0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c74324ea-9584-4435-a9de-64a92d8e4c04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee5be3a-d629-43d3-9c1c-793e6ffd9b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a432c30-ab80-44b1-ab9e-416b5ea7a599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2676a86f-17ae-449f-aced-9eb6a624f0a0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100fccd5-fa69-42e3-b066-7b243cc9a3cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd3111f2-d4fc-4378-8409-952b61f1ba2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5f170c-4e0a-4eb0-8eda-5e2f361b0f25",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "950cb289-2631-4b41-b0ae-d738e9cefd64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de803357-1fc8-4321-b269-603ff1ebad81",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ac6e68-c3a3-4f94-8975-88f1357b6a05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a5690d4-d5a6-466f-bfe4-be84ccac44f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bca760a-e555-4af0-891e-637861ad253f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8927837f-999e-4fc8-b1d9-b73033b74cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48125d8-f35d-478c-95c7-2d3d76753d37",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5d2298-a1b5-4b23-a153-c8ab2845da89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "660c81da-2413-4efb-b2fa-c1f64ebbfece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccafabfb-5243-4ada-80b0-e2c7092cc8d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac2afc5-21c5-411b-94fa-8350d7bb5a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66b40ac-ec00-4a3e-8a80-71df6a8d254e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee681989-7536-4126-96b0-a9806685931a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7f7f010-f2a8-4da8-b15d-0c534b8da7be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fead2d-272a-46fd-afbf-f3bf74608db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1648a2d0-7e70-4dba-82ac-0f44f8a5d51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9aa91b-3344-4ca2-94b7-4517eab1aa44",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ecad61b-bd93-4754-b39c-86c1de35bbef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67038d22-29d5-4884-8177-2d75052b8301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9fb90e-2f36-4e04-8148-8d38685f87d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded9c8d7-3647-4e1e-923b-779fd2d1caa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16646e0-a2d6-4706-8dd0-435d95738fa4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d12d0e4-5c46-45bf-a1fb-49b73a005fe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd750f89-c5c0-41f5-b398-1d5ad5967b9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b4f790-7db0-4494-8b26-be7ccaa02ba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed512eb-8acc-40f1-b837-2321e34c2e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93872ce-191d-4c0f-ad97-3baa77565bfa",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a9f9c1-214f-470c-9870-9e338318c32b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae8b3196-94a0-4542-aac9-c75f2fb18e87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06688f51-dd8e-4605-b744-788b636f3933",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a3d1a3-7c1d-408f-8a9a-e265ab5b63b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17bf592e-4f99-4981-88e3-2d0d206723db",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee2d942-752a-4565-9628-6a8bd71a39e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c71363e-ee6f-43e4-a930-76d2f5b7ba10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d50e1b-9c1f-4dcc-a845-5140b287a205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6db7c9b-b967-4db4-9202-01350002871c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b00371d-50d3-4afd-85d4-4d57c1b266b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69a1bc25-b19f-487e-b510-72f58d81ee49"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "80c72a2d-169f-4345-94ac-3a1aac552a97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fcbfe879-ee8f-4dc1-83aa-a83bca8b8241"
                    }
                  }
                ]
              },
              {
                "id": "807d2f8e-f0a0-471f-9f53-0a3c0e2df79d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "639b0043-ea36-4ce0-9eb1-1b79bff63199",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5e5295-304e-4459-963d-aa18104e5d54",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d367eed9-a72f-4289-87cc-6665c919c1dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0a7154-ca46-4ce7-baed-311138bc9171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8be571c-6ae5-4dd5-8796-677fb64265e2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc43124f-894a-4f0f-bfcf-183437499172",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c554cd2-17ec-41bc-9318-458a1371294e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "19d2394d-3485-4d12-9de4-315793b01677",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "016fe061-8e25-443f-8afc-7bea1317f77e"
                    }
                  }
                ]
              },
              {
                "id": "e2a9e355-f5f7-4919-8b25-eadf25b0bfe4",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6853144e-cb9a-413a-9484-5cababcf0518",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "307a0a0b-bd94-46d0-83d1-0b2d6ba43ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a9c63af2-752d-466c-a9d0-e95d33f9b5c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305bb7e7-5256-487b-ac63-ad3bda2e0838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b0252b-0b92-42cc-a682-ea571181520b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b800c810-37a3-4d13-82cc-9c4a1dc876e0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "647c6c69-8985-41fe-b771-ccb1bc3b3a8d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d254353-11bd-4029-b76c-02b449a9a08d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "de08a3e2-14bf-46ad-bdc5-d13cbecf4141"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58173eaa-2977-4e16-ac83-e4e8be063bf9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "482aa107-f21d-40b1-b4c8-e4f5c0a62837"
                    }
                  }
                ]
              },
              {
                "id": "6fb97cbb-730f-4c3f-8686-26817c021ffe",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91a9177e-bd7f-4403-96cf-af4444597f3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "32169e84-bbb4-4972-a447-65e9f5b66e35"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36da0043-6ab9-4a1b-a306-375634d1de0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "195d7752-2ecc-4f08-ab4c-6899072c09d9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c21f280d-2a7f-400e-9f2c-d45274ba246b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "820df7cb-2f89-4961-bf8a-d984b4b61fe4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "27c4a6be-9486-4dd4-9207-4678ea393620",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd4c7766-00c0-4f87-aab3-8e5c4c560059"
            }
          }
        ]
      },
      {
        "id": "a0752932-af96-4de2-8375-b8641f424db2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "265f5de1-227c-4f32-9925-815ca7749300",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e9f4dc3-5fe3-47aa-83ab-37f9341d955c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c2e835ad-8df1-4f87-b759-d81c79e93dfe",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ce79c9-476f-4bec-982d-57342f9f0987",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1abafb18-af0a-4fe5-988e-16a96e9b3831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "998669d1-0759-4037-aea9-6a3170720421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57e28c22-a090-40cc-91cc-bca644d4185a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "267e39d5-02a6-4a41-a7b6-5e5cbaf3d070",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0791d3d-908a-4859-9ad7-70a22708231f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfecefc8-4056-4c4a-833b-f1a39c1c993a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8780a74a-0300-450b-9df9-8e3e13cdf2a8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb128e56-dbfe-44e7-a4d2-eda985659dc2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d3550ec0-0190-4667-8f41-1154085166df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2049f4a4-fbbd-4d5c-8a3c-b0d7b8dba2cc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a96302c4-808f-4419-b29f-f287db8d2a3b"
            }
          }
        ]
      },
      {
        "id": "cbb2da8b-cf2d-4e79-9c7e-3188103c81b0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e41c15c3-5ca5-4bdf-bff5-743ce241397a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9502f42f-f1c2-4bb5-bfad-b47aee2ae0e0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bdc99f41-6de3-43df-906c-92c88fd33cd2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5eb429e-5a5b-4e1f-b348-cac48fd17fb0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a98bd564-42b2-4feb-bab9-33fa6d86c447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2798b300-9aac-458c-8d36-f3749ccb5af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5afdb0b-590a-449e-8146-61594bbd1496"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d59da9c-7100-4570-98ed-14d8ad14a3e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b7ca48e-04b0-4125-b829-ec4c4b0fc360"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e68eadf0-2f46-4a4c-b9a7-a227e025420c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "262dbdcf-0f1f-4da5-8792-faa3cbe9d410"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "197294b1-6886-4b02-990b-e3cc74224f0e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bbec6ba7-30e4-4269-a23d-2a625e4661f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "670e25a1-5182-4f99-b7f8-e24d9dc60220",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "449b9678-32b9-428b-addf-06a48831b122"
            }
          }
        ]
      },
      {
        "id": "8f4c3fee-e4eb-4d5e-a727-907ec8e10424",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0aa39a4e-1366-45cc-acba-804b4d63f9dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e88b8fa-1e93-44b9-b720-d30ec0ab3641",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f830abd3-27c2-434e-b4da-3f3a284f91eb",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a04bf0d-b7ef-4960-bed2-1c63dd213997",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae1f22c2-e137-4e84-b28d-9e276fa19591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2049e5de-c91e-4ebe-899c-3f80077b290c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9f461ba-14b2-4f39-80de-df921bae4b36"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03215b3c-a6e2-4ddd-9d8d-d3e84c8baed3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbc7466d-72ab-40ce-93c3-2de9f57e6d45"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0beb529-c2f9-41d3-b685-58bd8983a749",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37cb750a-24da-4615-90c3-74bce8429855"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "26932ed3-690d-495f-849b-5ca290b929dc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "36ee6962-e113-453f-9925-e73f392a05a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f84da9cf-e5d5-4e00-8b9c-bb3e8fa376bc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c883d24d-db2f-48d7-8e54-a0cdb27b260c"
            }
          }
        ]
      },
      {
        "id": "d575ae38-35a8-4afa-a7c7-c80d75c4af30",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60642a43-22ab-48ae-a2e3-d0f51607a1a0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c6c741fb-a29b-47d8-a693-33359a2c8689",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ca6de853-bfce-4b68-9668-433f5c43ac6a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf8c0dce-d75d-4db2-82f9-2db79f9d8f2e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c40b7009-d919-4d27-8883-9d651500f36c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 117.92063492063492,
      "responseMin": 6,
      "responseMax": 786,
      "responseSd": 83.20739084757054,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1717375110445,
      "completed": 1717375148796
    },
    "executions": [
      {
        "id": "d2838608-cfa1-44ab-abb4-59be7a39a9e2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4ed3e9ff-5507-4317-b6f4-ba9a0d70bc68",
          "httpRequestId": "b10fbfef-2adc-491b-a2bb-694a7d5be0f6"
        },
        "item": {
          "id": "d2838608-cfa1-44ab-abb4-59be7a39a9e2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5f7dfd5b-ed3c-4b37-9dd1-17ca8cff8676",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 0
        }
      },
      {
        "id": "caaa1bb8-7541-4709-a5d4-c68d0cb3c450",
        "cursor": {
          "ref": "82a8a077-e3e8-4db2-a01e-7b98cc9229cf",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "428dde1c-ae55-43b8-bc3d-f7cae6a1021b"
        },
        "item": {
          "id": "caaa1bb8-7541-4709-a5d4-c68d0cb3c450",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "083081b5-b2bf-41a6-8738-95bb8054618e",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "5d3155d0-6b02-421f-b29d-4fcb0bb9d5c8",
        "cursor": {
          "ref": "29184d14-8211-434e-b10c-22fe700be6d4",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "37d2abb1-97a0-4fc7-9e85-057b10637087"
        },
        "item": {
          "id": "5d3155d0-6b02-421f-b29d-4fcb0bb9d5c8",
          "name": "did_json"
        },
        "response": {
          "id": "777c0525-aad5-4e66-bd6b-4f9ef43bddb4",
          "status": "OK",
          "code": 200,
          "responseTime": 249,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e34c0a7-14d3-43ca-8629-52e9cef6b88d",
        "cursor": {
          "ref": "8d8bc79e-e46a-4b2e-97d0-15d6fdee160d",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5e79bd34-dec7-4932-b407-75b1ba56ea3f"
        },
        "item": {
          "id": "8e34c0a7-14d3-43ca-8629-52e9cef6b88d",
          "name": "did:invalid"
        },
        "response": {
          "id": "ba015014-9fb1-4fa1-ac58-cf831a0d744f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e34c0a7-14d3-43ca-8629-52e9cef6b88d",
        "cursor": {
          "ref": "8d8bc79e-e46a-4b2e-97d0-15d6fdee160d",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5e79bd34-dec7-4932-b407-75b1ba56ea3f"
        },
        "item": {
          "id": "8e34c0a7-14d3-43ca-8629-52e9cef6b88d",
          "name": "did:invalid"
        },
        "response": {
          "id": "ba015014-9fb1-4fa1-ac58-cf831a0d744f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2bfb615-d08d-4725-8c76-1197273a4897",
        "cursor": {
          "ref": "c4c98bc1-6c94-4073-bc45-56f412d3084c",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5dfd31c9-0fb6-4ab3-9b85-9c9b5c5bdd85"
        },
        "item": {
          "id": "c2bfb615-d08d-4725-8c76-1197273a4897",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "90923823-4ebd-41ca-9dc9-c10ba6961382",
          "status": "Not Found",
          "code": 404,
          "responseTime": 196,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1b0a7e-dad3-4ed7-ae50-58810e3184b5",
        "cursor": {
          "ref": "2d722456-6b45-48c8-9593-6e0740098ead",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b31caf7f-7183-4bb3-bb0a-633f277ef0c9"
        },
        "item": {
          "id": "7c1b0a7e-dad3-4ed7-ae50-58810e3184b5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "dea88f3a-f4c4-433f-b5bc-0064512b3ccb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 86,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "571028fe-cba4-496e-a37b-3c6a495b8510",
        "cursor": {
          "ref": "6ce5dc0c-7915-477a-a156-0428c790d888",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bfa82bda-4d5a-4b3c-b2f4-36b368f032a5"
        },
        "item": {
          "id": "571028fe-cba4-496e-a37b-3c6a495b8510",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e6264093-d63b-466c-89e5-72f333363a6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33a9ff4-7f01-4f60-9688-47c95a41bba3",
        "cursor": {
          "ref": "95217a36-deee-4a26-a172-5fa7740c4c2b",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b90a5d7f-89d7-42e6-8fdd-6219e8da0eb0"
        },
        "item": {
          "id": "f33a9ff4-7f01-4f60-9688-47c95a41bba3",
          "name": "identifiers"
        },
        "response": {
          "id": "f2f19221-4228-43d7-812b-d085bcf38614",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02591b19-248e-4eac-9c51-1281fdadb640",
        "cursor": {
          "ref": "ccd35b11-5d40-482f-90e6-28aa65d6ce5e",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "65f8ca95-f811-418d-8bd4-9e91d4ea7cf8"
        },
        "item": {
          "id": "02591b19-248e-4eac-9c51-1281fdadb640",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "51adf438-5485-4fa8-86ce-cc7625b31b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb23264-6b48-4625-bd14-a0e074e9431b",
        "cursor": {
          "ref": "4423a09d-4276-411d-a8fc-4c85375747bc",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0a0c9529-543c-4263-8a34-15e3bc9b5462"
        },
        "item": {
          "id": "bdb23264-6b48-4625-bd14-a0e074e9431b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e061a538-43ed-49b4-bcb2-c4890addccab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01aba2af-fe2d-415e-903e-2865abcd6454",
        "cursor": {
          "ref": "579a7244-3b75-41c7-a6cd-1f11da393ce6",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0b623d26-a738-43bd-88eb-ca147b71ebd3"
        },
        "item": {
          "id": "01aba2af-fe2d-415e-903e-2865abcd6454",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "77fe7988-7d06-4211-9200-6ffb0caf349c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78871eba-f5c2-4eb7-a3fd-488bfcfc73a7",
        "cursor": {
          "ref": "8d8fafa5-f6f5-45d4-84a4-cb1624ed1378",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d33248d1-87e5-4e25-9645-fa73d8829c1a"
        },
        "item": {
          "id": "78871eba-f5c2-4eb7-a3fd-488bfcfc73a7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "aba8d667-ec53-4c25-82a3-36ee05db8af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c74fb72-200f-4afc-be57-9a584a873206",
        "cursor": {
          "ref": "cd06096e-adf2-46b6-91be-cebdd8f16eb8",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8d1ad3d9-8554-48ae-93ad-7e73f5d5fc17"
        },
        "item": {
          "id": "2c74fb72-200f-4afc-be57-9a584a873206",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "86a95381-d036-4b1e-a21c-5c26faaf56e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba68e4b-5afe-457f-afb0-b38d3d7a4815",
        "cursor": {
          "ref": "89a30d07-6689-4c61-91ff-b33d1bf5cc45",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "24cca78d-e152-4298-8b8f-bd8d97ca5bd5"
        },
        "item": {
          "id": "9ba68e4b-5afe-457f-afb0-b38d3d7a4815",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2a8636e0-ed33-4ee5-b6bc-16419d22a46d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a47d6172-4441-48c0-84e0-9f14a15cfba1",
        "cursor": {
          "ref": "95804cd5-f45c-4f19-86dd-6a58f8202f00",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b2641576-aa94-4c42-89be-6b685915d60a"
        },
        "item": {
          "id": "a47d6172-4441-48c0-84e0-9f14a15cfba1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "57413da9-ddd9-420a-a0bf-10344a536e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c4e7b1-b189-46a2-bdf6-f23a5d7f7848",
        "cursor": {
          "ref": "0d632d1d-56ab-4954-b8be-66235d0b99ef",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f8b0b24a-83d1-4ed8-93b3-1e15ea010dd3"
        },
        "item": {
          "id": "88c4e7b1-b189-46a2-bdf6-f23a5d7f7848",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ffc579fa-60b4-47a5-8d31-6936998b295f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa02a507-748a-4a6a-ae1d-027f8be58871",
        "cursor": {
          "ref": "fbcbaf94-b803-4710-970a-10ebcbec11a5",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "24cb828e-da67-4de0-8dfb-898a8f1689ca"
        },
        "item": {
          "id": "fa02a507-748a-4a6a-ae1d-027f8be58871",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "fa3d49bd-de2d-4945-b8b7-eb87aa82b0d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3aff835-2be6-4200-aea1-e544d539b48b",
        "cursor": {
          "ref": "73fca779-335d-4437-a51c-e7ced4573939",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "92a10915-184f-4af9-b807-96f1a25fadee"
        },
        "item": {
          "id": "c3aff835-2be6-4200-aea1-e544d539b48b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f9a7de3d-2c1d-4608-bc6f-5f2848f6ae46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05a67da-9f79-4aa3-9d25-03ad40ceb53e",
        "cursor": {
          "ref": "06828046-b7f9-44a0-98bc-c313f6018745",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9268e842-c420-47cd-b25f-357062a65e6d"
        },
        "item": {
          "id": "a05a67da-9f79-4aa3-9d25-03ad40ceb53e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a9efa7ba-2435-4ef7-91ae-01454d324030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85d2dea-437b-46a2-93ae-de40491e165b",
        "cursor": {
          "ref": "13fc95b5-93b0-4718-b149-0e713ca35e9e",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6869f4b8-38b3-4b0e-a0e8-1c8532b9174c"
        },
        "item": {
          "id": "a85d2dea-437b-46a2-93ae-de40491e165b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "faad50d5-e06a-4187-bd91-b0e9ea4cecea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2615d4ba-bf37-40e5-af08-26862d828672",
        "cursor": {
          "ref": "6f619834-cf67-4403-9a34-c5754079ae6d",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "332c6e68-cf14-4d8c-8679-3bfd8bcdf1de"
        },
        "item": {
          "id": "2615d4ba-bf37-40e5-af08-26862d828672",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d1a8e403-41f1-4c2c-b520-f65584ec4912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "614da8a9-a814-466b-973c-9bee94d21ba9",
        "cursor": {
          "ref": "e4749dcb-b42e-4af3-8b61-a49a76f88086",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ec391a59-c565-488e-9f6a-117013eb8a1d"
        },
        "item": {
          "id": "614da8a9-a814-466b-973c-9bee94d21ba9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6d49d13c-9b58-475e-a2f6-9c3c5b6ff174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d28227-937e-426d-b79c-89aacd3c6773",
        "cursor": {
          "ref": "0a38c808-31d3-4c22-84cf-263301e6b543",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e1f84d7f-6b37-40b6-b4fb-00614ed574bf"
        },
        "item": {
          "id": "83d28227-937e-426d-b79c-89aacd3c6773",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ce6d2c38-922b-4abe-9f13-f05f4cdc4799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99677b61-907f-4ed1-8cbe-1ba9621b2dd1",
        "cursor": {
          "ref": "8c4594e9-2db2-4e42-9b13-add93b18905e",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "62745355-0553-464d-add5-666a4a7f6e2c"
        },
        "item": {
          "id": "99677b61-907f-4ed1-8cbe-1ba9621b2dd1",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "07af8219-8232-46f3-a6e8-3df630426682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6221021f-bff4-49d2-98f1-2dcb5e9115fb",
        "cursor": {
          "ref": "52538210-a531-42cd-8e7a-e03a3ff5e5b1",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "aa988ae4-3c87-4e00-914e-64f5730bdd06"
        },
        "item": {
          "id": "6221021f-bff4-49d2-98f1-2dcb5e9115fb",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4215b704-81b3-4c65-9e7d-00501e4735af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041e1a8d-4d5a-4b63-b253-1da8148e4df9",
        "cursor": {
          "ref": "9b8275c2-d32f-4578-a488-e1c5fbbab41a",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "83eabe05-de6d-44ae-b88f-b019f0004e8c"
        },
        "item": {
          "id": "041e1a8d-4d5a-4b63-b253-1da8148e4df9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7901242a-5971-4858-a209-8c1896f96c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa5581a-95b5-4fed-b398-1139d4683464",
        "cursor": {
          "ref": "e4f2801f-ba01-4c9b-92f0-14a1f03524cb",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "426010d4-6a27-490b-9add-8eef5179a90b"
        },
        "item": {
          "id": "7aa5581a-95b5-4fed-b398-1139d4683464",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3b63cda0-f2da-4d19-8b89-864c05e2e9d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f813fc-9ee7-4a58-adb1-19dfa2dc2e2b",
        "cursor": {
          "ref": "ac25a112-5b8c-4cdf-91c6-8f36cbe0ef25",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a1597319-a57f-4311-9d35-2022b605d97c"
        },
        "item": {
          "id": "b1f813fc-9ee7-4a58-adb1-19dfa2dc2e2b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3e4d349e-1311-493b-9808-36d7c051af34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b543598-a758-437c-b10f-e38506d22771",
        "cursor": {
          "ref": "1313173f-7d22-475f-ad5c-1c8b37fb6022",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "31aa4757-f068-4334-9703-bedfd2a79b29"
        },
        "item": {
          "id": "1b543598-a758-437c-b10f-e38506d22771",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2d5d1237-9658-4ec2-bf3c-1ab1bc5dd501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235b8540-160a-4324-a3dd-70067bd6e700",
        "cursor": {
          "ref": "9d564abb-7168-4f6f-a5d4-e258cbf49801",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "325e6da3-5a6b-49d2-80db-1a5d02354226"
        },
        "item": {
          "id": "235b8540-160a-4324-a3dd-70067bd6e700",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f54e4caf-d8ac-4f72-b3a4-8eb34bbb82a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb32918b-d510-46b4-8837-c7ea00879529",
        "cursor": {
          "ref": "3faa4685-5142-48a9-be14-b75ed702d655",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a8c09015-0be2-44b9-851a-d8d8c231ca57"
        },
        "item": {
          "id": "cb32918b-d510-46b4-8837-c7ea00879529",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2a714d6b-618d-44a5-a796-0c1e9b76f00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215e6bb1-665d-40d7-abc0-3f8b48ee6008",
        "cursor": {
          "ref": "b6201550-ed0f-482f-97c5-3f9f6dbfab18",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "86b49688-0b36-4063-9883-5a50ea385501"
        },
        "item": {
          "id": "215e6bb1-665d-40d7-abc0-3f8b48ee6008",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6011bac3-4eab-4ef9-9494-a5d4f159477a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6923ddc4-1ab9-4922-bed9-4c524956e323",
        "cursor": {
          "ref": "832aea97-3e71-4a0e-ac66-3b89865d4ab0",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "14c8b427-6085-4d34-ad52-be0ed8f200b5"
        },
        "item": {
          "id": "6923ddc4-1ab9-4922-bed9-4c524956e323",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4e33d8a5-9f60-4fe1-baab-a4c518bc3726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a663fc0-be55-40b0-9181-747a91ee4eb8",
        "cursor": {
          "ref": "05d1fe48-aa32-4302-abef-a8f5ebcb9114",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "44bc2afd-1664-4347-89c1-8878e46d72d0"
        },
        "item": {
          "id": "2a663fc0-be55-40b0-9181-747a91ee4eb8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "47ae8aa1-d9da-46de-a7b8-576d1dcbe972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a9a68a-c3ce-4fdc-ab11-eb0826da1a3b",
        "cursor": {
          "ref": "be98e11c-c9c4-4261-bebe-563acd06adf5",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4ffcce0b-15c3-4132-8599-af6a1272c9cd"
        },
        "item": {
          "id": "e5a9a68a-c3ce-4fdc-ab11-eb0826da1a3b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "85cb2879-6fe2-4423-a4d9-72c3c4d8a503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b06c36-86ad-4651-af79-7d2d07668023",
        "cursor": {
          "ref": "ae7ef142-50c2-43ad-9e9d-27ff6aadbfd8",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "71b447c7-5306-44e2-9fd8-24569a7f2eb1"
        },
        "item": {
          "id": "40b06c36-86ad-4651-af79-7d2d07668023",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "466b0841-01d0-4e45-bb3a-31a92c6cea5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30ec481-db9b-4417-b5e8-bb6fe6c8bae4",
        "cursor": {
          "ref": "e0399da9-6be7-4b98-9efb-27e6f6dc6ca4",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "741bea93-b13d-4447-b57c-429bfd2f94b2"
        },
        "item": {
          "id": "f30ec481-db9b-4417-b5e8-bb6fe6c8bae4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3b391679-1952-4d0e-bb40-e0b2105c619f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106be818-65fb-4931-ad17-d62d4a1c3657",
        "cursor": {
          "ref": "e8303e2e-0080-4cd8-ac58-368bed4ba037",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8a7fcecf-c29d-47fd-808d-8c2a2256f351"
        },
        "item": {
          "id": "106be818-65fb-4931-ad17-d62d4a1c3657",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "59e83363-7c3d-4516-bd6c-ee2fdd00f5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d13aaa-318f-4d3a-b82a-4b4c0e849f6c",
        "cursor": {
          "ref": "580cfe6b-da83-409c-a13e-9a61212140a6",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b74b3a33-a975-4b98-8a24-80b3d1315dae"
        },
        "item": {
          "id": "71d13aaa-318f-4d3a-b82a-4b4c0e849f6c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "16ab32ae-cd0c-4e9d-8f64-fb8bc3f2c991",
          "status": "Created",
          "code": 201,
          "responseTime": 786,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "0348fbbd-8c4f-41a1-ab6e-cc8df139d23b",
        "cursor": {
          "ref": "0611e3a9-12a8-4142-a269-56484569b476",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "863b25ab-2fe9-4bf0-a8a9-90dbc21dd9fc"
        },
        "item": {
          "id": "0348fbbd-8c4f-41a1-ab6e-cc8df139d23b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d3fac7cb-84de-4e7b-abdc-cd0c29591f8c",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1ca01f51-54af-4803-a4bf-767de1549151",
        "cursor": {
          "ref": "30509333-cf9f-4a04-98a4-8285503a0b6e",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3975ddd7-a3f9-463e-a61c-098ef5673ada"
        },
        "item": {
          "id": "1ca01f51-54af-4803-a4bf-767de1549151",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "879e067e-5fbb-425c-8312-7e140f1a98ec",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "bfe93777-22b4-49ad-a944-82a966efc1c4",
        "cursor": {
          "ref": "1cfda043-3df8-48a3-ad79-03ea2f420c74",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c12cebe0-f11c-4288-bf24-14bc18d3e195"
        },
        "item": {
          "id": "bfe93777-22b4-49ad-a944-82a966efc1c4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9183ad5b-25e7-4cd3-b394-044d8f2252a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b745ea9-ee94-4f25-a773-03bf77b460aa",
        "cursor": {
          "ref": "00cdb2a4-3896-41b5-a81f-99705fbd1944",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "105f7277-ab20-4656-890c-51df22cf4291"
        },
        "item": {
          "id": "6b745ea9-ee94-4f25-a773-03bf77b460aa",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9600e067-a5c2-46b9-a80f-98284ed33cad",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1dd66832-08cd-4520-afe2-22a0b9b8860c",
        "cursor": {
          "ref": "7889e341-5812-45aa-b600-592d3274d1b9",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "da7fc344-9e55-47e5-aedc-dd38a343702c"
        },
        "item": {
          "id": "1dd66832-08cd-4520-afe2-22a0b9b8860c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "bd62d4ba-9165-42cb-bdba-aedb4f778b13",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1e7a8ecd-e212-4669-bd28-71e096a2be1b",
        "cursor": {
          "ref": "37cbdb75-f33a-48cc-b7d0-7b3c338e1bda",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f7d70028-a6b0-4097-bae6-e26ef6f95b9c"
        },
        "item": {
          "id": "1e7a8ecd-e212-4669-bd28-71e096a2be1b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "407699a1-f0c5-47ff-98e1-b469ee09228e",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "319ea7fd-e62b-4dc2-bd17-2ce7d9df6da6",
        "cursor": {
          "ref": "029ed9de-7e73-49c3-9e7c-c3d0a77e10dc",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f56d8d28-30a8-4f61-aa72-58c4bdd05e0b"
        },
        "item": {
          "id": "319ea7fd-e62b-4dc2-bd17-2ce7d9df6da6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "894bb587-539f-4124-a1dd-64d12a20ca7e",
          "status": "Created",
          "code": 201,
          "responseTime": 381,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c601ec58-30fd-4809-aac9-d540b7660d34",
        "cursor": {
          "ref": "b78ce9e7-4208-494d-8749-39f983203d69",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7fe14f72-6fa4-4dcb-8c1a-afd91b9f8fab"
        },
        "item": {
          "id": "c601ec58-30fd-4809-aac9-d540b7660d34",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e7f87541-ef37-4a0a-a3fe-ebb9e8d30825",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "11552942-450e-4ea6-9cd9-642b6e0a48ad",
        "cursor": {
          "ref": "0d6f1d73-f192-4bb8-bdf8-030ce4606504",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "71a851a0-f31a-40f2-9e65-566f532685d6"
        },
        "item": {
          "id": "11552942-450e-4ea6-9cd9-642b6e0a48ad",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e5d8ac3d-84da-4064-a85d-d5abf4cc7606",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1c909743-dc25-4f9c-aa29-0cbf0aa75d8a",
        "cursor": {
          "ref": "48f743d9-edeb-41a3-bc31-d0749aab65d2",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "58e56b29-a15a-4e96-9831-d8cd0ed5864f"
        },
        "item": {
          "id": "1c909743-dc25-4f9c-aa29-0cbf0aa75d8a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "67ee133e-c068-41a2-be3d-eb5f8dc472ee",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ac39fb71-750f-4789-b8bc-3de693b36d3e",
        "cursor": {
          "ref": "36721a75-3def-4e66-8f53-e058c73b79ff",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9ec852a3-34f5-4149-bb40-e21244719ccf"
        },
        "item": {
          "id": "ac39fb71-750f-4789-b8bc-3de693b36d3e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ca036018-dc66-4478-bfc7-b0834e375a3f",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "a78c3ce4-2bc4-418b-a93a-a64dd428b99d",
        "cursor": {
          "ref": "a2b81a0f-068f-47ed-980d-f19256c736c7",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d1249f0d-0e8d-4e82-b8bf-bad0c6b25212"
        },
        "item": {
          "id": "a78c3ce4-2bc4-418b-a93a-a64dd428b99d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7c77d1ac-34ee-475b-a7eb-9eda5841598a",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4f4facd1-ad25-4b1d-b5b3-e95ac7929836",
        "cursor": {
          "ref": "0352ab6d-28d1-4cfd-9380-3c9ad452fcae",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "00f65d2b-7f6e-470f-916c-242531984ae8"
        },
        "item": {
          "id": "4f4facd1-ad25-4b1d-b5b3-e95ac7929836",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d92aad0a-83ac-49cc-9bd1-356af1b45548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b7f754-82c3-479a-b45f-2028600d4675",
        "cursor": {
          "ref": "dffc03d9-437b-478c-be48-65494abc348e",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b4963397-2d3c-4604-a288-edb9181c2870"
        },
        "item": {
          "id": "16b7f754-82c3-479a-b45f-2028600d4675",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ec5dfbab-89da-4e30-9153-f21e7cecad00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b83b4f5-1f38-4988-a619-1e9059f10428",
        "cursor": {
          "ref": "caedbe74-139b-4d95-998c-5c4254841df4",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "118e4848-97a2-4e59-9ad0-2e77f895b84d"
        },
        "item": {
          "id": "2b83b4f5-1f38-4988-a619-1e9059f10428",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fc454a79-ba06-458b-b709-f0d43dd21c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd338c6d-d1bf-488b-9106-87c904487553",
        "cursor": {
          "ref": "a89334a7-d864-41ff-bced-c1d1aa6f53d9",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4b4553c4-faa4-492a-abb1-2638276ec06e"
        },
        "item": {
          "id": "fd338c6d-d1bf-488b-9106-87c904487553",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0e44ef93-fbbf-42b1-a9eb-9b058736c75c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3d927d-352c-4809-b08f-f4dcd2320b9f",
        "cursor": {
          "ref": "6851b3f6-13ed-4c73-98f6-cabaa0b12475",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "499c58d5-839e-4ee5-b8b4-bdca5c5a210b"
        },
        "item": {
          "id": "7a3d927d-352c-4809-b08f-f4dcd2320b9f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c6059335-8f45-4342-b3b0-8823e1731fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa425b9-a5bc-4b59-96df-6c1db0d77d09",
        "cursor": {
          "ref": "a20cb4bc-f097-4d20-8a48-45bf6b425016",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4de165bb-51d9-4625-88e9-5bff892d6c48"
        },
        "item": {
          "id": "2aa425b9-a5bc-4b59-96df-6c1db0d77d09",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1c3bab4e-4fb0-48d4-ab34-0e8c882a9bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caaaeae2-9c36-4d3d-a152-47621740b396",
        "cursor": {
          "ref": "152a790a-3fe7-4d9e-9fbc-d0cab5c2770d",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "67e3fd77-f5ce-44d6-bb98-0a6a195244db"
        },
        "item": {
          "id": "caaaeae2-9c36-4d3d-a152-47621740b396",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8abc07a7-5d4b-4101-8fb7-66e411627b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bdd3aac-68b9-416d-8994-f3084a4b5ede",
        "cursor": {
          "ref": "9b442b07-f57c-46b1-ade0-e8ab7a2f42db",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8155aa6f-33f1-4cb5-8e78-6b899931c81b"
        },
        "item": {
          "id": "5bdd3aac-68b9-416d-8994-f3084a4b5ede",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d71c0765-d568-4b9b-83b0-e61ebbab9656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f782a2b0-2071-40d3-9c59-3abe651285eb",
        "cursor": {
          "ref": "465d2a31-b518-4334-b741-80b72055ab0e",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8ff1fc51-b532-46a3-b1d8-f456fdfe7e4c"
        },
        "item": {
          "id": "f782a2b0-2071-40d3-9c59-3abe651285eb",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9d47ae57-e9eb-4177-8be2-6ca39584daab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34009df4-4f27-483d-886a-3d3814dbd541",
        "cursor": {
          "ref": "1fe8a621-cd48-4bf8-aaed-539be5f5d8ce",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2ebed220-bb89-476b-b54d-2034bef6959d"
        },
        "item": {
          "id": "34009df4-4f27-483d-886a-3d3814dbd541",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d7cd013c-a229-4fff-b315-ac42cbf70200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce05863-0882-40e5-b00c-d90817f91a41",
        "cursor": {
          "ref": "21cf1666-267f-4fa1-9e83-ade0a96975b9",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "950921d6-4d3a-45ac-a853-347043f17243"
        },
        "item": {
          "id": "fce05863-0882-40e5-b00c-d90817f91a41",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7cd2076a-f887-4732-89ed-f6a9d9092520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "757033f1-aa46-4582-b9db-f148ade29128",
        "cursor": {
          "ref": "37379195-ee65-42d2-80e2-e61d810d1294",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3506e11d-c141-461c-819c-76a4802f80fc"
        },
        "item": {
          "id": "757033f1-aa46-4582-b9db-f148ade29128",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2b4ff055-e28b-48a7-a97d-dbf1fddbea91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0793f636-12a3-4e31-9e7e-b7d814461d51",
        "cursor": {
          "ref": "f00f34ae-a8c7-41e5-9e01-9295ff0ab2b0",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ceaf26d5-5b7b-4fa4-8ebd-d74871918411"
        },
        "item": {
          "id": "0793f636-12a3-4e31-9e7e-b7d814461d51",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b2d12528-1623-4a25-a301-d21cf0d457c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e9264d-89f2-4af5-8623-93b45866a1d1",
        "cursor": {
          "ref": "f0ad9998-5f7a-437f-a7d0-2c03c0093819",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "fcfb6e30-3c4a-4e55-8122-ba64deb8e3a9"
        },
        "item": {
          "id": "39e9264d-89f2-4af5-8623-93b45866a1d1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d3f8c59e-49c5-4527-b9f8-4ed525a0b2e5",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "bfe129f7-af7b-41d9-b476-6a5b0811baf0",
        "cursor": {
          "ref": "b6fab224-9384-4a3e-8dd1-7de6f6c7acd4",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b69206a4-a582-41e3-8c11-5308d24cb8a5"
        },
        "item": {
          "id": "bfe129f7-af7b-41d9-b476-6a5b0811baf0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f0fa8cbf-04a4-4ff1-bcea-c2b857e5d11b",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "3c6e2f8b-1c1d-4015-9af3-d1b90134ca0f",
        "cursor": {
          "ref": "917ddcaf-d65f-4e08-8121-9749417b43ea",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9d857990-0789-4991-bc43-d60035fc0e40"
        },
        "item": {
          "id": "3c6e2f8b-1c1d-4015-9af3-d1b90134ca0f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4af7fd6c-3ee9-4eaa-bef0-3b043284387e",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "27735fe9-3942-4fae-afe4-be16b19928f7",
        "cursor": {
          "ref": "00b4c20f-52cc-45d9-ae5f-310eb55e983e",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2a911feb-8b0c-435f-a0bb-558b552f8656"
        },
        "item": {
          "id": "27735fe9-3942-4fae-afe4-be16b19928f7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0fb5d7d9-5035-4b43-9b24-9ef0fefb5482",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "54dbcac2-c216-45ac-84da-f9ddf11e1340",
        "cursor": {
          "ref": "c9f5afc2-0500-46d3-afa5-3987ba042aac",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "073992f9-ca6a-48b4-acb3-00ed403ec4cc"
        },
        "item": {
          "id": "54dbcac2-c216-45ac-84da-f9ddf11e1340",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0a09c304-4753-491c-8e94-ffda50d7345a",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "e91e57e2-0e49-422c-ad60-6f2b6878d73b",
        "cursor": {
          "ref": "386183d3-0104-4640-8081-823eeef1b5f6",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5524f3ff-fcb0-425c-a026-931a3a187f36"
        },
        "item": {
          "id": "e91e57e2-0e49-422c-ad60-6f2b6878d73b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "10ff4824-bc39-4e39-bd5d-c029396033cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40bd199a-5872-4660-839a-3a06e45f9fef",
        "cursor": {
          "ref": "28781690-e8eb-4783-9d14-f9fe37949a90",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "05f0ee15-0e91-48e5-a22d-32f77d76f3f4"
        },
        "item": {
          "id": "40bd199a-5872-4660-839a-3a06e45f9fef",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "78d33e75-4727-4cd6-8ebf-a527aeb6684f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8004b6c9-7b30-44b8-9dcf-fb8b9ca12e57",
        "cursor": {
          "ref": "379d393f-6e57-4f3a-aeb4-07b6d8a00411",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "30081c81-b7f1-4ec0-8f2b-c51237995efe"
        },
        "item": {
          "id": "8004b6c9-7b30-44b8-9dcf-fb8b9ca12e57",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c01f5d5a-18f8-4178-a8cd-3ce45cae284e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c226717d-f674-4911-a75c-9e37115cd29f",
        "cursor": {
          "ref": "02414b14-0005-4f1a-86d9-c99f5f70dd76",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "25c368c8-14f4-4d83-b90f-d969cbb11dc8"
        },
        "item": {
          "id": "c226717d-f674-4911-a75c-9e37115cd29f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b3a585bc-4afe-4841-8c2b-9163ff26fb3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac1512a-25fb-4428-ac65-6f4d5934fa2d",
        "cursor": {
          "ref": "9d289dd7-fb98-46b4-af48-32f03e901185",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a9bf9feb-6b84-4b9f-888f-2c9ade876d68"
        },
        "item": {
          "id": "5ac1512a-25fb-4428-ac65-6f4d5934fa2d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "78bd9bc4-b646-48d6-91fc-a8da1f631420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac7da73-d035-4aba-a3a5-15902c473851",
        "cursor": {
          "ref": "90c1073a-1a5a-4c19-a0f6-67c14644c6e9",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "167e6f8e-ef4c-4491-abdb-40097a4c9068"
        },
        "item": {
          "id": "4ac7da73-d035-4aba-a3a5-15902c473851",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5ded8864-244f-4a5d-b4dd-11cc85dc17cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4266ce68-e2a4-43b2-92fd-593e3beed71a",
        "cursor": {
          "ref": "b3c2444a-24b2-4b7c-8249-7e6af13698e5",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b5e1b00d-39b2-42a6-9e9e-4126c0c2bed0"
        },
        "item": {
          "id": "4266ce68-e2a4-43b2-92fd-593e3beed71a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e1c7880b-4d52-4881-88d9-ad4ccf49470f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f29db7bf-0284-47b4-bcb2-c92eaec3aa01",
        "cursor": {
          "ref": "72cf3837-cee5-4da3-921b-f98adf8d44a3",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3990580a-31a3-4614-82ef-e09a07e4a5bc"
        },
        "item": {
          "id": "f29db7bf-0284-47b4-bcb2-c92eaec3aa01",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0ad09a17-1971-41b8-a950-b0d5f3f2b25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb4d749-b901-43d3-a8e5-e32270be9f08",
        "cursor": {
          "ref": "72dc9026-46fd-4f9b-b0f0-01c4d82a56c5",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f14c4735-5e1e-45d3-adb0-52775e012ffe"
        },
        "item": {
          "id": "0fb4d749-b901-43d3-a8e5-e32270be9f08",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "142dc78e-1c7f-4c2f-a4f2-c1364eacc0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c34a342c-2adf-481b-b087-30537f037602",
        "cursor": {
          "ref": "f528b174-0530-4c79-84b4-e4ddf831dcfe",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0ec08983-c6fe-4400-83b0-94d6224281e6"
        },
        "item": {
          "id": "c34a342c-2adf-481b-b087-30537f037602",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6171e9bb-7f67-450a-ab45-69700a163bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4762a4b1-69c7-4e37-831d-1f2fd7ed00d5",
        "cursor": {
          "ref": "2ae80ca0-99a3-457f-b5dd-d7732acacd94",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c00bcbad-966a-491d-8019-1cea2d1a1869"
        },
        "item": {
          "id": "4762a4b1-69c7-4e37-831d-1f2fd7ed00d5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7ea03d18-2c20-45e3-8d92-085e135e2c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6a0338-02c5-4754-93a6-74464774e91d",
        "cursor": {
          "ref": "8ff74f36-4f26-4cc0-9068-f7e3da73d46f",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "184a7d2e-b3c7-4627-9158-968969bd656e"
        },
        "item": {
          "id": "3f6a0338-02c5-4754-93a6-74464774e91d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "247980b4-7a79-497f-a290-4dc957f2798f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c857d2-2cf0-4111-99e6-8649cbb37d00",
        "cursor": {
          "ref": "b72fd46b-662f-4763-8608-7cdfd5a9f763",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "68c4c2bb-6b51-472a-9545-9065c123478d"
        },
        "item": {
          "id": "93c857d2-2cf0-4111-99e6-8649cbb37d00",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "37e91ba2-e599-43ed-98be-9b1121e36cac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86aae4ce-23d0-4eed-92d6-9487a4e6d3c3",
        "cursor": {
          "ref": "cc29c7d5-20a1-4f32-bf1b-7b663f521adc",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "3cd4cc3f-b45f-45ac-90c0-ba79f503d8d8"
        },
        "item": {
          "id": "86aae4ce-23d0-4eed-92d6-9487a4e6d3c3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "167a938e-51e1-4630-b6dc-30c691bbc81d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863cec9b-b9b9-47f3-bea8-4a34202dd5cc",
        "cursor": {
          "ref": "61601e5f-6de0-4600-83af-d91414aa4d49",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "dc2d5da6-bcb4-4ea4-810e-ef5daea2d33e"
        },
        "item": {
          "id": "863cec9b-b9b9-47f3-bea8-4a34202dd5cc",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "00ef66ba-c6a6-4484-aa00-eb8a6324eaa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e17e824-40f5-4886-918f-e013ecd45193",
        "cursor": {
          "ref": "7c4c8b53-a32b-4f7c-abdb-3a08b49208b7",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "31a2fc58-2d58-497e-a836-c1edf23fd55b"
        },
        "item": {
          "id": "1e17e824-40f5-4886-918f-e013ecd45193",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1fde157d-7357-41de-8a83-5df9d710b924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bc6219-b494-4f94-9851-c5cd94e0ddb5",
        "cursor": {
          "ref": "d379935a-f3a0-47ef-89ae-14280d15b041",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9d577ef7-9aad-448e-80f3-3e5cc8dab0be"
        },
        "item": {
          "id": "d3bc6219-b494-4f94-9851-c5cd94e0ddb5",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8473753d-3068-45df-8279-7aedc6fd05cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db793b87-2b7d-44ed-8cd7-d0c42d5812c6",
        "cursor": {
          "ref": "26904e9d-7f39-460c-9c00-b286ea9f6496",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d9333e73-2b44-4dba-9775-352df2d060b9"
        },
        "item": {
          "id": "db793b87-2b7d-44ed-8cd7-d0c42d5812c6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ef4f64c3-9b18-4f4d-8f1b-143650bba5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc09970-8696-404e-83d5-b8e4c9ed7dc6",
        "cursor": {
          "ref": "2ffdfbe8-79fe-4376-8b8f-8cbccb7c5fc0",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e926b4b4-47a5-46de-b6f5-75c0fd651267"
        },
        "item": {
          "id": "3bc09970-8696-404e-83d5-b8e4c9ed7dc6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4714ffe8-72c6-4f16-aef2-00e328151a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6869512b-0ca5-40b1-8f84-21bc0d97d67a",
        "cursor": {
          "ref": "af6000f8-18b0-4047-95c6-e99d46fefc09",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a7e54758-7a26-4c70-89a5-c0dbab997ff0"
        },
        "item": {
          "id": "6869512b-0ca5-40b1-8f84-21bc0d97d67a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c8da1eff-686c-4914-b139-97629ff32f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02c950e-5a4c-4a88-bfcb-1a5a23585477",
        "cursor": {
          "ref": "f2a95b73-1d56-460e-9ef1-9a31e7341c87",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "115fb84c-a0a6-4add-8dda-77eb35ee76e5"
        },
        "item": {
          "id": "e02c950e-5a4c-4a88-bfcb-1a5a23585477",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "0463c350-80df-412c-a4d4-621f50632c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639b6528-acb1-4736-98e6-1ee48503a664",
        "cursor": {
          "ref": "adbed67a-48e0-4139-a9e8-d1be2661ca8b",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f91bf9f4-25c9-4082-847b-930ed2ecb120"
        },
        "item": {
          "id": "639b6528-acb1-4736-98e6-1ee48503a664",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4314a22a-98c3-4d57-8df5-ee95f5e28d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271c3a05-6c16-435e-88c4-b2900fd5b21e",
        "cursor": {
          "ref": "b1b4293f-12a5-4d0d-b60e-c68aca4b9028",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a4c6c6db-fe2d-4380-a54b-3d786b1caa3d"
        },
        "item": {
          "id": "271c3a05-6c16-435e-88c4-b2900fd5b21e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "11d08b49-52bf-400e-9f5f-a5d23ddfd577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2818bf-d5d4-4561-9005-bb930dfe7fbb",
        "cursor": {
          "ref": "c3c84341-c871-4d8a-ae5d-756849cea321",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "29951e84-f258-4242-84e7-369cdec15748"
        },
        "item": {
          "id": "de2818bf-d5d4-4561-9005-bb930dfe7fbb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6190b161-e6bd-4710-a18c-c6391f4bc9e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3f129f-84cb-4d7a-a54b-a9b416336fed",
        "cursor": {
          "ref": "80ed32ac-4ad2-40c6-8e3c-7f9e5e9e0f72",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "bf9f4265-e2b0-4c84-a8b8-944db14d31c1"
        },
        "item": {
          "id": "5a3f129f-84cb-4d7a-a54b-a9b416336fed",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "150f861e-7cb4-40c3-8f33-f3188d5875a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9ae8c3-febb-4c3d-90c3-0b5366bf5d32",
        "cursor": {
          "ref": "e4ddb7e8-9e20-4b37-8373-bd2af31176fa",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "21eaf58f-6bfb-4c07-a780-f27c82de429e"
        },
        "item": {
          "id": "5b9ae8c3-febb-4c3d-90c3-0b5366bf5d32",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9787235f-0347-4dea-a325-fd9cd6b2fdf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66202b6d-9da6-415c-aa42-4c34522d8a80",
        "cursor": {
          "ref": "5845a219-bf34-49cc-8b6d-3ec4b8db4c45",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b29cb9d3-9903-40e0-85a5-c9b2b3c9d91e"
        },
        "item": {
          "id": "66202b6d-9da6-415c-aa42-4c34522d8a80",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4dca0c77-dae3-48bb-888e-32a877e0f8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114fcf77-103d-451c-8ea8-9911439a48ef",
        "cursor": {
          "ref": "80d43dc5-e4d7-4d14-8613-4b0e0cc655ba",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7328944b-11cd-4b0f-9fbc-fff850bd2d87"
        },
        "item": {
          "id": "114fcf77-103d-451c-8ea8-9911439a48ef",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8adde313-155a-44b4-88c2-be8dff2cb922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8b37ef-39e6-44a3-af95-7629bb38b106",
        "cursor": {
          "ref": "7d223891-47ba-4581-95fc-72aa8fc7a046",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f6bee8fe-cf28-4bac-9dbc-509f6b6f7b61"
        },
        "item": {
          "id": "9c8b37ef-39e6-44a3-af95-7629bb38b106",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e3925425-1e9b-4804-9321-50b85d0d1150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a177134-60d3-4d9a-b0c6-5800f8ec0be5",
        "cursor": {
          "ref": "55459587-ae30-47fe-8b04-f2c746a8f637",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d682cf65-c621-44a9-9eb7-43640ef95938"
        },
        "item": {
          "id": "3a177134-60d3-4d9a-b0c6-5800f8ec0be5",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "295a3380-3142-4058-ae81-aaf34dd4e3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f01f4f-06d1-41a3-ba8c-ce9e350beab4",
        "cursor": {
          "ref": "aee359ba-4600-4bd7-8af7-f5e02e299972",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "75080d72-a76f-42e5-a292-480fa85f4998"
        },
        "item": {
          "id": "e5f01f4f-06d1-41a3-ba8c-ce9e350beab4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b9bab20c-f95e-4fb4-8c89-b66a3671c943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2870a085-0408-4f55-a4a7-b0b56d9bc963",
        "cursor": {
          "ref": "5cd6ad6a-e44e-4258-9ea0-c721df563f80",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8ffa96d6-879f-449a-851b-f83cc938f7aa"
        },
        "item": {
          "id": "2870a085-0408-4f55-a4a7-b0b56d9bc963",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1ada4f25-37f4-4adf-9438-50054ed55064",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbb5cba-f9e5-4402-b327-f98269e4a605",
        "cursor": {
          "ref": "d35c3936-1a83-46bb-a8f1-cc6b8b43e291",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "045474c4-548a-4f8d-b503-d141bc5cc627"
        },
        "item": {
          "id": "0fbb5cba-f9e5-4402-b327-f98269e4a605",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "beaa4b6f-1aa9-4f72-afeb-01d42d3d81a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "ed00db58-56e1-4962-9ee9-8d6d42d3dcbc",
        "cursor": {
          "ref": "3d487cf3-0dca-4914-b0fd-b1fe35f17ff3",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4102ee64-feea-4ec9-b5f1-c8dd25c659c1"
        },
        "item": {
          "id": "ed00db58-56e1-4962-9ee9-8d6d42d3dcbc",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b4b3f2e8-fd39-4661-ad88-1ae68fc3223c",
          "status": "Created",
          "code": 201,
          "responseTime": 437,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d148a5-eb67-4157-b92b-6784cc4d341b",
        "cursor": {
          "ref": "bd108f71-2ec3-4f6d-ad7c-de0cfaa1b29a",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1aa455fb-cb44-4c84-9b8e-15ce07978a98"
        },
        "item": {
          "id": "55d148a5-eb67-4157-b92b-6784cc4d341b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "abf0f4ea-78ef-49a5-93fc-b385bd36cded",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b12f62-d07e-4959-a642-3ccaa7cc0b2e",
        "cursor": {
          "ref": "a6631c84-f2f0-41d6-9d3d-e98d1a91e185",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c3db817c-c9c0-484a-a9de-91119d446dd0"
        },
        "item": {
          "id": "72b12f62-d07e-4959-a642-3ccaa7cc0b2e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fe9395c8-6a58-4a94-a3cc-1dcf2132b1f3",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7042ff85-f624-45b4-9f21-32255b1a4a48",
        "cursor": {
          "ref": "1772ff0a-acc9-4c40-a07b-e0224087831a",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0d646542-f6c6-4d8e-af50-623bc8ec43d8"
        },
        "item": {
          "id": "7042ff85-f624-45b4-9f21-32255b1a4a48",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "32970270-4d98-4104-bc09-99ffd17de832",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c691324-d820-442b-94d7-a762adbcfe04",
        "cursor": {
          "ref": "f91a0d6d-7457-4c3b-bd1b-82c9b952b28e",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3254781b-393b-4b05-b7a5-a28e7198cb22"
        },
        "item": {
          "id": "3c691324-d820-442b-94d7-a762adbcfe04",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1ceb3223-bd66-4156-a6b7-5fde1e1f94cc",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-03T00:38:49.964Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-03T00:38:49.964Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "4c702c78-abce-4715-966f-1fc4bcfc42db",
        "cursor": {
          "ref": "ba1716ab-0676-45e9-bb7a-44048247a5c7",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "947ec80d-3cb2-44df-80d5-17d4d99d000c"
        },
        "item": {
          "id": "4c702c78-abce-4715-966f-1fc4bcfc42db",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "47b5e9e7-e9b9-4c70-9d70-d38393277788",
          "status": "Created",
          "code": 201,
          "responseTime": 351,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "917f62ac-8199-460a-965c-cb698912620a",
        "cursor": {
          "ref": "19eb2188-9c07-47ab-83b9-4a752a9ca14d",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "91ef6825-e670-4ce4-ac65-8613d9186356"
        },
        "item": {
          "id": "917f62ac-8199-460a-965c-cb698912620a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "99c4375d-58a6-4602-bbaf-08727c62ab6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61470083-cd10-45e1-9fd2-b9ab2fd3172a",
        "cursor": {
          "ref": "792c3577-6f9a-482c-9d21-a93009de0c55",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "07fb5c89-4497-45d9-88df-76813d14017c"
        },
        "item": {
          "id": "61470083-cd10-45e1-9fd2-b9ab2fd3172a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2a0e8a08-1b9b-4de6-a350-1c1fd8d53ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98d3d58-aadb-40e3-8486-53a71b456159",
        "cursor": {
          "ref": "c72ddc80-fef0-45ec-92e7-1a5daf45491f",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ae2a0b26-18a1-486d-8f8f-36d09077cf36"
        },
        "item": {
          "id": "d98d3d58-aadb-40e3-8486-53a71b456159",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "819f411b-f402-4bd6-b1a0-b92ab0b82fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8993c33b-28bd-4f71-82e3-d4bacc1d078d",
        "cursor": {
          "ref": "b20fdb73-6846-451b-912e-3a9893a3e0ee",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a2d7e551-7e7c-46ea-b0b7-262a695b1060"
        },
        "item": {
          "id": "8993c33b-28bd-4f71-82e3-d4bacc1d078d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "43e702fc-29cc-4c46-90a7-5813bc77f788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ad5b9a-ea6a-40b2-9673-e8716a63a189",
        "cursor": {
          "ref": "c9879e03-382a-47f7-b29f-2a0e4eebc5d6",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e89439e0-3d4a-48bb-ab4e-dc209c660301"
        },
        "item": {
          "id": "b6ad5b9a-ea6a-40b2-9673-e8716a63a189",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9f3ae29d-c438-4e79-8334-ffbc94d86f29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3365d9-111d-4631-90fc-1834a2b4c7ba",
        "cursor": {
          "ref": "b7d47915-893a-40ac-837e-4d7b7e508e5b",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8895b3ff-c266-4f0e-8fb4-968d9328dc62"
        },
        "item": {
          "id": "9c3365d9-111d-4631-90fc-1834a2b4c7ba",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e35c054a-8402-4cae-b64a-80736d1d562b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72482333-a44f-48f7-bcd2-ee784fa14f97",
        "cursor": {
          "ref": "21a3cb5d-2830-47cd-97c3-6efadf44fb65",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ebfdb254-a10d-4260-9cda-1f9e99181420"
        },
        "item": {
          "id": "72482333-a44f-48f7-bcd2-ee784fa14f97",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d6ebdaff-7006-4757-8232-b267e228830b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a942f7c-2cad-4693-b384-a7303e89832c",
        "cursor": {
          "ref": "47a78a86-7f19-4b6e-89d9-c321a09a4141",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4e2f7017-3af3-464a-b0d9-a4150a4e07fb"
        },
        "item": {
          "id": "5a942f7c-2cad-4693-b384-a7303e89832c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6eaaf1c6-b57a-4d8f-8c86-677647ccf85e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099299ee-3f74-41f2-9b8d-d4d47ebc377a",
        "cursor": {
          "ref": "64bddfb7-8866-4168-b710-f6aa01a4ac28",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1a588e59-aa56-4200-873e-f586baf0b127"
        },
        "item": {
          "id": "099299ee-3f74-41f2-9b8d-d4d47ebc377a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d4c1f968-ff52-4f65-8184-a48a03585ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9048d3-e3d6-4f49-ab22-e1ef2f754aea",
        "cursor": {
          "ref": "c758d898-0cb5-4a67-bf2e-2b7483fdd9ce",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2dece2d1-7e20-4c09-8cfe-fa3425e900ad"
        },
        "item": {
          "id": "0d9048d3-e3d6-4f49-ab22-e1ef2f754aea",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f01ce5e4-2ee2-4d59-9786-f5628a0fd288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc936154-96d6-4a29-8d7d-9316a2f36c5a",
        "cursor": {
          "ref": "6f1ef53a-789d-4f25-96a4-4a3878caf2b2",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "939ae8fd-6556-48ed-b31c-eeaeac5ce48b"
        },
        "item": {
          "id": "bc936154-96d6-4a29-8d7d-9316a2f36c5a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "455fe28c-400c-438b-8a7c-a018f39ae1e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14886f1f-1908-408f-8043-576847a5eda6",
        "cursor": {
          "ref": "ed87a480-5426-402c-b7e4-925f1aa2554f",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "bb34f8ee-f5e3-4613-88fa-51d63a0e95e4"
        },
        "item": {
          "id": "14886f1f-1908-408f-8043-576847a5eda6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7013232d-8c9a-4347-bf4f-84a84f051094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6011ef7b-7d51-4091-bc22-09f78818e281",
        "cursor": {
          "ref": "ae5c18c5-f6ca-47a2-aca6-d871a7bacdb5",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "714b8593-1553-4ca4-a751-107070850b9e"
        },
        "item": {
          "id": "6011ef7b-7d51-4091-bc22-09f78818e281",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "855c9c9a-dc2b-4ce5-8545-4323c569a467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a330f28d-31cd-4234-b11c-47a3312fdb03",
        "cursor": {
          "ref": "d629a488-acea-49ac-81d3-ae36b277d340",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "91bbacf0-5bf1-417f-83da-711b5f75c074"
        },
        "item": {
          "id": "a330f28d-31cd-4234-b11c-47a3312fdb03",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4bd39e4f-ac07-4416-9926-5a406a0244b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 110,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "10b68503-ea38-483c-8b44-ee019c526961",
        "cursor": {
          "ref": "68d9e0c3-bc60-49f5-84b8-51c0f93e9fb7",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "aa53fd9c-c064-4f49-85b4-a36368e793e9"
        },
        "item": {
          "id": "10b68503-ea38-483c-8b44-ee019c526961",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1e174f82-61dd-4dc9-bf46-e43c69a807aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e9e865-922d-4d9c-9c46-f8e3d0550f6d",
        "cursor": {
          "ref": "3e28bdc7-fb19-4f33-b0a0-8a144636b4a5",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "47fe4a4c-f6ff-4db9-8a39-80cfac6c3370"
        },
        "item": {
          "id": "06e9e865-922d-4d9c-9c46-f8e3d0550f6d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8bc55378-b6b0-4cf1-9342-10802ceaab8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe50cef-62ba-4f52-a417-0fe0d6cf690e",
        "cursor": {
          "ref": "c2c42a95-a08c-45c1-8845-366f96aac777",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2f13978d-1aa0-4893-888e-23b07c855430"
        },
        "item": {
          "id": "4fe50cef-62ba-4f52-a417-0fe0d6cf690e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "01da15b0-2f70-46f0-872d-2c0d43820915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28afa483-7f22-4935-99b1-974402a92d1f",
        "cursor": {
          "ref": "87251c70-cb35-4ef8-a219-50b6ae80860d",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8b82d2df-e513-4f68-b809-0efc26eed6e3"
        },
        "item": {
          "id": "28afa483-7f22-4935-99b1-974402a92d1f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "99bed8ab-82a5-466d-aa6e-526815e3f2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66b289a-044d-45e7-b142-0b8044eb90f2",
        "cursor": {
          "ref": "cf5b9942-867a-4654-88ff-67fb707f2d31",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d56eb6ee-f186-44dd-a2bf-ba72385682da"
        },
        "item": {
          "id": "d66b289a-044d-45e7-b142-0b8044eb90f2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "71946fb7-2c09-4b36-be49-7e54d1592510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02abaa6-54db-4bb3-97cc-48f33b9689e0",
        "cursor": {
          "ref": "fa864e99-87b6-4d57-b229-d1856027d69a",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "bf40b2dd-1b1c-41d2-b307-35b62f598734"
        },
        "item": {
          "id": "c02abaa6-54db-4bb3-97cc-48f33b9689e0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6f0fa01b-2b1d-4daa-b504-e51e60a77562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4b8da7-1830-4b0b-a54b-f3b181da4527",
        "cursor": {
          "ref": "d9f4240f-6295-452c-9f1d-a733ccbe6ff6",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "645c392a-cdae-44ac-8066-57c51b2a1bd0"
        },
        "item": {
          "id": "ec4b8da7-1830-4b0b-a54b-f3b181da4527",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3a69f3a4-2d02-4187-8422-3ca4cf4680ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac399745-dce2-4c2b-b1b7-7692470f1167",
        "cursor": {
          "ref": "ebbf0f49-5ff0-4e76-a6d9-d4d700d5d0fd",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0c0e0b20-93b7-4173-9a11-fe715498d0af"
        },
        "item": {
          "id": "ac399745-dce2-4c2b-b1b7-7692470f1167",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8e197f3c-dd93-41d1-b596-bda3f915186d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3624d958-8382-4458-9be2-5b4edebabeb4",
        "cursor": {
          "ref": "dd3a2c6f-a45e-49b3-8114-7e4987bead37",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "72810c89-4ae8-436d-9942-36db9cb3af26"
        },
        "item": {
          "id": "3624d958-8382-4458-9be2-5b4edebabeb4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f5e243aa-5632-498e-944f-e066fbf8aa91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f5aa3e-5c12-421a-93ab-65415829f35b",
        "cursor": {
          "ref": "4ea78026-da4a-4e15-87fa-8a855ab9614d",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d6890353-b2b8-4b11-b203-a161d22ae73d"
        },
        "item": {
          "id": "05f5aa3e-5c12-421a-93ab-65415829f35b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "70c38077-dc36-4c86-9285-72b9b5f83232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3822ed3c-2495-4c20-9adf-be4c64fd4dea",
        "cursor": {
          "ref": "a9d1a26a-96ff-4761-a564-6ee61f99e826",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7ba4c626-d115-4aab-adfe-d8c790b422e5"
        },
        "item": {
          "id": "3822ed3c-2495-4c20-9adf-be4c64fd4dea",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bf148dbc-525c-4f30-8f38-6c7f824e534e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba50474-a89f-404e-8a15-50a70714b413",
        "cursor": {
          "ref": "c0eeca4d-95fe-4de9-b570-4da4c9541850",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f5ce7055-36e2-4e3d-b68b-616d94629fbd"
        },
        "item": {
          "id": "1ba50474-a89f-404e-8a15-50a70714b413",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c1e561bb-dd5e-4f81-82be-073aecc6f4ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f52c4b0-1742-41b2-9619-1272974f1b5b",
        "cursor": {
          "ref": "72a996e5-d9ef-4cd6-b868-80c4f30b6e48",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "cf70ce23-c31b-427a-9037-d4f8703208f3"
        },
        "item": {
          "id": "6f52c4b0-1742-41b2-9619-1272974f1b5b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e5f6d318-49bc-421a-aca5-b58e838c284e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bea5c29-2a53-46fc-b3a2-c421a856f246",
        "cursor": {
          "ref": "68928184-e850-4092-b27b-6568e992af7e",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2d097dbd-656f-4f7e-9fdf-dc45525b85ec"
        },
        "item": {
          "id": "3bea5c29-2a53-46fc-b3a2-c421a856f246",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "21f395bf-8156-4995-b26e-c22b9cbf2755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e972c095-a181-43a3-bd87-3f89d942f68a",
        "cursor": {
          "ref": "bf71d47b-6121-4894-9659-31615a99852f",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7ff6ba47-5d9e-44e5-b84d-dfd9e283609d"
        },
        "item": {
          "id": "e972c095-a181-43a3-bd87-3f89d942f68a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e038b228-3ced-4d76-a6a6-4e00f4395829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e91f0a-c3e1-40a8-981a-d86bd2eb26cd",
        "cursor": {
          "ref": "d75c04b8-7b49-4429-9655-8bff6c2b54da",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "33e30879-3f5a-4a5e-a327-5f886150bdc4"
        },
        "item": {
          "id": "38e91f0a-c3e1-40a8-981a-d86bd2eb26cd",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7a8de58d-ace9-4cf8-ab22-e0842aad71d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ab0f1f-d273-486b-baa2-a344450f7217",
        "cursor": {
          "ref": "8dfc684b-e4d4-4d64-9219-10eeaede1526",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "387a861e-a8ea-44fb-b63e-4099793b96dd"
        },
        "item": {
          "id": "e6ab0f1f-d273-486b-baa2-a344450f7217",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a113e482-1fd5-461d-8747-8e8749c26936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e5d29a0-cd7b-4821-b0e1-5ebac5bae8eb",
        "cursor": {
          "ref": "b68a6ec7-5037-4696-829d-cee951e1e764",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c9303dab-da74-462f-9117-add4bd48f90a"
        },
        "item": {
          "id": "1e5d29a0-cd7b-4821-b0e1-5ebac5bae8eb",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "795cb211-fa05-46b5-b609-9ac9e13a63c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973f6557-8f28-4aea-a0fd-951d0a62bb69",
        "cursor": {
          "ref": "5a705d60-ba5e-48fd-b4f4-25fd99bbde02",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "30d0a5ac-66dc-42b7-a07a-88c5cf8deb37"
        },
        "item": {
          "id": "973f6557-8f28-4aea-a0fd-951d0a62bb69",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b5f8d200-7147-43cf-b507-f237ad94985b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2bda15c-e241-4ad4-bcb3-7e8e20968554",
        "cursor": {
          "ref": "d239bea4-0027-413f-b843-0ae395d5ac1d",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "10719a0e-2d87-465d-87e5-206bf0393bc5"
        },
        "item": {
          "id": "b2bda15c-e241-4ad4-bcb3-7e8e20968554",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "aa6cbe7f-e369-4a7e-b17e-32cfaad2464f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9b5b34-4f7c-4c6e-b5b3-bb4ca7d739bf",
        "cursor": {
          "ref": "3168a5c5-55ae-484a-973c-cdac704ce78c",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ae3ceedb-2cc6-4fbe-be19-91b8735e8194"
        },
        "item": {
          "id": "2a9b5b34-4f7c-4c6e-b5b3-bb4ca7d739bf",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "142b7826-241e-4ad3-ac24-35418cb22f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643a9fdd-0ae2-4f0b-8113-eb7bb0b51b4e",
        "cursor": {
          "ref": "477b30ae-eafa-403f-9bd2-0703d4a49ca5",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3b807e42-bc1e-4839-a9d5-93c80b394113"
        },
        "item": {
          "id": "643a9fdd-0ae2-4f0b-8113-eb7bb0b51b4e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b6048b2d-bbb2-4a3e-854a-e43b3a2c9dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26c6405-b5af-44a9-be60-54fe7e6f352a",
        "cursor": {
          "ref": "448e5579-faa6-46aa-8e04-9e654e117ae5",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "bb665aac-331c-4bf8-9098-68391b74a10e"
        },
        "item": {
          "id": "c26c6405-b5af-44a9-be60-54fe7e6f352a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "419db2df-2330-4cec-97be-200c8ff77191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef1bfeb-d911-47d0-9d18-3774cb1d5568",
        "cursor": {
          "ref": "d625b082-3303-473a-95f5-89af3774a729",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b2272e40-7073-4d99-a29a-b4bafdd6fe34"
        },
        "item": {
          "id": "cef1bfeb-d911-47d0-9d18-3774cb1d5568",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "65ab51b1-bbaa-4286-aaf6-9f26a1d5fa89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9259b23b-e865-42be-b5be-646a27ecc20d",
        "cursor": {
          "ref": "0fbb21d3-650f-461a-8f98-b4201727b7ea",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4435d958-d0c7-4a03-ba78-221b593f22fd"
        },
        "item": {
          "id": "9259b23b-e865-42be-b5be-646a27ecc20d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b44ee535-09c8-4eeb-b419-c96eebdd20a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13851efc-764f-4147-b89c-65398b6a1cc0",
        "cursor": {
          "ref": "750c1497-d3f7-4c12-a5ca-a6cd4df51eaf",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fe4d9b73-5a24-42d5-9e54-0ae4ca76b6f5"
        },
        "item": {
          "id": "13851efc-764f-4147-b89c-65398b6a1cc0",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "57b37596-abe7-4be4-9af5-0252c9396c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1521f8-f18c-472a-be07-c979fd3832ff",
        "cursor": {
          "ref": "422d651b-44b3-470d-a0a9-539a539f0e96",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2b2e3dcc-4faf-4101-9a06-1c9a83364cab"
        },
        "item": {
          "id": "ce1521f8-f18c-472a-be07-c979fd3832ff",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "502a8b56-a9c5-4e0f-b659-6950b56dbeab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ed6e90-a653-452e-aad6-940c01aee927",
        "cursor": {
          "ref": "74fd776a-c6f5-4d25-a167-079a6ec0b662",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "94043353-fdb5-4c46-9f58-5553b4bad5ab"
        },
        "item": {
          "id": "61ed6e90-a653-452e-aad6-940c01aee927",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "df269791-5f2d-4fba-9787-a34388d73eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cb1c9b-1d3c-4aa0-98a7-391660909d4c",
        "cursor": {
          "ref": "6e0ef79a-cd3c-4f41-923f-c74d945b20e4",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b1a4b028-05ef-4aab-92f0-662e88d0bb65"
        },
        "item": {
          "id": "d0cb1c9b-1d3c-4aa0-98a7-391660909d4c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "73984d2f-69b3-49cc-97f6-579a0e7b2db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae59436-0dc7-4233-8618-9eb1d7587a6c",
        "cursor": {
          "ref": "8e276542-b8d3-47e7-b6a9-eb46d1cca6e0",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b1f12db3-f053-464f-93c1-3712dc346311"
        },
        "item": {
          "id": "fae59436-0dc7-4233-8618-9eb1d7587a6c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c58c0094-83d2-4673-989b-d67e1bdc3ce2",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "a5390ca1-64c5-47bb-a72a-b38a1924be2d",
        "cursor": {
          "ref": "fd6f2433-6d84-495d-be80-41ffb3af090c",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d43d9436-b5ac-42b2-9c54-72e49d7944de"
        },
        "item": {
          "id": "a5390ca1-64c5-47bb-a72a-b38a1924be2d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5391ed24-3790-4fee-86bd-17fdd1795abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c12ae79c-3c43-453a-b696-ee5d767600d2",
        "cursor": {
          "ref": "008a3f12-0ba7-4767-b791-f734651256be",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "aa6a7c2f-19c2-482a-8e62-cd9a58f451e9"
        },
        "item": {
          "id": "c12ae79c-3c43-453a-b696-ee5d767600d2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "449b8fe6-a95c-4f56-9803-bc467bf98b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "211946e8-f8f9-41ab-b35a-495b12726bcb",
        "cursor": {
          "ref": "1305d331-6d76-43f6-878e-1d024ab299fc",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "072514b5-7baa-4628-8910-4cf91d8fcd83"
        },
        "item": {
          "id": "211946e8-f8f9-41ab-b35a-495b12726bcb",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3e386382-14ec-441b-b853-329108930bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a36353-9f50-4e80-9569-ce773136c438",
        "cursor": {
          "ref": "f3d0d8c8-d8b7-4d3d-9fce-59444c08c62e",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "260ff445-982e-4731-826e-5de969893d51"
        },
        "item": {
          "id": "77a36353-9f50-4e80-9569-ce773136c438",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "fad13b9e-2995-46a2-8930-da1490bde731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29b7d6e-6157-43d2-adfe-162dde3082dc",
        "cursor": {
          "ref": "01453d20-85fa-43e3-98be-7d693e71edfe",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6c69663f-cadf-4adf-85b1-c2892f148b8a"
        },
        "item": {
          "id": "d29b7d6e-6157-43d2-adfe-162dde3082dc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "67a9715c-537f-4449-8c6c-1c43d1a5ea32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8908c4-1679-4473-b55b-2e2f47450c3f",
        "cursor": {
          "ref": "22c9de98-9ae1-428c-a595-10cc7120a69d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8d5aae11-1261-4975-b454-2748f0a886ab"
        },
        "item": {
          "id": "9f8908c4-1679-4473-b55b-2e2f47450c3f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "38a3b3de-722b-4685-b002-c9935dd24f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051e987c-e0db-44c9-88cc-ebc92ee14894",
        "cursor": {
          "ref": "09779d9b-59b3-42e0-b15d-bcbb82e7cbd4",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5bde1c07-9052-43a8-a621-43c71aa542e5"
        },
        "item": {
          "id": "051e987c-e0db-44c9-88cc-ebc92ee14894",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "caf14e9c-480c-47b0-b1b8-4e80d89c6ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "939e553b-ffd0-4cf6-88ce-a8479c8febc9",
        "cursor": {
          "ref": "ccd9ddd1-6bf3-4f83-8af5-16d76c96b560",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1163a371-0d26-4999-9a14-e80e23200567"
        },
        "item": {
          "id": "939e553b-ffd0-4cf6-88ce-a8479c8febc9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "cfebfa01-d992-4ad6-a122-1aeaa43e9f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad06b57a-6a92-4683-afa1-7de000b8b808",
        "cursor": {
          "ref": "396c5f4b-58c7-4f14-aa5d-c7e0b39b7f8b",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ba277677-c32e-4cac-bf42-ede64b7feb7d"
        },
        "item": {
          "id": "ad06b57a-6a92-4683-afa1-7de000b8b808",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c945f48a-b549-4816-9424-44119a489823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111edd20-5af3-49cb-96e4-71047f5e8bfb",
        "cursor": {
          "ref": "eb42542b-c031-45e7-b510-63600d91aadc",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f249feba-4957-4643-a9b1-724ad2df0421"
        },
        "item": {
          "id": "111edd20-5af3-49cb-96e4-71047f5e8bfb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "633b7b36-d1fe-4586-9388-4cdf84b4129c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fbc2a3-ebc7-4e79-b435-49deecd30a24",
        "cursor": {
          "ref": "197a6c45-3892-41bf-950d-3aaab7ce2b1a",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f70e3a52-fa8e-4e39-a5a3-7352d8bba844"
        },
        "item": {
          "id": "25fbc2a3-ebc7-4e79-b435-49deecd30a24",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a6c4093e-f27f-4485-bd48-e9d505757f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e129e33c-9a4e-4b7d-aa13-7faba7f17327",
        "cursor": {
          "ref": "d34c0fdb-456d-4c6d-aa79-195ebefe9dcc",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "38c3cd74-0f93-4460-bf55-05a38ed5ab01"
        },
        "item": {
          "id": "e129e33c-9a4e-4b7d-aa13-7faba7f17327",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0a54ccc9-1bde-4fce-857a-060d145ae0f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb71c6f-a0ad-4a2e-b104-b7efa7715a99",
        "cursor": {
          "ref": "cdb172f1-ed29-4708-ba36-d1c3a6fd6166",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5b7488c7-ba5c-4430-ab16-2886adbadc13"
        },
        "item": {
          "id": "bcb71c6f-a0ad-4a2e-b104-b7efa7715a99",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "389e1804-a826-40ff-8532-a4757c3876c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b2d833-e78d-433a-a60d-39c055737346",
        "cursor": {
          "ref": "071881c4-b30c-44a9-b583-7a6d03e3d052",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a8d2d84c-490a-4b61-aafc-75ba84aa3702"
        },
        "item": {
          "id": "a6b2d833-e78d-433a-a60d-39c055737346",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3d1f287e-4a74-431f-ac04-26ba87678f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396af264-0297-4526-8052-eed5bd08ed1b",
        "cursor": {
          "ref": "b0e21255-72ee-450b-8b24-aa620ad43877",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4278b38e-f33f-45f6-8fe4-4d68c66f9592"
        },
        "item": {
          "id": "396af264-0297-4526-8052-eed5bd08ed1b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "817c6b25-1cfa-4b71-8ae7-0f3a6b2b8df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886df11d-72ee-45d7-bb90-b2fbdd089e63",
        "cursor": {
          "ref": "d3fa6e44-cb81-4c39-bf6d-1637f1692cd6",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "acb76b42-d033-4c56-9a05-bd8478562885"
        },
        "item": {
          "id": "886df11d-72ee-45d7-bb90-b2fbdd089e63",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "08e14337-6945-451c-8772-dca431f4da29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d725b6ec-3a5b-4c77-ac27-76d0616a97e6",
        "cursor": {
          "ref": "981bdf30-fccc-461b-87fc-644c57c18bc3",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b1d2ce91-02d7-4e78-8978-b2d2d8a14bf3"
        },
        "item": {
          "id": "d725b6ec-3a5b-4c77-ac27-76d0616a97e6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "715a9871-1f52-4e87-8f10-372e2801d6f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db4b4ce-d5f6-42f5-94e4-0ced8cc6a886",
        "cursor": {
          "ref": "1bee3799-4e41-4976-b892-7fb894d58113",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b6384993-864b-4288-909b-ef3d0daa0d40"
        },
        "item": {
          "id": "8db4b4ce-d5f6-42f5-94e4-0ced8cc6a886",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "caf1a33b-ee68-42fa-b653-0203eb8880dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29edecb1-9cea-48da-b640-9f7e74a4315d",
        "cursor": {
          "ref": "776b03b4-9aaf-4037-bc6f-1fac9d231c16",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2d77d521-bb3f-4d00-815d-5843eed2e7c0"
        },
        "item": {
          "id": "29edecb1-9cea-48da-b640-9f7e74a4315d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "94d9abe7-afd6-41f3-a93a-468a2e983c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db06a1ac-4d51-480c-90ec-875625c417f0",
        "cursor": {
          "ref": "39cfd478-e572-4b33-b351-714a11e4c0bf",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fd328a8f-962c-4baf-a1ca-a6d9cbbf35c4"
        },
        "item": {
          "id": "db06a1ac-4d51-480c-90ec-875625c417f0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "262e2020-ad75-48cd-87c6-949c889aaa75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a669e7-36ae-40af-9e28-87b16576258e",
        "cursor": {
          "ref": "9943fbb9-878e-4af6-aeb7-7f14a8c21cd1",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "899970f5-5bec-4bc4-a565-79aa655e309f"
        },
        "item": {
          "id": "42a669e7-36ae-40af-9e28-87b16576258e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f94ca18d-6279-460b-ab92-f46e0b7993f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a448e007-1812-42fe-b390-23ecebb3a68e",
        "cursor": {
          "ref": "70ab11b3-ddf8-4785-b0a5-6520dda4cd01",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3070bd68-0d82-44bc-b424-81cfc10589d5"
        },
        "item": {
          "id": "a448e007-1812-42fe-b390-23ecebb3a68e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6912b3a4-a80c-4c57-9efe-d8227db5c45f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab984e9-36af-4f0d-a047-fffb8c20130c",
        "cursor": {
          "ref": "13136fec-31f9-4bcf-8fea-db9b554deba5",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8f8e7801-096c-4cef-8d03-5a22de61d0e4"
        },
        "item": {
          "id": "1ab984e9-36af-4f0d-a047-fffb8c20130c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c34f1f80-4f1f-4f57-bc77-e3b2d80149d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63754325-fcee-4ed2-9462-856eb16dd947",
        "cursor": {
          "ref": "46a199bd-cb0b-4b74-9903-3f18e3be804f",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "66618395-7c1d-42a2-beda-3dc4745d9e84"
        },
        "item": {
          "id": "63754325-fcee-4ed2-9462-856eb16dd947",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3362315c-edda-45e7-b648-8b669a236203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "211453ca-36ad-4832-9425-9e1b44a71b3b",
        "cursor": {
          "ref": "eeb2873f-7ad4-4b44-bbf8-9d417d0db958",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c829c5db-6b99-4b47-af8d-7e0caee7300a"
        },
        "item": {
          "id": "211453ca-36ad-4832-9425-9e1b44a71b3b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e6b5ddda-3f21-4109-a8ce-99ce54b863d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2094621-5ea4-4c66-a06c-c8fa6eddc28d",
        "cursor": {
          "ref": "142fdef7-b4d2-4dda-b630-0e5c588016a9",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "aa4577fe-4301-49d2-b9bb-3f8205777093"
        },
        "item": {
          "id": "f2094621-5ea4-4c66-a06c-c8fa6eddc28d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "bae9eaa4-606f-4d05-ad62-08a8ecada527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f2497b-582f-4039-864f-007444bdd2e0",
        "cursor": {
          "ref": "94c429a4-d6df-44ce-9867-50705c3f8a32",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9a38e58a-1324-4d50-8602-e96d29f01cf2"
        },
        "item": {
          "id": "17f2497b-582f-4039-864f-007444bdd2e0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "86642f9e-845e-4867-9551-8197d1dedb36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b32e8b-5f09-4432-843e-ebb6120fe8de",
        "cursor": {
          "ref": "b9278f17-05b3-437e-978f-eba944b205fa",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7c555221-3b2f-42c2-8033-9c99c6bfaa58"
        },
        "item": {
          "id": "96b32e8b-5f09-4432-843e-ebb6120fe8de",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d84b8a25-9582-4fd8-ae57-8f05cecbb86e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec0034e0-3501-4357-8e7f-2edd70ff082c",
        "cursor": {
          "ref": "441bc0ce-65fb-4dad-8fcf-c82d1c9064bc",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3ccc26a4-7d83-428d-b3db-dc7b651f6d69"
        },
        "item": {
          "id": "ec0034e0-3501-4357-8e7f-2edd70ff082c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c6e16729-8967-4ae7-ac34-ad809ec02688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e853c9-049b-44ff-b96d-fafb9c2acfcb",
        "cursor": {
          "ref": "b63d2afa-ba4f-4e22-b1bd-f0f78ac6ed90",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "549d6799-4678-43e8-9ad1-8859ff6e52d8"
        },
        "item": {
          "id": "b7e853c9-049b-44ff-b96d-fafb9c2acfcb",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5b34cf1a-9adc-4a4b-81a3-a8f083b29b4e",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "9f20452d-0596-4509-9828-5445b3e8ff2a",
        "cursor": {
          "ref": "8256bbb3-15d0-4670-a8bb-b3a6a72f0307",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5e4914f6-bf85-44e3-843f-22ac251b97ff"
        },
        "item": {
          "id": "9f20452d-0596-4509-9828-5445b3e8ff2a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "874c25f9-ae6a-4ac6-a6cc-36b8c33b7a43",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "3068343a-1d06-46be-9ec6-a184e20392b2",
        "cursor": {
          "ref": "73a2b07c-2519-4d9a-8c27-7438f9bab87d",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d60101fb-88ee-4950-acfb-5598b12677f8"
        },
        "item": {
          "id": "3068343a-1d06-46be-9ec6-a184e20392b2",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5a8a6e6a-b641-4557-8604-d87c76049697",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "324f45a7-5e69-4232-800f-7b6614fe1ab3",
        "cursor": {
          "ref": "4a836538-39e0-441d-a58d-891a9f4652b3",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "18e238c4-70e2-4751-9e81-5d3b7a2fdfa7"
        },
        "item": {
          "id": "324f45a7-5e69-4232-800f-7b6614fe1ab3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fa539e3c-c1bb-4434-84b8-dc7b1e70fb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110afc4c-0a95-406e-b7dd-03eda2a5cf8d",
        "cursor": {
          "ref": "5bbc86be-8d38-4677-b810-3ed56d0d0330",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1b37794e-2d2d-4903-a3ae-bf8cb01b7a31"
        },
        "item": {
          "id": "110afc4c-0a95-406e-b7dd-03eda2a5cf8d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "cb764973-b48d-46c3-a18c-9a9c178d821a",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "ec39f863-5965-4150-9f84-a0e240df1cf2",
        "cursor": {
          "ref": "c1d88de5-e962-4662-8fc7-d9dc94ff83a9",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3494972e-1c9e-4c7f-94c2-85344a04fcf8"
        },
        "item": {
          "id": "ec39f863-5965-4150-9f84-a0e240df1cf2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "17c69462-9236-4827-b958-fff8010ada38",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "3136bea1-6c33-4f01-b96a-358b2863e951",
        "cursor": {
          "ref": "e0ae86b1-3894-459e-9a93-69b59a501e7b",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e8d6e7fb-2fd7-425c-8c91-73a4fc6d6510"
        },
        "item": {
          "id": "3136bea1-6c33-4f01-b96a-358b2863e951",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8234f330-9da4-445d-a7b1-a9a410fe751b",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "ca678f81-a57b-4f04-889a-3c4d6c60255f",
        "cursor": {
          "ref": "f3a98974-24a7-40cf-a3ed-83e3b521e3a4",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0847142a-d91c-4783-9618-62261177dce3"
        },
        "item": {
          "id": "ca678f81-a57b-4f04-889a-3c4d6c60255f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f582b70b-0f20-46fd-a012-4542e96bdec9",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "cb9a4a6d-04d0-4201-ac5d-7fce320ed356",
        "cursor": {
          "ref": "2121f8fe-a831-4c9a-a5d1-ab171301ac5e",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "aec4537e-6aef-404c-8c43-89e11e5211f1"
        },
        "item": {
          "id": "cb9a4a6d-04d0-4201-ac5d-7fce320ed356",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3e93fde9-8051-4854-be20-da105a5a47b3",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "7fa6236e-2a81-4a90-90af-64029227eafc",
        "cursor": {
          "ref": "13d1e50c-4676-42f7-8ec8-ac5780c3fe8a",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "022b20c3-5dff-4d59-b2ed-53025647edc9"
        },
        "item": {
          "id": "7fa6236e-2a81-4a90-90af-64029227eafc",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ec1dd0c7-1a63-4db3-9419-d81c78992ded",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "ddecea0c-994e-4d00-909f-6ebaae78af0e",
        "cursor": {
          "ref": "b89cd9d1-b06b-4d0a-a678-3093e1955d06",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0a06a0d5-d501-4a74-aa5d-fd010fa30ae6"
        },
        "item": {
          "id": "ddecea0c-994e-4d00-909f-6ebaae78af0e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4f2681e9-7900-4b35-9b47-cac39b93cf6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1ff6be-f154-4e64-9dd2-9e423b257edb",
        "cursor": {
          "ref": "0e974f92-5e03-4df9-903e-68bea3ef477b",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "019a80ac-5a60-4f20-958c-8f3af68d4deb"
        },
        "item": {
          "id": "7f1ff6be-f154-4e64-9dd2-9e423b257edb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "242c44f7-5a8c-4e3e-89e5-78d27aca391e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2883bf7-a3a1-45de-b84b-65096449aa68",
        "cursor": {
          "ref": "2fd8e599-a22b-4ab5-9a67-d7d20c7ba834",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2bb475da-dced-42d2-8934-d7d98de31c54"
        },
        "item": {
          "id": "b2883bf7-a3a1-45de-b84b-65096449aa68",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "85ba207d-f853-45af-b185-2dc394534a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe67c72-fdc6-4bcc-a3aa-29f95bf75b61",
        "cursor": {
          "ref": "051bb259-f703-4a0e-aee6-9da8398703ee",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "241439e4-9931-4180-b4cf-a5445f40a215"
        },
        "item": {
          "id": "8fe67c72-fdc6-4bcc-a3aa-29f95bf75b61",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a64ae128-107b-4ca7-b3d2-edf159070a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b154a9-06ac-484f-b7d5-68e6ab88cd20",
        "cursor": {
          "ref": "164c0e98-1914-48b8-8e02-7ba3b65010c6",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "26679133-eb00-4c4c-9507-36681b5df6e0"
        },
        "item": {
          "id": "38b154a9-06ac-484f-b7d5-68e6ab88cd20",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "04956554-aa34-4ae4-b4f4-992bad333eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982ad089-cd1f-4fca-98d4-e29a3df839c8",
        "cursor": {
          "ref": "6ddf4cf5-3544-48b3-9f88-7f7c5e751c35",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "12bcc9d0-fea1-4ce4-b6f2-423249040a65"
        },
        "item": {
          "id": "982ad089-cd1f-4fca-98d4-e29a3df839c8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b382a809-df9e-442b-8093-2d04cdd3297a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d52fd3-07e2-42f1-a1de-be4aee9e75c1",
        "cursor": {
          "ref": "a623edfc-bb3b-412d-841d-101afd007bc0",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4fb7d11a-3daa-4259-b3c5-1e7b0eea3eb8"
        },
        "item": {
          "id": "e0d52fd3-07e2-42f1-a1de-be4aee9e75c1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9c0ac474-6aeb-4350-bc2f-3f00e6a39f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c8a77f-1e13-4871-9f01-876c619a4ae9",
        "cursor": {
          "ref": "18eecde1-6831-4536-9829-b5d366535b91",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b9f81038-96b0-4395-a8cf-34bbd0ed8e7e"
        },
        "item": {
          "id": "12c8a77f-1e13-4871-9f01-876c619a4ae9",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cb8de737-1d54-43d7-bd5d-d804683a82e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b179883a-e050-4520-a986-4087400cdca7",
        "cursor": {
          "ref": "b040cbae-a36a-42da-b1c1-bdf10d2f0aa5",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f95e0b42-86ac-4575-bd87-947c80b96d40"
        },
        "item": {
          "id": "b179883a-e050-4520-a986-4087400cdca7",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "cb207342-4d19-457b-803b-9d49439d41f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f44f57-c874-4463-9b36-a91ac3ab26e5",
        "cursor": {
          "ref": "3d3388ee-e15b-4758-8636-c83579938fe2",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e1a572e6-c30d-4ea4-b039-ab74731517dc"
        },
        "item": {
          "id": "89f44f57-c874-4463-9b36-a91ac3ab26e5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6a8fb886-0dc7-42aa-8a11-cd91353133be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7790c705-368d-4033-bdc3-c56e2cbbbd41",
        "cursor": {
          "ref": "dfc150b6-ac3d-4df1-8b4c-73ab2618c63d",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e3c360e5-566a-4b09-86be-be52b60fc151"
        },
        "item": {
          "id": "7790c705-368d-4033-bdc3-c56e2cbbbd41",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b0c83393-3bf8-40a2-94e3-ef6d093ada73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfa8633-4f44-4c9a-8915-6ee63bd2c9ae",
        "cursor": {
          "ref": "98c24f03-63d6-4dec-adc4-9eeae2665d63",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "699fc272-13cb-4cd6-aa3d-2800ad8ff01b"
        },
        "item": {
          "id": "8cfa8633-4f44-4c9a-8915-6ee63bd2c9ae",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "06b30e5a-6e5c-46b3-8b22-08ad4cd6c7b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ed6956-3f90-45ab-b11e-da08f1c599a3",
        "cursor": {
          "ref": "a2549c49-b2f9-469d-9840-b7292cf511ce",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "99fbaf1b-6335-439d-8917-3020c623b1b6"
        },
        "item": {
          "id": "09ed6956-3f90-45ab-b11e-da08f1c599a3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ba4ee15c-0369-4c10-9c51-a606eb881c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7e1909c-b18d-4255-88c3-cd0394f0c265",
        "cursor": {
          "ref": "8c48ee3b-061a-42a2-814d-07c9ccc3f277",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bf464661-94a9-4f84-9bbf-b4f544c7afcc"
        },
        "item": {
          "id": "e7e1909c-b18d-4255-88c3-cd0394f0c265",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "def1fc53-c70c-41b7-a895-d3ac990f8260",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "bba0917a-737f-42c5-a768-9a40ae51e7fe",
        "cursor": {
          "ref": "5daa4c1f-6ba9-48fd-bf1f-fa07e639e8e8",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8f598296-c71b-4cc7-9637-dea241e79c9f"
        },
        "item": {
          "id": "bba0917a-737f-42c5-a768-9a40ae51e7fe",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "248ed37a-9e63-40e0-bfb4-6be20935b4f8",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "929c1e08-71be-4bb8-af90-7f61e5f240b1",
        "cursor": {
          "ref": "f7a2e148-df5f-4106-b3f4-32f79732f5b7",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "db1ab420-e978-4636-8b9b-3bedf9a18200"
        },
        "item": {
          "id": "929c1e08-71be-4bb8-af90-7f61e5f240b1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ff952074-eaeb-49a5-a869-1ad7775cd164",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "d6ab8ca4-a6a9-4ff0-b6d0-4cc94d7a4674",
        "cursor": {
          "ref": "a609b91e-1814-4f17-9ab6-90f59acdfe35",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ea19d771-bbb2-4fa4-98b1-efae435a08b5"
        },
        "item": {
          "id": "d6ab8ca4-a6a9-4ff0-b6d0-4cc94d7a4674",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "548228ce-38ad-4e37-8e7e-257166f6791a",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "afc704ab-84ac-458b-a53c-594b11f552b8",
        "cursor": {
          "ref": "a3b640ce-b6de-49b7-98d0-be3856805b19",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "aeaa9874-bef0-46c5-b14c-d6118f7f92eb"
        },
        "item": {
          "id": "afc704ab-84ac-458b-a53c-594b11f552b8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ee83cde5-d47b-41a5-9886-a2820241092a",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "091fbd97-0df2-4f0c-902c-09dabc06fb83",
        "cursor": {
          "ref": "6187d550-69ff-4fb7-8683-0801eac04865",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e63306b1-85b7-4dde-afa8-92bfa368ddb8"
        },
        "item": {
          "id": "091fbd97-0df2-4f0c-902c-09dabc06fb83",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b82880c4-440e-43d8-bc1e-cf6c87cbe1eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c9c55d-f92d-4b1d-bb30-acf997bc911f",
        "cursor": {
          "ref": "dde94f8f-aa10-4b21-ae18-576606e6b496",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cb6ddf77-0f31-4755-b303-c3697d60e466"
        },
        "item": {
          "id": "f9c9c55d-f92d-4b1d-bb30-acf997bc911f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "16d1f618-db4e-4164-ab90-d0e49fad1fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a5ec0d-3fc3-49ea-b278-5a0ef5e9c221",
        "cursor": {
          "ref": "260db550-7595-416b-8c27-f94c3a9b72d4",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7501bc0c-6850-4af5-9b00-a9eedda0aa65"
        },
        "item": {
          "id": "76a5ec0d-3fc3-49ea-b278-5a0ef5e9c221",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5d35210a-8440-4ac5-92ac-1b0418b840b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744d50b2-516b-4b4a-afec-daac93ed782f",
        "cursor": {
          "ref": "f12e7c80-2745-4b1f-ac8c-08aa33d3d0b1",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a26c9119-7a80-483b-a004-2304c699fc58"
        },
        "item": {
          "id": "744d50b2-516b-4b4a-afec-daac93ed782f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1e66b70b-f030-406c-931a-9983b7d495e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c38526a-a950-4221-be7f-3222cc7daf05",
        "cursor": {
          "ref": "208cf1e1-70b1-4f41-bdb1-adb2353f4866",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4589247e-1912-415a-819a-9c3eaa7d6e59"
        },
        "item": {
          "id": "5c38526a-a950-4221-be7f-3222cc7daf05",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1c97c7f8-f5ba-4970-8ad0-d43757e32d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a0cf5b-7b18-43e4-b08f-18e09a0e9661",
        "cursor": {
          "ref": "56fee654-359c-4b71-b15e-ca18f4375429",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6c53a3f1-95c1-4748-bb5d-0722892b539e"
        },
        "item": {
          "id": "88a0cf5b-7b18-43e4-b08f-18e09a0e9661",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4cd5298e-48af-4008-90b2-774dd4b06dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f814b5-b9e5-4d39-aea4-fd0703b448eb",
        "cursor": {
          "ref": "07e4ba11-0a68-4935-9323-b648fedce68e",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0cfd27ef-29a2-4656-b38d-6daa2c16a4bd"
        },
        "item": {
          "id": "25f814b5-b9e5-4d39-aea4-fd0703b448eb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7f75534d-eebf-4108-8183-ee8ed4909c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd404417-4d4e-45d4-8bba-5f2adb0e7220",
        "cursor": {
          "ref": "8bac519e-43d7-48a1-85ce-4894611f8336",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1c1b62db-f4ae-4113-b624-993f89326aa3"
        },
        "item": {
          "id": "cd404417-4d4e-45d4-8bba-5f2adb0e7220",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1c3e24a3-a1ad-4a4a-9ab1-89b3dd1c1d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22499a3f-03b3-4be2-b11c-8e1e1026d800",
        "cursor": {
          "ref": "6f37f4a9-ed37-43ae-ab0d-f609d4a0670d",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7dcaccb4-b6bf-40d9-ba5e-a8d96c881ea9"
        },
        "item": {
          "id": "22499a3f-03b3-4be2-b11c-8e1e1026d800",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2a29991c-e050-4e6f-983b-ff6f35041fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c3d3172-41e3-483a-8e7c-5a1567e596d2",
        "cursor": {
          "ref": "37b1b9bc-be7f-4b74-8ae1-b0ad227180af",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b2150704-4fe4-4008-a904-82b209b450df"
        },
        "item": {
          "id": "6c3d3172-41e3-483a-8e7c-5a1567e596d2",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2cf3d119-61b8-4f87-b090-3ccb0631277d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63694983-8d09-4f51-8c1b-e55fbd3bd9af",
        "cursor": {
          "ref": "68c0af71-c11b-448f-8186-e77c54102942",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1721deed-3b06-496f-98a7-68eb54fe0398"
        },
        "item": {
          "id": "63694983-8d09-4f51-8c1b-e55fbd3bd9af",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cf54446d-d499-463e-a65e-74b46f9931d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ac51af-bef9-4384-8d76-9c84e824b149",
        "cursor": {
          "ref": "00e5a518-8681-48d2-a7fe-1bf7c9b73cfd",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "dff5adaa-8a31-4652-9a8d-f807d98ae57d"
        },
        "item": {
          "id": "16ac51af-bef9-4384-8d76-9c84e824b149",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "277be2ab-fdcc-4d42-8978-d9c035923db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c0ccca-db58-450b-a68e-88f7a8423fcf",
        "cursor": {
          "ref": "4ca30a83-d47f-4cd3-804b-497852ccdd98",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2a152dc0-4faf-4fc8-bbfa-6a3d3333b240"
        },
        "item": {
          "id": "d0c0ccca-db58-450b-a68e-88f7a8423fcf",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0d96abb7-941a-4980-80b5-727bbb1b8a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1293aed5-4e5c-4c2c-a730-26e7efa0073c",
        "cursor": {
          "ref": "6f8a4116-593f-485a-bb66-39ed8ab03ae7",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "329d9ea4-4760-402a-b485-5a9a601b3039"
        },
        "item": {
          "id": "1293aed5-4e5c-4c2c-a730-26e7efa0073c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "61380a32-f1c6-429c-b8b5-3d5200e70007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac6d082-9110-40be-8451-17a41838fe63",
        "cursor": {
          "ref": "abf79322-f64a-489b-af19-a81275303db4",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "bb957e71-eb19-4bfd-86d6-c6bbf88c2e91"
        },
        "item": {
          "id": "9ac6d082-9110-40be-8451-17a41838fe63",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "48449a13-9908-49cd-a061-8dd65cb07db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53efd1f-8b5c-48b5-b21c-c3392120127e",
        "cursor": {
          "ref": "a099d26e-831b-4026-8a81-c6ee242d4af2",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "10a8c796-b855-46b7-a6b3-d8de06ab4419"
        },
        "item": {
          "id": "c53efd1f-8b5c-48b5-b21c-c3392120127e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d09db58b-0371-4338-ad1d-646d8734f128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c082ec54-4b1c-4759-8357-40f831f8dc07",
        "cursor": {
          "ref": "f282a6d3-d733-437c-b672-6b32ec37b554",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2dc8b54b-52eb-43c3-8fa1-b94479b6c7ee"
        },
        "item": {
          "id": "c082ec54-4b1c-4759-8357-40f831f8dc07",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f5304519-3043-4c52-a921-350b6f7bafc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78fb657a-430d-4da9-a445-b69b0f8bad5c",
        "cursor": {
          "ref": "54fe5e50-0885-4702-8d56-eab14c7a2381",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8056bba0-3176-4a0e-abe9-fd37004d3a76"
        },
        "item": {
          "id": "78fb657a-430d-4da9-a445-b69b0f8bad5c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e2ecb074-4a2b-4c2c-978a-e396da01c837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362b8a5f-7f73-42bb-b3d2-e547e88e28a4",
        "cursor": {
          "ref": "0c7bd480-f972-455b-9bf7-a77b90ad2d16",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b7645910-4d56-4641-907e-a9d6053e2f9e"
        },
        "item": {
          "id": "362b8a5f-7f73-42bb-b3d2-e547e88e28a4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2390d63e-8d2b-413d-b3a2-77d43d7b01c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63362548-0b84-4213-9f59-2526a2fb99ff",
        "cursor": {
          "ref": "651b3449-b86c-4758-93b7-4f8b01b7e2c2",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7c9eb665-841d-4041-91ea-1c6fab8d70fc"
        },
        "item": {
          "id": "63362548-0b84-4213-9f59-2526a2fb99ff",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d6d5e435-2837-4da1-aec5-89d3f3de9fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d896a9-8a99-467d-bd7d-07b2862a0783",
        "cursor": {
          "ref": "a609da1f-0e88-4eb4-8cb7-cad6345b27ce",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "febfe130-6054-4c25-ab35-5b58a9bde148"
        },
        "item": {
          "id": "a0d896a9-8a99-467d-bd7d-07b2862a0783",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cc9e84d9-bfb5-471a-b80f-22adf8035b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3c9020-0eab-4011-a183-5f58c9a0752c",
        "cursor": {
          "ref": "2370c451-07c2-4d79-ac86-69db23a58401",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4bcd2162-79c9-4418-a585-a18017604873"
        },
        "item": {
          "id": "af3c9020-0eab-4011-a183-5f58c9a0752c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f6ce14c9-626f-442e-a2ee-89c495afc64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb82d57-6ba1-4cdb-9e30-69d651d78f74",
        "cursor": {
          "ref": "1fc2d6d6-3b77-4e8e-887b-088c2e490405",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "63c017e9-c6f8-4da6-9bbd-81a211d287f1"
        },
        "item": {
          "id": "cbb82d57-6ba1-4cdb-9e30-69d651d78f74",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "82881291-8c8d-46e6-b1aa-c601a373873d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf7a2f1-3ca1-470d-9a01-817dbc4a786f",
        "cursor": {
          "ref": "7ca414db-45fb-4faf-8e16-0cb37b5cd221",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "de8070d1-c45e-4268-a08f-96d995867af2"
        },
        "item": {
          "id": "aaf7a2f1-3ca1-470d-9a01-817dbc4a786f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "342157e6-6cac-4553-ae01-9f9bbfdc117b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7788cf-9358-4f89-a664-020fe23614bc",
        "cursor": {
          "ref": "3a69f392-f3c0-44cd-8e48-fb615c6985ae",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5e504a15-1e5f-422d-b447-26853054b6ce"
        },
        "item": {
          "id": "db7788cf-9358-4f89-a664-020fe23614bc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8426aa26-927a-4952-b8c9-a6a038cbc8cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7821a5e-fcf7-4601-90d9-c7514f29ae52",
        "cursor": {
          "ref": "688b3fa3-3d7e-495d-962f-e2be71789268",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "888fcc2f-912d-4583-aee2-0c25cd139354"
        },
        "item": {
          "id": "f7821a5e-fcf7-4601-90d9-c7514f29ae52",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "de983e49-5a57-44b2-8fdc-6e1375fb07e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2676a86f-17ae-449f-aced-9eb6a624f0a0",
        "cursor": {
          "ref": "3a2c0bc3-018c-4ee4-9e62-b1322ed11b1b",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "98336fb7-85e5-4dec-a343-86f3dc40a902"
        },
        "item": {
          "id": "2676a86f-17ae-449f-aced-9eb6a624f0a0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6eea9d5a-9365-45d5-886b-cab6b5480780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de803357-1fc8-4321-b269-603ff1ebad81",
        "cursor": {
          "ref": "a655ed9b-2c1a-4eac-a899-5d333218781c",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "168263c7-5267-47da-b621-6ee7fbb0dd35"
        },
        "item": {
          "id": "de803357-1fc8-4321-b269-603ff1ebad81",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f77369df-357e-4d2b-9afe-36f41dec3e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e48125d8-f35d-478c-95c7-2d3d76753d37",
        "cursor": {
          "ref": "8f1d5740-8b11-4b31-9620-634c6c89c7ba",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5b384b69-80ec-4e4f-8b4e-bb2b17557c53"
        },
        "item": {
          "id": "e48125d8-f35d-478c-95c7-2d3d76753d37",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a26e5490-0cfe-4c4d-ac59-24527b8e33a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66b40ac-ec00-4a3e-8a80-71df6a8d254e",
        "cursor": {
          "ref": "d89b1b3a-f3bb-4168-9eec-9a6464dc353c",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "11d6bf0a-37da-4cbf-8cde-f7f9e5df48b0"
        },
        "item": {
          "id": "a66b40ac-ec00-4a3e-8a80-71df6a8d254e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "60637375-bedc-4dd9-9faa-a14d51b975ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9aa91b-3344-4ca2-94b7-4517eab1aa44",
        "cursor": {
          "ref": "baf70f00-0a40-4823-8ebf-5aaa4b878fa1",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e50c265e-67d1-469b-8b70-faf26977a9e4"
        },
        "item": {
          "id": "2d9aa91b-3344-4ca2-94b7-4517eab1aa44",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "03657684-cfec-4a8a-96e1-b9a971f684f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16646e0-a2d6-4706-8dd0-435d95738fa4",
        "cursor": {
          "ref": "6202bc84-f5f4-4da8-9667-6634593b621e",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "270de0b9-632d-4354-b001-302b0b7d13c0"
        },
        "item": {
          "id": "b16646e0-a2d6-4706-8dd0-435d95738fa4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c608c24d-3d92-4e0d-ba67-17274d188576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93872ce-191d-4c0f-ad97-3baa77565bfa",
        "cursor": {
          "ref": "2faa81ff-203d-4372-856c-43f09b15793d",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "239a8fbb-dba0-4059-bf24-24e7bed18c85"
        },
        "item": {
          "id": "b93872ce-191d-4c0f-ad97-3baa77565bfa",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c4810f77-ae28-4128-902d-cff7c2fdee99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17bf592e-4f99-4981-88e3-2d0d206723db",
        "cursor": {
          "ref": "508f0607-3dec-4956-a63f-df45b11675e2",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "34a7ec0a-3fc0-4297-b520-6cdf4ed0d6fa"
        },
        "item": {
          "id": "17bf592e-4f99-4981-88e3-2d0d206723db",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a62696d3-d3a8-444d-b8a8-106c3f76b6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639b0043-ea36-4ce0-9eb1-1b79bff63199",
        "cursor": {
          "ref": "0eab0f3d-cf7f-4b18-a850-b8e38df91bd6",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "986ee1fb-3b75-4a95-83a5-95590cec9358"
        },
        "item": {
          "id": "639b0043-ea36-4ce0-9eb1-1b79bff63199",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "bd459e74-7a38-4b64-aaac-69f92b79fef9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6853144e-cb9a-413a-9484-5cababcf0518",
        "cursor": {
          "ref": "181500de-066d-484f-9abd-d82af29c0005",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "01ad3ff1-6046-479b-b8c5-6ed32f23fc50"
        },
        "item": {
          "id": "6853144e-cb9a-413a-9484-5cababcf0518",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "73425e7e-d45a-41f1-bd77-a4602afe195a",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "647c6c69-8985-41fe-b771-ccb1bc3b3a8d",
        "cursor": {
          "ref": "54718969-f196-41ed-8f1e-774e5b54bd82",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "908ffd62-49fe-4ace-9cdc-fbe171afe082"
        },
        "item": {
          "id": "647c6c69-8985-41fe-b771-ccb1bc3b3a8d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b4e493f7-da36-4004-8877-c994c542e6f7",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb97cbb-730f-4c3f-8686-26817c021ffe",
        "cursor": {
          "ref": "44d4af0c-c247-473c-ba46-869c3bd8ca0f",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "82eaa431-11cb-4c53-afac-533c62182939"
        },
        "item": {
          "id": "6fb97cbb-730f-4c3f-8686-26817c021ffe",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4502893a-072d-4cf4-9897-1649f4db5e2b",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e835ad-8df1-4f87-b759-d81c79e93dfe",
        "cursor": {
          "ref": "7553cd4a-de30-46ed-b49b-23c3fa6a96f3",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "52ebd247-e085-47ef-a2e4-286f7eba6598"
        },
        "item": {
          "id": "c2e835ad-8df1-4f87-b759-d81c79e93dfe",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b535503e-827d-4ef2-b898-334f036731a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e835ad-8df1-4f87-b759-d81c79e93dfe",
        "cursor": {
          "ref": "7553cd4a-de30-46ed-b49b-23c3fa6a96f3",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "52ebd247-e085-47ef-a2e4-286f7eba6598"
        },
        "item": {
          "id": "c2e835ad-8df1-4f87-b759-d81c79e93dfe",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b535503e-827d-4ef2-b898-334f036731a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc99f41-6de3-43df-906c-92c88fd33cd2",
        "cursor": {
          "ref": "14d1fbf8-f36a-40e4-9bfe-033176c5abb7",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ac3f80aa-0ab9-4ae0-ad0f-f539d7409ff3"
        },
        "item": {
          "id": "bdc99f41-6de3-43df-906c-92c88fd33cd2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2aec94f6-92ef-4db4-ac89-713738dfed1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f830abd3-27c2-434e-b4da-3f3a284f91eb",
        "cursor": {
          "ref": "5357018b-f5c5-436b-89b5-a24f86c2c714",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2c4fea14-0ac7-40d9-9c5b-a58df06ee711"
        },
        "item": {
          "id": "f830abd3-27c2-434e-b4da-3f3a284f91eb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9232a936-ec33-48b2-a85c-6f7d1912909b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}