{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0bfaf41b-693a-4885-9522-04253fea1235",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8776ab8a-45d4-4395-8d68-b080ce55fdbd",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dd6f4783-1e2c-4ef9-ac02-6d7db3efbb6b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0e4c2851-c8f7-46b2-b8e1-fc3ddaa459ff"
                }
              }
            ]
          },
          {
            "id": "93997440-b48b-4e91-b22d-c968e49422ec",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6626656d-334c-45e7-a4ac-1ca8fa49b5bb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "562e29c8-038b-4927-b3e4-6915c6eb1e94"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e3763728-c33f-4d76-9cdd-f4af123dbfc1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "bfef494e-4148-47ab-a3c5-7651084fc7b4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0d2f93a6-8f25-4a15-8b20-93fde226b148",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0cc3ba9a-a2af-4589-9e35-d0ca26258e61",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "376a2f1b-abb6-4dfb-95b9-b2bc6c30728f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "289cd854-a611-4c81-bfb0-32e1dae720fe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e2a14ed-904f-4296-a39b-de263202cffa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d6ad893d-8fe8-4faf-b529-888fe520716e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8ed99446-d4bc-4900-92f3-4bbc9113d335"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd7b827b-bb94-4110-99d0-2ca7701754da",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a8a7743d-2df5-4a53-8ff8-dd8fb0caeb5f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10d09c7f-7e08-4217-b64f-6d2c3d9230ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bf8303ab-c989-4dae-9e4a-813ddbac5681"
            }
          }
        ]
      },
      {
        "id": "e57428b8-86da-4e65-8920-51f228e7ca0d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8988b4cb-80f3-4945-820c-9de89dea631d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "01ac1760-839d-48e3-bed6-0d70074b9e6c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "33a12999-af80-4e3b-be0b-1956f3b6f74a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1961317b-385e-49ba-a8fa-3e55f1e40b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "659b389e-340b-41f9-b36d-0260f261622e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3674f33e-274a-4ddf-acdd-90841dd2c1fe",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51026e7-8401-4a12-86f5-1c7a85378c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2156b28-df0e-4a31-a48c-24181b4ce0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf51fe37-50f0-451b-9cae-ca9a9b5318ed",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b72a89-e139-4218-bf90-f62947724ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4016a3b5-8e88-427b-9e18-5edf6f90c088"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "42a5a158-9014-4814-ad65-8e0a2f0abdb2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "697258f6-5fc1-4e75-a80d-a822cc74c383",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5869ea-fd87-48f0-b056-21435d93f109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca72a78f-3dc4-44b4-9de2-af0ebb4c08f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c10a8a7-2585-4f64-bd32-fed740494d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b162fae-eb9f-46d7-9881-0972213a0793"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "76af3fc0-01ad-44e9-843a-0ea3b3aaffd4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "68d96606-e76b-40ee-982f-66170aa1bc2a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "452abdc2-1e5d-4de3-bac3-ea89a0fa084a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c86a0b0c-0f15-4dac-b3a8-aaa76082f59a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f4bb89a9-a781-45e5-93e1-aaa93d926e2d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "eb0b5d2d-5eee-4c84-b166-dd6ef5222c96"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0d17e3c0-4cf6-49f9-9c51-f6f47cfec4fd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f9706b7c-f3c5-4a1a-99e6-807fe8dd03c7"
            }
          }
        ]
      },
      {
        "id": "474b757b-fc72-4958-a247-53521f99d404",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "172b14cc-c58a-4649-9010-f140d05ac14c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a127eef-c141-4122-9dc1-1a2b8da13825",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "61b6ddc0-2574-428d-86e9-30129e997b56",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a465787c-dc48-465a-8298-71ae422514d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ba51dbf-7fe8-4a7a-9b74-ca50d4314bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a0e242-f988-477a-be55-1e59caf2bff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28984936-c4db-432c-ae40-f368e78fd7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98152993-def6-49db-89cc-5b290795e555",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b206f352-1b00-4e37-b00e-bb7846f9a4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de5c87a-2ad1-40c4-9904-f982f2929af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9e9454-e2bc-4c1e-a648-163f4d77a0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e810a093-d494-4962-ba1c-49c746f52e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983037aa-6d2c-483f-8eca-d90af234c77d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c59389-e84f-4a03-9e05-d5b642399a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10dfc746-e0ad-4e38-b9ab-c5d1c03f270f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ddaa53-40c0-4c02-8a6e-9b273f0ed05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "269163b8-dde9-4981-bc0d-c4d7385e70a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc39add-7461-4c07-8631-123a5cb0b013",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40bf9dfd-a7f8-471a-8b89-10b5c02d319f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db5dd147-b36b-41c8-85ae-1e8624c928e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ee95af-80f3-4cb7-933a-ab80d5418754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d138ff54-437b-4391-a476-701f8a94ae9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c757b95e-0e70-4a2d-8656-4e94578749a8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d3ae6f-f6eb-4d7e-8a2a-09abb12c7871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a84b9db-adee-429c-aa2e-1894fdcb1fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942e0638-fe7b-4c73-909b-7d2e50f446d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe990d70-8089-44dd-9eb6-19b7339d54e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998fb85d-04b9-49c1-8ec9-8d70d18b7420",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360d3b63-0d0c-4bca-b7b4-3be7053b4208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e2f18d4-c079-4948-a36e-74bdc0620137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570bf169-6aa7-412b-a027-01839fa6c30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94088412-b888-453f-bb13-cc40da8a8405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bfe3052-e6ac-44c6-bfa3-55a36c35e531",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6c8951-763d-4827-921d-ed7b07842c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb542871-31f5-4afd-a6c5-4a546ba041a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57431c0f-809f-4de9-8afd-2befe2d8e5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57e8b16f-f12b-4d12-b398-8f0f3481f774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "790139db-9425-49e9-85d0-39ef7bfa7465",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52205f54-8313-491b-8b14-febb3f7d0a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6406bbac-e419-42d7-b93b-fa128a65c463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647ed709-22d8-4135-a1be-2da466f30dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c31481e2-e7e4-47c3-8d67-e371c613f764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb152ed-c379-4ee2-b696-a11e514e35a4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "828e6004-1f66-4e57-b515-1a68aa2357e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9934bcb5-acb6-4ca7-93ff-4df545dc59d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f02c6a-9d94-4060-aad6-8d8fcccbd516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bd99414-8aa4-46ed-97c4-9847668082cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f063da-5e36-4793-bdf7-5af68cde91cd",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3619f90-616b-438b-86e5-761e28bb6d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "306226a5-ed10-4eca-a737-d1d0a01c796a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7f09de-e5a9-488d-8a81-edf0a3855b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f24e518a-af17-4620-8f45-2cf2d6be14b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263ba443-38ed-481c-b57c-0ee6e4808ad6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9557879-b4dd-43e1-85e2-fa1bdedcdb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d223180a-cd5a-4844-841b-47ca83191ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d92ac1-6fa7-4619-8de8-bc3828fa230d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdff36b4-e19d-4932-9bd6-2baa71baefb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f2a2e6-d604-4a89-88da-08028f7ab178",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a119623-f914-42b8-8e86-d5c0bae7a838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f9df248-0458-4e27-8cd7-decc7ef42732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2ca43c-cc61-472e-a5ba-935d0dadc577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eed3c414-7e98-4f6f-bba4-cc92177107b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21563e22-bc59-4bd5-a3aa-d96de99898af",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ca3f19-6567-4071-aec0-06f1e360a67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce45a63-8856-4b4b-8397-00e6a852d541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc30504-fd80-4a0a-bd73-809396930036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2109d017-9018-43de-a81e-010c1c9ffae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df834ab8-14de-484a-a76d-471353691028",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbf4d6f-5ba2-4f47-a7c8-666429d65b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e055441-da7f-47c8-b7c7-687c9dbb549b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dada8090-1147-4334-834c-f735f6cfbb2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c540b62-f534-4768-a163-7caef530ecdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc33b85-3944-4e39-852b-00fabfc9bb56",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ca7b10-3990-4b6e-adf5-a74539e71fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b467429-83ad-408c-ac18-f7c8279bbcce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6f1a62-6b4b-4f06-a878-ebdddd97fe12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77e5d56c-d708-411b-8923-102475d3716f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c344bac5-81d3-4648-bc9c-6bb2dee7dcb5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b66b0b-cd50-4415-813b-008d35fd9c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b44acf7-d4f1-4b0c-9930-b9ebe7085f05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b6c8c4-5262-4269-bb53-d58c3959d57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d011f714-2710-4b98-a486-efff7d96158c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec753043-fb5b-4ee8-8e3f-075d2f54e16d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa097fa2-13cf-4ea0-8158-c2ad2ca85bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f11810-4d10-473d-871b-e9ad951ae6a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b7b94f-0bde-4074-9b32-9e09cd5f8619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ecd92230-8c34-4964-a271-bed9f4a7e500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b756222a-2c76-4486-b735-7e830ec28020",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b127d3bd-9030-478e-8114-0e5bb7bf81ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907926a4-31a2-4bba-98ff-1b791a71a363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f739ad4-53b0-4547-a798-47ceb664ed9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e2fa83d-a6c8-4212-82ba-a76c6eff0aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00610d44-27e4-41d6-8a8d-59963df2c141",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e55936-341a-4249-ac37-53cbcbbe4bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05d4006e-a462-4469-aebc-bac4f6cb6eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41dc13e0-ac4e-427c-90a7-e79865770013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c801790b-8101-49b8-a0af-8a1a98bfe9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0b9a4c-95a8-4a43-b6df-da8f556afeee",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97013b5-4808-4599-95eb-0085f262712d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2da7cf-c098-4793-b7db-43583a989a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4740be-ad6b-4b98-84c3-c1ad5c6804bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0abc4288-a6a7-46d7-a743-436fafba2f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f9ec54-251b-49a1-92ca-503758ee2433",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a3ec44-a345-4d09-b39f-a4eac53e1660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db5fa85-cb05-4459-9e9a-51bb54a2150d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb578f6-ba1c-4a7f-a196-7e507a8fce1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b78ea625-5dcb-45c1-a16c-13f9c5c56a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5138fb3-348d-49ea-b718-0bed4274fcae",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf5383f-fc41-4001-8b05-010830464be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "868596d2-50be-4c42-8b37-877f41ba6269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f185bb60-ee9f-4a4d-ab5d-d715e0c6fdd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0021b05-439b-43cb-9ee9-2094639465b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d00436-0b11-489f-8b4c-4aa28114ac2d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52fae259-85a2-4418-8dd5-53d01357420e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd61876e-5593-438e-b999-6f3017ddad65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a783a74d-7e9b-4f9c-97cd-85afb65af05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "45000d3d-8149-40a3-99c0-df5afc740d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414d6fc0-100a-4548-a61e-44d326a397bd",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1917cf-3357-42ef-bddb-c29b1613e266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e8ed57-3931-4c80-8b42-ce0a0850fd86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce4b9a4-2bc2-47d6-9283-6d7f07b1a567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee95441a-2312-45d6-af00-cc799f769d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2e7bee-dff3-40fb-ae49-7bc6cf54a504",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def557b5-ada1-4a06-a834-796b5e22ee9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4009a14d-f929-432a-b8e3-c658a3c94934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020df938-d5e2-4117-be4d-6f0c710316d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d73c90c2-7eee-4cd8-9439-bd780af766a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea0c0b0-098d-47a0-ad28-269b1e2dd6c7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "889e836b-414b-4c27-8848-637df1a4ebfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be724792-ff25-4b84-aef1-ab512e1c46fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9074d5a5-44a4-4f4e-b56b-ac1a2d50d385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1ac2602-6e32-4ae9-82ac-e7584e2e07b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f90858-99ad-433b-9ea4-ddb76112889f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a46bd8-a14c-47cf-a164-5fe756ff6b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43855d06-6458-4ccc-8051-558a1a37e800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0756f868-854d-43fc-af20-3a83eb8f6815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c121c1ff-c716-472e-a183-9a5d3248ec00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169de5a8-371a-4709-9ba8-1a3b908c95cf",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57239f6-4e50-4058-b204-e79d40d252fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bdc6390-3dab-484a-9b0b-cc39dfc190eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98bd5fc3-12a0-44cd-8065-ffd3d8f9abd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c251196-3168-4101-93ea-83c21104c61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51899804-dd1a-4ec2-8998-aaf681eb75db",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c98dae-efe2-4600-9424-d71710dd2bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e563311e-1be3-40fd-8afc-7d2cd31eea4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00fa9f34-e1ae-4fe4-955e-9599f12ac757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd3c37ee-bc74-4ff5-9b01-f831a9781958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2a686f-031b-4b24-b0d2-3706a69247b2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca90b56-94c4-44ed-b2a5-c3568a9d78e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8b8d63-5883-4220-a4b8-3a7a7bd8f48f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1262aa-ddb6-4552-9d77-6ce7edb86ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3eb7c5c-7f14-4555-8d4a-02e4459a3e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32740b9c-4147-4bae-b6bc-74f1634e1599",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30906661-9317-4854-abc3-20326c663987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad463e86-e1d1-4713-a5b1-b879a714332d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119c1a15-6e92-457e-b66d-680acdf64159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f75430f0-6046-4c6d-b0a9-4c3f14eafa9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f9197a-6885-4de5-accf-b015c9704325",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc73136d-7136-4be8-88d0-803bbfe80fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c464f4-5a0d-4e99-badb-e6140652fd57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13441797-967e-45d3-86a9-f1eef8fc280e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc51539-cfed-41a2-83e8-d478d10299cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd613060-07f1-4205-aee1-26b1fcda3b17",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb99c50-e472-4a01-b0e7-9dc7dbe7998d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a23cce6-3606-4f36-ad41-b6b1ae752c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17644e08-f035-4ac1-b900-c1336e4095f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "603b88ee-081d-4d0a-b5d5-2545a093b7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a380ffa-ff8a-4a59-bddc-ae60fecee296",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe95441-ae6d-493e-87ee-a4471293f2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d26f523-7b79-48d6-b41a-ec3ec19fdff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce37eca-d436-493a-8d33-ef2f3510a9e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42eea897-286e-44a3-86d0-3f262a867e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85f5f5d-f97e-4bd0-b93c-a96efcef97b6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f1476a-e189-4eea-ac79-6af8db9081b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d24fc889-d3c6-40af-89ef-ca3537362dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbee51a-3675-4748-836c-903019728fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3cf6a113-a12c-4119-910a-0c18bc844ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f60ce9-2f1b-428f-991f-b08f47c055e6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8fa011-8696-4f44-bd7b-8eb18810b3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4ff0b47-9928-4636-8a7c-07e86c56f6de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a917d739-2478-4712-b0aa-db22494dde55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d4f65d3e-ae54-4bac-822b-b9a997ad4231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f36b87c-b816-48fb-a8f8-50f1c2fbd6ea",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb801c46-95bf-4905-bcb3-c71791b53c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d8faaa-802a-41d2-a9c1-20f2c79d0d03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2bb68b-363e-4dcb-b64b-bd0146d5a819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "854f0fd1-6aa7-4b99-8bf9-7afc1196731b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f79b3bb-7bf0-4b8a-b8f5-05d2c6d48ced",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9ba7f0-f358-4670-9374-b708edf34122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "def6db26-640b-47da-8be8-f0c7dcb59b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0ccb2a-d3de-4181-b3d9-7e7f765cb9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "471bcba0-2177-45a1-8de5-98332d7b6d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff31809-88a6-4a24-b6d3-67b8e8e67728",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbedc51-f0c5-41a0-955d-c716eef5df19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaf15780-0350-4f2a-a8da-74a39edde0f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2115fd-edbd-48be-93f4-cb04e9efe699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "907dbc04-847a-4561-8627-03ad01c922bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a6b728-1fcc-4cea-af53-e408031b8717",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7205e4b-d397-40f0-9071-a34ab96163a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afad0bd1-18d5-488f-b7eb-c24cbb9fcf37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08dffc3-d91a-42d8-8b66-e8492c1d75af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f19affce-23c5-41d2-95b8-fbdf8da07e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406faab1-20e1-4cf2-81cf-b2f3c7426f9e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78a3626-b8c4-42b0-895a-cb5e09d946bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3239befc-e6bb-49b1-8fe1-e2fdd17feba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcaa6dfa-e19f-41a5-be2c-87eec2fb3d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd99c9dd-1031-4850-9fe7-d3174769566b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a164658-54a1-4a32-874a-2c48376329cd",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3536e53f-38ba-425a-920f-b70f23cd7cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bd523b6-18dd-4858-b2ce-b8b7735ed50a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af51601a-d11c-42bc-a840-c3f22d4cc27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "fc667224-a524-49e0-b34f-f68989a5be84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dfc5c6a-5625-4294-bb9a-99e68f9d505a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ce3591-f97d-4aec-a657-545b8071b39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f9e13d7-b8e4-4083-a4f6-3b51d8213c89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e9b37f-b49a-4998-9159-5f93c34527a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "17eca8af-9417-46c6-ba4e-6f3bda66d94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea15735-d0e3-4adb-9d76-3e543ba255a3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1cdbde-3462-4788-a351-a4f77e809a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87c30d03-5186-4f26-b50d-45c33559c2e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a247d5-e1c8-4a3c-ba39-8d296bfa7055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c86d3875-7256-4341-9434-6972ed320588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2efbbb3a-fb8f-4cbb-b54c-9b084d73ed69",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca89975-3643-4757-9fb7-0627e61f1a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f5458a1-9ae3-4fc3-9be8-ac44a2cda2df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4e1c08-e7ec-4a89-8f8e-8c96a8013c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4262f339-613d-426b-8901-34bacfca642f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac917ba-b830-492b-bf75-a8b3f2672ba2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ec1776-97d4-4513-9930-f58f05ae8ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8e9f20f-06f6-44f5-9a08-2171abd24fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e70d351-5f49-4d75-8a47-c5f9c4d207ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0470c0b8-fb47-4f41-8c38-94baae6550d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a3ac95-cc71-42d3-b574-c5a7d6a040db",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1630891f-a990-479e-a181-5923fa11b48e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55b61bd-6168-4c7c-b9c3-8e4d4426fa6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a4dfce-c630-400a-8ccd-54ce31bf43ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2b9bca4-ecd7-45c1-b3ae-72171242dabb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cef403f-480e-455b-9cab-66eb7863c5c6",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6bd4de-126b-4eb2-bedc-d2eae7ca8a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd665303-ad2b-4684-bead-24c24f79c17d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c172d3c-12c6-45e4-8656-7c87a82cc60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "517e845b-e4cb-4464-8f5f-a33a952d855d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806fad7e-6360-438b-ab13-34fca19abc39",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7291b4c7-9faf-4ed1-b67c-98350603faed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb538544-5852-4f44-bbb4-2d2448229102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d18670-10c7-466f-bc17-2d65730b91ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "496976c5-58c0-4235-940a-f6e7a1d473f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9478036-4f04-4d5b-bf55-12cbc1247f0b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25aa33f-7789-464d-9c97-e1576868f502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ea6f11-583f-42b3-9d92-bd5d5d73ddcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19201f3b-a945-4543-91a0-cecd57689a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "481f5424-50f6-44e6-ba35-88e422274d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283f43fe-d3a7-444a-ae38-eb7c19cb0551",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ccf0141-e1d5-4200-9ab4-2fbe463a725e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1775e65f-8a7c-49d4-aecf-9e58e2f4dd25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f96655-6c01-4182-911c-7908145b8005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "cee9a53e-e10f-4a49-b13f-ff6336a59104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6d9223-83f9-450b-a563-f2b325ec6f4e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9ae33f-5a6c-48eb-83f9-5195560677a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f373b213-bd8f-4f20-adbe-5f080775960b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0627d355-bd5a-437a-a496-5f1f15e44f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "02fbc38c-85df-4c8e-8658-4cd7200fc881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d80387e-dd73-4036-b5e0-984d3c477b0a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f3cacf-5c1e-4674-8669-7cf1152192ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a7e1f0d-9a7b-40cb-85a0-f046c710c209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0cb4f4-010b-4921-83bc-74a0b2e5383c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1d4c341-ea50-466a-87f7-4e6a9f44dbae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd11ed31-f569-4136-bb46-8dad12d1228c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d6e2c6-f1a6-4af7-84ff-717a9617d563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92fe1486-ed8f-4623-947b-45fadf25d552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b00485-55c9-41dc-b26d-f9f387a3126f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "739c785f-5d69-4f5b-b598-0b784e9ddab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f43249-e3f5-4066-bc14-5e6ee33998e3",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2095cfcb-da3e-446f-aff0-b43241395502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d180729-311c-4d05-ae1e-e32e0b67ce97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87cd3324-7159-4667-a437-f38cefd75633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "223920e5-8436-4935-93ca-5594077576b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20640400-39fe-4cfa-83e0-42e8f507bbdb",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b640e50a-9897-481a-badb-81b51582bd61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79920275-60d4-4205-afe0-88e67bd24774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7f6758-f198-48f0-bd1a-8d089b2bbe60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "352a5c01-c808-4e43-9a0c-2f775342889f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6223fc48-b34a-413d-9324-d4f9e191d271",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39fa39c6-2f94-4e20-ad46-7da3b637e35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58595de1-e5c3-48a6-803b-778e6fd8f33c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891c7be2-15cf-4987-8a8f-aa11316fc92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d1eb0c6-7905-46a9-91a7-0d17bac9b03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba363bc-ee52-4a88-8d84-51a1e8a79051",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588a8602-6d4f-4d61-ac78-1be7a5caa87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "463a5c96-285f-4ff4-b8b1-8e145e4bbfc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41224b4b-a38b-4de0-8106-746c13c513eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d96e974c-48a4-4736-9cf8-adee99adbdab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764c2330-1486-4356-92aa-e714e3e34b34",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12db34a4-3c58-408c-a627-b4db6852e2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e242182f-9f3d-479f-8f7f-bcb3c92a90b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7a17e3-8918-48fc-bf70-6720696cdd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f42b1eb-9ade-4424-ae3c-778c0c568c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f995065-31f0-4274-8697-666f8fb9897b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0080d7cc-b514-4c21-82db-5951d8ee7ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a460dc6-abd7-4061-b082-5ee65b86c047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4e8a25-c3fa-4710-a9b6-b5eafef013a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "07132519-677a-496d-b22a-04bbb8940f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4dc0ef2-a55a-4f67-8175-dc3b374b4be9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6bcb439-60a1-4314-a3b8-e931cc622ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90d754eb-2d30-4b75-972b-bda3f68e5f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1035a9e4-49c1-4aa3-a383-b756fbc872e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f2aca7b-f2fb-4531-ac16-ade2eba35ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4623c5-21b0-487e-8f4f-10f7e0f9f8e7",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64309208-21d6-4c3c-bfe2-06a3b5bd4c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88ddb681-b6c7-4a24-a320-6b540c812d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3794243-b35e-420f-82eb-b37ea06ff904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "addfecd2-cec6-4f1a-bcfe-0294ff9bd6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b2311d-e7b8-406b-b3b4-87d6e2de6873",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f56359-bcc2-44fc-92d2-8d045497887d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62effc61-a470-4ee4-a321-937079325a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d21921-aff7-4797-b31b-a1d985159f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cb614a7-3c66-4174-a6eb-338279bcf7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c4279e3-3669-44d1-a915-8d3ce8c176c8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab7e0a6-c4b9-4e90-8729-4137cdc0212c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e672c813-e6ce-49ef-801f-7184a9f163e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67e5cd3-6b78-4660-8018-59f5b1708d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "04be9e9e-5d28-4322-9883-755660961abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf44257-0283-4797-9a05-b79b7276fb24",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4586addd-c0f2-4df5-97d0-259c42757f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b8a071-8388-455b-a082-d85ed8ad12a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f0c2de-f8d0-49a6-9d0f-c5c800305d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d621a9-951e-42a7-a745-ebb6edd7cdd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ff6510-3fdd-4273-b93c-66fffb56a5b8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "811184a6-c6fe-4c15-a3fd-e065fb92ebe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24793c4c-d4cd-4ec7-aeac-af8214b74c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4b6d52-fb38-448b-920d-e9cf3a79c009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42158ad1-1769-495b-97b8-646f2706cce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c65da0-5d5d-424f-90b6-c7594259ba15",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fedade49-9102-456b-8f07-1e27e41ec6fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f36c41-6b2a-48e1-b15b-683f068e1cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a64aa8-b0eb-4cf4-91d7-d63f27adc78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "70ada076-a7ad-42ea-8f7d-d2cf76526137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0299f15d-484a-4136-8cb5-289f1908b571",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b838dfbb-dcdc-4b06-b1a3-5dfd0f2bcac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70023805-a5ab-42f7-92cc-1ab49ed79fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9915f2f-1435-4b2a-a42e-919983608604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "712518c5-dda2-4cb9-b1d8-bbd484138407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59646a82-c552-41c6-84f7-d8c28bd7ec52",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e50a65c-7b7e-4d13-b34a-d76b2a65fed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2b727d3-8e95-435f-976c-e3e4679cf9f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa8e23f-12b6-4ca0-9c66-1070b8fbea0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "28950f75-91e5-4ac8-a82b-3332353eb822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b7b639-900f-4cd1-a243-b9f4583b215b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3dd8236-c46c-47f7-b863-b72d53958d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e684a68d-01dc-434e-b960-14b25936c56a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bedddd2-da0c-4b79-b47a-4fd64dbf7806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ede07b0-587d-4d74-8f2b-b0ab04a7537f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623da459-329a-40ff-a158-a70f02945ab2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd832b8-7f2a-4283-a6ba-1f060ad2a87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83604df1-e9d0-4ef7-887e-2697c3ae2f89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb3770b-8cba-4a68-bab5-4e6d70505a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "653a708e-9825-455b-b53c-09063a179bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b74d22-16e0-4fe2-a6e5-69a4bd34860b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc4541a-6b09-45b3-bbe0-b037d4fa925a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e19b26-8e7a-4fee-bb40-3790fd45a04a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6832a9c-d746-4b03-ad27-6af2947f6e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ffac082-a8fc-4cce-8cbb-75ec86dc63ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1293dc-a41c-4756-a7e3-9723f8396d0d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ea4572-830b-4f25-a2d3-8f0f86929c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39baa2ed-5ecb-43be-a36b-f2a03e3d94a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75fb004e-3e6e-4672-8029-197ef943aa36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "205a3f20-a32d-4ca3-8675-92b7d2bdc25b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d3f2ac-57a7-4d40-a617-f7f6cf70b5b4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f81d01-8da6-4b2b-95d0-7841076afd43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f93ec7-f9e5-4747-89ed-655328a3e746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf49e9c-5dce-44be-a96a-86a639f91a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5a57b3b5-7078-490a-ab47-29a92fa40378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f140c27-fa5b-42ad-9de6-f162427f59c6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af58a66-13d2-4cd4-b875-0ae69aac8b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a04b3a6-c152-4f3a-bd65-3fccf1a9319e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2641078-edcc-4a80-b8cf-da39588a7035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c12f6bc-2b7d-47db-9634-6234dcbe5960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2562abc8-2534-400e-9820-08411474015e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56214549-9445-4802-816f-ef95534582cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98695064-6c42-4f0f-8f20-f9c1824b0d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1bb3d3-afe1-486b-b5b3-b718a2c8fe15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40af4073-032d-4db2-b207-24f76badd4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e3c269-3160-4ca7-bea9-ffe79131cb15",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8299d30d-4f5f-4be8-aa76-edf2f9920900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb7abbd-1aff-4374-8adb-1ac41982efcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db171b88-e079-4565-a042-80285ffa5297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f28dee30-3af2-4f3b-8179-d6e918a9d767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fecfb9-d5f1-4041-9947-1de69ad1fe2f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ebd6ae-e99d-4218-bb79-ee02245486ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f73496d9-d74a-4cf3-926a-f458ba37663e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae80d230-3145-4b39-a07d-03e2e8c147d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "450c52f9-5f44-4f05-bfc7-dcd5845fe81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1020ba0b-0f62-400e-8281-3466404b4d09",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64705533-59ab-4836-ab14-ce90a93687f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ae6313-078a-424b-86e2-69944c68949f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c71ac8-ce9a-4216-a820-88d738421b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d1b6b5-aa06-4c36-a6ee-0320ed668216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d69b359d-4ef8-463b-a921-9dda4db19b71",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738387d6-7c78-42a9-8aeb-a9c77b7569f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59ab8765-c2a7-48ec-8f62-5ec98374f456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e352b5-ff0f-4d94-87de-884d66da9bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "43d05382-6e1e-4a90-b7ec-48c200c45d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a90c61-8af5-462e-bac2-fd83797a2406",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7137981-36a4-4dab-829f-5f0359c1e78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc883560-d05d-4f8c-a9bf-53ec92d76a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26cfc307-46ac-489b-a689-239c4f289ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "974294bc-4671-410b-84be-2893a0264275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e349fb7-09de-4793-bba0-8142b1da47ed",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36943fa-c975-4510-807c-4c81870cf443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918384bc-c7d7-4e4f-a3cd-9863b4e0fcd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2ef011-74b0-4c5c-a951-ab8a2b71716b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bffecdf-50f1-4840-bafb-0905f658a95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6bfa12-8b47-4680-83c2-e0ae5c42cb5e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e996305d-dbb0-4a9e-b8b9-31ece879ee0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17242fb9-8111-4beb-8e52-6688ff5c1111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c064c019-10a7-418c-81f9-1556a2d551b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5eb894f-338c-4436-b2a3-383c34596bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a88c8f8-ec67-4754-b5e6-25fca65d59c1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d734f15a-2914-472a-aaeb-f8574c9f3c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34dd61aa-0d6e-4a46-849f-9dc48bf3767b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d434c2e8-1c35-4387-b2d5-e70b21d22a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b95585a-09ab-4568-b628-4bfb64018ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28696e58-e049-4f0e-a154-37db2726ae30",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14126552-d47a-4971-accf-5e7cfb143406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f68da02-8807-4537-a301-d771a07e5a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ddf5f9-cca3-484c-9cd7-a62b5ea22390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "247416be-ea69-468a-984c-453ecc1fc285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff27a32-28ad-4653-99e4-ff9be214ac9d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1bbd08a-7a8e-4683-a36a-1c52a33ee141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1326a56f-9784-4dea-8a59-397e4e64cfca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f480a8fa-6d5c-4386-8dfd-a5b106e840b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "22ac3449-3b22-476d-88ed-3e730c0041db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d4fb51-e5b7-4426-be17-5f41156ff354",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb67257-f856-4ce3-a091-5a4361eccd91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77e64bf-8f69-4991-b8f3-ffa5232898be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467e918e-f8a9-466a-afe2-34cef53f2ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "868438af-6354-4752-a6e4-a122210d808c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20211d30-e6f8-4449-a275-7a1036bc4a20",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0d8610-3c93-4c38-bf93-6534a58436b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3563b13a-0140-45f7-bac8-3afd51de9727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1e933e-77a9-49c6-aee9-9dc672722ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "88b27766-2122-40ed-9ea1-0d35023a7393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15da6fc-247e-4aca-82d5-a0e0f098aba2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b522842-fc2d-4774-96e7-a4459c72830b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3440029e-9981-42fa-a210-0a0d5ac04fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d1f21d-48b5-4f7a-b55f-5ffad607e320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0be9ef4-e967-4da3-be37-48c6082ea2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e8b5e5-767d-47e7-aa32-5d55d09612f9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5438fde2-d8ff-4ca5-a2e5-de6569fad3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a79734d-e692-48e8-bae8-aa15263d4cd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4326f611-9387-4a80-ad08-356a967ac23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c6e4a0e-14a7-42f2-a54a-62e1b5ce61ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b3851c2-0fc4-49de-b895-ab2025d31841",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9b5b19-3450-4408-8127-8244ee609806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69ef344-a255-4f6e-93db-dee72e0d89ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec28507-4c73-46f5-b6f0-5a703243441b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c16ad340-e13c-4405-ba7b-a8cd4a914b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b56f61-72af-4a50-a2ca-a0e5465ff85a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb10465-d279-49db-a1ed-a03cc7332a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "87312f06-6bd1-4161-85e4-592256f00d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf9844e-e92a-4b34-b312-9a2f663dd218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc2c320-ffbd-4745-8101-6945e77888a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "942a2fa7-4cd5-4665-9fb3-15ec20179a15",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "03675440-8518-4828-a99b-d744298a2631",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1183466d-cd93-4ea2-8d75-6eb8d4a1aff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b89a6d0a-44d0-45ab-bfbd-28bc81afe2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ba5909-30e9-405d-9985-58afbdf3c2a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bda25515-c6b9-4b25-8636-5d470ad185d8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9104edc-fed0-4a8d-bd30-ccafa5e27b0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9ec1aec-44a0-4f06-80e3-008af1c624e0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3dfdbc0-8f78-4bc0-bb59-ae84a1220821",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35cfbb0b-350f-4419-8c87-63cdcaa120c7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6ffd2894-3238-47ce-9eeb-e9ba26955e21",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7120866f-5c6f-4f29-a463-d1b6afc08f5c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2cf53e5e-60cb-49e8-a14f-8d799813b906",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "95753462-b69c-4c75-b0f7-4511e75e8405"
                }
              }
            ]
          },
          {
            "id": "ca60487a-f4dc-4d2d-9fff-806edc4d5333",
            "name": "Positive Testing",
            "item": [
              {
                "id": "159a0390-df54-4254-82b5-85252eef7bd4",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5893c10-8a6a-48a1-a35b-90bf1b259a7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c082dfd-3e99-4f5c-9a09-d979de3881d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "779ae66e-7ab6-4421-a19f-29ea215cb9b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3e1ca427-999b-44f8-bfe0-590ebe352bff"
                    }
                  }
                ]
              },
              {
                "id": "5db3da52-effa-4ac3-b5f8-9aaa7b950f09",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d255836-98c7-4b18-afcd-eb39662e6579",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea79bbac-2822-41d0-a1c1-02798718b409"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a19f2c7-ee0e-464e-a835-b063c26475ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "73cf821b-4300-45e8-a486-22c39fcec705"
                    }
                  }
                ]
              },
              {
                "id": "f4bb10ba-33a1-46f4-9bbe-6fb568747531",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d4581c0-9315-45b9-9185-347e3af57a75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "960fe209-457d-4638-bbfe-f8fba026d557"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00146546-eac4-4b3e-a65f-0d26b716bcbf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "637b4947-fd5f-4c7d-a8e4-227ce0256cef"
                    }
                  }
                ]
              },
              {
                "id": "fc9a7030-ddbb-46b6-9ad5-32f1472f22a8",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4485438b-5df5-4d04-bfa7-99b3377c485e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e923772d-be6b-4919-adf3-0608f356fd2d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1badffcf-db53-4e50-96f6-471fd952e771",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "de35dc7f-9e18-4c9d-b436-162e709c4bd9"
                    }
                  }
                ]
              },
              {
                "id": "71787357-235d-424b-81c1-76ed29b782e5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca54f66d-1490-4bf1-a72e-103bf913a4ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "67d9724a-e120-427c-973d-9d0702339f57"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c66689f8-cf13-4147-b553-78efa8204046",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c59bced6-d7ef-4f7e-9e59-67d058e0c1b7"
                    }
                  }
                ]
              },
              {
                "id": "6d3800bc-f126-40d1-a539-3f485f3a2f38",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "149d924d-8261-42ca-9287-c7f583cd840f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fee9680d-7cb5-4fd2-8b90-bbf33cea2f49"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40fed899-bb9b-42ac-a9ed-9b027ab65833",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c1da092c-9252-4ae7-a45f-3d452090560a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f6ef56e-4d55-4dfe-a2f1-d0932e1de3bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20b89a06-b154-48d9-9132-5047cb9a5cc0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5d8904e3-603c-48ae-9d16-a8401a5c2509",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6bfa89e6-880e-4a71-9a96-909271e2707c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e534201-96a3-4a61-9263-2efe4ba98cbb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "55aaf09f-89bd-42b4-8d4b-4acb66a735af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "791d8548-115e-46bc-bf35-79e217b32f77",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce63214a-dd04-4979-9505-59b8d443709d"
            }
          }
        ]
      },
      {
        "id": "eadb8b29-dd2e-4cae-9e3c-2b1b4942fbfe",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "142eeefd-8471-4477-8ebc-f619f2226aa0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e47e0d1-e59c-4d84-91d6-577819156215",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "db38bd56-d374-4d5d-bb23-1717a04b8a50",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1604f9ad-917a-46db-a229-b52c1b1da408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8b21e7-d856-4a05-9dca-774837b99423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9334f403-cfab-4f52-a407-453959bedb73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f55d133-0e86-43ee-a453-49e13ae22cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0072b56b-af25-4221-b4d0-c41254661296",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e764ece-693d-4ff7-a191-d4d741c8bb9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f05ebd78-435b-4cbe-a341-b5f7bfce7fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07cc00fe-cd0e-41ea-913e-1b01902947c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "84f440ec-2acc-47cd-9cd0-f12a471b8e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0579486-ba60-4a21-980e-080d43629c8b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75be518-bec7-414e-b2b8-3388687c40f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8345f16d-b3bc-4276-ae45-193bef57d4a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072f45bc-c509-4bd7-a727-e99bbaec0f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5db1514-460d-4e82-8468-08fb2a72239d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30fd7476-3cb2-4f5a-9a8e-24b89de3d1dc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfa94fd-5467-4c4c-baf5-8ee12d24fe4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a188279a-1559-406a-965c-ad6a40dc9e40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd086fa0-134e-4c9b-9aa7-5eeb9f4d8708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22f94cd9-5266-44b1-a47a-60686c615afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1c5f86-f559-4e54-a663-38bccba99939",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44add8f-62f9-49b7-b145-ec304a36e887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c41666-1d84-438b-a4d7-74ec9433a2a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd60804-367f-4303-b4de-0f4e2b6c6edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cac0132-f001-42ab-844c-d36e04cae951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7a9ff5-a967-4652-8354-331ae188d0be",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf43f94-0273-4f51-8333-7e66203df205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "329e76d5-fc77-4104-8dae-c02652dd5dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f41a6f-df0d-4ae1-ac25-d0cf8bf28e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "29b76a25-e2b6-46c2-8862-751570c3e67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d8182f-8080-4f07-b8b2-9641cc1ed312",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9545e13c-1a85-4b0d-9f29-4a57aa21a4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6617ee35-e38a-47ae-9a93-445bff1cb725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76af009f-b25d-444c-a473-0ce3f0135a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "83a51edf-9449-4e6a-b670-23d53c4a44b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db798af9-468b-4178-be81-d79eca3ac426",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b76f0f7-2698-4e9d-bbf0-41315a69c4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06a144b-1bb7-4af8-a687-c794a64c4e8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697f7c0b-e309-4408-96eb-2fca831b5581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eef08c4d-4933-41ec-a250-3ae2d9082d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac00183-4697-427b-94f2-260811a7aab3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d570451e-4eba-4ce2-b9e3-4ade32e4de29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d2fdab7-7cbe-421d-b31f-8bd68e23a87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24cdb08-8b94-42cf-90ba-edfe306736ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2867936c-4192-4ace-ba73-9530b9afd921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df2a5b2-47a0-47b5-834d-aafd398b9a28",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2d31b1-95be-40a9-a9ca-5c2deebcc74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f6db9dd-6ec8-4ff4-a443-75bfc7146605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb11475b-8f72-4aa6-92cd-3670ec681333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0504a89a-ac0a-4228-ad68-e285af430286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd03fc78-d84f-4815-a108-d0d77aa50b4f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14584d4d-55f6-4b86-aa04-b8d260b40475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db1afc49-122d-4799-af2d-8917b4ad87dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f235853-94be-48e4-929a-8dc85ff13bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2f186af5-27e7-4b93-a967-403337ab1169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a61dcd-ddc0-42d0-a3b2-77b357efdb18",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9802a7c2-069d-4f7c-a79b-3f1c9907d4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acbe22e2-9043-42b8-b93c-5a0c2d0528ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53cad8f9-a28a-4dfb-b08b-5e483fe1553a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4dc47eea-fdf6-48d8-bdf6-c0d3b65999a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f1732d-63cb-4207-bf8c-a372e123abb4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320f7219-8a92-4f73-9d59-6086efc77a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f844c91-c5a7-474e-ba1b-f45e7960b972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a310e5-9ba1-495c-bb54-482d2a48c8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "96e67e68-9fbc-437a-8b2c-d5d2fc8be314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b73cd5-32f1-4e8f-95fb-cbfe0839e07c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d41f35d-bffc-4936-80e3-66f7e040cba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e11c627a-948b-44ac-b500-ebc58e3d35cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd883f1-15fc-4a00-93a5-2031f12d8780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e3344ec-20bf-4adb-8be4-880c446e5726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a9074dd-4440-45b6-9e99-707e4b4b57f4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5557d805-6e7b-481b-8cea-a72c9e273a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68777a65-c5ac-406e-9eac-cd04384605f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6cb903-d25d-4493-81a9-ff689b764770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b8ea95b-dd9c-41fb-80a6-be811f37ae3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35508087-9688-4d02-8bc0-de489b1c3c12",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a8b554-dd89-4c93-ad08-1a538cfa0373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "183702d8-4764-4501-818b-e027504f2a6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460444e1-36bd-46a7-b242-1d84cc188770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee2f0991-1be6-464e-9da0-44e2e33610e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd42d64-0923-4777-ae47-534f3e94b771",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "013a2e2b-7b7d-49a8-8cc7-236ce8be8934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b6915ee-3c9a-42fa-b372-397315bfc736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293d2b08-3248-4389-819d-1441e75edb22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "01caa649-eabe-463d-906b-1c1e5ba5f1ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573ca221-dc15-47af-ade4-ebf75ab74e15",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452f490d-9c30-4080-91a6-fc5e1fb20ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e719d3bc-9e4b-4d99-9db5-913334ba13de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829e155c-a343-41b6-ad57-dc60ba8d6e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a645f2a-c16c-4d79-8239-4f99a530e513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a18749-963a-4723-bc4b-b5e8bfff54bd",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d429e7b1-2fe2-4083-ab4d-dc9f563ecb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93a5315d-335c-48dd-a28f-3322532c0571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596d4a87-b10d-4625-b9c2-e28d67dadf76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34356e70-f810-4650-bb1b-312d258cebfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729a8e2c-676c-4d3b-9d72-164156ec60ea",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe6322d-a1f3-41c1-97be-5b110cc07178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e38b4e3b-9218-4a81-bb9c-27c7d7d0fce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9e3801-41d3-4e29-81ad-c9c2226143c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b71ebf22-f674-459f-8062-7a5800d9e263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc19f73-5ae4-4170-b76a-5ce9e6975eb3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc5f507-55d9-45d4-a760-1595319251dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e03e4e79-7af2-425c-b739-5a4346794462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beedddcf-8ddf-4c87-802b-642dbfb962f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd6f4453-740f-4215-8814-2bf3197d89a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6462ba-37b9-4496-9bcc-38dfdcacfd56",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c7b6b5-3c5e-4439-bbd0-4ed8eb0b7307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c1ed496-e154-4112-8cda-f1c228d0137d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d304e16d-ff00-4be2-8d9c-dbe5653859fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80030004-147f-4e0f-ae4c-491add0a5032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98ca1ff-c37b-4283-b716-c9cee831f4ad",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "314071ea-25b5-47cd-9191-d68c45417ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "603b4255-38b5-42d4-87eb-23f5c4cb38cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe3cd77-2cf2-467d-a921-634d03bc0bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecba524e-2ca2-4a0b-94fe-dee6b3d41429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d611f06e-c0d8-4de5-815c-0cd712f3daf7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f1618a-4b5b-4a1f-a814-2ebd00750fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c02e72f-7a73-43c7-8c30-17474a72d63f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65162ccb-a511-40ec-8db6-6bc576ce2c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af006e4e-1a36-46bb-9bee-7d28698c8199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "205b8816-bbdb-4614-99e4-49eb99d776c6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc81237b-75ae-42de-9e5d-f21aaf05969d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f25b40-2818-4e50-8473-2d3a1be16321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f61801-c8c2-4f7f-8c21-c3df616dc8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a446bf3-2506-45bf-aab0-16b5ebd68333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c4ca87-261b-493b-9fec-ba60c5b30bf6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6e91db-2b0c-427c-80c9-0dabbb7f3d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48d98c54-b5d1-44f7-8119-add3fd70c4ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d18796-64e1-40f0-942c-6d6092a4c6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24e313c5-746d-4fb1-9160-7beee14ae2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43954785-d997-4039-9fd0-815cb70c3cd8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba01451-ab0f-4f1f-930a-57a72118deed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2626948-81e1-40a3-a242-00369aacb1a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce231c8b-324f-4ad7-8019-9c72cfecdb28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40e820f3-f973-43df-b6d4-4dba9c7ca03d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1c67b0-5468-42dd-bbe0-ede9104d9a93",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650a6774-f88e-4104-abbc-1dd0eba85816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ceab8d9-03b2-4cae-9b80-d723d95d57a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de498e1-0e39-4606-9acd-02596d3d4375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41bd7e0b-59b7-47f1-a098-b28b62f09ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5b3533-9572-4b61-a42e-85b60fc87578",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "856afe5c-3db9-4275-a5af-a983e9aae026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "183d1c2a-8e68-4c84-881e-4065c9d1391a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12dc7b84-de10-4f13-8c31-0c19abfd2424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "242b61dc-9893-4030-b4d2-fea185adf787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c38230d-7b94-4793-814a-64ecf3eed49d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "620693b8-3e14-407b-b5a0-45dfe8f66842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28142d4-8fc5-48cb-a147-f536f131858d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40ec05e-68bf-455b-b512-118c6331cc05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea0c1121-ed71-4108-a850-5642a73c1e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72669b7c-c1b8-4b7d-969c-602ecc998be7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa3e35c-adfe-4214-bb4b-c62e51190cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bee5649-c65d-486b-8c38-07992f8aa020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590514da-68ed-4ab5-a60d-6fbfb7992b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81d668b7-7e41-4e07-b96f-32866cfa5242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9042d03b-488b-4b55-b479-95922ca17b71",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e201bcb4-0664-4f31-9568-7809cce91de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5defd44e-718d-41f0-badf-d09dc04f4d56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0a2f64-d1c5-41e4-ae79-5db25fd98e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24da0e45-9781-4b72-ae24-8c9dc12fe6d3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d80804bd-8f81-430c-b65a-fe603db2c57a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "78383a7b-c062-43f6-a249-5c9c5325053f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba977b1-5808-4c7e-977a-241da4c42ead",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3fce5760-c8cd-4a4e-8324-9975c31b2c37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11517f07-262a-4052-933b-8bfcd914ace1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f626b41-2c5a-452c-a8be-81050308b4d8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e10a1b1-e057-4a0f-90dd-33e392b1c4e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11a1b922-1884-4848-b397-a51c861baea5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d25a0c8-39d7-43ec-8a1f-05df0440fb89",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20345e40-a040-42d0-9034-c73cc76c00cd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b39f328-29a8-4fb9-9a0e-b7316ac68760",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fb0b9aa1-5c43-4d02-ab6f-5fffa1e5b27d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7645c5e7-e5fa-44ed-84f4-4893f79e4320",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "67577d66-3c67-4e47-b82f-efb031b562ce"
            }
          }
        ]
      },
      {
        "id": "446f52f4-ee1f-4446-b88c-b2609507f978",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7421085c-bfce-4903-905d-a30924e54d58",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a2cd5f63-1fc1-4cd4-827f-2eeae6d448bf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8ec66948-37e6-4733-98d5-c354cb63de71",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73838dd-b932-4b3a-8c23-f4328410f5b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db1fa5c-38a2-4cac-8353-75d944981fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d19172-0e07-4bb1-ad92-7144e7c0506a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55693051-8b84-4473-83fa-38b04badbfaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00582ef4-4c25-4e19-a66a-2eef26dd5bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602a19dc-cd04-4b14-990d-34ecdf26c529",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c9e4c6-1e9a-439a-a327-dd37c82c6257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c0fab06-ab5e-493e-b279-516a74c464e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c076a90-9f4a-482e-b3d9-6ade9b4391d9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb73404-d1ac-4ad7-b371-9264fb21879c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9d26ac-0267-4587-85f5-8924a24dcb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe385d8-508b-43f2-aac8-4c97a20b2458",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8cc959b-a3ad-4a7a-be3d-c378ada44612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e3521d-2b36-42b8-baad-4d0e2374c07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd53cd04-2086-4749-a674-7f6b8ce52987",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af81fac-bd27-4ed8-bfdd-18cd0586a4d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48e9c250-fc17-4456-baa4-446c6c1309fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd596a5-19ec-411e-8129-482c02b08c93",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f402cb54-2a6e-49a8-9f8a-110ca317fedc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd3836f-9efd-4bca-b0b2-80a2065b31df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5b9971-07a0-42cf-b710-6b8301f9ed8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd3288f-cdcd-4fc8-b078-f562dd160cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd05191a-cc23-4721-8119-ae7d548a3048",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130ed3b0-0bc5-4948-a3a5-d817de5d160d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9145ef13-9950-4fb2-9f26-246a2eae4222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f9b755-3653-42df-ab27-6e5e7815a3d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985c3704-c04f-4341-88e2-755c62ec363d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525da9a5-d36c-4bd4-9268-31641eadc50b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c192eea-f59f-4a9c-869e-c3e55c9ef5e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2d27ffb-9887-4ba6-ab6e-8334f6578621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9602dbd4-ce5d-4a37-8a4c-aee443dbc608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29b5fa7f-2dad-4a84-a57b-577ede1b53d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2639505-84a4-4988-83a3-a37282d0ef80",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84208037-e084-4adf-8eb3-e81363213e73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "479faebb-2994-4aee-91bf-eaf365b3f12a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2287562e-6d98-48cb-9e83-2bae7412bc56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc0e432a-5b8b-4616-9491-04a43fcc13fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e0c3cf-0af2-4b4d-9ba8-c22bdeefff6e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8869289-eba7-4860-ad30-5b673dae1c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f77fdbb-1d41-4161-8fd0-e187011bc736"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64eb746-c6c8-4012-8e0e-3d2543afac38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af3abaf1-6060-4d12-9e11-50f26436d5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69043bd7-6953-45a3-97dc-5683f9512366",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9a70da-6960-4cc0-9ff4-b53e51bca5cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0127de5-4827-425c-b2ab-baff36e76016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b89390-50d1-4132-ba05-1a3d977bdea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b272d7-7da7-4612-9bec-8221eaa1fca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9874e580-7ad0-49bf-82ad-f3d8fa37fb03",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "656325b3-eab3-4124-b1c2-335aa057784e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9868295-37ef-4f7d-aca4-f240c8ec50b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2d2650-9098-438d-8c2c-4a10f14a344e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e66b6c-54dc-4de4-bbd1-224b32bad96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219ea3b2-5ac5-451b-b24b-f7e67d480e7d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923f17af-11a2-494d-9000-6771795c11b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "388713a2-2e41-4565-aed1-66a66d73c7b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c917b1a-5935-4eec-93fb-c97e2fee9c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec94f6b-0181-453c-8e88-35476abf89d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8e2982-86e1-40bb-b2d7-d88427f0182e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341e278f-947b-4ed0-992e-873a0f0a4dc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db87df66-339e-4543-b428-c16892ba081b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a37ec81-7fc0-41e6-a27a-f2ac70c9c61c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a3637da-1e72-4068-9383-2394a0079f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36da01a1-c676-4a6a-b2b8-1ee9c44aea5e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e8989b-84be-4c78-9017-3de4d4c1948f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79c7c30b-b678-44c7-823c-46ee64521ac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c947a35f-76dd-418d-b3c1-fbfa869f7bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a0b461f-997d-4b24-a028-82fcbe5d6f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b816f5-65bc-4504-a45d-de827ff18c5d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeeae83b-add9-44bd-9b6a-da75705824e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a10bab48-4041-4a21-bd5b-c4e66e57555e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e07b259-64e0-41c4-aa7f-418afd0145f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd07fda6-c3e2-4287-a256-a4bdf2f92659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb7f4c2-586d-4842-96cc-b25cbefc99c2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ea22ef-79a6-4c1f-958e-814aa38f7610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e000880f-ebd2-4fb8-a9eb-8c2799dc65b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31393fb9-ab0d-47e3-a5a5-03e0ab00ec41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a18e0f21-4f2c-4fa1-946b-44d39ef562fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4db320-4303-4dc3-a208-dce201dab3dd",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa437d9-ee5f-42d0-9e40-79140a0db297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d748a201-2f31-40a9-aa68-d5419d73ced9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff99ffcc-9805-4793-8b64-366a65718d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c399e43-2d6a-4d16-b7ac-5cdadfca9380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc5f09d-ec31-4a0b-a0a5-be1931e88420",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad220ee7-a952-4fd2-a7ef-42be0a3c754a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c81728-b215-440a-8258-0ba26a1ddcab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a383f0-b0c6-4ef0-9af5-d6506dcd5d1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bcce96c-ab75-43dc-8a21-3d9d22a33ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9382ccb4-cce7-433f-8e10-637d65b9c58c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab64ea9-9997-4950-9914-006c0da7f3d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cfe02be-7419-4bbf-8ca9-0641c78a0357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce59975-67b7-4e86-b866-cd03b631db9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d48ff750-84ae-48e6-8db3-53bd16baff6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9753a0-1699-428a-8a1e-aaef65f8e40e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79176ffc-0002-4b11-986f-7faa34cf52b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f14cb986-da43-4919-bcab-72824c3b7cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c53d3d-75eb-4876-9e81-f1264121f7b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "897a674c-58fe-4fd9-8702-00b2a05abc7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342cac3f-1f51-4d20-8cc3-ed3e466b2758",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa7999d-05a1-48d5-8b50-47905f14aeb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d58178c1-f893-4f20-803e-9655185ec4a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59b07cf-baa0-444b-9f19-b7cc72439dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5949a11c-b882-4136-9f58-572da398a06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d0e82f-c268-458b-bfb8-36d5cb961164",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e9b51c-0ef9-4f29-b1f3-a58a147a71e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68646205-65f6-45c4-a459-35a3837d7663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "070fb371-4ebe-4541-97f1-93b7864df88e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f49598f3-c560-427b-ad56-274d5fa88aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e469d8-7090-4607-980a-52ca5485aa6c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc93e701-2ce2-45cc-9226-cd7b8e6a2bc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13c5bf65-2e82-4355-8dea-3f3846fb5fb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1a531f-b30a-46a2-b40e-1e90a91c4cce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55bc47a3-a776-4c8c-91a1-40b68df48906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e8919dc-e9fd-46b4-831c-11233af96fda",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f35c24f-fe55-4d46-8bbe-90394219116b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18d28b88-d803-4b7b-8bf9-f46614d6b457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1519fede-7a53-4a03-81d1-dc7d77fdaf97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e278b1e-6cae-4994-9bbb-0d5163460b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d37789-4c29-4e3f-a255-a53019c7d870",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7062cee-b0e5-43b3-9a4a-de90b119df3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b37cfead-94ef-4ba8-a7d4-365077d89b06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18e8311-b5d8-48d5-8491-fc41e46cf0eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39c979b0-56dc-43b3-8078-73fdd97ff6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d80875-4e8d-4b61-95f0-1bb995893768",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83808fa9-490b-415a-8867-603e967c0531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7015aa9-76ea-47de-8ee2-fe9e0410df44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3454c7-beef-42a8-81e2-e64567a603fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8c04d1-54f2-44e6-bee8-119e2a64c539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ab86a7-0f60-4d6f-892b-1fd6a72e7f60",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a30d1bd-b00b-4ead-8c25-b764d6c0f794",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "581c59e0-fa05-420c-8a24-012655a1e040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97e475f-e754-4d87-8dc1-37035e5f56fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39844ac3-e6e3-4cfc-8674-e132cd5cdf7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbef38a7-e08e-4524-bf57-bbd49b81d779",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aafb2cc0-6aec-4eb1-ab8f-c697c4a92b58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0352dbd-f0fb-4e6a-8fa2-e88c06427c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7e1279-8c32-4863-b31d-b421b07e8c07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1f6e877-9be0-41c9-846b-e08d23f2d513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acdd894-57e9-434a-9b63-7ce513856902",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1ca42e-9258-4084-88e1-b52b0595c99b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4606194-5920-4595-8be1-31e982125aff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f88391-7f4c-48fd-884e-9a21e67129cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2058d0c-80af-47f4-914b-d840452a605d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a1bdc8-553a-41cb-8a0e-62bd8aab8fdf",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d2c29d-d2a4-4ef2-835f-a954a2ce4be5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83a945d5-0e1a-4279-9606-5f4f97b15f73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e6ae96-99d3-4972-a027-70a517896197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f736d940-5dee-474b-8d7b-d0dd91f08019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146af07b-0ef7-4681-898e-548efec21bcd",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d41e9f4-16ed-4724-a611-5605a52c503f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f06b2262-222b-4654-a576-ade699d6bb04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "377f7c43-80ce-4e6d-8b81-7b97733e8554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a0e9b93-09b5-403a-a714-4807940733a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56db44e0-48c4-487c-b4ce-b36b56885a8b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82da6606-444d-4934-8e96-76c35d3e3ec1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e12e38a-abbf-4e7a-aff2-590790f501cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4831c7-233a-4419-92bb-a61936d8fb10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8acc437-8705-4757-9826-5cde2b496b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80adbc43-4edc-46c7-89d6-b506c92f262a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b51fc97-3d8f-44ef-aa36-d1e3b938505f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a0bd32-480b-433a-8dee-4a097fa038e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d917ed61-9a88-4e19-a4b6-7f426e9a8cbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74550a04-c799-4083-b844-34c3f66a9a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ff2385-200c-4ed7-ba9d-99c9e1dfd8cd",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7f41d2-f2a4-4a02-abb7-ee293b75b956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712e10b0-9414-4ba2-93d5-cd6a4ab7688a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99b5008-ded1-4e9e-af4b-8e62d7ab119e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae671c5d-b86d-4d97-b6f8-9bfc534f1912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86daf333-3757-4bb0-affc-53fd6c80aa68",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103833b8-58df-47e7-9898-b09988c2f1ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a65dfe-e249-4f29-a964-483107ac94a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de33c7f8-c07b-4dd7-a78d-151a6f5f0685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5942d6cc-dad2-4d9f-b64e-7e3dc2bdf160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80984151-293f-4cda-bdab-d409894cdea0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d445ba3f-6911-4e3d-b7f4-bca16e9f575f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569bf44e-742b-45a9-a536-09fc06801305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d60074-428d-49ac-92f2-5c330247a6c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a268a0ba-8fe3-4955-9735-70212d940148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1a0f04-8a6b-416b-9006-8be7410549c9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b45e39-ac8a-49c3-ac6b-2dacd9ed76b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3cca2ae-c04c-49e9-a872-f3bb1d9487fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e4fbf2-0d34-403e-a187-03e1144e2286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "620e1e79-87ee-4237-8957-520d7176d119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869aaaff-7b8e-490e-89ab-48592d46717b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4c40d9-591d-449a-a604-d4d70b969471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc1cad1-f3e8-4c3a-a267-427208ed0f35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad4dec4-c088-458f-9910-51682e53414f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b586d6-0432-4f3c-9914-27316cbddf85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f71e9a9-b0c0-4411-890c-f86c3b77f4fc",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14f4ad1-68e9-4841-86b3-60eb2221cbe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162e66c1-a232-4c2d-834c-ce88614ec79f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86f9c49-8670-48a6-971f-1f3c2fefb3db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37462352-4a36-4de0-acc6-96dc88da6e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a081fc-8390-4cf6-92ae-af7b34d23977",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2732c4e5-8d57-4ee2-8f4c-13217974221b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a53ea750-99af-40ef-85fc-6562b19dd3eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "463dd4ab-9ae2-48ce-b8f2-3e506e1c7f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c857bb6f-0095-4dd6-b070-8078c920473f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ddbb9e-9a80-4705-8fba-1de78ddad467",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3f12f6-a794-4939-96d2-6f96074b8586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf6f27a1-41eb-4f36-b6f6-349e6ee10b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d71d3f-5a86-452a-aae0-bf2be549b8d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b4701df-7e08-40e7-ba7b-7589dd64a1be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e86dbfd-1caf-42a6-902e-170b3f83b418",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ef4a76-eb34-4046-8595-c25274602aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a26b5c7a-9618-4cb4-ab91-2acca207de03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41e0e85-dc1a-4eca-9583-d8467bbe477c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d49bc81-7bf9-49a7-8ffd-8917c4eb0a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d753bc57-9188-400e-b2d9-d9db1e2a0913",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc4882b-f2b8-4a3f-bf03-0af28d871d7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a48591a-8729-44f2-8ba8-6836e73094ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0eae150-af7e-405b-a432-436418074526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "069e53d4-911f-4530-946e-61e3989087c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88119d4-e3be-488e-b5fc-b97231c8570f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc9bc79-8499-4be6-b77b-03edd093ccd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a19814d7-b4c7-4d25-a6d9-9486437b8044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50961601-8a8f-4328-910b-9dc6d89a3180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e214dd-848a-4658-bc12-4ee11eea766c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb5681d-3aa0-412a-8663-87ecfe701514",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a37da4-01a3-4870-9f0b-157adee20b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7437b915-40fb-4c88-94ba-699e0e27c85f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49a8f10-a6a4-41f1-be21-e9ade6caf786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf0d4667-1458-40cc-b189-d673fd2cfef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8d1b59-a7d8-453c-8774-dd348dd81682",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857e9e93-c6b4-4461-a518-21054c1893fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "621887ca-c42b-441c-97fe-a18a70c14c48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0fd843-4e55-410c-b9fb-364903de48fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8544a91a-df17-4f4c-9aab-5fe73762ca14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85f49b5-c024-42b8-b925-76b5f555f3e5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78db9ae-70de-4c19-944d-33871dc79d7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a37bb84-58eb-42bf-9519-d21d88bd63af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b37909-5a94-4b0d-9db2-6445a5d3152a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3593ea-b343-447b-b286-929850637a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e97925c-55e3-45a3-b82b-592ceb25c7c8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61bd2bff-90a6-4e46-afdc-b3b6111b7f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c7700ca-036d-4260-8c77-3df1b07b1b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21850f8c-92fb-4532-8c87-90ea79316ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae756fa3-58fd-46e2-a5a6-26d45f07b575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e506f56-76ea-47a8-9ccc-509742bee337",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df58848-b31b-421e-b505-b34eb0b6d21d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66400214-2726-4a56-b00d-4b0ed334b50a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "983dbe0e-b579-4142-ae36-fac8f2cd33ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed34eb98-234e-4cca-bda4-aa5010147e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab17fd9f-c993-4424-b9b9-e4f08036bea1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197e6044-25a7-475c-8012-9701b79a2a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83763a62-ca02-4a40-86f1-43566d6ea9a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5988566a-71bf-4ebd-b5cb-d36e76088135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "815d78d2-b7ab-4735-80ab-ae22c23ebb17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dad19bd-9cd3-4861-910e-d16a6c127e0a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df938756-b138-4b2d-8359-5e76f3e1cfd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e53a3159-36cf-48d9-a995-4ccb129a651a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d798cd0f-aef1-4cd0-be40-2e0c094cca34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a94cdb6c-7caa-494f-9307-53eaad17ce09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4377b481-9cd4-46f3-afa7-a191d954f393",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2805e9ae-64c6-458b-a033-81f88f405286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc8d51bb-d8b9-4b01-b2fa-9343293ac5bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1d3709-639e-4c08-9b62-47d438cc3950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "261b3a03-ec15-425b-a8b0-5d2497b43b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ad6ef4-5f22-4f0e-baab-35ca3ce2e058",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34dd1af-63c9-463d-846a-bd12b9a2deba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e15ee1dc-8cac-4db7-ba0a-01b4ef053708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b449e5-7c21-4722-b674-eb6fcf91ab9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eca3efe3-96f2-45a1-bc6f-e6ab9cdc375d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8dfb95-b4a1-43f4-b272-f31dc5a3f6dc",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88afa12e-1f06-43b5-94ab-8870cc0a2d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a021bb9e-d65f-4d81-a115-1b5d0ed20818"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eab4b53-9fa9-4d31-89b1-be663992aa98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f24b3a-1ddc-4311-97dc-6f88d6b58b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a73184a-4bc5-4363-a20c-dd9cfa47fb88",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8abe5cfc-4155-4468-b7e2-c89f258cf5bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0423257b-fa4d-4564-a874-0269ee5a6bee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16decd77-912b-4a68-bb64-b7b37111fcf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d022fc-9d0e-4fc8-994d-776bd6e85a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09402e24-ce66-485f-8691-4e8126843b4e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c0d016-f00c-48a4-88a4-49a5a2d18221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c9fc45-bd47-44eb-9135-a23a0be3773d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "539010c0-ee26-4387-8e8a-fe31bc7748b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "593a6425-6130-4fce-a0d0-412781d9d831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e669ef8-2f46-4ba5-9321-ee3ba91d75d1",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8cd7772-f2b6-49ad-82ae-17fd6c246949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f505738b-fe40-4d13-a4c8-850227bf6f86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8c3ced-0fae-494a-848f-88f07070a0cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a693c6b-eb11-4669-bdfd-f5aef0fde884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664831d8-fcb4-4b88-9fab-e602040bf07f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd75c7e7-50a9-41d1-940b-280bd377778c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e713e83-8a50-4119-9a70-8d69402e3ce9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b45c86-a09c-4e32-b6ee-8e2e1afe86e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2febba6-3459-4f90-87a3-eb33e5137828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee6d818-6223-42d5-a410-0d351bcf4ff2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592a81f7-7edd-4c93-a8f8-d114c903748d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f403696-cf30-41fb-894f-6da9323924a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef529a2-195c-418f-9f37-ef9f95e02633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569a3c06-801d-493a-a1a3-bcdf09e56dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0557f869-b164-487e-aa4f-e479f13e6526",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba39504-4793-4d44-8e66-7b400f6c951f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32148f30-6335-47fa-85c6-cd159551be2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "379e3113-8517-4930-b1b6-85f6e637fdc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8937d6a-8b07-4d9a-b988-542c9621259a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f830f3-4ed2-4557-ba5e-a5d77396d9c8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88bc80c4-5284-4b5d-87f9-122fea257314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6e52972-c492-46b9-8252-9fc4eb69e67a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11976cfa-0f76-4bf0-bc63-b74941740530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad0a46b-2bc2-4ad9-92ba-856ffd2e1e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376457b4-09ac-491e-a321-247189dec898",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337c5a15-27d8-4a19-b0a6-f4892234546a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f0b9468-6075-4843-a636-c9f00f7376c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd34ae63-4c5d-44a2-9d84-aa7e97578c88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b09f352c-a2c9-46ff-a08c-c35e5d6e83a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88bc8e12-39ab-41cd-b042-b24536d533a9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4046915d-c4d8-44b2-9c75-ebbbdaec583f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0b20e47-a6a6-447b-a8e5-d39a9a38ae90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2560ea2c-b882-4728-9cd8-c7e1d5b1bf04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85be0a6e-1956-4e25-9d33-dc64bb7ccd78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4cd800-ae9d-4b01-9481-d5bf5a7f823d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aadc9a8-d8d7-4104-9d29-bbc746fb242e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a910de1-c32a-4555-80d7-fbecb75c53f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38eab90f-a9c2-4db9-981e-33cb53d3fd92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c3204e-31b8-4805-ab9d-f3b09f71c4b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5e390c-b15a-451b-aeba-f830fea8503e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd2efeb-4463-4906-b575-aae5ac560711",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3219235-4393-4b10-9505-dd01b524836e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "190ebe1e-7936-490f-a3a5-d2e3d7b57d7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b3aac9-203f-4a5c-992d-2a44cea1d1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43fe0f9-d0aa-46d5-9e83-b8af9281c7a4",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc140bf9-da6b-47fa-9c74-a067356c16b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14a1ffa5-2221-4a20-a032-6c0fed649874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb0045cf-68d4-4e91-bffe-726959e77f68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2784e71-e788-4ea9-87cd-5186b2b96aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ef50fb-37b4-4d02-9a5e-c10131b26996",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1174b1-3181-4b3f-8638-128ee38326ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7814dc6-901e-4808-ad45-4cea1bcca273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e6a127-6086-45d8-8e44-6025d51ba6c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b511180-c5c3-43c9-909a-686e33c14aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "677f0cbd-e63d-46d6-b57f-b9cdb55f54a4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1563500-40ba-446a-add1-0324fbd9526c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d984e48-86c9-42c9-a0d7-fe555d567488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c028b223-649d-40ae-857b-fdf1cbc18579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "176936c2-21cb-40d0-9c85-5a03bfab608d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f61b42-5767-4171-8917-4cb8f70ebd23",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1010673-4ac9-4a40-8633-2dfa8073d06c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d17f901-8ad8-4b59-82b9-b6457ac41d6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7dc376-151c-480a-bc26-20e1b5635693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc0200b-101e-4749-a466-dc9535438fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0fc0c85-81e8-4e7e-ac6c-3a706247cac6",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b855f8-c002-4fbc-9806-016d9b973ae7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6df9ba8-77d5-4cd7-b656-1574ae784cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0328449c-828c-4314-b6f5-97014d6213ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf431f7e-40d7-4785-888b-2ae7052dc8c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6def89ea-0a91-48c2-98c2-a8fc07d45392",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f14ead-a873-4d2c-af9a-d5e1a1710afd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6459fa89-b19e-4d0c-9df8-678d9cb5b61d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a39256-f9dc-4edc-ac22-8146db356b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3402ff23-3f3d-4c8a-9e28-44c0f50855cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33667939-0001-4890-b70e-1b9d6c18970f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c9375a-8079-4d6e-b98b-4f49d86e77d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61327143-06d9-42b7-8614-bb6c7e6a9850"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d96b4b5-b07c-4e25-81bb-9fe4985cf801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba9d13ec-899e-4465-91f6-46fcda89ded5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8252b487-e86e-4799-9a65-752a713b6576",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78039c99-c24d-415b-aad0-a058080a34cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7286da03-cdf0-423c-890d-882bc792f181"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c2d81e-54e9-4641-a9d6-ffbff6008a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b8ab3d3-f8df-461e-b989-e50a65ec8148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b93a809-f147-4f19-90bb-c724886af2de",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d7cff8-8cca-442f-ac97-95263ee39742",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a478bf5-9624-45c9-ab64-aee4004a4151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "650cf2f5-d4d9-4597-9d91-beb967b6ab0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6697cb-2515-4b99-9e46-3154b9d19163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc8ca89-6808-4d8e-9060-0de220815366",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04cafaec-d6ad-42d4-9d0c-261a8f6cfb24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b568468b-c4ce-4401-9914-10f39ee2152a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acde3e9a-c2fd-4bca-80df-aa0395d1b849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1074f93c-70fc-461e-952f-1afeee215416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b28d329-5492-4ef8-ac07-979671bcdd43",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07ed019-9da5-4105-ae37-96bd52da177e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f52afba0-0b15-4011-b2eb-284667343e03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1275f5ba-6042-426b-a1c7-94d331840d92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f37e8db-d3b3-44b7-ac31-c2a76c0a3848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31943e62-8e55-410b-aa69-2b23b7635a80",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4069de-b7a0-4e16-b45e-f23bd7ef24cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b735470-8b53-48b3-b756-4db10b681d23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0ce8e1-e2f0-4487-aa2c-91ec9adbf85a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40bf440d-c411-4300-8b1d-d964b342f485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f772c4-f5fc-4ed6-9ba4-318d170028f4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "affb78f9-467f-432f-b669-1e6a15857666",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8096c1f3-c33b-4549-a294-1d61a1797b87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2525b207-000b-4840-b92d-51ed8804082e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34c07b38-f19d-46cb-81f9-58f8910ab89e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0221ad1-70f2-4513-9409-2370072b933b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227355b6-4898-4758-ad8a-fbeba9b7cfe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fe1efd8-89e8-49c6-b09d-7e8b0c599fa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af9c747e-ce48-4de4-aaed-89445406a5a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73cc6aca-cdf7-4288-aac3-d79c5197efc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6b83c1-6329-4af3-9d0c-4635fbb68bfe",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2290d36-c08e-4cd9-8da8-7fd7db60cccc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac8717ca-0541-461b-b48a-e07c3a1e5962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c09d5f-14d3-4521-8549-5a72a670b8d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51608cc6-5e12-4e42-aeff-c737080c91eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975e63b5-5651-4f15-8f3f-c1d4bcf72935",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57769dd4-6c8f-47f1-9fb1-dd9283083ffd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7639169f-3627-4857-b747-33a93c56ddd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed51d42a-7a95-407d-89de-00a2167e879a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c442d6f1-aef3-4f04-8a52-526a65c6cedc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301e1ce0-c6f1-4351-a483-358e2050fa63",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3e8844-9f62-424a-9bec-efc990d14f88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a4b3eb2-16fc-44ab-b1f4-171d062dd8f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d91b11-7533-4a1a-bffb-e465a894edc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20f94c74-f81a-4486-a8a0-ce98262c2526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68fdb05-a591-49b8-ace9-d8c3d6f9158a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc1f421-dec0-4c6d-b785-67d7df334b0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8771e73-2fbe-444f-bb73-aded67b74493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a69cfe-75d7-4bc5-9664-75d198140c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4193d6a-3f77-49fd-a62c-3543b176160e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd55e5ac-c714-4d54-b9d3-3184d56ab157",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0609d9-e633-495e-84f3-3136e20c59f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c2f9dcd-a929-43b7-b2e4-4ccd157c6d3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "251eddac-ce3b-4d42-bba1-24bd979c512f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f55acf70-25ac-4da8-bf81-dd87ded6fce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70800ebc-f698-483a-8abf-d49e7b79ed03",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4050fb-e054-43a7-9707-c452fd939559",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7d07a5f-e84e-424a-a85c-7a0712455250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9a9ead-7573-45d8-97f0-cb43535bd50e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3370cf03-26c5-4364-8cd0-33308e8c7030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147bdab9-4d21-4b93-87c5-2a8a95f92e48",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b84cef2-0a62-448d-9542-5895fb6d9f97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba5a33a9-7440-4aaa-9f97-78d8f15ae0e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52c1d44-c33b-4a7b-ad03-56809c0029bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b02f817a-c6fe-417a-b42f-d5e3de29abbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c396857-9b0b-493d-b2c6-a40cdd8afc4f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2640b448-270b-4219-bca9-a0e58ea0d005",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ed8809e-f7f1-405e-994e-023ca2ea1bb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ade362-a262-450e-9c31-d9dee9f42503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ea8830-893f-4dee-aeb3-4ad18e9dfb2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb1c1d9-0fa2-46ff-85d7-2c23b79f8ead",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f2e575-cb8b-40e5-a63e-dad123099cee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07d9c02c-d053-4d22-9f4f-4fad3bf269a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9778588f-d08e-481f-9b72-e52257d198bc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc0b0c3e-694c-405a-b7dc-e584c435ea2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e5e103-3d23-417c-9ff4-1cf4921a4bdd",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17618aa9-5ec6-4310-9bbe-e6abbd60af24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5326e20a-e714-4045-b33c-bef8e66ea092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "261ea577-536e-4b54-abbc-2d73ac22b16e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a943bd89-d577-4e4b-8037-7b02df741693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30f91bb-dcc0-4732-b98d-5f2043efd373",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0424ed1a-863c-48ae-809f-81938c634a62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df8a4150-894c-40ef-ba38-bcbe8b48fc96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e266ef-bdf4-4b4a-9d9d-002be5d463ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0cca510-4f91-4f56-998c-712888c938a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3127079-437d-40af-a60d-ca74c88694a1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097a4c2f-f588-407a-9511-969980b80372",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7344401c-61c7-4e59-a3ca-e41e47a2039a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8538c68b-a474-476c-8a90-13784d1b91c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41b1ff7c-b3c0-4445-afc6-f576b685fe74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928eeac6-1b71-4658-85ca-2cf1d6bc1ca1",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c63090-7adb-4c7d-bf5d-f097708ba0a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ee74cec-42ce-4976-bf2a-767a041b34a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a3a30e-c74c-4016-843d-723ba859ad7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad2e9a01-1d4e-4447-9555-2cf1de422239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b179642-e8f2-4e5c-bdf8-00f542d0cde4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95533eeb-722f-40c2-8f04-0bc477808009",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38d19eee-af95-4f61-a363-91a996d7d15c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a8527d-995e-4c1b-88ad-9a18d5bfbdfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcedd2f9-571c-4d2c-95f2-46d1d8385713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14483e9c-2bc0-49c3-ad3c-b2e4ed8b29d4",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b542d218-f2df-4e35-a951-e87208e65235",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdbdddd5-e59f-4dd0-afa3-a4f3e04b0f20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82afd272-8a85-4981-bef4-8cc6ed057674",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15cee511-fa80-42e1-b36c-0c2b19e3157e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d2db00-f420-4272-86a8-471a59fc7455",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0add6b2-56b4-4bb8-a8fb-c574f596b434",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aac7ead-fb74-4399-9482-84a09e7bdcd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "856b2423-d011-40db-a8a3-6a3b6d63b8b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec63be88-6466-418e-a748-96bd4b93981b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5efad07-7f3a-461a-ba93-414b35f5fbfe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0983e9e1-2289-4994-a59b-0753c355db6a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ae769f2-ea81-42f0-bc3a-25042eafd6e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "03748895-2ee2-4149-842b-6556c79478be"
                    }
                  }
                ]
              },
              {
                "id": "fe5089d5-a6ea-4067-b861-08a314536940",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "88028b4f-4613-4ff5-8794-78e48d5114b5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42ccedf-b96b-4b59-8a44-75e4215d8ab7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f10ca535-60a8-4b62-a0c2-1d82ff0eab86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36272809-1400-43f6-98be-ef9e3d45727c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "597a35a3-5b8b-4934-8415-97e8662e15b3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3955ca30-ed9a-43b1-acdc-e8c6ca15f28b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20aa7c6c-7adc-4dd6-a8b1-6640f1c81908"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "afcd07a9-7eb1-4393-a3a6-ae8fc1ff82c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0759b29e-e1e2-48bf-bf15-e2bb592d3913"
                    }
                  }
                ]
              },
              {
                "id": "3076c80f-b4f2-4201-8e03-acddfac788f9",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "124b7810-69e5-424e-855f-ffc3f1a162e6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7893bf0-0231-4330-9716-b6931390b8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "1a0ce76a-cfdb-4e39-8fcd-db24c130d286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794ddc6a-9b28-4582-8d4d-ac97179dc5cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d31471b5-bb13-4c9f-99bd-b13740947281"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4bcfb27d-c324-4c04-9e76-17150975ebec",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c30529f2-9805-4139-b459-57a9b6b04e63",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b62d521-b723-4282-b1b9-3e20505ce9fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ee67127c-9b44-4454-8d51-f8f1ec93dd4c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4bd2e50-89b4-4f6e-8819-cb448c2735cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c016dcd5-d83f-441b-ad35-141db3b176f5"
                    }
                  }
                ]
              },
              {
                "id": "6f36cc2e-d47f-4a01-b81d-12e04b9fc4bf",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19eb6bb3-8dfb-4063-ab19-fc80e67d24ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0abc3bdd-8f12-480f-ace8-b36f18ffe93a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd03b34f-5526-415d-a1f3-a36b76dd34b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9033c8d-51d5-437c-9215-8ee4489ffd8f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6559a1c-7b68-476a-88f8-6298c579ac72",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e9d0d17f-edff-4d29-a493-09954c356644"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ebd0040-8af7-4b68-9beb-8e9b3268e4fd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9484ee40-abeb-4be6-a6d3-0d7628b2384c"
            }
          }
        ]
      },
      {
        "id": "a3e92b8b-c97d-4d44-a0bd-7bccc92b7c80",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2e005171-ebcc-46a1-b7de-d9727d39dc47",
            "name": "Negative Testing",
            "item": [
              {
                "id": "632ba296-35fb-4ff0-beef-04932069e8fb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3ac56629-d92f-4f8f-b5ab-0a4f34c5482a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99ba38c-24e1-408a-87bf-fe86e53b5fbf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "14712100-5e0f-4f23-8e04-429377d51c7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c1332f-4ce8-40ec-9f25-acb7bd84c9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e881d023-4baf-4e3c-948d-90dc5f94c143"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "051769e2-f141-4b63-8f65-83294b4dbe96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98dfe0b3-05e2-48bc-9fdd-eeaa1503e184"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "09946c5d-31cd-4dee-8ddf-d12380f8f027",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65bff1df-07db-49c3-88b8-ea422c72668b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a372df0-827a-4662-96db-38ca2f43487b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "444a204a-877d-431d-aba9-c958339b50d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "baac9672-697e-4fe1-b552-329b4611fc59",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a624b4c-d71a-4a09-a5c8-da4c6cf4ebb2"
            }
          }
        ]
      },
      {
        "id": "6003036c-342d-464d-b765-a4c71c75103a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "67261314-64d4-4737-a8b8-16c1712ee006",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14370a72-c612-4e72-bd57-d7afc53209c4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "144ec1b5-5403-4ca4-8357-c4067fee5d52",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a857cb-db54-40f2-936e-461398d616b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c42dae4-c4e4-4a3e-a886-f98030b84b14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46312ad-8725-4350-a475-ca9236f57fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6040566a-acc2-44de-8016-33b4c9213bc8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87de18dc-ae71-4319-9792-15a9ab49d447",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df432e8f-84fb-4fcd-ad2e-02db42140deb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "99f59f27-6f48-4241-a5a6-37ea3f5a806d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f23607bd-b81e-4169-bb94-383ba3fc98ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64aa5b35-0386-427d-bcd3-311c3e56c3e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4221b657-01a1-4149-9f56-e8f4f40a66f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf79ec48-7ebf-48b8-aaca-dfb63371376f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd241bc6-0079-4809-9713-7be1b970ee5a"
            }
          }
        ]
      },
      {
        "id": "6e17094c-aca2-488e-a34f-c1206df58c8f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6d01bfe6-469c-4cc8-8b6b-614d9410298d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a476ecf0-57de-4224-91eb-97020d267420",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ae4c151-447e-4c92-a83c-535b4fe8a59c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cffe7b95-55bd-4ff2-b6ca-a834f234b7e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3128a37d-c547-4b1c-9010-3acd9b2bfa43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85d990f-16cd-4bfc-a0a4-27ccd852a54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6cfb3f50-c51d-4a37-af5f-c50f6a54562b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "598071f4-ad23-45c2-91c7-3562655a3d8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1da514f-b850-435d-b5ed-e07231ae206f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "717c6c79-6a11-4572-92c4-04c487da6cab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9573d60-6325-40d7-9d70-27fbb46bda8b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "417d08a2-140c-4fdb-9f1e-b84654db9b44",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a25584f5-5c16-441e-b37e-eec8c94fac9b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2d13857-f655-4f5b-b2c8-e2f917b8feea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3bc0ed35-e8ab-466c-a82a-e5950539b2cc"
            }
          }
        ]
      },
      {
        "id": "d124f99f-1317-4e04-b763-f2044528cf8e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99836c68-5390-49d9-a2d2-c26a338a957f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86ab78c8-36f0-4594-b3e9-76b2ee730003",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4dc8e710-2851-42cd-a7d2-35a948f2707e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "58f05c20-4d6c-462c-98cc-290720524f39",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6fd51eb3-db75-4f0d-b655-3efe7b033fd9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 296.8739837398376,
      "responseMin": 15,
      "responseMax": 9533,
      "responseSd": 948.9605033748406,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686012205250,
      "completed": 1686012291036
    },
    "executions": [
      {
        "id": "8776ab8a-45d4-4395-8d68-b080ce55fdbd",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3545da2b-0cc4-4b2a-9872-dcb86a690666",
          "httpRequestId": "f4465d58-6357-4a49-b432-b5da0d8e4a58"
        },
        "item": {
          "id": "8776ab8a-45d4-4395-8d68-b080ce55fdbd",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d52e3e7e-b18b-4391-a146-c6967ddc1a12",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 0
        }
      },
      {
        "id": "93997440-b48b-4e91-b22d-c968e49422ec",
        "cursor": {
          "ref": "6db7e5e2-ade7-4bbf-9d4b-ae6fc6fe29bb",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2ddb2634-42fb-4112-bd7c-ffbb8afad439"
        },
        "item": {
          "id": "93997440-b48b-4e91-b22d-c968e49422ec",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "4aad13db-bbea-4fdb-b1bd-2f0f3e7ac5c7",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "0d2f93a6-8f25-4a15-8b20-93fde226b148",
        "cursor": {
          "ref": "4ad8f1ce-27ff-439d-837e-101bc001cf53",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "577fa6a8-9786-4129-8dde-9dd8a04c203f"
        },
        "item": {
          "id": "0d2f93a6-8f25-4a15-8b20-93fde226b148",
          "name": "did_json"
        },
        "response": {
          "id": "741af170-b13e-408a-b78b-3cc3f8d8c114",
          "status": "OK",
          "code": 200,
          "responseTime": 865,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a12999-af80-4e3b-be0b-1956f3b6f74a",
        "cursor": {
          "ref": "e4c7d08e-2a78-47ab-81b7-03f263736193",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "50683a30-7fbe-4f42-ad87-589f27b95961"
        },
        "item": {
          "id": "33a12999-af80-4e3b-be0b-1956f3b6f74a",
          "name": "did:invalid"
        },
        "response": {
          "id": "5c11f2f9-3424-4710-ad75-4cbcd7b65c69",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1802,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "33a12999-af80-4e3b-be0b-1956f3b6f74a",
        "cursor": {
          "ref": "e4c7d08e-2a78-47ab-81b7-03f263736193",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "50683a30-7fbe-4f42-ad87-589f27b95961"
        },
        "item": {
          "id": "33a12999-af80-4e3b-be0b-1956f3b6f74a",
          "name": "did:invalid"
        },
        "response": {
          "id": "5c11f2f9-3424-4710-ad75-4cbcd7b65c69",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1802,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3674f33e-274a-4ddf-acdd-90841dd2c1fe",
        "cursor": {
          "ref": "f3f76ee4-b283-4aa7-b467-a3cd7ee4f8b3",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "46d5567d-ac95-43de-b871-57a8ed8464f2"
        },
        "item": {
          "id": "3674f33e-274a-4ddf-acdd-90841dd2c1fe",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7da2c13f-f83f-455b-a2ce-38ef3389641b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf51fe37-50f0-451b-9cae-ca9a9b5318ed",
        "cursor": {
          "ref": "1ac0af9d-772c-4059-aacf-da5c65185e68",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4477f209-3645-429d-9625-cd542d0dab86"
        },
        "item": {
          "id": "cf51fe37-50f0-451b-9cae-ca9a9b5318ed",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "41e3589d-d700-4184-9632-9203c43fe36b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 52,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697258f6-5fc1-4e75-a80d-a822cc74c383",
        "cursor": {
          "ref": "d819291e-6d0e-4585-8a8b-3a02d37bcd45",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d648d80f-3e4f-4915-a88d-ec20a9d3544f"
        },
        "item": {
          "id": "697258f6-5fc1-4e75-a80d-a822cc74c383",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c2888550-c21f-464a-ac72-b0394e1f3849",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 116,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "68d96606-e76b-40ee-982f-66170aa1bc2a",
        "cursor": {
          "ref": "6559c9eb-0a56-4aae-ab05-94be4f2f2185",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6bae859c-ba83-417b-aa72-cac5dad7892d"
        },
        "item": {
          "id": "68d96606-e76b-40ee-982f-66170aa1bc2a",
          "name": "identifiers"
        },
        "response": {
          "id": "0e75ab37-175b-4fb4-8992-c189575db075",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b6ddc0-2574-428d-86e9-30129e997b56",
        "cursor": {
          "ref": "15f04831-d402-4027-9fae-12d6980520c3",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5dedff05-9df7-4d19-b87a-3bb51b06322d"
        },
        "item": {
          "id": "61b6ddc0-2574-428d-86e9-30129e997b56",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "874912e8-9428-4830-b0bd-0d953330682d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98152993-def6-49db-89cc-5b290795e555",
        "cursor": {
          "ref": "7a995fbe-4f26-414d-86fb-b1be77d1fa33",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b2ea15c3-71b7-4833-9959-d59a15aec76b"
        },
        "item": {
          "id": "98152993-def6-49db-89cc-5b290795e555",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1138897a-da34-4a44-823a-7e7d5f7cb140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983037aa-6d2c-483f-8eca-d90af234c77d",
        "cursor": {
          "ref": "09e5d638-1cbd-4e4c-854c-a9002e66d21f",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9b09a9ec-7734-43bb-b739-b9765a71bee8"
        },
        "item": {
          "id": "983037aa-6d2c-483f-8eca-d90af234c77d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "71f29cfc-3faa-427e-99d8-f8b311aef7fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc39add-7461-4c07-8631-123a5cb0b013",
        "cursor": {
          "ref": "cbee5da6-dfae-4ed8-b0e6-a27dfada7601",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4e5dd074-f78f-4b6c-b912-391005ca0fb3"
        },
        "item": {
          "id": "acc39add-7461-4c07-8631-123a5cb0b013",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1582c094-afca-45fe-b3db-586c0523cfee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c757b95e-0e70-4a2d-8656-4e94578749a8",
        "cursor": {
          "ref": "b797648a-7342-40f4-b2ef-2b348c39833c",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9ef8f409-0c2c-4bf0-8cbc-09892398fab7"
        },
        "item": {
          "id": "c757b95e-0e70-4a2d-8656-4e94578749a8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b96d10d7-8f33-446d-a9a7-8e6e5732300d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998fb85d-04b9-49c1-8ec9-8d70d18b7420",
        "cursor": {
          "ref": "1e2ad455-aec3-4617-a177-7c92632de832",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3d1f6dd4-f1c0-4749-bcf3-d7949dceefaa"
        },
        "item": {
          "id": "998fb85d-04b9-49c1-8ec9-8d70d18b7420",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "cdc654b3-918d-4098-862a-46334d5ebe97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 316,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bfe3052-e6ac-44c6-bfa3-55a36c35e531",
        "cursor": {
          "ref": "256ecaeb-3789-48a7-b46c-2dd4a16b3c21",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "60bf74ad-4cbc-4428-83c9-34d52bf9a3e0"
        },
        "item": {
          "id": "5bfe3052-e6ac-44c6-bfa3-55a36c35e531",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2a597904-b14b-4993-b566-30074ed52ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "790139db-9425-49e9-85d0-39ef7bfa7465",
        "cursor": {
          "ref": "db3ba2a6-8e90-4928-94a7-35c88c211b24",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c5de671a-54ed-4711-8409-fd87b92337d9"
        },
        "item": {
          "id": "790139db-9425-49e9-85d0-39ef7bfa7465",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6c46b520-789f-4659-a53a-70fede415728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb152ed-c379-4ee2-b696-a11e514e35a4",
        "cursor": {
          "ref": "075e1168-d665-4752-9328-c173fac64adc",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7b88fc02-fe77-406c-8d0e-2e8dd340ae49"
        },
        "item": {
          "id": "eeb152ed-c379-4ee2-b696-a11e514e35a4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "849cf232-1306-4194-8ac8-aca470086497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f063da-5e36-4793-bdf7-5af68cde91cd",
        "cursor": {
          "ref": "a9ed1eb1-535b-4127-8247-a009209c0e53",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ea09297f-d673-4b1d-bd4c-f7a4931c35ba"
        },
        "item": {
          "id": "36f063da-5e36-4793-bdf7-5af68cde91cd",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5cb9cfc5-5766-4cf4-8d78-2be59ec8f214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263ba443-38ed-481c-b57c-0ee6e4808ad6",
        "cursor": {
          "ref": "45f9cd2b-84d0-4b68-ade0-2d1cbf29e12b",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "12420901-b68d-4875-9b1e-8814cd833f47"
        },
        "item": {
          "id": "263ba443-38ed-481c-b57c-0ee6e4808ad6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "286fcc24-9ac6-4782-b141-54abf416cce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f2a2e6-d604-4a89-88da-08028f7ab178",
        "cursor": {
          "ref": "63399e87-a2e9-40a3-b80f-4abc15806726",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b0895dac-9d7c-4e54-a34d-ea2716c34447"
        },
        "item": {
          "id": "e4f2a2e6-d604-4a89-88da-08028f7ab178",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "89d0a077-57d4-48c3-8faa-6f3bbcef2c36",
          "status": "Created",
          "code": 201,
          "responseTime": 2467,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "21563e22-bc59-4bd5-a3aa-d96de99898af",
        "cursor": {
          "ref": "a072f045-3a45-4b4a-b6e1-e969092b07af",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "473d1924-15f2-4c45-9325-fc74add43ee3"
        },
        "item": {
          "id": "21563e22-bc59-4bd5-a3aa-d96de99898af",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "775bc6a0-371a-454c-b3e9-51d18bb7165e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df834ab8-14de-484a-a76d-471353691028",
        "cursor": {
          "ref": "4bba19d6-28a6-4c81-a3c9-b028c09c8e2e",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "31ae860f-5833-4de3-82d4-753bc26e549e"
        },
        "item": {
          "id": "df834ab8-14de-484a-a76d-471353691028",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "51589a45-4eec-4090-9a38-2f528b6e5d54",
          "status": "Created",
          "code": 201,
          "responseTime": 9533,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "bcc33b85-3944-4e39-852b-00fabfc9bb56",
        "cursor": {
          "ref": "51f88159-3659-45ee-81e4-5562d22e7cbe",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0b6e65b7-ac01-4ff8-b27b-47b8f5cc2f8a"
        },
        "item": {
          "id": "bcc33b85-3944-4e39-852b-00fabfc9bb56",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6311c518-0205-4fc0-885d-acb06dc58c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c344bac5-81d3-4648-bc9c-6bb2dee7dcb5",
        "cursor": {
          "ref": "d3f40af3-f2ec-40f6-acfe-b973d5a692e5",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b554815a-7286-4128-8c2f-7602612ab4c2"
        },
        "item": {
          "id": "c344bac5-81d3-4648-bc9c-6bb2dee7dcb5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "02f70198-ad7a-464e-8dfe-0b1735ba390b",
          "status": "Created",
          "code": 201,
          "responseTime": 3436,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "ec753043-fb5b-4ee8-8e3f-075d2f54e16d",
        "cursor": {
          "ref": "0d707c14-be04-4499-9573-753d9f9c7ae2",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d3f74ef5-b84f-4a17-b666-44a14987cdf9"
        },
        "item": {
          "id": "ec753043-fb5b-4ee8-8e3f-075d2f54e16d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d87ddee6-c8e9-4658-9ffc-ec4951753716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b756222a-2c76-4486-b735-7e830ec28020",
        "cursor": {
          "ref": "08807d19-1ade-404f-8b7e-c6b6ebc640c1",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6c6e65f3-1731-4be4-92a9-4c7281611157"
        },
        "item": {
          "id": "b756222a-2c76-4486-b735-7e830ec28020",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ee1a4a6b-a97e-4bf6-a563-d78bf6f67d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00610d44-27e4-41d6-8a8d-59963df2c141",
        "cursor": {
          "ref": "9db1f7cc-ea53-4b6b-984e-68216341a476",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "245bf734-b93b-4a32-97ce-a1c80e16fdf9"
        },
        "item": {
          "id": "00610d44-27e4-41d6-8a8d-59963df2c141",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "59a2ba0e-b2d9-4942-b265-93a610da5911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0b9a4c-95a8-4a43-b6df-da8f556afeee",
        "cursor": {
          "ref": "038c58f2-9137-4632-916d-7cb8de28f046",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2a271ae4-ec0f-4da0-83ab-00881ea763c1"
        },
        "item": {
          "id": "dd0b9a4c-95a8-4a43-b6df-da8f556afeee",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "54d7ca33-ec9d-4406-90fb-ce3d72abd51f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f9ec54-251b-49a1-92ca-503758ee2433",
        "cursor": {
          "ref": "b17f11d2-fad5-4925-b48f-43f4e540174f",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d66257f7-7166-4541-9edf-f2ab82ac9bb2"
        },
        "item": {
          "id": "79f9ec54-251b-49a1-92ca-503758ee2433",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "cf4670b0-c7a6-46f5-ad61-7b9b60c4397d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5138fb3-348d-49ea-b718-0bed4274fcae",
        "cursor": {
          "ref": "429cb917-1bc4-448d-8514-88c9c2970906",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "09dfa793-d4f0-48e1-8bc1-7a9684b6a0f4"
        },
        "item": {
          "id": "f5138fb3-348d-49ea-b718-0bed4274fcae",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "fb68123c-f276-483a-b10d-ced58be1b796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d00436-0b11-489f-8b4c-4aa28114ac2d",
        "cursor": {
          "ref": "80d7d8dd-241a-49f5-be07-c294bca59c0e",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "994d0a83-1faa-4ab4-b013-c2a5cd188a63"
        },
        "item": {
          "id": "20d00436-0b11-489f-8b4c-4aa28114ac2d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6b23963b-5cfd-4eeb-bd55-61fcf5a53a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414d6fc0-100a-4548-a61e-44d326a397bd",
        "cursor": {
          "ref": "f72c5f12-f01e-40c4-aa1c-ffdb0071b5fa",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cd7ae421-2622-41a5-83a0-724f7b9498ae"
        },
        "item": {
          "id": "414d6fc0-100a-4548-a61e-44d326a397bd",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "799ebbbc-a835-4791-8d13-306966281d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2e7bee-dff3-40fb-ae49-7bc6cf54a504",
        "cursor": {
          "ref": "95d16a65-cfc9-4ea5-9f24-32ca382a2a9f",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ccfa07d4-3d8e-42f7-98e0-3820c70847b0"
        },
        "item": {
          "id": "5e2e7bee-dff3-40fb-ae49-7bc6cf54a504",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9a290904-5ae2-43ea-b4cd-0db0247f1605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea0c0b0-098d-47a0-ad28-269b1e2dd6c7",
        "cursor": {
          "ref": "a4def316-5c42-45f0-bd82-164c1c132ca1",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "231a0d08-9a40-4d53-b884-c553c7709b07"
        },
        "item": {
          "id": "3ea0c0b0-098d-47a0-ad28-269b1e2dd6c7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0cf59070-4142-4701-a7d3-d727d38af9a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f90858-99ad-433b-9ea4-ddb76112889f",
        "cursor": {
          "ref": "a0ce94a9-bff3-48d6-aff0-f1a22f78c938",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e6098314-341a-4aa4-a0b0-2b200f40a755"
        },
        "item": {
          "id": "54f90858-99ad-433b-9ea4-ddb76112889f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c6f947af-2b28-4341-95ad-c47a9891451b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169de5a8-371a-4709-9ba8-1a3b908c95cf",
        "cursor": {
          "ref": "f0ebbd2e-e04d-42b8-bd3d-4781fd014e6d",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "20736b47-7686-409e-83d5-1e614c32b808"
        },
        "item": {
          "id": "169de5a8-371a-4709-9ba8-1a3b908c95cf",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "99b4a4e3-57bc-4993-97bf-18657e0c22a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51899804-dd1a-4ec2-8998-aaf681eb75db",
        "cursor": {
          "ref": "1fb1b17b-3f18-4819-92db-a90deb5dc2f5",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "af0d9c79-b5e8-4961-905f-045e76ea8f60"
        },
        "item": {
          "id": "51899804-dd1a-4ec2-8998-aaf681eb75db",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e1790cd5-d926-46fb-ac94-c14eb66371c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2a686f-031b-4b24-b0d2-3706a69247b2",
        "cursor": {
          "ref": "672fe208-e384-4a7a-bcac-06e84f41749e",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fefb877a-8d46-42b0-b396-25697e95fb83"
        },
        "item": {
          "id": "fe2a686f-031b-4b24-b0d2-3706a69247b2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "9a4e3f09-8639-45d0-ba12-5753dab0bcdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32740b9c-4147-4bae-b6bc-74f1634e1599",
        "cursor": {
          "ref": "7011e9d7-831f-4619-bb1d-8f1ac28cb024",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2e6b84ec-d8dc-46d8-9194-196c029f9ee7"
        },
        "item": {
          "id": "32740b9c-4147-4bae-b6bc-74f1634e1599",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6cc99f61-2211-47fd-95e2-18da8ba99e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f9197a-6885-4de5-accf-b015c9704325",
        "cursor": {
          "ref": "bc97b97f-d2de-404c-8ff5-e34294e48dee",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a3a99c5a-2b36-4ad4-a88b-84f16c07c265"
        },
        "item": {
          "id": "c1f9197a-6885-4de5-accf-b015c9704325",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0597f344-bbbc-439b-b1df-6536a1770b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd613060-07f1-4205-aee1-26b1fcda3b17",
        "cursor": {
          "ref": "6307de82-4238-4a17-9972-ccf6e9822d05",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0329f2ac-006c-4a13-9c30-7f0b22dce62e"
        },
        "item": {
          "id": "bd613060-07f1-4205-aee1-26b1fcda3b17",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7f2cd9b9-fbd4-466d-aa7c-9d4053e14d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a380ffa-ff8a-4a59-bddc-ae60fecee296",
        "cursor": {
          "ref": "df437ee5-b897-4fc8-962b-e17e725f4872",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b32dd4ef-5921-4c26-9a4b-d74adcd8d4e9"
        },
        "item": {
          "id": "4a380ffa-ff8a-4a59-bddc-ae60fecee296",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4456a219-ca6d-4c23-a1cf-aa42ceb0e4e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85f5f5d-f97e-4bd0-b93c-a96efcef97b6",
        "cursor": {
          "ref": "381cfa56-1752-4755-97a1-55e9e058e08b",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c605dd31-12c7-471d-8684-5c7685604d7e"
        },
        "item": {
          "id": "e85f5f5d-f97e-4bd0-b93c-a96efcef97b6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ca389740-b5c0-45df-84c2-c7643edb2b26",
          "status": "Created",
          "code": 201,
          "responseTime": 1936,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "41f60ce9-2f1b-428f-991f-b08f47c055e6",
        "cursor": {
          "ref": "9ca5383a-3bd8-4f4a-bfd0-3608ef175e43",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ad114a87-4559-4d1b-9cf1-ee4d79fd7991"
        },
        "item": {
          "id": "41f60ce9-2f1b-428f-991f-b08f47c055e6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4726b48c-7a28-49db-a92c-7d41e54e7829",
          "status": "Created",
          "code": 201,
          "responseTime": 2694,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1f36b87c-b816-48fb-a8f8-50f1c2fbd6ea",
        "cursor": {
          "ref": "f37c1e14-66b6-4871-8bdf-776d51848961",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c171e4f1-bfbb-4911-9a89-1c912a651bba"
        },
        "item": {
          "id": "1f36b87c-b816-48fb-a8f8-50f1c2fbd6ea",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "030b0e1c-50c1-4372-a2a7-dbfcae84fa69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f79b3bb-7bf0-4b8a-b8f5-05d2c6d48ced",
        "cursor": {
          "ref": "e1c0d586-6651-449a-96d3-92efc30c1944",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "cca58960-0c27-4e76-9899-d702b3b3ad25"
        },
        "item": {
          "id": "3f79b3bb-7bf0-4b8a-b8f5-05d2c6d48ced",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b7398b6c-b15e-49e5-a7af-b49ff9164ff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff31809-88a6-4a24-b6d3-67b8e8e67728",
        "cursor": {
          "ref": "ef1c75e2-59c3-42a7-ae9d-ada71041deec",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f9d2ae2e-f7ca-4a53-bafd-330aa3278b7c"
        },
        "item": {
          "id": "9ff31809-88a6-4a24-b6d3-67b8e8e67728",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e13cd9b2-6287-414d-b2f9-59ee9fc27014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a6b728-1fcc-4cea-af53-e408031b8717",
        "cursor": {
          "ref": "c98ab1c7-5e05-4829-90ed-215f9149f933",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9c24535d-ade8-4903-a89e-a93c19f0fe39"
        },
        "item": {
          "id": "99a6b728-1fcc-4cea-af53-e408031b8717",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "38e59095-32c0-4cad-86d7-d69a6891eef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "406faab1-20e1-4cf2-81cf-b2f3c7426f9e",
        "cursor": {
          "ref": "9f0530be-1c4d-48a6-94fe-18d814c14fd6",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "132e2e14-e873-4ca2-a5df-2c7407f8f9df"
        },
        "item": {
          "id": "406faab1-20e1-4cf2-81cf-b2f3c7426f9e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "00a75c31-7df7-4565-a940-b2b9fdc6de5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a164658-54a1-4a32-874a-2c48376329cd",
        "cursor": {
          "ref": "f0850f22-3af6-4e07-9845-07772acc2bba",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5478ad20-873f-487e-bf41-23bebb84fbbe"
        },
        "item": {
          "id": "6a164658-54a1-4a32-874a-2c48376329cd",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6e99638c-6ddd-4b31-ab3e-828112b4a6a1",
          "status": "Created",
          "code": 201,
          "responseTime": 2545,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1dfc5c6a-5625-4294-bb9a-99e68f9d505a",
        "cursor": {
          "ref": "d672253d-d2a0-4e50-ac31-8fefeb5bd091",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0e82c6ed-5365-4dc3-9d39-1d4c12acffea"
        },
        "item": {
          "id": "1dfc5c6a-5625-4294-bb9a-99e68f9d505a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6b484664-a088-41b7-83d1-51fa190991ea",
          "status": "Created",
          "code": 201,
          "responseTime": 2677,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4ea15735-d0e3-4adb-9d76-3e543ba255a3",
        "cursor": {
          "ref": "bfbdc7ef-086c-4067-9579-f71afcf0c170",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b41826e5-6b31-48ff-82bc-ddc5564bdb09"
        },
        "item": {
          "id": "4ea15735-d0e3-4adb-9d76-3e543ba255a3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "587ed8ae-e7df-46eb-985a-827938cbd28d",
          "status": "Created",
          "code": 201,
          "responseTime": 2807,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "2efbbb3a-fb8f-4cbb-b54c-9b084d73ed69",
        "cursor": {
          "ref": "08f76acc-160b-4fd9-a34c-d7dad41a2524",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "378106aa-53da-40eb-8a1a-931d9becec99"
        },
        "item": {
          "id": "2efbbb3a-fb8f-4cbb-b54c-9b084d73ed69",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b5092e19-41e4-44df-b00e-0a91e26c91cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac917ba-b830-492b-bf75-a8b3f2672ba2",
        "cursor": {
          "ref": "79c88791-b705-4fa4-975a-e53e22637deb",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4232432e-83cd-43e9-956d-b7dfa0088f31"
        },
        "item": {
          "id": "5ac917ba-b830-492b-bf75-a8b3f2672ba2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "dbb8c19c-4f12-40a9-920e-5222ac72ca00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a3ac95-cc71-42d3-b574-c5a7d6a040db",
        "cursor": {
          "ref": "f26c9fe6-980b-4907-aa9d-82b1984417f7",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "718f99c7-9cbf-41e5-97c2-45097863785d"
        },
        "item": {
          "id": "b8a3ac95-cc71-42d3-b574-c5a7d6a040db",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2916ea31-8eec-4289-8c8d-dbbb46a144a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cef403f-480e-455b-9cab-66eb7863c5c6",
        "cursor": {
          "ref": "3879c3c4-cbd0-41cb-9ad7-7a797bbeee71",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "29506a9d-5551-492e-9a9a-86f89ca2de6d"
        },
        "item": {
          "id": "0cef403f-480e-455b-9cab-66eb7863c5c6",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "489e51fe-366e-4d81-872d-5f602aa889b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806fad7e-6360-438b-ab13-34fca19abc39",
        "cursor": {
          "ref": "03c68e3b-9a6e-4f40-9373-97309233c275",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b0fb1375-bffb-4760-aa39-b6241ede2d62"
        },
        "item": {
          "id": "806fad7e-6360-438b-ab13-34fca19abc39",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ed453f3c-2f3c-49c3-87a3-ca9a00780a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9478036-4f04-4d5b-bf55-12cbc1247f0b",
        "cursor": {
          "ref": "cc0b9881-eba1-4c73-b32f-fd0ee58121ed",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f5636f6f-68e4-4488-a6f3-96701a2cdfc3"
        },
        "item": {
          "id": "f9478036-4f04-4d5b-bf55-12cbc1247f0b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "53df8a32-4a87-40a0-a50e-4b6832f760f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283f43fe-d3a7-444a-ae38-eb7c19cb0551",
        "cursor": {
          "ref": "c14eed42-176a-4777-b0aa-30ad3be28675",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d969f440-a62e-42cc-975b-8c69ef1f7f6b"
        },
        "item": {
          "id": "283f43fe-d3a7-444a-ae38-eb7c19cb0551",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8fbedea2-9a78-4ec6-9ce0-84ce8f79372c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6d9223-83f9-450b-a563-f2b325ec6f4e",
        "cursor": {
          "ref": "093b7b12-50d9-47bb-ac2e-9b933a5b1231",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "591f92d6-c0cb-4305-8c9f-d59ece71a15f"
        },
        "item": {
          "id": "8d6d9223-83f9-450b-a563-f2b325ec6f4e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a9d4cc88-a276-47eb-8480-78b38921a7fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d80387e-dd73-4036-b5e0-984d3c477b0a",
        "cursor": {
          "ref": "951fda64-555f-499f-b180-24b085893884",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2deb3c5f-bcff-42bf-8715-ba8c190fe29a"
        },
        "item": {
          "id": "8d80387e-dd73-4036-b5e0-984d3c477b0a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3f96e0c1-6c3b-4373-9813-1562f984ba0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd11ed31-f569-4136-bb46-8dad12d1228c",
        "cursor": {
          "ref": "05f2200b-64ec-4aa1-9845-fb7b4e0eed01",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "62a0f8ef-bafd-4d05-99f7-a62cc6315e0d"
        },
        "item": {
          "id": "fd11ed31-f569-4136-bb46-8dad12d1228c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1e0b9484-33b5-4844-b528-bcc4a0fb8481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f43249-e3f5-4066-bc14-5e6ee33998e3",
        "cursor": {
          "ref": "541e6e73-ef9a-4d87-b0a1-af139336011a",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f23ec0a1-4135-4f00-994a-1fa18265a437"
        },
        "item": {
          "id": "28f43249-e3f5-4066-bc14-5e6ee33998e3",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4d714795-a800-4ec8-8b79-29dde9154429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20640400-39fe-4cfa-83e0-42e8f507bbdb",
        "cursor": {
          "ref": "f1fad94e-da78-4e75-8853-4e52bd989a13",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "745c18e9-694b-409e-b3d2-2ff83ccc3a91"
        },
        "item": {
          "id": "20640400-39fe-4cfa-83e0-42e8f507bbdb",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "abe38a64-87e4-49db-ac34-11a0525fd238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6223fc48-b34a-413d-9324-d4f9e191d271",
        "cursor": {
          "ref": "255e24aa-9d5d-4fff-9c73-8e09b5862054",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "685f9074-ddb5-4c87-bb6d-3fb2cdd41617"
        },
        "item": {
          "id": "6223fc48-b34a-413d-9324-d4f9e191d271",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "426bc5af-404a-478e-b3c1-e3160253f337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba363bc-ee52-4a88-8d84-51a1e8a79051",
        "cursor": {
          "ref": "60af0a7d-abd3-4d1d-8923-3c5d4f0edf92",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "23fd78e0-ae8b-4bf0-b655-a7f9a5da8c3a"
        },
        "item": {
          "id": "dba363bc-ee52-4a88-8d84-51a1e8a79051",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1ddee5fc-54b6-4d4e-9a08-8857b14c7223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764c2330-1486-4356-92aa-e714e3e34b34",
        "cursor": {
          "ref": "31402723-3b84-4b2b-9fdd-56ad7b3ba3b2",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d5cbb84f-cd07-4cbc-a3fc-810381dcea92"
        },
        "item": {
          "id": "764c2330-1486-4356-92aa-e714e3e34b34",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b3662c24-ab35-4c17-bd87-1e24e8da855d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f995065-31f0-4274-8697-666f8fb9897b",
        "cursor": {
          "ref": "80762564-54e6-4885-b513-e328668cea78",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b3a3cc64-304d-4029-92cb-3424bb0a2580"
        },
        "item": {
          "id": "4f995065-31f0-4274-8697-666f8fb9897b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3e3fb33c-828d-4fae-9f49-e6092a4cfcfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4dc0ef2-a55a-4f67-8175-dc3b374b4be9",
        "cursor": {
          "ref": "7fe96585-22fa-4687-bc06-54feb745beee",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "dc3bfe7e-f9c5-4ce4-86dc-6162a6c26ff0"
        },
        "item": {
          "id": "f4dc0ef2-a55a-4f67-8175-dc3b374b4be9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "51044aee-b172-4dc3-ad4e-9a583c9193f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4623c5-21b0-487e-8f4f-10f7e0f9f8e7",
        "cursor": {
          "ref": "52e2e386-707e-4135-92e0-7b834575a0e7",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "641ede18-c581-4214-bbe2-0137f691ec90"
        },
        "item": {
          "id": "2c4623c5-21b0-487e-8f4f-10f7e0f9f8e7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2c45e720-1786-4922-bfc8-a9e07f3eb055",
          "status": "Created",
          "code": 201,
          "responseTime": 3023,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "77b2311d-e7b8-406b-b3b4-87d6e2de6873",
        "cursor": {
          "ref": "1dd03765-cd1a-474d-bb5b-297d99623323",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "55af52f3-30fc-4385-95ba-95f3ade28f8f"
        },
        "item": {
          "id": "77b2311d-e7b8-406b-b3b4-87d6e2de6873",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "60f10d38-bbf1-469d-b627-2ed493259610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c4279e3-3669-44d1-a915-8d3ce8c176c8",
        "cursor": {
          "ref": "e1541f3b-bea2-44f0-96a7-91bf9af20498",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "19be01f7-8b9c-4f2c-ae9f-bb4ea566599b"
        },
        "item": {
          "id": "8c4279e3-3669-44d1-a915-8d3ce8c176c8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d935cf3a-d431-4c85-85bc-3d0c4baeccc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf44257-0283-4797-9a05-b79b7276fb24",
        "cursor": {
          "ref": "afac01c1-470b-48c0-8d2e-04d533b21cab",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d06ef0b1-d035-434c-b883-50acd7ebe177"
        },
        "item": {
          "id": "acf44257-0283-4797-9a05-b79b7276fb24",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "eb081700-b749-487e-a805-8abbaabeca28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ff6510-3fdd-4273-b93c-66fffb56a5b8",
        "cursor": {
          "ref": "33fd332d-97ec-44ba-8866-d13a89f0ee71",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "66ec03b8-f338-463c-a846-350f44e0fbdd"
        },
        "item": {
          "id": "66ff6510-3fdd-4273-b93c-66fffb56a5b8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9f15e527-675d-40a2-be8e-a43f1e8a7394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c65da0-5d5d-424f-90b6-c7594259ba15",
        "cursor": {
          "ref": "b4e6d04b-607f-4abb-94ff-90351808f818",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f5d32e78-f355-4ee6-bf4a-a280dc34a18d"
        },
        "item": {
          "id": "40c65da0-5d5d-424f-90b6-c7594259ba15",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "66b85823-0ddd-4da4-84d5-d6ae1d778da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0299f15d-484a-4136-8cb5-289f1908b571",
        "cursor": {
          "ref": "15db5c31-1620-495f-81d2-f819fad179b3",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b5a311e6-ad95-477c-a4f2-417d8b62e0f4"
        },
        "item": {
          "id": "0299f15d-484a-4136-8cb5-289f1908b571",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e84a2032-d073-4ccb-a7b9-ded36267c6b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59646a82-c552-41c6-84f7-d8c28bd7ec52",
        "cursor": {
          "ref": "00076e95-e11f-4750-a45b-397e352a356f",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d3dd83ce-eb1a-461d-99d3-c1a98dfa5a79"
        },
        "item": {
          "id": "59646a82-c552-41c6-84f7-d8c28bd7ec52",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8c9b94be-cf09-473e-acdf-431024dbc740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b7b639-900f-4cd1-a243-b9f4583b215b",
        "cursor": {
          "ref": "d1de3b6b-ff1a-456f-8faf-3203b468908e",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "00950e49-40f8-4eae-80eb-8f4ebdafd147"
        },
        "item": {
          "id": "27b7b639-900f-4cd1-a243-b9f4583b215b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6b67fb4b-b76a-42f4-ade8-237d688f267e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623da459-329a-40ff-a158-a70f02945ab2",
        "cursor": {
          "ref": "01a77c4b-22f8-47fa-a097-f5e92a6499f8",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f5c9cce8-a122-4507-bb4a-04b89ac5e092"
        },
        "item": {
          "id": "623da459-329a-40ff-a158-a70f02945ab2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "54d0d85d-5119-4a5b-bb6e-e9f924d7154c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b74d22-16e0-4fe2-a6e5-69a4bd34860b",
        "cursor": {
          "ref": "2266ab2d-a945-49a7-a4b8-08ed1a372a52",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a300453b-0542-4d5f-b0eb-926aad868bd0"
        },
        "item": {
          "id": "18b74d22-16e0-4fe2-a6e5-69a4bd34860b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "04a7d181-cf85-46f8-b621-6b176e6b347c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1293dc-a41c-4756-a7e3-9723f8396d0d",
        "cursor": {
          "ref": "d3c41111-db26-43c9-9bad-1c69b6e42d15",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1fce537b-fbf2-442f-b5af-c3787335444a"
        },
        "item": {
          "id": "8a1293dc-a41c-4756-a7e3-9723f8396d0d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2aa0d31d-2ad7-4a22-9c94-80959fa6ace0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d3f2ac-57a7-4d40-a617-f7f6cf70b5b4",
        "cursor": {
          "ref": "a7a9ae93-4783-4926-9f4c-e1e9c9e9ffcc",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0789ad0c-77ff-4eb9-b82b-922e276eac69"
        },
        "item": {
          "id": "b2d3f2ac-57a7-4d40-a617-f7f6cf70b5b4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c6663321-1d54-4573-893d-94806a29202b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f140c27-fa5b-42ad-9de6-f162427f59c6",
        "cursor": {
          "ref": "88796a95-f438-4b4c-be88-bd77501fda67",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "aeb2585b-789e-47f9-9db7-980543654bca"
        },
        "item": {
          "id": "0f140c27-fa5b-42ad-9de6-f162427f59c6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0a86603c-40fb-435f-a896-a2fb084a239b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2562abc8-2534-400e-9820-08411474015e",
        "cursor": {
          "ref": "096d1b3e-e5e6-421f-8377-bf09cd64a831",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d6df99ab-81b7-4b52-af22-aae5430b4623"
        },
        "item": {
          "id": "2562abc8-2534-400e-9820-08411474015e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c03562ea-5084-418e-aea0-0b32de9599af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e3c269-3160-4ca7-bea9-ffe79131cb15",
        "cursor": {
          "ref": "4c76cad8-4b6a-484e-af25-0d2ec526cb81",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6befb5a0-dc38-48eb-bc3e-d4efef00ac52"
        },
        "item": {
          "id": "83e3c269-3160-4ca7-bea9-ffe79131cb15",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e2d78f61-ffab-4444-9640-b79ad433603b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98fecfb9-d5f1-4041-9947-1de69ad1fe2f",
        "cursor": {
          "ref": "7d5c6340-eae9-43e1-aa69-3c075d0144ae",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "56cd87be-8c5d-4c02-8b5c-82906b54fcad"
        },
        "item": {
          "id": "98fecfb9-d5f1-4041-9947-1de69ad1fe2f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c42acdc5-04c0-40d4-a826-b225ff106961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1020ba0b-0f62-400e-8281-3466404b4d09",
        "cursor": {
          "ref": "27a5107d-145b-4fd1-9e47-45d402e6f338",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a94107a0-45e1-43dc-b260-1036946cefa2"
        },
        "item": {
          "id": "1020ba0b-0f62-400e-8281-3466404b4d09",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ce2ab16d-abbf-4b8a-91ca-6e786c49f055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d69b359d-4ef8-463b-a921-9dda4db19b71",
        "cursor": {
          "ref": "458a705d-ed48-4126-a349-a826da4d7304",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "749039a7-345a-4ff3-8e67-4d27f96376db"
        },
        "item": {
          "id": "d69b359d-4ef8-463b-a921-9dda4db19b71",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2d9f2413-b589-4e45-bb2b-f9accb49dae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a90c61-8af5-462e-bac2-fd83797a2406",
        "cursor": {
          "ref": "c6ecefe3-2098-4624-9961-b711b551baab",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "43d86250-438f-47d6-8737-9364c512817e"
        },
        "item": {
          "id": "03a90c61-8af5-462e-bac2-fd83797a2406",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "564146da-fb03-4b37-83a9-d7023bbb42cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e349fb7-09de-4793-bba0-8142b1da47ed",
        "cursor": {
          "ref": "aae61813-2ee1-48ea-8732-3d12f15af1e1",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f5a2f878-d796-4760-be2f-d293b34e0578"
        },
        "item": {
          "id": "4e349fb7-09de-4793-bba0-8142b1da47ed",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4e47eec9-2876-4b16-b90b-bd1c45701002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6bfa12-8b47-4680-83c2-e0ae5c42cb5e",
        "cursor": {
          "ref": "8bfd86fd-274a-4e51-95f5-51433b020a0d",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "956fd4d6-fc13-4f98-b962-d23cd403ccb1"
        },
        "item": {
          "id": "3c6bfa12-8b47-4680-83c2-e0ae5c42cb5e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9e2d063c-58ee-4e98-8e9f-5e2c8c92d4f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a88c8f8-ec67-4754-b5e6-25fca65d59c1",
        "cursor": {
          "ref": "dd509ccc-a6a7-4351-9dce-b18228992bd1",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "178e6ad5-8433-48d8-a0e1-a75c57c27c4e"
        },
        "item": {
          "id": "7a88c8f8-ec67-4754-b5e6-25fca65d59c1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2a79422d-c633-4369-a1ef-954e0795a7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28696e58-e049-4f0e-a154-37db2726ae30",
        "cursor": {
          "ref": "1cb2c2f7-7682-4be9-a1ec-c2082eeec3cc",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7f213954-eca9-4d54-b5ac-6ab70acf6410"
        },
        "item": {
          "id": "28696e58-e049-4f0e-a154-37db2726ae30",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "74f1cb00-684e-446c-881f-c892c5b27fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff27a32-28ad-4653-99e4-ff9be214ac9d",
        "cursor": {
          "ref": "f55a88b3-b528-41bc-a9ac-64566531622d",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ae99462a-364a-4ccd-83cd-7685f005dba3"
        },
        "item": {
          "id": "8ff27a32-28ad-4653-99e4-ff9be214ac9d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "13e6083a-7de5-4de5-99a8-7101d953fe4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d4fb51-e5b7-4426-be17-5f41156ff354",
        "cursor": {
          "ref": "6bb82d34-aaa1-4652-a484-a717073ebe5a",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8f502e47-1dd0-4b8f-a8b9-0e4ed52177cf"
        },
        "item": {
          "id": "59d4fb51-e5b7-4426-be17-5f41156ff354",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "fac6c966-eb5c-491f-a06a-3a5b93670b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20211d30-e6f8-4449-a275-7a1036bc4a20",
        "cursor": {
          "ref": "c0dc4e33-bd1a-45f3-8ad0-33eb143d95a4",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3186f388-f15d-4e81-ba7c-0a63eccae775"
        },
        "item": {
          "id": "20211d30-e6f8-4449-a275-7a1036bc4a20",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e5515ac0-32bc-4b4a-9556-defaa95a2b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a15da6fc-247e-4aca-82d5-a0e0f098aba2",
        "cursor": {
          "ref": "ed44cc2a-c5aa-4bec-b05f-bfdb19fcf561",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3f2cc7b8-1eff-4694-8af2-ab6f2d8cf553"
        },
        "item": {
          "id": "a15da6fc-247e-4aca-82d5-a0e0f098aba2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e305aaaf-e82d-4980-a077-f27f104a5b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e8b5e5-767d-47e7-aa32-5d55d09612f9",
        "cursor": {
          "ref": "1a6cae5b-894b-482a-8f58-7c92fd848ef0",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "28672d1a-a3df-42e0-b215-73b69fe578d1"
        },
        "item": {
          "id": "46e8b5e5-767d-47e7-aa32-5d55d09612f9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e08c6e4d-5879-4b58-b381-0d4b3b74950e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b3851c2-0fc4-49de-b895-ab2025d31841",
        "cursor": {
          "ref": "dae48c83-927e-4628-9ee3-11fa74442400",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "fd793118-65df-4a03-9aba-660d22e3039d"
        },
        "item": {
          "id": "0b3851c2-0fc4-49de-b895-ab2025d31841",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "91f9d639-7812-4f2f-8137-e132918af623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b56f61-72af-4a50-a2ca-a0e5465ff85a",
        "cursor": {
          "ref": "32675c48-5e54-417a-9f2c-f23b81b51e16",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4bbc5937-4f08-4ef7-80fe-a8117f97f1ff"
        },
        "item": {
          "id": "91b56f61-72af-4a50-a2ca-a0e5465ff85a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8485984a-2732-491b-95ac-fb9ea32127d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03675440-8518-4828-a99b-d744298a2631",
        "cursor": {
          "ref": "7006177a-b1fa-4df4-9519-c960fb6ec5fc",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "fbadd178-6c92-4164-9041-b613a32355ab"
        },
        "item": {
          "id": "03675440-8518-4828-a99b-d744298a2631",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "af6940a7-9698-4080-8427-3fcdc5e9b289",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "159a0390-df54-4254-82b5-85252eef7bd4",
        "cursor": {
          "ref": "8eb01613-4ae1-4a07-831a-d9e5c1ef4ea3",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a935871b-17ba-4289-a73d-3f8450e2725f"
        },
        "item": {
          "id": "159a0390-df54-4254-82b5-85252eef7bd4",
          "name": "credentials_issue"
        },
        "response": {
          "id": "269ab094-0d58-417e-b149-ff90a3e538fa",
          "status": "Created",
          "code": 201,
          "responseTime": 2471,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db3da52-effa-4ac3-b5f8-9aaa7b950f09",
        "cursor": {
          "ref": "86d50f9c-6773-435b-ad8a-3227225c9792",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f4035db6-9ecb-479f-ac7b-11750eb6df92"
        },
        "item": {
          "id": "5db3da52-effa-4ac3-b5f8-9aaa7b950f09",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "58874f23-2e39-46f0-bd75-fd95b4a02c63",
          "status": "Created",
          "code": 201,
          "responseTime": 2538,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4bb10ba-33a1-46f4-9bbe-6fb568747531",
        "cursor": {
          "ref": "160713e1-1e71-4bd2-88fe-21cd9199dcc4",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "46717ea0-dc29-462b-ae32-2d924ebae859"
        },
        "item": {
          "id": "f4bb10ba-33a1-46f4-9bbe-6fb568747531",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "88924948-fbd7-452c-97f8-a6b340e006e5",
          "status": "Created",
          "code": 201,
          "responseTime": 2703,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9a7030-ddbb-46b6-9ad5-32f1472f22a8",
        "cursor": {
          "ref": "3415ee45-dc25-470d-b6f2-129b2ea83f52",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "153ad7ea-9a06-45a9-8e90-4144aea6c266"
        },
        "item": {
          "id": "fc9a7030-ddbb-46b6-9ad5-32f1472f22a8",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1f63c476-e213-4c7d-8397-af8df0452cc0",
          "status": "Created",
          "code": 201,
          "responseTime": 2491,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "71787357-235d-424b-81c1-76ed29b782e5",
        "cursor": {
          "ref": "26e5fc2c-abdc-4764-9a70-11d1cce37083",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "737a194a-bc54-43ae-98e0-b462f3e01991"
        },
        "item": {
          "id": "71787357-235d-424b-81c1-76ed29b782e5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6533fae9-0ddb-405f-a9a9-9eeb6a6e81bf",
          "status": "Created",
          "code": 201,
          "responseTime": 2375,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-06T00:44:27Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-06T00:44:27Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "6d3800bc-f126-40d1-a539-3f485f3a2f38",
        "cursor": {
          "ref": "1aa448a4-c8a3-44f5-bd73-0fef6fba7821",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "72c6d5b3-a03a-406d-a3f6-e3098d2f3299"
        },
        "item": {
          "id": "6d3800bc-f126-40d1-a539-3f485f3a2f38",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1db82ea9-3144-4dc3-aabe-adca844a07fd",
          "status": "Created",
          "code": 201,
          "responseTime": 2591,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db38bd56-d374-4d5d-bb23-1717a04b8a50",
        "cursor": {
          "ref": "d8e0cd2b-1880-4e19-87fe-510ec9d6261b",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8686cd3e-1b7c-47fb-8e64-a0a6da69bd50"
        },
        "item": {
          "id": "db38bd56-d374-4d5d-bb23-1717a04b8a50",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "977811cd-4912-462b-9f30-29de1567b2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0072b56b-af25-4221-b4d0-c41254661296",
        "cursor": {
          "ref": "72e66acc-7069-4589-bd26-f4e2389e21a9",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fad60f9c-66b9-4498-8ac3-b00c92d8ef48"
        },
        "item": {
          "id": "0072b56b-af25-4221-b4d0-c41254661296",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0dbf8137-f278-4b93-b1d9-825456644d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0579486-ba60-4a21-980e-080d43629c8b",
        "cursor": {
          "ref": "2cb7aae2-cd57-4343-afbb-b3b4da606ecf",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "458c04d8-9ee4-4703-9a4b-6a715a600e06"
        },
        "item": {
          "id": "a0579486-ba60-4a21-980e-080d43629c8b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c3e676a2-6efb-41b8-b6f9-ed1514e620c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fd7476-3cb2-4f5a-9a8e-24b89de3d1dc",
        "cursor": {
          "ref": "c8529de3-1822-4cf3-9e49-3f70d6d5454b",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ef4d8480-ca8b-4e3c-8a2f-088de7885ecb"
        },
        "item": {
          "id": "30fd7476-3cb2-4f5a-9a8e-24b89de3d1dc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3226db0d-bfed-4501-aac1-dbd22afd1d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1c5f86-f559-4e54-a663-38bccba99939",
        "cursor": {
          "ref": "5cc6b8ce-2688-4356-bf79-27ed475e01d4",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9bdb924f-5824-4ec0-8ee3-2a189af936c1"
        },
        "item": {
          "id": "fc1c5f86-f559-4e54-a663-38bccba99939",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f6d720a2-4f05-431d-a597-9279484c2b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7a9ff5-a967-4652-8354-331ae188d0be",
        "cursor": {
          "ref": "acacfd7c-9880-4a64-a348-c8462695264b",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "30af7e7f-a1ea-4252-91a3-b58a5c9639da"
        },
        "item": {
          "id": "4e7a9ff5-a967-4652-8354-331ae188d0be",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ff5c04b7-f095-4fb6-87f9-af3f4c8d0809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d8182f-8080-4f07-b8b2-9641cc1ed312",
        "cursor": {
          "ref": "d4cddabb-fbd0-4ecf-b9ce-9a1c88e027a8",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "45b06261-d30a-4c9c-ab72-ebbf93d51e91"
        },
        "item": {
          "id": "24d8182f-8080-4f07-b8b2-9641cc1ed312",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "65c0349a-1b0c-4a3c-af0c-3f4d0a40edab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db798af9-468b-4178-be81-d79eca3ac426",
        "cursor": {
          "ref": "7f4c6a57-5e5f-4278-9bd3-c9890a23fcc1",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e5bd7576-468d-4a3f-9c54-271a98946980"
        },
        "item": {
          "id": "db798af9-468b-4178-be81-d79eca3ac426",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8a2dbe69-3978-4aa2-af6e-86d06060488f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac00183-4697-427b-94f2-260811a7aab3",
        "cursor": {
          "ref": "822cf392-5472-4d11-9328-ed21186a2e4a",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "64eb2ed4-8278-4463-b3ff-928a2aeae9c4"
        },
        "item": {
          "id": "dac00183-4697-427b-94f2-260811a7aab3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2a812bc5-2cee-4697-9851-1e8e6dd32a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df2a5b2-47a0-47b5-834d-aafd398b9a28",
        "cursor": {
          "ref": "78d86303-47dc-46e9-b5cc-57ded9a4a33c",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a3120ece-10fe-448b-b236-1bac4633ffea"
        },
        "item": {
          "id": "6df2a5b2-47a0-47b5-834d-aafd398b9a28",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1b3b526c-be15-4932-9723-903eabaf46f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd03fc78-d84f-4815-a108-d0d77aa50b4f",
        "cursor": {
          "ref": "af53ab26-1f8e-4cfe-ba8c-9369cc8ebd36",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3f8c1d52-dbc7-4748-97ee-e21371f06b2f"
        },
        "item": {
          "id": "dd03fc78-d84f-4815-a108-d0d77aa50b4f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "07842286-95f3-4ff8-912b-b1cfc81a4ae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a61dcd-ddc0-42d0-a3b2-77b357efdb18",
        "cursor": {
          "ref": "ece47a31-fab1-4e53-bdb8-bb4cafd2cb1c",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "97095408-d370-4c6c-9339-b2b66b7d63e1"
        },
        "item": {
          "id": "27a61dcd-ddc0-42d0-a3b2-77b357efdb18",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2db750c3-5828-4717-b4ad-5144616af0d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f1732d-63cb-4207-bf8c-a372e123abb4",
        "cursor": {
          "ref": "306c8882-420b-4d71-86fd-407a5ae5f07e",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "913ca49f-0d20-4cff-9cfd-f17a921cf464"
        },
        "item": {
          "id": "23f1732d-63cb-4207-bf8c-a372e123abb4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d8c402ef-171f-42a1-bb7d-a7d7619ced11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b73cd5-32f1-4e8f-95fb-cbfe0839e07c",
        "cursor": {
          "ref": "5894c531-e492-4732-93ee-88306aa643dc",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8aa6cb4a-fafe-4b76-8cad-54b8d0ced77a"
        },
        "item": {
          "id": "f9b73cd5-32f1-4e8f-95fb-cbfe0839e07c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6fd74a95-b55b-4159-b66b-9d9fdd64a4ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a9074dd-4440-45b6-9e99-707e4b4b57f4",
        "cursor": {
          "ref": "de3625eb-a73b-4c71-bbb9-f6cb75f2bb9b",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "dfdd9fcc-fe64-4ea4-ab48-e9e0c32e1215"
        },
        "item": {
          "id": "9a9074dd-4440-45b6-9e99-707e4b4b57f4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "000ffb26-7e6f-4035-9073-c169b3be64b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35508087-9688-4d02-8bc0-de489b1c3c12",
        "cursor": {
          "ref": "0aeb8015-5af6-4a94-b040-c916ce13795b",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "52a9c2a4-bfe0-4f31-ae02-6deb210b6f41"
        },
        "item": {
          "id": "35508087-9688-4d02-8bc0-de489b1c3c12",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a8269809-c97f-404a-98c9-20cf5609893a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dd42d64-0923-4777-ae47-534f3e94b771",
        "cursor": {
          "ref": "15f79329-9ad2-4b5c-aa47-c594700d5103",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6037ee2f-2bcd-4031-a629-21d5253e1c3f"
        },
        "item": {
          "id": "7dd42d64-0923-4777-ae47-534f3e94b771",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "68ea2af2-f503-4b6b-93f7-6a9f3d64e1ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573ca221-dc15-47af-ade4-ebf75ab74e15",
        "cursor": {
          "ref": "a721394b-a048-48fc-a884-a788c19d330c",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7ec494f4-2d85-48f3-934c-04212e636aff"
        },
        "item": {
          "id": "573ca221-dc15-47af-ade4-ebf75ab74e15",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0d2278f6-e2c8-434d-b7ce-e19d58331520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a18749-963a-4723-bc4b-b5e8bfff54bd",
        "cursor": {
          "ref": "49d10231-08c1-4a85-b260-448c257577e4",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "58e9be7a-fd9e-4cb6-8452-581e001a1cbe"
        },
        "item": {
          "id": "c3a18749-963a-4723-bc4b-b5e8bfff54bd",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "71b4c887-184a-46da-b19d-527ee668b53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "729a8e2c-676c-4d3b-9d72-164156ec60ea",
        "cursor": {
          "ref": "b9802dbf-427f-489f-bc44-a7a31be29a1f",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b8b16747-0edc-4b13-b824-80709510cb33"
        },
        "item": {
          "id": "729a8e2c-676c-4d3b-9d72-164156ec60ea",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "aed08f42-731e-4e41-94c3-eef95a6d8dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc19f73-5ae4-4170-b76a-5ce9e6975eb3",
        "cursor": {
          "ref": "c07e12e5-f519-49a0-9297-0d304c064f7c",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c756b2ca-8feb-4e7a-8095-313b9f4c6b6e"
        },
        "item": {
          "id": "1bc19f73-5ae4-4170-b76a-5ce9e6975eb3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9ff67488-0971-447a-a637-98d83be1b983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6462ba-37b9-4496-9bcc-38dfdcacfd56",
        "cursor": {
          "ref": "1b9212bd-88e3-4f82-81ba-de5257f69d7a",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a6a535f9-c93a-43c3-9119-5a5ee7b8f56a"
        },
        "item": {
          "id": "ca6462ba-37b9-4496-9bcc-38dfdcacfd56",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0cb1f00b-7445-4015-b6ff-5063e49647ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98ca1ff-c37b-4283-b716-c9cee831f4ad",
        "cursor": {
          "ref": "a2cf168d-0fc7-4b49-8959-5bb7c8e91afa",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8dc57294-1d9b-4b28-a5c4-f622b4e36e62"
        },
        "item": {
          "id": "b98ca1ff-c37b-4283-b716-c9cee831f4ad",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "aacae69b-72c1-4379-8bac-63a113b58ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d611f06e-c0d8-4de5-815c-0cd712f3daf7",
        "cursor": {
          "ref": "206ac376-73b9-41b1-a32c-b961f0ceaee3",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "745e336a-8bd1-4133-87de-29d2252b019b"
        },
        "item": {
          "id": "d611f06e-c0d8-4de5-815c-0cd712f3daf7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3063e840-89ab-4006-aa45-6ae22883d472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205b8816-bbdb-4614-99e4-49eb99d776c6",
        "cursor": {
          "ref": "137d2357-25d6-4bd3-85fd-2e2cdb5d7a8a",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "003bfbd5-fc06-466a-a358-ed8baf4fb2dd"
        },
        "item": {
          "id": "205b8816-bbdb-4614-99e4-49eb99d776c6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "024d363b-dfff-4008-b2c1-18dc3cb55338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c4ca87-261b-493b-9fec-ba60c5b30bf6",
        "cursor": {
          "ref": "42f9bcd2-0d20-4a89-9038-4dda75d5ccdc",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "83cf2b00-2781-4653-9cff-e41e9fe76f54"
        },
        "item": {
          "id": "a0c4ca87-261b-493b-9fec-ba60c5b30bf6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1eae01e5-e924-4af9-8761-5e81f207b974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43954785-d997-4039-9fd0-815cb70c3cd8",
        "cursor": {
          "ref": "40b8c88f-26f1-479c-bd1c-dc2d26db6fd3",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "78f56152-ef1e-4dd8-89d8-7895006b15a0"
        },
        "item": {
          "id": "43954785-d997-4039-9fd0-815cb70c3cd8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b2b343ad-a004-468b-9f86-621608611222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1c67b0-5468-42dd-bbe0-ede9104d9a93",
        "cursor": {
          "ref": "fc98b343-1d25-4905-b8f8-65cc47e6c12f",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "64bfebf7-fb16-43fc-a3e6-9f7c2d576e74"
        },
        "item": {
          "id": "fe1c67b0-5468-42dd-bbe0-ede9104d9a93",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "653ebf2c-10ad-4926-95c8-6707b21a6b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5b3533-9572-4b61-a42e-85b60fc87578",
        "cursor": {
          "ref": "86e26b27-511e-45b2-bd86-3b8a898998de",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b155f826-ad2d-44da-8153-deb3c571b777"
        },
        "item": {
          "id": "4a5b3533-9572-4b61-a42e-85b60fc87578",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3d13cd97-0f1d-40a4-a82f-4ceb7add631b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c38230d-7b94-4793-814a-64ecf3eed49d",
        "cursor": {
          "ref": "faa44362-a089-4660-a366-d2cb9dae0442",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e68ddeec-d29a-46da-b949-873657724073"
        },
        "item": {
          "id": "6c38230d-7b94-4793-814a-64ecf3eed49d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b6ff9f4b-803f-44b4-9839-6eda7cbe51ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72669b7c-c1b8-4b7d-969c-602ecc998be7",
        "cursor": {
          "ref": "fc87fa51-fe96-4340-a7ad-f5fcaf533690",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e8f5d357-1523-4a4a-aa4c-dd9738edc2f2"
        },
        "item": {
          "id": "72669b7c-c1b8-4b7d-969c-602ecc998be7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fdd23ddc-3439-48dc-9861-a9da37aee0ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9042d03b-488b-4b55-b479-95922ca17b71",
        "cursor": {
          "ref": "472cc973-ebac-48ee-a9d6-6c8320c46e46",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6c5b5430-ac9c-4507-99c0-c479fcd201cf"
        },
        "item": {
          "id": "9042d03b-488b-4b55-b479-95922ca17b71",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e61bd17c-382a-4482-9506-dae2e079d8ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78383a7b-c062-43f6-a249-5c9c5325053f",
        "cursor": {
          "ref": "b97c51ff-3748-4cb7-b7aa-afd2fb6402aa",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c7969cca-d4ca-4972-a864-a83f64924b1e"
        },
        "item": {
          "id": "78383a7b-c062-43f6-a249-5c9c5325053f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fa819e8f-ccb0-451d-bfbc-593c9c2b1559",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "8ec66948-37e6-4733-98d5-c354cb63de71",
        "cursor": {
          "ref": "9489b091-22d5-4b9d-990e-c3d902ab5ef5",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1b51c0a8-cd4e-4907-91ec-97d08b54764e"
        },
        "item": {
          "id": "8ec66948-37e6-4733-98d5-c354cb63de71",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "94a223c2-997b-42c2-b53a-9c17de517665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d19172-0e07-4bb1-ad92-7144e7c0506a",
        "cursor": {
          "ref": "557f25a2-1a76-46e0-9dc7-8a8085a029f4",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "37e315f7-0698-4793-afce-d86a043b6837"
        },
        "item": {
          "id": "32d19172-0e07-4bb1-ad92-7144e7c0506a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4c080b4e-be6a-432b-b7fe-b01c69f6dc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602a19dc-cd04-4b14-990d-34ecdf26c529",
        "cursor": {
          "ref": "8f6992ff-0a9c-471a-8e45-106b24eab6fc",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4da23066-d66a-47cd-b506-f362f2bb1304"
        },
        "item": {
          "id": "602a19dc-cd04-4b14-990d-34ecdf26c529",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b531d247-2f30-4da8-be21-19649441d976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c076a90-9f4a-482e-b3d9-6ade9b4391d9",
        "cursor": {
          "ref": "95470c57-5e8d-4bf8-9bfd-f26df1ed530f",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "11bf3235-0533-4633-b09c-f3afc85df84a"
        },
        "item": {
          "id": "9c076a90-9f4a-482e-b3d9-6ade9b4391d9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "acc093d6-40b6-420f-b065-5c461196f62b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe385d8-508b-43f2-aac8-4c97a20b2458",
        "cursor": {
          "ref": "e0e17381-bf8c-4a8b-993a-9ec1aa2a645c",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "bfcc963f-104e-419c-b437-b263d20f5960"
        },
        "item": {
          "id": "bbe385d8-508b-43f2-aac8-4c97a20b2458",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e69ff84b-239c-4d17-b30c-437ebf53abdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd53cd04-2086-4749-a674-7f6b8ce52987",
        "cursor": {
          "ref": "9ac5be20-a392-4231-9ff7-0b16fee794fe",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5ea156cb-c2b1-4825-8241-50217a4d7f99"
        },
        "item": {
          "id": "bd53cd04-2086-4749-a674-7f6b8ce52987",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c4617ab8-8ea5-419c-9f36-9cda301eba41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd596a5-19ec-411e-8129-482c02b08c93",
        "cursor": {
          "ref": "60b9c9c7-3eea-47b4-8ec0-b9a070684a3c",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "424cf117-6583-47d1-a03b-8baa28d71d9f"
        },
        "item": {
          "id": "3fd596a5-19ec-411e-8129-482c02b08c93",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e72bd356-1596-460e-a0ee-725400154521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd05191a-cc23-4721-8119-ae7d548a3048",
        "cursor": {
          "ref": "96395d11-b0e2-49fc-ab4b-18aec8476815",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1c4342c1-001c-4884-b0d7-75e84d83cb8d"
        },
        "item": {
          "id": "cd05191a-cc23-4721-8119-ae7d548a3048",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d076bebd-37f8-4b9b-b6c2-8bc0c49861fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525da9a5-d36c-4bd4-9268-31641eadc50b",
        "cursor": {
          "ref": "ddb7601d-5255-4dcd-872a-8b60aaff6652",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "cd48fc6e-6996-42dc-9609-be852cd0ade8"
        },
        "item": {
          "id": "525da9a5-d36c-4bd4-9268-31641eadc50b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3c39af37-3456-44db-b75a-ae19c088163a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2639505-84a4-4988-83a3-a37282d0ef80",
        "cursor": {
          "ref": "52ffbe31-3d69-4c4f-b9fc-57bf0d3edf76",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "814643ad-47b6-4c8e-900a-c5e76a466fb7"
        },
        "item": {
          "id": "b2639505-84a4-4988-83a3-a37282d0ef80",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5d16a079-8b0a-45b7-89a6-8debda72ce00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e0c3cf-0af2-4b4d-9ba8-c22bdeefff6e",
        "cursor": {
          "ref": "b9ec7255-3e6d-4fd7-a694-d73b9c1ec9e5",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "56060796-101b-4f56-9080-aec6fef0cd4c"
        },
        "item": {
          "id": "15e0c3cf-0af2-4b4d-9ba8-c22bdeefff6e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "51da0f66-e7ef-4761-b81e-b39ea6e6f565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69043bd7-6953-45a3-97dc-5683f9512366",
        "cursor": {
          "ref": "7e90347f-73f0-4ea9-ac3c-3c026339f5ea",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f41164d0-24c4-42c9-a6b9-495f5f2bb43b"
        },
        "item": {
          "id": "69043bd7-6953-45a3-97dc-5683f9512366",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e1c8434a-4bb0-4898-b6da-c213e11b840f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9874e580-7ad0-49bf-82ad-f3d8fa37fb03",
        "cursor": {
          "ref": "f3298ff9-6990-4042-9c39-0a94bbca0ef6",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "45eb7df5-ba3e-4980-93e9-402d76e9b3f9"
        },
        "item": {
          "id": "9874e580-7ad0-49bf-82ad-f3d8fa37fb03",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5913d02b-ce25-417a-9897-c88caa5bf4ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219ea3b2-5ac5-451b-b24b-f7e67d480e7d",
        "cursor": {
          "ref": "e4565caf-e515-4195-beb5-1bbc27b75c68",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "84aeffca-5558-4e92-a053-3999a543f44b"
        },
        "item": {
          "id": "219ea3b2-5ac5-451b-b24b-f7e67d480e7d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b5dc9c0e-fda7-4812-b00e-3d7490f6df7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8e2982-86e1-40bb-b2d7-d88427f0182e",
        "cursor": {
          "ref": "8fc97c59-0715-4d93-a854-d7245cb2eafd",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "703afc48-3295-4ead-b610-46b322aa36fd"
        },
        "item": {
          "id": "af8e2982-86e1-40bb-b2d7-d88427f0182e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0d4c7a91-f571-4f8f-9cdb-47c4f1df74ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36da01a1-c676-4a6a-b2b8-1ee9c44aea5e",
        "cursor": {
          "ref": "e7e99543-441f-47d8-b30d-f65707d766d2",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6aa8417b-5e82-4943-a1e5-6d332e009961"
        },
        "item": {
          "id": "36da01a1-c676-4a6a-b2b8-1ee9c44aea5e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7a81a5e6-6cfd-4693-be21-823ae6165333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b816f5-65bc-4504-a45d-de827ff18c5d",
        "cursor": {
          "ref": "71088d4f-8e94-4e38-8848-69662e553cc1",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4d6050a9-ed14-42c0-8e20-a71cf56ba7da"
        },
        "item": {
          "id": "13b816f5-65bc-4504-a45d-de827ff18c5d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "190a5ee8-228e-4385-91f5-4e01d1b50294",
          "status": "OK",
          "code": 200,
          "responseTime": 219,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "6fb7f4c2-586d-4842-96cc-b25cbefc99c2",
        "cursor": {
          "ref": "75b57ac8-6e2d-438b-9da0-325feafec9c5",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "72d51b63-adc9-4af5-bb8d-4eb58d1c89b5"
        },
        "item": {
          "id": "6fb7f4c2-586d-4842-96cc-b25cbefc99c2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "07edde04-1e44-4b91-8245-a4c30bd34101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4db320-4303-4dc3-a208-dce201dab3dd",
        "cursor": {
          "ref": "28d83a85-21e1-4bd8-b264-887b73bb1569",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b45521f7-4788-49fd-af8a-ca90275a9614"
        },
        "item": {
          "id": "5e4db320-4303-4dc3-a208-dce201dab3dd",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c5c3e3fd-8c6e-41b0-ac3d-396f80dd0cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc5f09d-ec31-4a0b-a0a5-be1931e88420",
        "cursor": {
          "ref": "49db2f36-050e-404b-8c8b-dff9fb4d2623",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "513cc7cd-4e2b-4008-97d4-e17b075bba5b"
        },
        "item": {
          "id": "2dc5f09d-ec31-4a0b-a0a5-be1931e88420",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "120201ab-3eeb-47e2-bad5-c72aafc02234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9382ccb4-cce7-433f-8e10-637d65b9c58c",
        "cursor": {
          "ref": "927bb058-319a-4751-af66-883387d03d16",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "af23bcc5-53e2-4e50-af15-3fcb595a561a"
        },
        "item": {
          "id": "9382ccb4-cce7-433f-8e10-637d65b9c58c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "aa7cdabd-dcaa-4621-9368-000bb78a2886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9753a0-1699-428a-8a1e-aaef65f8e40e",
        "cursor": {
          "ref": "f8a546e4-afba-4e55-926c-3e3ace0a1480",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e36f0e67-31d6-413e-a7a1-191b6f35d3d0"
        },
        "item": {
          "id": "4f9753a0-1699-428a-8a1e-aaef65f8e40e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "48a0480e-0c8f-43fd-a92e-bd26190f66dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342cac3f-1f51-4d20-8cc3-ed3e466b2758",
        "cursor": {
          "ref": "2f78adaf-e239-440f-bff8-6e6d715f6201",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f95facb4-9783-4202-9cac-ea3673a28026"
        },
        "item": {
          "id": "342cac3f-1f51-4d20-8cc3-ed3e466b2758",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "45fc5ad5-43c5-4e15-a50a-2736174525d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d0e82f-c268-458b-bfb8-36d5cb961164",
        "cursor": {
          "ref": "58268458-4558-44e9-a595-797f2a56113a",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3481217f-4aa2-457b-80bc-a481b56c7b64"
        },
        "item": {
          "id": "22d0e82f-c268-458b-bfb8-36d5cb961164",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "91d26d09-88a0-43c9-b825-48a5cc635e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e469d8-7090-4607-980a-52ca5485aa6c",
        "cursor": {
          "ref": "aa65e94f-bf19-4b57-b862-e8b737c22fa7",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "768657d3-7311-46ff-a58a-3e5db6d7cd2c"
        },
        "item": {
          "id": "e2e469d8-7090-4607-980a-52ca5485aa6c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d06344c9-ad71-4d7b-a2db-a8f2b55fc8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e8919dc-e9fd-46b4-831c-11233af96fda",
        "cursor": {
          "ref": "2fa3e72d-631e-4fe1-86ef-3c3e9a3009cd",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "24b584d8-a005-4656-a52c-de59c468feac"
        },
        "item": {
          "id": "2e8919dc-e9fd-46b4-831c-11233af96fda",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "820cebc1-59d8-43d0-97a2-9d72fb14ab80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d37789-4c29-4e3f-a255-a53019c7d870",
        "cursor": {
          "ref": "5b160cd8-1fc7-4332-939b-2862007269d2",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f7ffec3f-592a-48d8-9c1d-15b0da430775"
        },
        "item": {
          "id": "47d37789-4c29-4e3f-a255-a53019c7d870",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "992e211d-8341-4001-982f-dd73acef6283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d80875-4e8d-4b61-95f0-1bb995893768",
        "cursor": {
          "ref": "19ac1e35-d79d-4fcf-ae3c-89eddcdb00f1",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9c8937b9-7eb6-4dc6-9a0b-b29e6bbe03b9"
        },
        "item": {
          "id": "64d80875-4e8d-4b61-95f0-1bb995893768",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b0f0e38e-e338-4b31-ba71-54fa09b5b5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ab86a7-0f60-4d6f-892b-1fd6a72e7f60",
        "cursor": {
          "ref": "80deaa8d-7696-4a85-ab5a-f59fd13ba625",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e96e1a15-5fbb-4e5b-8542-554273f3c462"
        },
        "item": {
          "id": "91ab86a7-0f60-4d6f-892b-1fd6a72e7f60",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9d3d3481-cfac-476e-888b-cfcf5931d5fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbef38a7-e08e-4524-bf57-bbd49b81d779",
        "cursor": {
          "ref": "b0b193fb-9744-4825-9fd7-f07767a4aa47",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "67271d9f-d06a-4f96-b4e6-a2f26827ebc7"
        },
        "item": {
          "id": "fbef38a7-e08e-4524-bf57-bbd49b81d779",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "18c807cf-7853-4353-8f61-956d405b323f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1acdd894-57e9-434a-9b63-7ce513856902",
        "cursor": {
          "ref": "c3b106fc-0c6f-4f6d-bdbe-57a3f0810138",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e5e907c6-46dc-4984-902d-acc6b5dfaabf"
        },
        "item": {
          "id": "1acdd894-57e9-434a-9b63-7ce513856902",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f4bb1237-2c91-4b24-8ebe-8259e16e2548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a1bdc8-553a-41cb-8a0e-62bd8aab8fdf",
        "cursor": {
          "ref": "a1646c64-1c1a-4266-baa0-62e7db41152f",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5fb1f778-9b16-4951-af79-4a7ffbcac87b"
        },
        "item": {
          "id": "a6a1bdc8-553a-41cb-8a0e-62bd8aab8fdf",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5e2451f2-d1fa-4575-811a-bc0c1faf2e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146af07b-0ef7-4681-898e-548efec21bcd",
        "cursor": {
          "ref": "21bf92c4-0078-4a97-8849-e4838a84b5cc",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "28ddbf4d-3726-42cf-9eb9-938f015b6fed"
        },
        "item": {
          "id": "146af07b-0ef7-4681-898e-548efec21bcd",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "32141e03-7588-40eb-a143-6b67f5f45738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56db44e0-48c4-487c-b4ce-b36b56885a8b",
        "cursor": {
          "ref": "bc2ec77e-3bb5-41b0-a76e-ae3928035e5f",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3206d956-54eb-4dd2-a3d6-79939b170c80"
        },
        "item": {
          "id": "56db44e0-48c4-487c-b4ce-b36b56885a8b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1f1c2d95-fb88-444e-8448-a38250ffcf1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80adbc43-4edc-46c7-89d6-b506c92f262a",
        "cursor": {
          "ref": "07c8a70c-f363-4e9f-889e-e5dff2955cee",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4943ede3-493b-470a-acfd-db32c30c77ff"
        },
        "item": {
          "id": "80adbc43-4edc-46c7-89d6-b506c92f262a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "07772f1b-a533-4578-a544-15b0f0521b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ff2385-200c-4ed7-ba9d-99c9e1dfd8cd",
        "cursor": {
          "ref": "9622e35a-22cc-4986-89fc-6a1fa4df998a",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "14f2eb9f-db6d-4bfb-8774-fe3d437b6b97"
        },
        "item": {
          "id": "b2ff2385-200c-4ed7-ba9d-99c9e1dfd8cd",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "56284dd5-e4d0-4493-b189-ceb9cdd056f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86daf333-3757-4bb0-affc-53fd6c80aa68",
        "cursor": {
          "ref": "bf8c2790-a30b-4c84-9345-2d57f5250eef",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "22316da2-4c86-4f75-a5a6-e033b3677601"
        },
        "item": {
          "id": "86daf333-3757-4bb0-affc-53fd6c80aa68",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "705bdf82-08d2-4fe7-90eb-80e7ce9cf9fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80984151-293f-4cda-bdab-d409894cdea0",
        "cursor": {
          "ref": "1ccdc9f0-5d9a-4601-aa53-787cffce8714",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "16ddf412-c0a3-42f8-986b-d56e416b8293"
        },
        "item": {
          "id": "80984151-293f-4cda-bdab-d409894cdea0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e9c0dab5-e770-4b73-a7a0-54a83585c7f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1a0f04-8a6b-416b-9006-8be7410549c9",
        "cursor": {
          "ref": "18ae60ac-3ca8-4ad3-a45d-804b5164b138",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "596727cc-e404-4840-a799-5e6631fc494b"
        },
        "item": {
          "id": "cd1a0f04-8a6b-416b-9006-8be7410549c9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9011bfdb-2698-4320-9320-e75c047dc398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869aaaff-7b8e-490e-89ab-48592d46717b",
        "cursor": {
          "ref": "ff843f9e-0250-4ce6-b4ac-b7413e8e5475",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e6865dc9-1ec0-408c-9e68-e209356c8ccc"
        },
        "item": {
          "id": "869aaaff-7b8e-490e-89ab-48592d46717b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "993f9a6d-9145-4723-b2b3-4b703e0c53c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f71e9a9-b0c0-4411-890c-f86c3b77f4fc",
        "cursor": {
          "ref": "0a9a780c-5e9f-4b85-88dc-1d8ec16fc6e5",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1e98c382-a7f7-44fc-88ae-927e230c078a"
        },
        "item": {
          "id": "6f71e9a9-b0c0-4411-890c-f86c3b77f4fc",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "57e64f86-1bc0-4635-a369-967c55684b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a081fc-8390-4cf6-92ae-af7b34d23977",
        "cursor": {
          "ref": "b16135c0-505d-4332-98e5-047cb5f61c75",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ddea4434-8363-4623-bb2b-da27c211637a"
        },
        "item": {
          "id": "03a081fc-8390-4cf6-92ae-af7b34d23977",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b9764eda-13ea-427a-a487-06d852a2ea82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ddbb9e-9a80-4705-8fba-1de78ddad467",
        "cursor": {
          "ref": "e102bdfe-132b-418e-bc71-5b593e1a9351",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c57c9c6b-b78d-46f8-a2a7-8e14110a3beb"
        },
        "item": {
          "id": "c3ddbb9e-9a80-4705-8fba-1de78ddad467",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8ace8344-3d78-4589-83a6-5f0b02b1ef75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e86dbfd-1caf-42a6-902e-170b3f83b418",
        "cursor": {
          "ref": "cd85ab4b-5e28-4ee0-8bba-34e2e348b55e",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e071e3cd-b336-46d6-88d9-0e72e163f131"
        },
        "item": {
          "id": "0e86dbfd-1caf-42a6-902e-170b3f83b418",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5c58eead-4f5a-43c7-92f6-24a08fcaf467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d753bc57-9188-400e-b2d9-d9db1e2a0913",
        "cursor": {
          "ref": "ae268277-3b9b-48a4-991b-2dd1368564c4",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6ca20148-8c54-405d-b2db-5ba58dfeb706"
        },
        "item": {
          "id": "d753bc57-9188-400e-b2d9-d9db1e2a0913",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "025410b5-f0ca-48bb-8a1e-259942cb4d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88119d4-e3be-488e-b5fc-b97231c8570f",
        "cursor": {
          "ref": "885918c0-81d4-4cb1-9542-9b4414a19843",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d64531cd-6b2b-4523-b8f8-d2a404dab076"
        },
        "item": {
          "id": "d88119d4-e3be-488e-b5fc-b97231c8570f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "96e86ca8-3dac-4bb6-a2a5-9ba9f483c29f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb5681d-3aa0-412a-8663-87ecfe701514",
        "cursor": {
          "ref": "118bfbc1-8c18-488f-83a1-f4fe4615f884",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bb69b630-809c-4877-a8ef-5b099071f2a3"
        },
        "item": {
          "id": "deb5681d-3aa0-412a-8663-87ecfe701514",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "90857224-9e70-4ed7-8327-22aedbccfef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8d1b59-a7d8-453c-8774-dd348dd81682",
        "cursor": {
          "ref": "1b1ebeb3-5623-478e-a69f-3d310fa097f5",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e37c9681-2208-4849-8abc-e71fa56c7a50"
        },
        "item": {
          "id": "df8d1b59-a7d8-453c-8774-dd348dd81682",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5907b621-5513-453d-aa4d-622312539c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c85f49b5-c024-42b8-b925-76b5f555f3e5",
        "cursor": {
          "ref": "30348b09-339f-43f6-988e-2afc9ebcc973",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c77c1bde-fdde-48dd-a2c8-23ea1eccdbc9"
        },
        "item": {
          "id": "c85f49b5-c024-42b8-b925-76b5f555f3e5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "303553d2-a17e-4ebc-b989-669232bc59fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e97925c-55e3-45a3-b82b-592ceb25c7c8",
        "cursor": {
          "ref": "20259eeb-63fc-41f1-a4ec-9f9a8d892c63",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "759eb01d-a1ec-4513-ba05-177c2475ade1"
        },
        "item": {
          "id": "4e97925c-55e3-45a3-b82b-592ceb25c7c8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0e617d2e-de24-4078-8ad2-58acbf7c3ec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e506f56-76ea-47a8-9ccc-509742bee337",
        "cursor": {
          "ref": "ce90d7c5-e3c4-42d9-9f69-29a8af8c40ad",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "37f11046-446c-43d0-8c51-4057c7120b3d"
        },
        "item": {
          "id": "7e506f56-76ea-47a8-9ccc-509742bee337",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2f63f9a1-9e38-478c-850e-678f1e4f6f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab17fd9f-c993-4424-b9b9-e4f08036bea1",
        "cursor": {
          "ref": "b8abed3e-c209-4562-be25-faf494be8e09",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1b9cbb31-9fdb-405c-8c82-462e3419cc7e"
        },
        "item": {
          "id": "ab17fd9f-c993-4424-b9b9-e4f08036bea1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "bc084ecc-6f9c-4a7f-8bb3-91dd1cf3f6a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dad19bd-9cd3-4861-910e-d16a6c127e0a",
        "cursor": {
          "ref": "afea5302-e811-41e8-b85a-b92d7a367bab",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "30a91433-6ddc-4292-a81b-d68967171868"
        },
        "item": {
          "id": "3dad19bd-9cd3-4861-910e-d16a6c127e0a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "49df6895-fd21-422c-a26b-19cea9884c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4377b481-9cd4-46f3-afa7-a191d954f393",
        "cursor": {
          "ref": "4327c2d1-43b0-4fac-8a40-0656654068b0",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "815d0ea1-4993-40be-bc55-7334c1da1a1d"
        },
        "item": {
          "id": "4377b481-9cd4-46f3-afa7-a191d954f393",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "88136418-7999-41b1-8f99-8614e031b1b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ad6ef4-5f22-4f0e-baab-35ca3ce2e058",
        "cursor": {
          "ref": "b43920de-59cf-4c18-8677-54b04a6cbd42",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c0083870-6c83-4216-ad74-9f66e16387b5"
        },
        "item": {
          "id": "95ad6ef4-5f22-4f0e-baab-35ca3ce2e058",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f4743d35-8df0-4481-9d6d-13414c3e1fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8dfb95-b4a1-43f4-b272-f31dc5a3f6dc",
        "cursor": {
          "ref": "97fe9c7d-4ca6-440d-ba60-6cc2fa26d013",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4f92fa20-7104-4e5b-aafb-96ba8396aaa8"
        },
        "item": {
          "id": "fd8dfb95-b4a1-43f4-b272-f31dc5a3f6dc",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "793ac10b-a46a-4705-a5fc-be7dbcf3fdaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a73184a-4bc5-4363-a20c-dd9cfa47fb88",
        "cursor": {
          "ref": "be5b9181-fbc1-42f8-9cac-e0cea63751f1",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "32c83939-88d6-45a2-9afa-b86db9ab3e63"
        },
        "item": {
          "id": "8a73184a-4bc5-4363-a20c-dd9cfa47fb88",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "13e4ae80-3f31-4f46-9c13-213c6abbd935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09402e24-ce66-485f-8691-4e8126843b4e",
        "cursor": {
          "ref": "c57f66dd-c37f-439f-8fcc-081a7ffb0ba1",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "be06735c-82ed-4907-b246-26882f9d6d96"
        },
        "item": {
          "id": "09402e24-ce66-485f-8691-4e8126843b4e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "66d7f33c-faac-440d-ae91-7c42fd12203a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e669ef8-2f46-4ba5-9321-ee3ba91d75d1",
        "cursor": {
          "ref": "6ff085ca-5090-4d67-b745-7c762f9667c6",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "48d5d0e1-4320-4adc-bcc5-77bd8316e924"
        },
        "item": {
          "id": "6e669ef8-2f46-4ba5-9321-ee3ba91d75d1",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ee7deaba-39f7-4d7e-a368-bd57517d171f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664831d8-fcb4-4b88-9fab-e602040bf07f",
        "cursor": {
          "ref": "1e1bd353-d891-4731-ac40-4ba5d9589a30",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6fbeed47-26f9-41b9-a4ec-b507feb7ef52"
        },
        "item": {
          "id": "664831d8-fcb4-4b88-9fab-e602040bf07f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c50b31c0-5054-4d0f-a05d-06a97924db4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee6d818-6223-42d5-a410-0d351bcf4ff2",
        "cursor": {
          "ref": "baa3d662-a031-4462-a0e7-be2204736c40",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d89fa3c8-82ce-4fe0-929a-2064dcce2e31"
        },
        "item": {
          "id": "0ee6d818-6223-42d5-a410-0d351bcf4ff2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f7611294-7a13-42c8-8efd-5188ab01f7e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0557f869-b164-487e-aa4f-e479f13e6526",
        "cursor": {
          "ref": "b9808e4f-ee13-44cb-b8d5-688d7b9a8501",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a9ff0f6e-ce2e-4cc6-8280-50e8115d1ce1"
        },
        "item": {
          "id": "0557f869-b164-487e-aa4f-e479f13e6526",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "efbb5f58-de02-4935-ae27-bef8e621e54c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f830f3-4ed2-4557-ba5e-a5d77396d9c8",
        "cursor": {
          "ref": "f3b0b444-6418-403b-a8b5-d189f5822514",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a7aa64df-0efe-4604-b993-06810b3de0be"
        },
        "item": {
          "id": "f9f830f3-4ed2-4557-ba5e-a5d77396d9c8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a0d22595-e429-4d2f-87ad-d354c5fd2cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376457b4-09ac-491e-a321-247189dec898",
        "cursor": {
          "ref": "22ec9191-ab99-4844-ab4c-58e5f9ca66f7",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9d66a6c7-1d8d-465b-83af-19f09d872fda"
        },
        "item": {
          "id": "376457b4-09ac-491e-a321-247189dec898",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e57dad0a-8fd9-402e-a8e3-31faabe9d072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bc8e12-39ab-41cd-b042-b24536d533a9",
        "cursor": {
          "ref": "b17b0193-63e3-44cf-909b-f15937e44347",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f253695a-5fc6-47b7-9e58-4370f495d380"
        },
        "item": {
          "id": "88bc8e12-39ab-41cd-b042-b24536d533a9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "18d6627a-c900-4f1d-8b6a-45354ba75945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4cd800-ae9d-4b01-9481-d5bf5a7f823d",
        "cursor": {
          "ref": "87e91ef1-9798-4575-9d00-59e7e4afe5b5",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4c2d61aa-6184-4b6c-a118-bdd0ba451b5d"
        },
        "item": {
          "id": "0b4cd800-ae9d-4b01-9481-d5bf5a7f823d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f726b0fe-f868-4373-abf1-21edd1af2b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5e390c-b15a-451b-aeba-f830fea8503e",
        "cursor": {
          "ref": "12240bb3-007b-406c-98b8-e32d21e11e9e",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e9b5df4a-e4f3-472c-b334-b89338d63c23"
        },
        "item": {
          "id": "2e5e390c-b15a-451b-aeba-f830fea8503e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "01ecbad3-9306-4773-9a92-98f685794610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43fe0f9-d0aa-46d5-9e83-b8af9281c7a4",
        "cursor": {
          "ref": "a72e606a-24fe-4cc4-94ec-cc4927d17041",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "667a3e5e-33c5-404c-9c2f-3e10cc88fc17"
        },
        "item": {
          "id": "b43fe0f9-d0aa-46d5-9e83-b8af9281c7a4",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0ee6f714-5379-40cc-b1b9-94bf1cc9cb98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ef50fb-37b4-4d02-9a5e-c10131b26996",
        "cursor": {
          "ref": "2a1c47d7-57f9-4cf9-b575-b2d7e9eb1882",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4628eb3a-92b4-438c-a3f9-828d6d5377b6"
        },
        "item": {
          "id": "d7ef50fb-37b4-4d02-9a5e-c10131b26996",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1f80acfb-f7f0-44a1-a70c-42090d48e30d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "677f0cbd-e63d-46d6-b57f-b9cdb55f54a4",
        "cursor": {
          "ref": "02eee721-015c-4d6d-8e16-742ad8a71a4a",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d3b603c0-3085-4c58-8962-0ed5e4c49863"
        },
        "item": {
          "id": "677f0cbd-e63d-46d6-b57f-b9cdb55f54a4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d630d071-5c3b-424f-af0c-9e4c146a2390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f61b42-5767-4171-8917-4cb8f70ebd23",
        "cursor": {
          "ref": "bb8cb682-a803-4f37-aa60-323964e5e180",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bced066f-123f-4a1a-b75d-18a1d19607fe"
        },
        "item": {
          "id": "b3f61b42-5767-4171-8917-4cb8f70ebd23",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4c0ecb08-8836-4dd1-9082-eccb4196fda2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0fc0c85-81e8-4e7e-ac6c-3a706247cac6",
        "cursor": {
          "ref": "9e344a0d-29dd-465e-909a-3191e3265b1a",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d42a0972-f69a-41cc-b5e9-d09dbef3c9a8"
        },
        "item": {
          "id": "f0fc0c85-81e8-4e7e-ac6c-3a706247cac6",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f2d19688-2e7b-44b4-a606-d279e9d1f9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6def89ea-0a91-48c2-98c2-a8fc07d45392",
        "cursor": {
          "ref": "4e35fed4-1cad-4d84-9993-cf587eacc4ef",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e48afad0-bc3c-4138-a669-1a3302ddf4c7"
        },
        "item": {
          "id": "6def89ea-0a91-48c2-98c2-a8fc07d45392",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a69a5bfc-8f3c-4fe7-8acb-cb95bd4d22e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33667939-0001-4890-b70e-1b9d6c18970f",
        "cursor": {
          "ref": "d07608bd-834d-4ec0-a077-326672355a3d",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fe3e4fcd-e46c-47ef-b181-767649019833"
        },
        "item": {
          "id": "33667939-0001-4890-b70e-1b9d6c18970f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c78c5373-6077-498d-b9f6-48fb9a485c35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8252b487-e86e-4799-9a65-752a713b6576",
        "cursor": {
          "ref": "6c591c35-87fe-49bf-9317-31041e726197",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4a160eb2-8f96-4edf-b8e3-3e554dcbc175"
        },
        "item": {
          "id": "8252b487-e86e-4799-9a65-752a713b6576",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "516b6e0e-e4ad-415d-85cb-18d4824a7292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b93a809-f147-4f19-90bb-c724886af2de",
        "cursor": {
          "ref": "9ce625a1-31c8-47e0-b4d0-283597a5cb19",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f68d45e1-908f-4a8a-b275-7ae61461bd9b"
        },
        "item": {
          "id": "4b93a809-f147-4f19-90bb-c724886af2de",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "73eb4c57-e0c0-4b65-86f9-e0c4b7ea72c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc8ca89-6808-4d8e-9060-0de220815366",
        "cursor": {
          "ref": "e8beb6b3-4268-428e-9aa7-dfccee8ea80e",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1109388a-4d52-4dc8-b315-730b8ae164b6"
        },
        "item": {
          "id": "3bc8ca89-6808-4d8e-9060-0de220815366",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3c5b9669-1b11-49a1-8db0-37ec89b53395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b28d329-5492-4ef8-ac07-979671bcdd43",
        "cursor": {
          "ref": "7e35e777-00f5-41d9-a3ce-f108e68e62d9",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3ac96712-f8d0-46b0-a778-bda7995226ff"
        },
        "item": {
          "id": "2b28d329-5492-4ef8-ac07-979671bcdd43",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "882a95cb-1f63-472a-bd3b-0cb7bacb9f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31943e62-8e55-410b-aa69-2b23b7635a80",
        "cursor": {
          "ref": "4dc4da0a-3486-404a-882c-93dd188d9b8c",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "269d1ca5-4f49-47b2-a1ff-bd111af213dd"
        },
        "item": {
          "id": "31943e62-8e55-410b-aa69-2b23b7635a80",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0c81f78d-7eb0-4d2c-b311-fecbb4fd96fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f772c4-f5fc-4ed6-9ba4-318d170028f4",
        "cursor": {
          "ref": "674f43f1-bf8c-41c7-9b03-07d9f57fff95",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "aad2393f-30b6-4d31-b0f6-add80b191ea6"
        },
        "item": {
          "id": "13f772c4-f5fc-4ed6-9ba4-318d170028f4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "74450805-fb0b-41e6-9954-abf9c92a5bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0221ad1-70f2-4513-9409-2370072b933b",
        "cursor": {
          "ref": "07ee8cbc-0428-45f6-b409-2d6c9cfdd4a7",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5c4a50fb-65b4-478d-8cb7-46ad29ecd029"
        },
        "item": {
          "id": "a0221ad1-70f2-4513-9409-2370072b933b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1b5bc758-2a07-43d3-ae75-a1cf26c1484d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6b83c1-6329-4af3-9d0c-4635fbb68bfe",
        "cursor": {
          "ref": "de32c844-1aaf-4c6c-b5a4-ca40fee8be4c",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2074b464-b17c-43da-9dbd-4c75d5f18473"
        },
        "item": {
          "id": "8c6b83c1-6329-4af3-9d0c-4635fbb68bfe",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "21b04f3b-f713-4960-86f9-8c79b4a8cfdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975e63b5-5651-4f15-8f3f-c1d4bcf72935",
        "cursor": {
          "ref": "a558fd15-52fa-49b0-85b1-571dd779480c",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e53a38c1-05e0-4117-bfa4-b4c4a74acf50"
        },
        "item": {
          "id": "975e63b5-5651-4f15-8f3f-c1d4bcf72935",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3740d838-c3d6-408e-98ea-107164a9ffa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301e1ce0-c6f1-4351-a483-358e2050fa63",
        "cursor": {
          "ref": "5c949a45-3312-4814-ae3f-938cb95fc260",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c61e149a-d1a1-4ebf-b95b-d4db72e0e6e6"
        },
        "item": {
          "id": "301e1ce0-c6f1-4351-a483-358e2050fa63",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3fddfff0-2863-4d42-b166-a0f792271775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68fdb05-a591-49b8-ace9-d8c3d6f9158a",
        "cursor": {
          "ref": "92d6c805-1162-440d-b248-1f4662621778",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "94535a3d-5a25-40c2-b7d7-3d91f83b89e5"
        },
        "item": {
          "id": "e68fdb05-a591-49b8-ace9-d8c3d6f9158a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "da7b27e0-ea1f-4031-85e8-8dcd2e58d2a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd55e5ac-c714-4d54-b9d3-3184d56ab157",
        "cursor": {
          "ref": "99165a30-bba3-4f64-963c-ede1b3ace38c",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1d05bf6e-51c4-49cb-afbb-d53d59854d94"
        },
        "item": {
          "id": "cd55e5ac-c714-4d54-b9d3-3184d56ab157",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7feffa0a-5d63-4b30-a3ee-9e3f1dba987b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70800ebc-f698-483a-8abf-d49e7b79ed03",
        "cursor": {
          "ref": "9fae7961-1b5b-4e92-81c8-d035b3a3b37b",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "83037ba0-a35f-474b-b5a0-6177abd2d099"
        },
        "item": {
          "id": "70800ebc-f698-483a-8abf-d49e7b79ed03",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "4a889b8c-5582-4e93-af2d-3b0aead1dd19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147bdab9-4d21-4b93-87c5-2a8a95f92e48",
        "cursor": {
          "ref": "075de46d-4286-4770-8cec-b932f10c1c10",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e6ee3e6e-e3c3-46b4-884a-4a3ebf0bd68f"
        },
        "item": {
          "id": "147bdab9-4d21-4b93-87c5-2a8a95f92e48",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e8114696-f600-4e89-9a3a-d06f7e6e5aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c396857-9b0b-493d-b2c6-a40cdd8afc4f",
        "cursor": {
          "ref": "d9ebd321-f8ab-4910-b8bd-e1ac4c2e3aba",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6c956b9f-1512-4ca0-b62d-be04010de600"
        },
        "item": {
          "id": "6c396857-9b0b-493d-b2c6-a40cdd8afc4f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "851d14f8-8183-49bf-8f7e-88e5ffa3e886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb1c1d9-0fa2-46ff-85d7-2c23b79f8ead",
        "cursor": {
          "ref": "febccd0e-6274-4227-a205-a1eef5c62aca",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "44d40091-a29e-4217-ba32-5ba2462c18e2"
        },
        "item": {
          "id": "1bb1c1d9-0fa2-46ff-85d7-2c23b79f8ead",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c48b2ea0-3bee-4e11-b2af-1b84f609c4c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e5e103-3d23-417c-9ff4-1cf4921a4bdd",
        "cursor": {
          "ref": "8714ebee-fd08-459e-ab48-130f3ffc6973",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "474049f9-087c-43d0-8b61-b3fcd4eee060"
        },
        "item": {
          "id": "a6e5e103-3d23-417c-9ff4-1cf4921a4bdd",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "98b4881c-c4c5-4567-808f-b7664a0f867e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30f91bb-dcc0-4732-b98d-5f2043efd373",
        "cursor": {
          "ref": "f389c38b-cd8b-49e0-8ea2-a6a9033ff045",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c098bc66-83e9-40c6-a85e-0034f2f62674"
        },
        "item": {
          "id": "f30f91bb-dcc0-4732-b98d-5f2043efd373",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "015c5130-bc3d-470b-8915-ffb656008d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3127079-437d-40af-a60d-ca74c88694a1",
        "cursor": {
          "ref": "1f229ec1-a586-4048-98b8-dfdb3f84f8b6",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "49edcd4b-bbd7-42d8-833b-d8334470be7a"
        },
        "item": {
          "id": "b3127079-437d-40af-a60d-ca74c88694a1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "04fbc06b-bb77-4da4-8f2a-3a1cdd9866f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928eeac6-1b71-4658-85ca-2cf1d6bc1ca1",
        "cursor": {
          "ref": "0199cca0-f452-4c6b-acdf-b319a4c929ba",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "24aaa848-0411-4c3e-8527-ef6e9b222462"
        },
        "item": {
          "id": "928eeac6-1b71-4658-85ca-2cf1d6bc1ca1",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "060c3f41-781e-41fa-b24a-7ac1be1bad5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b179642-e8f2-4e5c-bdf8-00f542d0cde4",
        "cursor": {
          "ref": "05d23536-3a51-4107-9ea6-afb23569e963",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0833a7ae-91b6-441b-89a6-b2960e7c615f"
        },
        "item": {
          "id": "2b179642-e8f2-4e5c-bdf8-00f542d0cde4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "bb05dd15-6cd6-4036-8fde-08efcb291916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14483e9c-2bc0-49c3-ad3c-b2e4ed8b29d4",
        "cursor": {
          "ref": "6488ef6d-e2a2-40dd-88d7-3adc4e9558e8",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "eb379859-0248-4395-bd84-1b0751c71011"
        },
        "item": {
          "id": "14483e9c-2bc0-49c3-ad3c-b2e4ed8b29d4",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8e44caf3-4296-48f7-b689-7cd388db42d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d2db00-f420-4272-86a8-471a59fc7455",
        "cursor": {
          "ref": "f340f7a4-df9b-4932-9d13-e44727144b9d",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "cddeeb69-82f1-470e-85ab-1983e9df0d6b"
        },
        "item": {
          "id": "b7d2db00-f420-4272-86a8-471a59fc7455",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9dc54b39-43ae-494c-b3db-3615fa7865ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88028b4f-4613-4ff5-8794-78e48d5114b5",
        "cursor": {
          "ref": "4751768a-7762-4397-a1fd-7a9261cf98f6",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6fa94ec0-1b53-4c5f-907d-175b586ee43a"
        },
        "item": {
          "id": "88028b4f-4613-4ff5-8794-78e48d5114b5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c838f253-fd5f-4f5b-a8db-0da1437a9d05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "124b7810-69e5-424e-855f-ffc3f1a162e6",
        "cursor": {
          "ref": "718c0d67-175b-4242-8918-fa17956df811",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c1953b08-94cc-4154-9ade-499c0d566c5c"
        },
        "item": {
          "id": "124b7810-69e5-424e-855f-ffc3f1a162e6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ba2f8f86-866b-42c0-9432-4e5a940b157a",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "c30529f2-9805-4139-b459-57a9b6b04e63",
        "cursor": {
          "ref": "421541d1-118e-42d9-ac63-4087f11e0814",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "23039bc1-b31c-4914-a585-93093568eb27"
        },
        "item": {
          "id": "c30529f2-9805-4139-b459-57a9b6b04e63",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0d8ffd6d-855a-4902-b638-0fe36bbe8440",
          "status": "OK",
          "code": 200,
          "responseTime": 2288,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f36cc2e-d47f-4a01-b81d-12e04b9fc4bf",
        "cursor": {
          "ref": "a3fd9760-12c9-4a0d-826c-60f756a6dcee",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ab7f39df-5180-4707-ae97-e9ea18ac6fd2"
        },
        "item": {
          "id": "6f36cc2e-d47f-4a01-b81d-12e04b9fc4bf",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b2e6bf33-6934-45a2-ba86-8cd1c99800e5",
          "status": "OK",
          "code": 200,
          "responseTime": 2263,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac56629-d92f-4f8f-b5ab-0a4f34c5482a",
        "cursor": {
          "ref": "c920409d-639e-44f1-93db-a8e4d0213a3f",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c68d35ea-64f7-4e6a-9084-aa0d66be3a7d"
        },
        "item": {
          "id": "3ac56629-d92f-4f8f-b5ab-0a4f34c5482a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8bafce6b-5c5b-4b42-b9d0-42f0cf372395",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "3ac56629-d92f-4f8f-b5ab-0a4f34c5482a",
        "cursor": {
          "ref": "c920409d-639e-44f1-93db-a8e4d0213a3f",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c68d35ea-64f7-4e6a-9084-aa0d66be3a7d"
        },
        "item": {
          "id": "3ac56629-d92f-4f8f-b5ab-0a4f34c5482a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8bafce6b-5c5b-4b42-b9d0-42f0cf372395",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "144ec1b5-5403-4ca4-8357-c4067fee5d52",
        "cursor": {
          "ref": "ae6c9240-df89-4d03-8103-548065f66094",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b0c630ad-5fba-471a-974d-51186740e1f3"
        },
        "item": {
          "id": "144ec1b5-5403-4ca4-8357-c4067fee5d52",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4e508afd-c550-4931-bf22-ac13d572c990",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "1ae4c151-447e-4c92-a83c-535b4fe8a59c",
        "cursor": {
          "ref": "d23249ce-2cdc-41cf-939b-ae0cadfc2246",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0df78148-36f7-42bc-9f96-40f6e36d5757"
        },
        "item": {
          "id": "1ae4c151-447e-4c92-a83c-535b4fe8a59c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "087e9608-1d26-4ac3-85e5-e473ef20da66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}