{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c3359466-b12a-483c-84f0-88b0e0503ea7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d24b09f5-bec4-4c86-bac6-0b683ac4e854",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fb4a8438-d975-4530-9a11-40931c7b4f38",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "550b9594-6c3d-476f-a0b1-656bd20a749c"
                }
              }
            ]
          },
          {
            "id": "482e073c-d170-4b5f-88d6-619f8fe4a536",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bc121303-bd51-41e2-8a80-b99dec9975f0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6f7bfeb9-a8cc-4131-9dfe-e54fef23dc5f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "57427c9e-0c13-4da5-82b4-aaeb3510645f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "63fea539-4717-4867-b86a-03744b7b471e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "86db186e-0fcc-425e-804d-3c81731dccc3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cd3a7d0-4d93-48ac-b2f5-213a003e014e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4cb92880-b974-4269-beac-3cd28ba56e48"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "be307840-6d14-4a86-9997-ea950cbc76e6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c9d50ee-78c7-43ea-ab87-19148189c0ca"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1c6a59e0-2bbd-416f-a3e5-536786fe0131",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "36067bd5-a720-444f-a3ad-2790b1827c07"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cefda1ce-2757-4493-916d-4ecf4f192142",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c2ee1556-258a-44ae-90db-49135b2d4f2a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "486bc8e0-84dd-45cf-a45e-93f54e9a0aa9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8fda962e-bf2f-4bea-8a01-93de973a2b99"
            }
          }
        ]
      },
      {
        "id": "67d7d1ed-8007-4382-8256-9e7b88b99623",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7feec555-986e-4901-8e59-5493ea6c1812",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aa62faec-5d58-4694-8baf-b676810c2977",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cd47a2c8-0344-4861-b35c-58f871932545",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8af373-2ac6-40f3-8d2e-c66995992373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c02d094-04c9-4613-b7cf-9f6b9acc63a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b738a0-26f7-476a-ad17-65d580581462",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6ebc73-c2af-47ac-8754-a009204148da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b079315c-e032-4613-8e9a-614842113a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71aca810-6999-48ba-8245-06afac956b59",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c63b1e-13bd-4e04-808d-a3a994529925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f08e003-9491-41f0-8ed1-1191ac6396a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a37b04e6-a9e8-4cb5-83b1-ba7ef0e0f3cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8693324-ffd9-41ef-b431-bf7a23f3a624",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5397f18-8c28-4aef-881c-ba5c99bb2028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a72a0f17-7d28-4a15-b135-d7549fa1e607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3f6199-185f-4b2e-83fb-33a05376275e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c54450a-a63f-4690-bf8c-c6a60b6eb0e1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1a686985-7dbc-497a-b817-c783e5a1ebaa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ad3f05b4-f710-492c-981a-113c79a8659e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fdc543e-e3d0-4301-b5e0-1a9686a5764f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "081ec1ed-87f8-43b2-b059-f363ac024736"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6ef294d-66bf-4229-bf45-da1b180a7cfd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "223732fa-5714-47a9-9f3f-42206c8ccddf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9509f1b9-1876-4a40-b73e-8d43c3b02e46",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "568dc3dd-74d9-4754-9598-20df24c20831"
            }
          }
        ]
      },
      {
        "id": "f8e62b49-70da-447a-b2a3-3740dbbb3f2a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f1b75ee4-dcdd-42da-b50a-42a68504950f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b8aed925-6309-4ec6-8dde-9693427fb49d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7b28d4be-d757-4795-843c-75320b7b6ff7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75af3dae-e563-4134-a6e6-7782a0a8eca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a9153c6-738e-4086-a805-b5d1d334a507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd5d706-96e5-44a3-90e8-ed669d605cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55012881-fef4-4d05-9562-184fdba69b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ea7e2e-0062-41f5-918c-2c128220eb7b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87cee087-f367-4ff3-ac60-6fb40fd860ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa271d5c-d459-4756-9479-809020604e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cef6d0b-a267-48e5-b615-0dbb52096b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d0be2fa-a8fd-44e4-8fdd-bd32562c5680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f043114e-6602-4c49-aa32-668f53a8b733",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "604f0bf9-3ecc-486a-9e76-d7666452e2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd0f356-04ad-432c-a55a-68d2c0823668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecda20d4-dbe1-4708-ac7f-d3535656f1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff70b7a7-9dc0-484a-8b1a-da9a24641e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132f66be-3c20-408d-98fc-3f6cbe676226",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdeba007-e869-42b7-86e5-9b34fdadf26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a973c4-e160-42b6-8e4f-f8d72d4d7782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06fe4fd2-a3f0-4142-8841-8c680e38d63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72ba8875-daaa-46bd-81a6-86e6bbdefb3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f6f8ce-e5ef-4f70-a7d5-b475dd525630",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed93b1a-09fd-41ef-a03d-0db41072a7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441a99c4-ab38-4b3c-9b22-2bd7f408ab5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6381cc7d-5a6e-4172-bbfb-e03416afc4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "505f9cc5-b835-4672-b9ae-f1d60efee970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd9f24c-99b4-4492-afdd-2dc084134e23",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c22d20-b367-4ddc-ba33-a5ccc7fa782a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6583d2c8-485e-4cc4-b194-3438df71c369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f8f5a5-1f74-4143-983b-26fee0711ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b69c7054-6c64-4c29-a972-25d2a6f76b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2734effd-cb04-457a-ba44-1b6cd583a7ab",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c659b575-f252-4c34-8d1e-fe53916e41fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b11431f9-313e-4c6a-bb29-4a8df7fd1d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d1d3d3-5e84-4321-accc-fa0eb5f0c4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8068595-6368-4d1c-8636-3acb7c30dec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c62507-59c3-45da-a9bf-97ad158506c1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "652b0a5c-e383-469e-bc4b-09f7cc7954b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9db51631-9e39-40b9-8188-776e857d9287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d54aa4a-97c8-48c6-a389-10bd5a441273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3300678-9078-4117-9447-ad9f8b5b097d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1653e1df-4688-4aab-a84d-be62dbe6b86a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5492ab52-6467-42af-8906-a98237ade1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d91b7d-fecd-4a5b-863b-acf7ac3eaa29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a95429d-078f-4387-9d20-684a02b8baa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf1a2cf8-ae18-4eda-9512-2b5d9ab24912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7fea46-5f5b-40f9-8671-71c7a0ac999f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c234c7-759d-4f14-81d9-98f407c5d381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a04cd2-63f9-4156-ba94-25a387f04d8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01afdad2-c598-4cef-a134-b8a6f8c923b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "154c0324-1256-4f70-87c9-08b47bd59d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a13c5f-d38e-4cb1-9437-fca12b726fba",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f42776-3ed5-4354-a76e-00d925343508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40adffdf-5b4c-40bb-b88d-70ad2f7c83a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1718eb-7dc9-4973-9141-5f0c883e7710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6df6db20-43b6-4f34-b94d-390ba9d8719a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3167e614-56bd-462c-aa57-fded5d484bc0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a745ddd-73cf-42b6-a6da-b16a1c4b9009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25cd1b51-cdb4-4645-b3a7-02d23b1f6401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edbb26b2-84fe-43c0-b5a6-5d4b35aa5eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d10269eb-90ff-4974-aa4c-214646fb16cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d30d18-0dd1-4ec7-9881-633b0ee7f4f0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0401bb79-dacf-4462-806b-68eabe11bcc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd68ce83-1405-4e4c-937c-76a3a0d7e133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e4dd59-5a58-49f8-8a0f-715c4fc24399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a4186b2-9f66-4dfe-bbf7-7751d8d4e606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5f2c98-3b2a-4c53-ae43-72b179f7d197",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "515691a7-b503-40f1-b1dd-70fe97e46c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e0aaba-3cc8-408b-a4e9-54f8d9516272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5535086b-3ee9-4882-a04c-9eb23bbdb5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0fb3be1-31b7-4a72-bce6-ee08be5c6381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355ca04a-8e03-40ea-af9c-f75c3fe62e74",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b4c9ac-e511-47b5-b3ac-97d31651aa91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a95dfb1a-d3af-451e-b508-ed1b59585529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bde1c99-4eb0-4b59-9dbb-45587390f142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "416e8566-ae74-4e53-a318-a22b9047a939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b971e53-469f-4dec-9576-387be46239a3",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c0ee2c-413c-449b-bbe4-e9cf38f9c095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33d4866d-a73f-4898-9dba-f7d2fa2d0d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857b3023-2bda-4b42-a951-ecadd3d8c355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db2332a6-2827-47c6-bc64-32095c08838d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed52fab-ea8a-47a3-991f-882475c03f6b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9847d69-6a0d-46cc-99e9-13b730833032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e229a76d-881c-47c8-be99-e4f1a484fa6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5bd9f4-06b6-4820-a8f6-22baa6af1047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cb7a8c6-9478-4962-952e-6d03a4a090f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881add8c-9a1b-486c-b227-d4b7e26c241d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c72eeb20-ed39-46d1-82a7-57acad3612d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5624b313-e5d7-48ce-b9e9-e67363830354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9824793-7a59-4016-896b-ffdaaf0d32a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "07249e40-2459-4fbf-bcdf-d8c14ac29854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7bbdd2-4180-4609-a99a-899adb420f68",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2692e670-7620-4ecb-b075-4785dabad6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05df2422-4298-4c9f-a6ba-3676429f13be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d79f1d9-7535-4ba2-85f7-1c4d9c2dfd6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de3816e5-a653-4924-8c58-470647c7ead5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5474edc-f22c-4d73-95f7-b006fe3a77c5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa94a623-c6fa-42fb-89e1-cf0e7c332947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c159aac7-8a54-4754-aff9-9af4e10f2cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9450a527-8b07-4718-a873-93fae3ea8495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "678884b0-5cbc-4cf9-ab02-0bca7c3aeac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd7f474-83f8-497a-b1d9-93589a13ca6d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae73442-8640-40d2-bee2-ca958bbb9121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "175cb79d-217e-437a-8408-21b2eb39fa4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79738f47-c47d-4f6c-969f-5999e343f942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d0d7d2-e88a-456c-9406-6082d52e9300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc60a43-dfbc-49b0-b980-b0e20be65966",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad823d5-01ee-40ba-86b7-91bbe2f26d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd3be2b-ae34-48b2-acd5-796379d889a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ef7853-aed6-4cb9-98c4-01c6b590c427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0851cab3-7d56-4cd7-ae57-364f9eb4b447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080f0745-e154-4283-b14e-0001a965618f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1657d8-d11e-4826-b627-afaed95f9bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa779fc-c5d3-4f9d-9760-bde1d65cc0a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30cd277a-4f32-46b1-adf9-e35429510eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ef6b6e88-ae53-476d-99a6-35d6117a05d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd908d1-c162-4381-ba2a-3d4e31bb2b91",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18f848f-6129-4161-945c-58ad709e2291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e67438-cd39-49f5-a300-aed6fdb72367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556bead4-3dd7-43c6-9b19-685e9d003e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "53d5fce8-45b4-4d38-8c68-e50f707e6961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6015ed22-ae45-4957-9790-68ae134e26c5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1771078f-4162-4791-af1b-7a7cf01ca8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "892fa465-27e8-463a-866c-7749bf241014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfefe3ce-2440-4401-b7bf-42a0b34cd193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c9b124-8d60-450a-a37c-7ecfca04e92c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad2b61f-7d1f-42b5-9424-c6e6eb48ae30",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff878fe3-002b-4020-a546-6aa751ad8560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea766fd5-b509-4597-98da-9e2c39f16418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7814c50a-04b6-4197-8c6d-7989c0e0cfd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec5f836b-d639-44e4-b16b-994ba6092b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3aa8b51-b655-44c1-a8f2-b9e1af786790",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d8612b-d3bc-4aa8-9190-15e1e7d36a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc4e9c2-8675-4a3e-81fb-a039dd6c78ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f839d80d-0b66-4cdc-8f4c-4ed91cf764a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "566d9d7b-4be3-4464-a823-218e36389510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c5f3e0-2341-4bdf-9c07-717f2bfb225f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5ad4ba-a1e3-4646-890f-4853d9cd7bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fdaac09-151e-4165-9c55-c66875d863c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbec91f7-ad42-4e88-85f9-fb2049b1978c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6470d33-009a-4843-9aab-d4a6cdf2c5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63fa982-a339-493b-89da-40910a4262a0",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8e88b5-305c-44e8-a3a8-a297457b57db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281ab1e5-a366-4855-9cfb-8e644178f01c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e6bb53-398c-4d61-b69d-fb9b84b66324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e29badda-eea8-48bf-80bd-7cf43a80f21a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f982ee-d1df-45e7-8d27-7ecce563a38f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31f1649-9789-43d1-a236-ebc54655db50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb6eba51-cbcc-4a28-8823-807b98196948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9476264d-f085-45c8-8059-b6c09b4b5c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed0d1f14-8e35-487f-84a2-1331aaa2d9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fff10fa-d237-4d23-bb77-35d655021143",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe674ea-9551-4201-8ffe-f31a5ae8e4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2f0564-9edd-4b7d-a032-6b014af8022d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe0abcb-62d1-4a6c-92b4-249af4f5e202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "36262c21-83e4-4226-997b-5698b2d301f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc6df3f-1f37-4415-9fd6-10b6e6ed2558",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21837244-1015-4b2c-bb7b-5b2473dffacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c49ed4-fb09-4949-8c4d-8a5f957e8759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c33fde6-24da-48e5-8c16-1b799a162ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb430ed8-4fa9-4fab-b4ba-963d99d9def4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b89f0d6-355e-485b-95b5-bbc576078a91",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef873f78-f59c-4f2b-92c4-f9fe644d4c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cd70f0a-dec7-465d-8100-961f00fd69c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24c0abe-b4cd-48a7-86cf-0c23375ab381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "670a3595-6134-42bf-b4a5-29054defb07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8650f6-28d4-4c8a-809d-610194fb0d18",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e8b36e-5742-4c62-9bb3-c29476a65b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d33a32e6-13a3-45ad-82d7-7834f6dcdff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8444858-a6b2-4084-9276-295b23b6f785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca91f11-b9a8-464f-b018-7403de1825ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b402619b-a698-423e-a9b2-d2f04136201f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f33cab-0e09-4ed6-a1ed-4e9a72245da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1011976d-63af-4e93-a861-d41fa458f08d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281c709f-5386-45af-b567-4f9806163fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "32b01eda-6f1c-4621-a842-19b62517e24f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1504f2d7-f460-4e71-8408-986f53fa35dd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e41740b-d1fe-46f7-9641-cee75c47ed75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e5433e3-bf54-4eb9-980e-815b839e3567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66862be-6696-4dad-8e95-fd666a1298e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "43eab7e3-73f8-4e02-94f2-d8cd43412ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7236e8c7-ad1e-4662-8258-c17aea14e4e8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a3bdd2-c3e4-43a1-979f-0ca8d510ec7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de1f0eb6-daa7-433f-adb9-dd8b0b61d928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e7ed41-45c7-42d7-bdde-81b0e0373cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac8233bd-e809-4ea7-b1b1-74aad336ac7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcc3ffd-6fef-495e-86c7-58653af8295d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "816948a2-f21f-456f-9ffd-39b982ab3fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a7aff5-f975-4aee-b62b-870c99cd755b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc3a6b46-994f-4448-b2ee-d30ee40a83c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "06f4c93e-0377-4a20-bcc9-041621efd10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c20a148-4b51-4af9-b25a-1dea65ba70fe",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c9ea93-817e-472c-b4bc-aa4d8cc2711d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db5b74f4-951c-4842-aa14-4a598581b6a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa51b8c-4152-4f47-9422-685500b1d9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d95bbd5-c4ab-4e84-bd12-c4079658a71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a08967-f04d-4a95-bc7c-c04ee6fc7316",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f506a8-3646-4ece-b423-6754bc25ffd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8447fd84-a00d-4666-accb-2c07e664e262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a910c76e-4c66-473f-9efa-9fdd1000e138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2da9e372-dff1-4364-bfad-4617573b173a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2ba9bd-178f-4010-89c7-a48c969f51da",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9350626f-1bce-40e5-8d1c-9d3bbb0b0903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f78e52ef-aea0-4b14-a64e-7619d3a20809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670e3993-d3b2-4113-a986-0414d6fb1532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e401f24-f6d3-4cbc-8308-362207c653a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2e55da-4765-4bdb-a844-6effab5c6242",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92897278-c35a-463e-9db5-7c2e57f7abb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97ef3907-963c-4baf-9d0a-3757d956b706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf344ee-7c12-4487-af8f-7557cf5bb4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1f585fc5-0e47-4ea2-936f-3b1529929fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26475368-d717-4428-bda9-172e51de9fa7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61ed0e7-a7c1-4b6f-bcaa-62a8b784493b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c00a00-e873-4902-b82e-f064018faa04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ff9ae0-0707-4fcd-8e61-01f3ac25e9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecf0a684-0bfe-4ce3-8cfa-c303960e37dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20406f59-60b4-424b-ac07-c87373e3fe0f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fb3388-ace1-4558-a984-80760342ed09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfdbfb8e-9a0b-4ffb-8b9a-0bd2c224d6b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d6e7b8-0fde-4538-a741-999089c0f28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "18838410-de10-40fb-a758-863512a2fbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af15fd3b-5125-4294-ae76-9b9e71454944",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a86b820-23f0-47be-a42f-4c38490d1cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db754ff8-0406-4ddb-85b7-99cb948ffba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427687d4-85b3-4f48-9c75-9c8f14ce6fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "26dd04fb-37b1-4664-a4a5-7a081613daf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6658077d-ceef-439c-9b1a-8f681bd44cad",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aced944f-c3e7-46f6-b45f-157372652aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b8dfcd-852c-4c42-ad1a-6fc65f2a84fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdde3c30-f5a2-4a7f-9d63-77e19e08a812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "412e675c-46ec-4390-8d90-28976082e5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fae9d6a-da39-4116-a2c1-035b9c94c5d3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "968df9ba-7514-4e6a-bde6-70f1bfe2f5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8291dc5-a05a-413c-a915-c4f613023cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea80e26-7ab8-4cd1-818c-7dd91d9bbdfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbbe76cd-2f9a-4e19-89d3-0d9c32ea5701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6130f0f2-0ac9-4e84-9d54-0a7fb3420f86",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27560d16-7667-4307-b92c-7001686bdfb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "054ce0fc-aa5b-4fe7-988f-cc82ce7acc00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f24bc6b-4da0-47d7-880b-ebd93f7a6118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "41c96014-0c42-4b76-9b21-2ff6ce843a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4fb9971-f15c-4953-8859-dbf99274bf7f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac31ef8-22fd-4a04-8513-da9dc6767ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aade58d1-f8c5-4233-8ed1-989223a61e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5cc8812-e9bf-4401-b76e-d80d92c1fc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec9c4d53-dc41-4477-bb12-99ebddfb00b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309432d5-e3c2-40d6-b30a-2731d78b8d02",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b61d623-ffdf-402e-979b-8151ab742c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce815624-1346-4212-8bae-731e82c7b246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfcd1bb3-51e6-4724-9264-10e0fdd61940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "82ca26d2-18fd-4a21-a2cb-bc32a28160c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c22bed-d788-4669-aa39-4518fa011916",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd707d2-b565-4add-8d7e-dd29c107b933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38fad3f3-70d0-4ca9-af57-cb432b2d0ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52ef7e8-0c94-4891-afec-c9dc730cd3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "51604f89-3251-4859-8a47-0b82b89943b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c2099f-a811-407b-a337-18c81aac870c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7429053-9365-4ff2-9b03-2274782c1f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "527baf43-c9f9-4cb1-85ad-0c955674c6cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c21a0b-d2ea-4581-9207-c3eecac19f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "06d9bf41-f50b-46fb-b2f4-08a60fe35f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f25b05-4b69-438c-a8c9-42c2ef3b2e9c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6889cc-9dfc-44da-8334-4ed111de47b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d79c70-f077-4180-ba65-aab674667050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ecea88-16c5-41c7-bb14-772463cad385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7767a372-8af0-42ae-8ec5-dbca6c21b005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e49651-8ff4-4ed6-80c9-a91c7020f086",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1309851-2714-44d7-adc6-08e1212ed130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f458f915-3fb4-411b-8467-0cbaf7ac0907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bfb5a12-0b1f-46d6-9b0d-7b5a2c1a3e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4558f706-ad40-4b4a-aa14-627f8816649f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c00392c-5b8e-4a6e-acaf-137f8687c747",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "476f921b-23a9-4b01-8567-7b6b7c60a786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab108ef4-57fa-4740-8cbe-a02109059581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18245d71-5d11-470f-92a0-5e00c41c72ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56e64a57-1fa1-4e17-823c-651b7da7288e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa34d753-1b56-49dc-ac7c-99b8a7b8975e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85e87f3-8189-4374-a676-f71d12c57ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a75a229-0704-48d6-b609-7d5f516b5aa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8edcc70a-c656-476c-859e-3426b5f54ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a6bca476-8271-40a6-8af8-4f1888640c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea1d27c-f05b-4f36-b6bf-cc10924506a4",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0febf7-049c-47d2-8122-1f30bae52310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc506a26-8d5d-4b8e-bc93-1b7046215b48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5f66aa-36d8-49cc-bb4c-5dc4dd4e595e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e42d3595-fedc-4577-ade0-be44eb5cef4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1678d1-50ad-429c-ad13-daa7217119eb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e88991-05d9-4fe8-b204-10fa02933405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d3b232-2565-4004-8ea2-3655af325c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b629ef58-7c9a-46f6-840b-e14443239d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "06e9a7da-7ec5-4e0b-9e0e-d470b121774f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e19ece-dbb8-40a1-8cdb-807ab3e9478a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "391be111-7914-42b7-b378-0d89f6966a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3973a412-e498-41fb-a1f2-2bf70f86d5d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02798d22-caf5-48e8-b161-8a1a8511a8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e15e8dc3-659f-4359-ae03-c55023b51e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16197c25-c11d-40e5-9aeb-85a68322d13c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdbcdd8-7009-4ab7-8552-f1312c7fb53f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6ef3979-f0aa-459f-bee7-35d68824858c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31475b10-9133-4071-951e-37b04e743b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c45cbb8c-d826-4b55-9a07-a7f4da750bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24119de4-a2aa-4712-86dd-8561637f9f6f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "503ad416-6b58-4796-8eaf-3fa24d05e9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce758df0-44c3-4a4c-843d-8d1d0ce6f44b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f0e8b7-33e4-4ae3-af31-33f3bc335df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e3803b9-8238-47c8-93bb-f1bbe25ba9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba141450-a81d-4816-91da-4ee2da528733",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a4b6c5-b1c4-48ae-bddf-57a87935942a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "947525d0-5787-4ccb-9707-4446125c3da8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1fa5314-3803-46c2-affb-f3b638f4b613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d38c6e9-6eaa-423d-a4ab-e9863925a1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857a8318-a805-4dff-8c6c-2177c241b86e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67bad8ca-a0b0-46c3-a5d3-100aebb691d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70672897-2c6a-4360-a0a7-0b4e4e101357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf65087f-1667-4c60-a2f5-6954e861872f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0792be8d-59d9-4f83-a227-6ca176670388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b8cf48-0614-423e-8abf-cc312a378618",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7007f1ef-5214-47b8-8056-3e5e4d3caa00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bce9f315-5f20-446b-bc24-908f883a8a7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7fbb2b-3daa-47be-bd49-c210fb104a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab691c7f-9207-4eba-92ed-304813e4c52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddfef49d-faa3-4a5d-a535-4adc91a45cb7",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2788e75-64c5-4658-8ddb-d685b39530ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e8ea00e-0d09-4f20-a565-25796d145d8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a232f8b-86b8-4e28-a9ca-4dd4836f84ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee3da0fc-e456-41d6-b136-ca804c7cd140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8355e2-3565-41ba-8c87-72e6f5c72876",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53167376-fa07-4562-89e9-3daf12fc347a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e7ccb9a-0d29-4a37-9d70-5e2c5bbb1a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2251e8c-e087-490d-951e-8e1772a75cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d63cdba5-9a73-4769-9b48-4cc2c5a7a3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e020711-b452-4a4d-8d4a-57b81b9f1233",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4e7f2f-a727-428b-af17-f819c32782da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbfdf8d3-398d-4e28-832e-a88bab81bdd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3543b0-c406-462f-89f7-d6ac55fb1ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "075d59b0-acdf-45a3-925a-3afb9c3e3916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d911a23b-2e82-49f2-85c6-b24f32b28850",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51cd5e20-8f4b-4716-ba15-3b72a4d65796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ca0815-ad73-4359-8633-5e9a603c7493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4ca46d-6e94-46f3-9da1-8fe3ea40b6d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c819968c-4a4c-4eef-a88b-4968a487e365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c3d520-8811-4204-a03f-222b66db69d8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3735dfc2-0bde-4340-8563-38e1b0708243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "215c982f-8323-439a-8512-7a4eaf79f7b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e849433-5375-435f-8bac-91308a15d628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c26ec64f-6908-4903-8082-6f27eecc5d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c80aa8-13a7-4d73-bcb8-1a41854bd63e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec4121f-1c86-4596-90fb-690893cb81b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baeb10c0-c9ba-430d-b802-76837c6dae40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84c33ec-7369-4840-acd0-75d74edb1bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecc041aa-43c0-4ced-8320-3aff11b39876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393c7025-b10e-454e-a3f3-ad9b99b9aa2e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8876bd57-4f0a-4ccf-a188-eccf773bb6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8cd1e4a-7540-437f-9860-ac4d08dc4551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c2813c-ae26-412b-94d3-e6af2fcd5643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "144f6597-4ba1-44d0-846f-2f0c20ba485b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14863430-adc0-46dc-aa48-15c8bf82db86",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24015eb-6cc2-4b84-af80-fc94830f242b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f5757bb-e389-4854-ba47-3d8806618a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c772f81d-2a90-4986-b31c-aabb10ee7074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2233daf0-f3ab-439c-8193-8bd24f9e75a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82bcb3d-4ccd-49a8-8e44-8b04ee3ee473",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ab65a4-199a-4caf-94b7-751c86978832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c4b92d3-fb7a-4a3a-a7ec-43f67ac2bb0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29822ae-9325-4c86-bfc7-b066b897623e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "49be963e-8e32-4d9f-a8ce-90aafd367b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec931bf3-64e8-4d61-9814-1eb40ef7d40a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db39953-105a-4104-898f-225666bdbb23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e8b7b98-cab4-427e-8e2f-024f10e30c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17508f18-455a-4ca1-bc93-dd1d44df7b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3bf41769-5eab-4f82-bb85-1fe0561be93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf6f713-0cdd-4af8-9b79-3081c0b27968",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1beda7-bbf9-48fb-8ebb-962609cb860e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b37c1efd-e4e4-4697-9b28-b3930d638035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a43b7070-719f-48da-bdc5-76b12469c30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a83b4fda-280b-4c4f-8fed-148d9e18ef38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598ff906-d75d-496e-b695-938081df1ca9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59833f75-7db5-459a-83f4-b30f259498a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58f8cf8f-3071-4950-a607-b6c498586efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a70c25-212e-4f66-b380-45a3953cdd2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a71c199-dc50-4873-9620-b495a3e7ac93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f820ce50-180c-4cea-8054-1e728a5516f8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9127bf5-5377-4874-95d5-e233905e1a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c93095d6-911b-410f-ba78-ac5ce0430bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982e8cc7-dd84-495c-ae6d-d564337e249d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "23b717be-7366-4e99-80e9-5eb8870ca800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8131113a-a6db-4e33-89fb-d105c843ae58",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9ed291-8285-439a-a391-e2834c832174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68234341-8a42-4324-8749-3a71ee667874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e554f0-8685-4d68-86ee-2b051b2c3feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "87c33991-102c-45fc-9b8d-567a97deca37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680d7766-3439-4919-9520-806cd836b293",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "495d1935-c923-4efc-83bc-22bdecb7d5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9804a8a6-2f5b-45b0-a6ef-e2a079deb536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9e43f7-e485-45ae-bc7e-58c42443c6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4230409-499f-4f75-a437-ab9973845927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1550fa7c-24b2-467b-8885-9fc2be85602e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c505f4-209a-4ffc-a69f-ba512deabc41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d82cc7-18f4-4d4d-b35f-73bcc1473162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c035298-7c8a-45f8-b6ae-699cfa655ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "28344ec2-d3a7-426e-a39e-4baad5135839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eecc591b-4efb-48f9-9b77-c9bd4c41ebd2",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feea2288-a8bf-41d5-a4a2-2a8149e58126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5edee6aa-40e7-4ab4-b165-7dcbb5db4e10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d91d2c1-8b4c-4d06-a246-c5f8e609f3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b54fd4f-f54b-4084-bcaf-ba3959dee873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee3bfd1-2c71-4248-938d-f9d5f5c83aa8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f0b761-9fed-49a1-95ae-9965eab2d6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd8f4f1-eef2-49d1-aed3-66e88a42ff51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e8bb05-fa12-4a42-b0ea-1b07b87b9b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "260bec8e-4a36-4af7-96db-f0ef9ee30d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0057e0f-bf79-424c-a174-c904e9a85ade",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f364bbc9-02a0-4ba9-8261-8868f4c5377c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51fc5cfa-403a-4116-9e5f-005b7404c463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a0850d-25e9-4915-80d1-b0989e683984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e15e1a70-cca0-4c1e-9f52-8cae302c60b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc37b49-0daf-43ad-bcee-9a273c03aff1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec90222-e9e2-437e-bf77-ae3e2b52e532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c39130-4908-47ad-9553-5342a94eb7d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e3be0f-03cc-4f52-9078-6130cc1f5730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e6b04e9-1aeb-469f-b838-90b7d918abf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b502dc-fd45-4c9a-960f-ced810847193",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3709b07-b2ba-4a45-a43f-6bea34a78505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47341d96-48c3-4f01-9115-e916e0533b8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c5aab6-cb53-440c-9b46-45a8bf0278b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02089ed5-5a6b-480c-a169-ac790dc2898d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ef4b39-8afb-4ed0-9760-5477962537ba",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa9b5f4-b732-42a5-82c1-46b657c78c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc1e288-7339-44c8-8bb8-f656c46446af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d266349b-785a-4083-9ebf-cad41d91b6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c279131-1dc8-468b-9a4d-8a1e5dffbf08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5976b400-8caa-4b09-b9d1-a7ece4ed950c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6856e055-a7c4-4530-b3cd-cba2f964da1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dddef285-8b5a-48ed-b6cb-47156bdc5ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a832476-2f15-4226-aab4-680bc20016d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "053c2aca-9a7e-47a4-bf7d-cb6fe3f1d111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b606cac6-786c-4ef3-b592-433b8d92b5b9",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "486e36cf-97c0-4c97-8a8d-773986053428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c59e68f-4623-42cc-bf03-8f02e2eea716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e9784a-7912-4ecd-b0e1-85e082647793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e794434-a5f7-46e1-bb4f-bd122ef43522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ce4445-65cd-4532-99e4-1bd0cd193c2d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19cfe682-4fdf-475c-9aa8-66cdae3ef799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19da612b-da7a-4aa6-9885-0b9dd7334cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2451e5ca-61d6-4ee3-b6a0-e53c91470fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "35bc6982-4712-4310-97d1-d9a2c69dd966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b086ead0-67b3-4ac7-88ca-7f9b96f15ee3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecdb03b1-65af-43f0-ac8d-146a96e87fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed85b1b-66ff-4d99-9db8-9f19cbf82999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f64f71-6a34-45b2-a005-6fd420e196f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "51161f5c-97d5-4868-926e-8046ae659a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605455d4-02bc-4345-bff1-4da22049130e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f6c2ea-8420-4a9f-837f-fb2e54b0542f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fedf82ee-cfc8-4ba4-bc4b-9c59ca9c85a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d7985e-8028-4286-86bd-ecc0e51ae522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "89c3e087-1a5c-4a0c-8bd7-e61a430625de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c83544e-9478-463a-afa9-9ec855476667",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1fa8be-649d-4517-ac3b-12d5a7cabed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "09c48a5b-d183-48a0-b8e2-fc44d862d8cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d13672d-6a0b-4985-bce2-531dfbf38c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1eb36e44-e18a-4174-b8eb-143ec07b8f9b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "02394a41-0703-42c1-ba9d-568f09e37fd4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "475e9339-3ee0-4c05-824c-3d31c594e0e1",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae1f416-ea8f-4a8e-9d09-5f179b1e333c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7de1c921-f834-4333-a036-727f698e5b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3baaefd1-60aa-4a0d-954e-75ab09b03a74",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b075c87-eba4-4b91-95f0-346167a4e6f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c3fd104-0692-438e-86fd-5fbe77cc9085",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82fee880-31ba-4f35-ba97-1f68d61a4271"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdbcb066-08f4-4a9d-b4ea-6af4a8eb82b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ace03021-9613-4521-9f86-4b94fc3fa41b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "95a7b679-d448-49da-8c4f-26cc83d05b45",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7a43ab35-7396-48dd-b0fd-48d2ab0996a4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a423eb40-f263-4e42-b1ce-5705786e1f2c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0de6532c-0f45-4cc0-91d4-f07587869296"
                }
              }
            ]
          },
          {
            "id": "449820e0-af57-4dc6-9982-4466d0569319",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e4ae5b0e-a281-43eb-a717-55ee351e22ae",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "ec317ad2-dcf3-4739-b407-b870da0392ce",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f1e45d-c42e-4584-a2a4-7c9ad980fa21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "db5a8b0a-7757-47bc-a914-a11d52194d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95b8b8e-c736-4f60-a516-7bfe05f43715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5b748b0-34ef-45cc-98e5-d509c25ae04a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "949791b2-1959-4a48-8510-96ee3c65d53b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ade6be75-93fd-4ba4-b681-4e571da9e4b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3ed70b11-f9bf-47c9-8382-705db4f73d7a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f43b4b1-3d82-4161-a44a-0de9afdf621c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dd2ae13a-acf5-4bed-8c48-b15e204c950c"
                    }
                  }
                ]
              },
              {
                "id": "348bd126-10f7-49fd-bad4-d728b91da1d3",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a78ae8bb-0b93-4ef0-b817-b41c999b990c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c27ca577-25d7-4998-95d7-00a54786da83"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a83b8d7e-6bb8-47be-ac2c-533e7b98fbe0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0f2d32c6-b611-4040-b761-95d82cf52a06"
                    }
                  }
                ]
              },
              {
                "id": "52055950-23b6-48a6-a844-0c9f44458604",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28f109ac-4fda-4eab-b5cd-970537c9e13a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e078fe8-0d9a-46bf-875a-da26e4d587cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54496400-3dbb-41c8-ae7d-ec4ac4dad987",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "da5e63b1-35af-4f53-a0db-53f2a2adf596"
                    }
                  }
                ]
              },
              {
                "id": "c77fc06b-7c36-4760-8f0e-33e2a63ce1b4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1da010d0-13ef-4633-8a85-c431dbd943d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2d58635d-46e7-442d-bddc-9b35cf787e94"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "485afac2-a0d7-42b2-b2bf-32f61aa9444b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "89b9a8f9-06fa-40a5-a56d-5fb9c92a1c5e"
                    }
                  }
                ]
              },
              {
                "id": "4c329c8a-f831-406e-a7f2-a567e9fd4881",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2aa9ac3-655c-416c-8e31-f951d5520227",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5d8a0913-e2cb-41be-ae89-e14e62a1ceeb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "009397b5-59b5-47fd-a2dc-02dd90812bb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "4afa5b74-b28e-41de-a396-f8f5cba207d1"
                    }
                  }
                ]
              },
              {
                "id": "48b3ec7b-694d-46e5-a0c3-d9d91a2d9848",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e97a51a7-ea62-4af9-9cf6-4259e32a7a59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89df50c0-41e7-4920-a809-ebb05b07fea4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8bfba756-89f8-4d80-a718-3fe83b1fea16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "53c981f6-3526-4de9-b717-ed120889eea3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "545e7219-3544-4cd2-b2d8-afa6f463a6b3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0985e8f3-d452-4ff0-bb5c-92b401c07373"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d31b7e5c-c72d-40b3-96d5-2175c7b25339",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d910ed51-e86a-4cfe-955c-33fd8bdeeb12"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4731e5f-dacb-47a6-8b78-d4d9d93d26d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7da17123-5f6b-4a71-b0f9-2e9fc154742f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ac4b519-3549-449d-a057-cb8ba89a4580",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e454b2d7-53e1-418c-8e89-da89c53168d5"
            }
          }
        ]
      },
      {
        "id": "796802d5-c3d8-479f-bfea-eeff199197f2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0a25e2fc-b3f3-4913-9e12-e3cdf33776cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fda99e8e-ef01-4d72-bb8e-4465fc086e1e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "68a979dc-68a3-4f18-814a-adf4226f9ea0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c1fe24-e4c4-4050-aedf-ed7f1886c809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3c08366-1893-469f-a7aa-6b4c8b4f2f79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb51ba9c-d3be-4afc-bda7-0f9823b5511f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "44be09b9-9a40-4397-8c5b-af8df87be982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3837a7-9f2c-47e7-8feb-070286542bfd",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829b9776-76e6-4637-9644-06c8d6a5b77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1da53963-6e50-44d9-8250-afcadf861cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55457889-5d2a-4182-aad4-15a82f32a07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f8ceeff-dd16-42de-be9a-98d54835b5f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c4aa3a-6bf4-472e-a710-b3e0ed75aae3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b057eec-a027-4418-9641-a0556f4a486a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7731729-eed8-4588-adf5-4a9158be81c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb105857-3cbf-4802-80df-3215bf7e14b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "30b61816-9048-46fb-a316-b00ba785de69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56a8ff2d-d3bf-48bf-99c1-7255a826a0a7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b40e382-3464-475e-b38d-d559e1692af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3691938d-db0e-4b7a-a77a-6456e55a9def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8704c347-bbcf-48a6-ac2e-c9fa4e32ed59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7a94b73-5c00-403c-a431-b77220926b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8df1aab-e509-4da0-ae84-9759b1981d57",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df66cbf9-3369-420f-8c44-fe5c4e4f729d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83fd32ea-de77-48e8-8fb8-43b659d65716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca59184-3beb-4614-a762-63c8ca76f4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfa1cf6a-fb1b-4396-88e3-c0e3938d72e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5644b46-7785-45ec-83a5-0375b808e96f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "773ed0fc-5e98-46b0-8607-1bfa7c4a31ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f0c0355-31ff-490c-867b-e59979bb4e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a337256a-2aad-4468-bf33-79aa959e230a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b8854f-f793-46a8-bad6-3e2e99f2c251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0626f3d6-c4af-4efa-9dc4-1a58a6331498",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46010fc9-3dc7-46a6-a324-1bc1455980b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c65bd72-8981-4338-bd82-d62a049f8bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92bf8070-c82c-4c9a-b799-ae19568d6b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8af17f98-f1c7-46cd-b593-6a774394eac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df2e8c9-b2e0-4903-aef9-24d3bedd8846",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4b5240-2ff6-4937-bfce-032a12b5ef8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d207e6cf-314b-4dc6-bc0b-15b593ce374d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978b9c6d-8e3b-4576-82c8-31a566222207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aae6d32d-26b9-48d9-ab5d-64c3a34cb9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6dcc310-f25f-42db-b0b6-26e65b7cfd63",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc02b9e9-2ef9-4517-8ebf-a2f6b0afd0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "926e2f6e-509a-4c4e-86f4-cdc634af398f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e686d1c0-5d5b-4b0a-bb45-e1c52905010f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8076e2c6-f9ce-48f0-af86-a6b716326310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae271038-4dc0-4766-a4d6-526dcbb7aa78",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ff897d-c66c-4cc6-a76d-99c17f417f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c047462-0c5a-4e1c-bcd3-0f6db45f966a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16a80a5-70f6-4c2a-b6e2-4c1e88dfccd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3faca6a2-81d1-4aec-9a19-0d3ff44d34e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db989e82-77c0-402a-b34e-7ecb0ad5772f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3de239-31e6-438e-aa2b-8e077391b763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b5fa21-a0de-4276-8ec7-aa74cc9e29a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31093b4c-eaf4-4d59-8210-12f236af6a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a42a78b9-f701-465f-9861-82eccef835f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9bb853-7614-45d6-b4b7-a458630ed43e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec5dca2e-22c8-4d56-a389-0748464b9ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbced805-9815-48f2-821e-7bfc6256cfe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0699afc-e10d-4069-9d1d-8f9f38a3081c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4c7956d0-2f95-4959-8bd4-0944170cc87c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bde0c6e-2e77-4e31-abf9-9843507aeb9e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66764571-bc7f-4fc5-a46b-280002943d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35f0d1d-337f-4d6b-93e6-280a4a43c707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8fb0d81-6d01-468b-9eeb-c55ca978ba7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f32af6e-cf84-4e4e-9a2c-136f9eaf232f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1517ef0-3255-4ecb-b917-749278a818a7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d26f911-cd8d-4e34-9774-ff9cd53a5b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823d6aa1-c392-48bb-885e-9f290abfd5fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b62a6c-bbef-4cc6-aa91-4b63b92c4073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7845d0c3-42c9-42ca-994e-9ce0692c2aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a718fa-a9fa-402d-89c2-9b8fc02945c7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c2f91e-d3c8-44c7-a6e2-38aea4ec61cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1499c3e1-c930-4286-972b-b2f688a98b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafe811f-cc31-43f6-af10-b43c0a68b8be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec4e8cdf-4d2f-41db-a5df-790af516fd5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d20b7e35-13f8-446e-8caf-dcee132ca8e1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed75bf2-803d-4c64-b5bd-9650b070ac92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46635959-f31c-4dea-b795-69f84e740d4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a9e88d-0ca9-4ea3-9940-6a15d6871b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "863477e8-7359-4f0e-9bab-e5aea83f48f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b327570-12be-44d4-b4a9-e520ba439d53",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9f761e-1ec5-4fbf-8578-0e8c7c8241f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46544f20-81ce-4872-a93a-4b05623a5690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bffe3fe-106d-40d8-b5f0-2e2fde30c45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d501ed6a-fef9-42a4-b1a8-274df6b66806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6f1ab9-38b5-41a3-a377-423441d85aa2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be44552b-7dc5-470e-884d-81e68ec4b386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31067632-cc18-4f14-b568-7134944b4bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76535cd-0319-41ea-bbed-8366dae24dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "115ab3d0-e6f2-4401-a97f-438c67a048ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99272651-d50d-4d65-8518-856c48b875f6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1746343f-f152-449b-b0fe-b5bbb5edd902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5767cdf-8897-4a90-8a83-3f70f95cae4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b3d262-3f53-47de-a4fa-a7542491b1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02e8995a-b2ad-4180-ae23-624ede96eff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cc4bf0-6c2e-42b5-b410-a7949be8d783",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79158d1f-bc5b-4982-8aa0-20b8b04db70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf98a453-3428-4f4d-8e31-1057e05359f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ed0404-20e2-4716-92cf-d14ee9326a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4440bf8e-5c4f-48bd-ad36-2279ae94a6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da48160a-48be-4d19-a429-4cead1cf9f63",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "653e2869-65fc-4a05-b36d-317cc2d337ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf2f18b1-44fc-4227-85b4-b8bf949b6dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09f8636-5331-4f4d-831f-3edbf8a53145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a545fea-cae6-42a1-a9a0-120037adee29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fddb70f-0086-4f15-ac23-daf8fc671584",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0543df-f028-4b44-9a5e-7800792a1c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b22f9851-79de-4aa8-b375-dcf23ce92f6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50235123-4170-4ad8-ac8c-bd8674131fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8f75f3f-39ad-4030-beee-497acaae57ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d60c9ac-e2c2-41de-9db7-8c8c7565e2a1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc9f606-6a78-442b-9999-30e9f91a604f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db90e0e7-f735-4046-8e25-7bc72b6bee21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e98e04-046a-4364-bac6-564b7deade17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05c9e8e9-f2cd-4947-98d7-6c3c69eeb5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2801a4e-456b-41a0-965c-3ad65d5a3d79",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69d941d-3b0d-4f31-8bf6-f22ca07fe972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08c434fd-d774-40b3-a616-9d923e5ffda5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b04019-dd80-4c40-8915-42397fe6784c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a281e6b-4def-483d-8b79-36428b4e8aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681b9a5a-b1b9-4ead-b76b-834b8d2c5a9b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77cd4601-32d2-4683-8160-6d374333464f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16347ea2-704c-40fa-a4d4-5d9493eb8c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64cc524-31cf-48a3-a707-562c17d6e4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad05368-b767-4ec7-b7b6-846956d52470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911343de-d606-4544-a7e9-e8e8c6a443dd",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc5f8fd-7241-4099-a090-a44191ec873a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3cb70f-56cb-400b-8e0b-f9dc1279b8aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07f4c74-2f7b-47a2-af4c-505b0dfdd1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "048d2ea9-a002-4cc3-ade6-0e5c69171302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42954b6b-cdd6-4b77-aba9-13efab031914",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76911831-9e73-4455-ae5b-d378307f35e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0374377f-496b-4a2c-8886-10464729b442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c00f6f-c71e-4af1-ace7-19714c54c755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76e2d8b3-eab1-4d15-b95b-4218b0bc1f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52388da3-0958-4fcf-bcba-509932943ddc",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8699cd-7eb6-45a2-97fd-b1895d484e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434ade0b-ef7e-4512-81eb-f13681198f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12a5dda-703d-4095-ba21-8a9c00f75a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "820296fc-9795-48b7-97b6-adc524f557fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e41b815-68c5-49fd-8acb-645d40de1c53",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf436be3-15ee-4f88-8475-8e74f5db883a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63f2a7e-4411-4aaf-9432-6f79e9d0002c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e59556-fcd5-43a0-89bb-351be46f1bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d667154-8c41-4eca-a62c-0be6c8dd3024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842685df-e9e5-4ace-9c62-e5dd855005a1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f5ddbc-4bb8-494a-82fb-9438800ee57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5561f7e-479e-4a6b-ac61-f58496d1e085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b417b5e3-69d4-4ecf-9d1b-924b410a7912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d1deaab-13e5-4197-b566-4ed3b27ac85d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1d4c47-b881-4dfe-8010-f39b0626cc38",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588a4f7b-87f3-45e1-8622-e9cfba63d200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5af113e-0202-4cd8-acbd-fcd71a229e13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8fbc1f2-3101-4ebc-a7a8-24a5303ce6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d5ede69-f472-4f99-88c4-9635776076ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec606bb8-1ce5-45a1-96b4-50c757eb34d5",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06be272-195a-45ef-bcea-3c837d2bb56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c112aa64-1a68-4c0e-9d0d-9f6becbbe7e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b55bbe-3a20-4661-93a6-6441927348fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89088572-f38e-4dff-b934-dd1fec741d63"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "94fc5dcc-df7d-4ab0-95f9-ee01668672fa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "35b07b44-66f6-4b8e-837a-829be77b75da",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ac1e3f-aba7-43e6-83fe-4ee37e89582d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf60602-f9cd-4582-a964-a80eb6bb6947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dedee133-6d05-4ec1-b8ed-7ba8174502c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cff578aa-6f18-4867-8623-17a0996ccb96"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0e44f7a-1920-4e04-8ab3-91588787cbd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5133068f-5abd-45b0-921b-5ac25a913707"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd21e807-a885-4a6b-a8c0-5acfc0b44ea7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43244915-2c0e-4da2-92b6-e842d11b1992"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a42b87f-e1e2-47c5-b65f-beb284664ca9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4cde09e2-44bd-4456-8f05-09716bc787ff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0328cb4e-23ac-4477-a5e8-cb217b43f552",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "61117338-b788-432a-95d8-2bda72974738"
            }
          }
        ]
      },
      {
        "id": "40e31a90-a37a-44ad-95c6-a5cfb658c2c9",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "1d40b5e0-64ef-4d58-9e33-6b7fbacb7610",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e0078c9-194f-4dce-914a-85b5e0b513bc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7d8db0e8-358b-4706-902d-fc1ba9fc9dc0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c1a27f-e346-4cb2-955f-e3c0b92705ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "488d6c09-2407-432f-82d1-9a8692b51652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274b8a40-383d-4cdf-bcc2-13f6e5837a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "41b35d31-01a5-4743-85d7-1f10062e699e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a189a6b6-ac0b-418f-9938-53281e40c6a9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf953db-bdae-4ef7-9835-02bed53e5d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4cd22cf-f63a-419d-8078-b7d45b3370d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a620ac-884e-4739-9c6a-5ff1b030137e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "24b6e449-3877-4649-9b9f-85dc82bad857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47814843-76af-4318-b9ac-8da4d648f412",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19b8a8f-5abc-4cdb-b260-ea15ed0f5b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ad82dc0-f517-487c-ba07-a48fce6461d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51d7b5e-dd20-4067-a7bc-ab3beb0c821d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "820154f1-fccf-4f5d-a135-ebd33721edd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c179fbaa-f978-427a-8c4e-104b9d4f68cc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc48bf7-1bb3-4bab-bbc7-7430a8bb1b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "844620f3-caa1-4f66-8b03-36fc2f80f5bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c95080-f84f-40f6-af1e-9c7926463ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb6126d3-b457-4134-89b7-dd09c34a1689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4081894-23aa-466d-ad6a-b23bb988e7aa",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c83925-b5f5-4fd8-a2dd-398d24c50b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62580e0-1c31-45b7-bf1e-4a48187227f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb811a3-699f-418e-b10f-5b1eef86f32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dd4e32b-f287-452e-bfed-f5d9368f7872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876fc1e5-0d92-4677-b9d6-b54774269d9c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a24792-87e8-48a4-865d-5d5933ddb5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa9e69a0-46bf-4ef7-af51-68cedfa1c67f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43e556f-16f7-4fb3-9072-3558a58e683e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "748e026c-0458-4434-bdcc-6ea796c15da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8158dee3-e1b9-4a8b-a451-75db8fa07521",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced6d8df-dbb5-4dba-9a60-798420f66301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab7e741-457e-48b0-9293-fe4729a6b88d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f661e88b-3d3d-4c30-b4b1-b218ed226990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3be83edf-bd18-4fa3-9f1f-76b8c2aab91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e723b22-f1da-43bd-b66b-80755eb6ed58",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d5dfb0-c7e8-4ee7-aae8-8e35662744c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5699d4bc-02ed-4213-b677-3a20ee08c18a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d6c567-07ca-4d62-ac4b-e05fb535b2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "80e13183-4048-4444-b937-7e7628e6e656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4bc361-9bd8-4850-bb1a-6fd203c8ffdf",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf655127-be2f-4d45-98c9-f007f58d1de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f659286-7233-4fc1-9fe6-24d418e0a3e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd48e2d-e43a-44d0-bcf0-01490b7278de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "798fffa7-603b-41af-ba4a-d3ef7aec4d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264c7c6b-fbdf-4184-aea6-d931ef581c32",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad038898-0fd4-4eb8-8330-2bf035443d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e9116b-68c8-4900-803d-50e8c07bc31c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a674c94-3fa6-40c1-ad09-92baca0768a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb0ce7a-4984-45e4-b16c-c58e3c6e0aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c9c6d9-2f3b-43b3-bfda-c88a4f7fbfc4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "000df5be-6e06-4ac1-9077-99ceabd6bedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c94993de-8d33-46b5-a19c-8c487db35a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29ac838-a637-4d43-b988-61dbf76bcb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8906421a-2ce0-42fe-a9ad-dd69dc2aadf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a951c2b-10fe-4944-a3c2-cc2a3b819273",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6202691-b207-4ebc-b27a-a8e92596a2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea29a4d-b2fc-4806-b59e-b14a5510b78f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1fafa6-2b14-4353-a79e-ba882661a124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59104671-a8c0-4475-9bc0-762bffc367e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9e22ec-76ba-4823-b035-e4077ada0179",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2b0c35-3c90-4f54-9afb-7bc9a6b97178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df25c4c6-b4f4-4672-9aa0-6ad31d1b393d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e54b3e-e31e-4a5b-bc03-5390b1032785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "837cc6d2-ecfa-4129-9911-2890b3e9e5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0707146-248d-4da9-8641-f24506d36dd0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85baee2d-e74e-4cfc-9ff3-d9a42a380408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe971d2-e3f5-405c-b3c4-b2bcce1a69ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a519ab-a23f-4ff8-b54c-f0994b1976eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "df410bb5-1339-4563-b856-11b42f1ef122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d2199f-6719-44f2-9061-eeef2839375f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe6c362-50fa-4e15-b948-7bccdaa1e3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ea4dd2-f55b-424b-96a4-275c4a24f33a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afccc3c4-2b59-4a53-97bb-2719b1872f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5adf3e85-ed9d-4a36-a08c-5e400618faae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364cf1c4-44ff-480e-910b-d5ebe1abd9a6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe4fc6a-462a-4bd0-bd80-fe5447711f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4da04305-9135-49af-9a94-2d1193762abf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8577bcbc-0ac8-4a34-847a-a9cabd8ca520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ca1ea26-201a-469a-ba1e-1b100d3fd2ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95426fd-5376-441e-b0d0-7417c10fd06e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2555f8b2-dbe5-4b82-93ca-c2a26a1ed79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbe7233f-09ad-4c24-92f3-20896cebd942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35eac6f3-1d28-4350-b8e4-1d3c728fd780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0f3608d-6f60-4fbf-a702-b9cf7899964f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbef151-f47b-4969-906e-ee7aae2ef6c7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a330da-bfcc-4ff9-b7ab-51857a28d0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "171e2faf-c46f-4747-9d7c-fbc0d7321be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3075c7b0-c4a4-4ac0-aee1-dbbc479383b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3242f034-3bab-4164-9486-89b153e7a8b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7efbb592-cf74-423f-a6e8-b4cabbaf1a0b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d641447-0827-4b31-b76e-2f7b4ad367ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "599c7dc2-6b30-4336-b2bc-2f3888dd0267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828076e8-691e-4490-ad0c-181ca0d8dd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1f0e13-225f-471e-911d-453ca9e5a0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998f231d-01a6-4e1a-809d-e539ba94af49",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8caf882d-ca5c-4583-9609-f1dc14d76a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e892523b-c006-49ef-b61d-d34264c83e0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f57fb0-eb20-4c47-ad2d-ad9c2f871243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d588e8-ef94-4731-a95c-a9c6e23306f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c053495-ed4a-4800-87a0-5b0aa52f2c2c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6be4e65-55c1-440e-be98-7082a891682e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23089f5f-333f-4617-998d-79c674ead796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ec4b57-e549-4e45-ae8c-9043f384c5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbef2ac1-7a27-478c-9bf2-fe1eaa909b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d62ba76-0049-4dae-bc87-b509402b97c4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1668ded5-02f8-4a98-b446-82bad2a69977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78447090-9395-4dd5-a5ac-a40d02fc41c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1875ebde-0e23-4001-9deb-156e257566a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9e3a949-829a-4280-bc5b-2fe3f7934e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f2f4ca-1068-485d-8804-50344dfd81bd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361f5bdf-1e51-423f-83f2-4cfe11d6b2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c16719a3-9d09-4434-b2dd-ef8576197760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9983f3-6a86-451f-a043-4d6adda83da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc95370a-35a4-4863-8d7a-bc2f88e23bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "038aeaf5-1ce0-4a03-b407-d22ebc18c09b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bec60d-6bfb-4eab-b4af-10b6b08c7b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ffa237-3f4e-4382-85b4-1b2cf1c3f6c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96024f8-9cf3-4356-ac89-fe1ded1409e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cd48cd9-1577-4e23-8354-651d9edcbb7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847a9d00-2e4e-454c-b3d5-9273903e71fa",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3195661-e8d0-4ce3-a339-37644e0419a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb12101-f223-4e42-8217-84ca1264c8dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eade26bc-8f1e-4ffe-b888-2d372098f59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3fecdc6-3719-4d8e-8af2-48edb7101806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b198d64-fb22-4e46-a712-b5305400fe9c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8345283b-4c5f-4d28-b6c4-214ade332534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dadbad0-a32b-4b25-bfb4-740017f3ad25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d7c1ce-d46f-407f-8732-824cb2611fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43fefcf9-89c2-436f-915e-e4929ed1c0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d07a9d-164b-4490-94fd-38cda1041360",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf70523-bd53-4f44-a16c-dd9b272e9593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c1942b-73a6-4d44-977d-c7b19dc40ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e627aeb-529e-47b7-8ef7-1c2864966bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aea86547-643c-4560-b4a3-6ed4e8334474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a706f171-6f6b-43a8-8abb-2b683386b669",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f4212a-80ab-4e18-9157-7e7d8d3b5b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14951727-4cbf-40de-9205-525a5b1c1fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25fa5d8-d184-49e2-a875-e02998fbf35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d8003ed-425c-4eb6-b572-74e88efa4406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f819528c-7c8c-4105-b9d6-e41e8cb790b3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049c8177-c162-4a29-bf1e-6ece45ba0c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21112d1f-b08d-47cb-b77c-4d40ce47f169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b20ec50-072a-48df-b8f7-0568f05b97f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47f841a8-a670-49a3-be79-15e44486a5b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1b7ea3-663e-4982-bbbf-c655730613dc",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f7d007-aa6a-4722-8206-3fe8418e5479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0419510-d0ef-49fd-8d04-b9c678698cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10e4ee6-bc25-45b2-bc90-5f6f2cc0679b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24346f2a-5f04-4056-b816-715ebd84fec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef164caa-89b5-4f5b-ac71-f8c29c2be416",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83698273-e0eb-4f2a-9b97-fd095cb53cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5cc8bea-958e-4829-995c-acd9d4425c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5e02d7-ed54-4c13-b645-5b82b881733e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be53bb8e-2c90-47fe-a349-da87b47fc030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b860a2-fc11-4b32-b513-42b457c94976",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd8da4b-a515-4cf3-a8a7-374eb97258c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e98a0f-768d-473f-b12c-0f6c031aeaa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa938db-d7f9-4f2a-80a4-f1c7f44b7fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e8d523e-c0db-4ab3-8c6e-9e78255b1b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90cfbf29-d115-4334-8983-2fe1c69b8d89",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df302cc3-f729-485b-acfb-4fb4f9f0336c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98f27ce1-fa86-4646-b7e3-86554590541d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba7ff22-6b82-4546-86da-55b4fcd0601f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25b5eeea-6f5b-4dd8-839c-dfcb2186ddfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b8e957-19b5-4877-85e6-c6c25bdaa930",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f92fe6e-3444-4ef9-be22-d7f72816afac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d58a420f-1dfb-4281-beea-7a29d8c9c7fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37246f6b-9192-43c3-893c-4081effd506b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa6b4f8-f6fd-43f3-9cd2-3f3c0af04106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b706eb-8df6-45f3-8594-cf2944677437",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150dd318-c0bc-4508-b3fd-e0b4d3784624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce662cf5-0df3-43a0-9b95-a0cc8ae3e16f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2976fe3f-5d0d-4864-957b-b18912baca35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b4aab9-b4b7-48d4-a8d3-530c1ec17426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3fdb4c-8eb6-4ae9-9379-8cd9cd5eee4b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1666d96e-1d55-4cd5-a7fb-52d111a73f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c336d1d5-03fc-46cb-9dc6-e6cc2c7b0415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188e88aa-6ce7-4683-a22e-8d9b242190ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb94142-a151-431c-aa75-6e4ca77e4ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06713a48-fe7f-4c5d-8be5-73ab1d461da3",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b955d61-474b-4aed-ad92-d52abaa3537c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6618af8-c172-49b0-b055-d6299d487456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba78d3e6-40b0-4977-bc7f-86f8e52829c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc3f66e2-816a-43d6-b04e-07cce17df16d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "61158222-4b11-474b-a5c0-2a9fbd33548e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3181e547-1c56-4094-8819-a00342c9745a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7d455e-de42-4a2e-a4a3-7ce0407cfaff",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "074e4792-9e13-4d4b-9dfe-eb780f654ba5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "422d39da-9a4f-4786-9a9f-77b3f446ba65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db48c401-8346-4053-9b73-2ffce7699e1b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5952de7b-f19a-4709-b5fb-a191879871e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1ee610b-e34d-4868-aefc-6cef8d40b350"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f665c1d1-6712-4448-9f07-6e65123dcb77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a843163-4776-4464-a967-8ac63f7cc595"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e728311-8ab2-4b78-930a-4179dca005eb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0637979e-a384-49e1-a654-599bd5c7fd52"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc344810-1799-4646-906f-66fabbf17886",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ebcd6936-42b7-4071-a8a1-233184cf3e49"
            }
          }
        ]
      },
      {
        "id": "2a1c2cd3-c860-4a48-b27f-a5ddf81f1ed2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9257401c-4c68-46c7-bc27-74619bb47062",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d23b3c8-8af6-4f55-bbe6-bcf569f99b2e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f75a1f50-73a7-43a1-927f-4107724df2bb",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8cbde1-e0b4-45fb-8c38-8315b2d91359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac5259c6-88b7-4f2a-bbe6-acb7ea0fe869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46ee7fd-7b1b-428c-8f9a-12d3961c314c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c037d482-9b2e-481b-b6b1-0f7e32f48091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9cf3de7-1a66-4f94-89a7-938b087bcfbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98874370-1e6f-4c1e-af8c-110c656cba9d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23bebfd3-1679-435f-a588-2f21bb70979c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38f72de9-5eed-44f1-94be-262279caa8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b7d589-16c2-4e7d-bfe7-a554f76cbe28",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc1e3eb-6e43-4f10-8957-b5dd135d9ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "008bb91b-db47-4fbc-9f61-89d67c82fe56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdfcd7d-5978-4838-aaaf-039f61bc2132",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b07e15-dd0a-4403-8b4b-b30e3f8c6d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff729e52-b3ac-4981-8fdb-d1b3993f9a85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18819021-05ac-4bb8-94e1-b4f2efa82280",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff8ea2b-5710-48fc-91f5-1efd017888b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481e198d-042e-4ad7-8859-c150cf6e9d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918c0cb9-f538-4f5e-9479-26dcd0d56e12",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95a16d9-bb2d-4a37-9975-58e5d5d674a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25923248-acb3-4020-851f-d2e28252c0bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "497c972a-b000-453a-8886-a192e0d04bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22520673-9bbf-46ec-926f-c3db464e4db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c084180c-6f7a-42f8-a7c7-66d9e5ef2a37",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d50cd11-5f8d-46ea-9aef-4ef8060e1068",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "885f22af-e5fc-4e5f-b2d1-9bfdf6cc140b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f264070-4966-4a6c-861b-f25206885208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75fa3f83-6ad2-47f7-8041-5ffcba33a374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090896a7-ff6c-4c3d-8c2a-0b28737dffb7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fcfe77-79cf-49d2-93fd-e92416745f98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81cd79ce-b6b0-42ee-9461-39741724d858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bda2646-6b69-40a2-bb82-97591c108b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3379c6d-c808-4212-bb85-50e8fa0c389c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2898c7d8-f752-4d8a-9b91-20b5ae2cd928",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1666e579-1d0f-4b3b-8600-079353fa2339",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b4c0ce8-c423-42d1-81ce-32b24d523aa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d01736ab-1ae4-448c-8021-ed31fcbce085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3df21c8-32d8-4e36-b7b7-ec12d0bf301d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5fd411e-66a5-4227-b43f-65a3043fb073",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2752c26a-6d74-4796-a7bd-c3287a40cd0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db6460d4-70e1-4566-8dc0-a7b9d59fd312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77321f32-e063-4003-8108-9d37124284b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b137acd-b18a-4cd5-90df-1092b3303787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "862d79d4-2bb4-4888-96fc-5944d114b783",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2c4723-e40d-434e-95f9-3f86a0f796d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87bb5dbf-15b9-48a3-ba0f-5b9a6248074d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fd04e8-1a55-4126-8b83-6c84fd11d989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9763e4a5-cf20-47ad-9740-a7354501b371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109fe55c-dd15-4f24-89b1-8b85047f317a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75638172-a084-4528-a4a6-d1ad9e0bbc65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d6b95b0-47d4-4f10-b2d8-8172ca0306ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6991ebe-739b-4516-8ea9-4da655889448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75dfe6ee-3bde-4c9d-9d8f-309862784f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9010cf3-72c3-430f-a72a-ca7c4606bcfd",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e8db73-8f5a-484e-9604-d2fd983463c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "886cece1-6fe6-4283-aaf7-a7cfa9fa42ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e77b0ee-1738-470a-946d-09af0e1abdb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6438a721-eb26-4fa2-a3c1-86722931f69e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ef3dca-cf03-4d1f-92a8-43d3cbbeb60d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083c32f0-7c44-44b0-baf7-e6ca68015b15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa096208-48fc-4f0b-9d57-9e2e3b87df2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d304af3a-44fe-4e40-92f1-c82c3c711b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3c474d2-6228-4076-aa36-4e9028de1ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75440fd3-6f63-4a31-9427-1cb0a30d1513",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9256b6f6-9613-47d3-892b-2462838ef31e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "124f5cb3-7802-440b-821a-d3ff92176bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f0006a-a37c-48e8-aa6d-0d42632ed61f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90290454-ff8a-47c5-a032-5d330e56f4e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af67dfaf-24b0-4447-95be-96f0f4f30378",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b884e4af-7a6d-4343-b878-1c0ded58935e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b3804b-6baf-462d-82c9-682fdc591271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe5673f-59f4-4a1e-85c2-1d70128b6241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ddea3b-4bb4-42f0-9d70-d538d8a319e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0df9c5-e3e4-488f-b3d0-6a9e08272b35",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb412d7d-807d-4c00-bce5-738e08b1c2f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d964cc-d5e8-4e09-b48e-a302243315af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c235183b-a547-4dd3-8239-588e16414d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be7feaa-6338-4d66-96bf-0db871359a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cf3823-a062-4ef2-9e4c-4e79f3b0070a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d71cbb-323b-4d56-aa09-f431dd6818c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb91195c-c278-43c9-ab5a-0a705decbf92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15696509-0a8c-47f4-ad7f-951eeec51e03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96fe8186-5a9a-4829-a2b3-a465a3826d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354f6684-6d61-4cdf-a4ba-699c24b9e8a1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a22a02-d830-408d-b3ac-d4f11163f31c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9eb537e-26c5-4639-b45b-d683f829acc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "123b2c00-87ca-4f7b-8248-635c8cf18912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff48fcf-e6c7-4336-9f34-9f4ec98c89bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b86175-678a-415c-8cfa-7f45e440f6b4",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a252287-862f-4d46-8c35-4b83271aaab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3342964-0e76-4d85-b131-a9bf5c7099dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6687aeb0-87f8-4ab1-9b20-9d08a72c6729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8e16e71-2c8d-4fb4-a14d-8b1b1dff69bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79323beb-3556-4147-a7dd-fb482a5bc572",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a27939e-9995-46a6-8813-7c6f06046e55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f74dee-9ad1-4e5b-bd94-7a716cb93ddb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec6c6f5-de11-44be-b37b-07fab0266077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f71a7c29-f47c-4981-8d9d-8e8271afe265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49c48e7-2c1b-4662-8f12-e29c4a89ab4a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64431ce-a387-4025-8b31-3c4ea25559f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a76045dc-0eb1-446c-82fc-459f5e50de21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc41bdc0-89c7-46a2-a0a8-f4516de143a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77591028-4da9-4408-ad19-47b8fd097581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a2181b-b1eb-4376-8e3e-9c98b993f5b8",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9878cf02-0d9e-40db-9755-b08b9de63ec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b49bf3be-2e90-4844-b2e4-48e0ebdab91a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc18664b-f8e7-4635-b9e7-96b4d46bafc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f83fb23-d82c-4a9c-8eab-cb843e0b7b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70bba5ef-4131-4da4-a22d-1fcbc9795833",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb33e76-9e46-41c6-b938-de8a7ea01ccf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab30ccfc-63af-4071-8abb-d2fc00fb604d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16c3e6b-d275-4895-9d1b-a97437e9d728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da004cec-5dd7-43ab-bb16-9f7a6f991cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d1ac57-c5c7-4287-836e-c41034732bf9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124f6719-8b19-4c38-9e66-ec302ec0c92d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "859d6628-d452-4574-9fcd-811922f1f5da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e58adda-20af-4c33-a616-a150029ce622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d5d5d9f-debd-48cf-898b-94ef40c94389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30c975a-a4c7-41e0-b3c1-c0b2076251b5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f56a2a6-73a4-45f0-a4d0-4bb8110d0027",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d61c674d-ee02-4ee8-99c1-0b54aaa8197d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97cbd31f-a48a-40c7-bada-3f45eac6714a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca21319f-3df4-4d12-bdf2-c6d7449c0240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe6f689-15f9-467b-84ba-bf14731f020a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114e5958-a7a9-4707-8c77-cd8825ffd493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "013256f2-c0fc-4624-aedd-59fe8f9703c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e289c7-467c-4029-91e3-887925777300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82b292bb-2b71-45cd-befb-65463f77195b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783014fc-8820-417e-b228-afd6368bc016",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4912575a-3026-4662-a8ca-f4d159deaf59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf134dd7-5ad7-4f64-a065-09420cb2d104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de9d0d7-4cab-45c5-b91f-7bbac7ef9f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a89ea195-f35e-4758-8e48-d6d1ae174648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ceadd53-4fb4-4835-a613-b2abd30b5448",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4cc2eae-765d-43ed-bc95-9968dfc6efa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46531ff2-120d-4706-8a11-0adc1e25f501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0382b447-ceb2-4dc6-be60-b604057872f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d39e14ee-f575-414e-93e9-128e9e513845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26474887-5bb8-40c3-813f-21f5c66d8f78",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0de61d-5049-4ea5-9b86-68f21ec218c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e5ec120-1570-4f52-832a-28cf02b7bac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "820514dd-4099-4e1b-99a3-2c1b04609533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faaa5069-9b08-40a0-ade9-6b8dd96b969a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3023bf23-2be5-46d7-a782-5febf930044c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e37d7d-20d5-443c-82f6-67620ad6311f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5000ab03-4fb7-4f82-bd16-0b30bfdb0f61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "072d5fd1-fda9-4a1f-8361-439a7331c82a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c28aff8-915a-4604-88a6-9e6661c53f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff5afdb-59a6-40c9-aeaa-50a4b26c0e81",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd9600b-a2cf-46f4-b963-892e5a8d566a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47485376-0cd3-4966-8818-ac1113a9171c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbcaec47-ed83-49cb-a4b3-0532b851abfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55353fb8-ec0f-400e-ba10-e61469c3e966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523d31d1-a3dd-40ef-9ecf-b4567caf5665",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c201b2-0acc-4959-bc24-d453abad63d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c87ff710-065f-4069-b789-40e5271a49f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6efff9-61e7-479f-a853-4cbbe2612f65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1bb77fe-5215-48f1-b1dd-f65cd7f00c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02303bbd-1e87-491c-ae0b-20a08be532a9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c78517c-d5ab-4104-9738-08e6bee969e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b75b1127-8855-4acb-b2a5-67a6341dcdd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2adaf689-b28d-4c8e-a866-a14054cfc7b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854d3bf1-368a-4adc-af18-81a70d010fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69123c4a-5f39-4040-b01e-bc84cd946717",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a905e12b-94d6-4a1b-9021-f0dc36a0f705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4359cfcf-85a1-4319-819e-19b90ca9edc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f368ab-ba10-4a63-85f3-8757232cf8af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a65807b-ef85-417b-a1e6-feb264ae6b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ee0efe-e2e6-428f-931c-7deed3236278",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76dd49a7-6e43-4b42-a378-dda9cd517ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf027e9-25b0-490d-a1d1-47e01bdaa651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9dd006-634c-4e50-867d-1f80619dcf07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "163d81f6-f749-4235-a032-2719605334b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c80b2a-1545-4c92-893a-631d5cd7e29a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce17b3a-6eee-49e5-a644-8035b1250a84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "909ef4ec-527f-4f48-ab1b-2194899d80a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3125ef92-b4d6-434c-b09d-0916ee542c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd8474fd-a30a-4c52-af10-d51c9645ee6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49378ff0-c955-41b5-a57c-f9952f3381bd",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31087d04-003b-4e7b-b7cf-99cf88f89a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1372c004-7102-40c2-ad09-c1ac93808769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf2d54b5-1082-4af2-a48a-0a768e0ea785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad957a29-5296-4ab5-b58d-15a68a3e7a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8631af26-40c7-4ebb-973c-3d29fac9441d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3f176e-644e-4e37-af75-7ceeedf3da45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66726445-07d4-414d-a162-b46608e21c62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1afc6bd-0cdb-4461-ad83-eb01a76c0e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61ea9939-4cc3-4b6d-903b-07417e3ae1b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32b92d2-a467-4974-bd66-f783fcd44390",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5266f1e0-6eb3-42ff-b7d6-6f208157a4b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8bffe22-3aff-44ee-b8ce-5a303e679982"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed391e8-c470-4591-8ff5-8f5fd13e834f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "389cf257-f903-4a2a-872b-3b3fe81853c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193fee43-3282-40da-acdf-d6a088f4b8b4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee709ed-74f2-466a-9411-85e557bdd6e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df4da81-6251-419e-8039-8d0727e3647b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc55f44-08d1-431e-a424-a27f067041b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be9e537-db7a-40ef-9e87-b4b9b52f2669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c045ea-db3c-4023-a58f-bc3b3bad9943",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9058b8ce-5a30-4737-aeff-6f9b51a5ebad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67a8af20-62c0-473d-8c07-fc885a8dc1c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2cab25-07eb-4432-a01f-58a81695c4aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2e6555-6dd0-415c-881d-0dc6f3965c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a271389f-175f-4ac5-8b03-2a600360041c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c5f4fb-40c9-44e3-9eaf-afdd095c2cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53a4ff9a-da0b-4c53-8e77-6eb145a7de07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a381eee0-8327-4c0e-b09c-4298ea4ddb03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79bb8195-d089-44d8-a6a9-609d1c819690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319bf843-b110-4f40-bad0-4749dc5245f1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b25e6e-50c9-46b9-9a97-c26152cd168c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae29e653-1433-4937-a2db-98739925da28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdcee207-ec97-4457-af02-1813d4b0fbad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493214ef-e768-4919-87ed-f560bbf05e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d80e303-e91c-44f3-ac27-a813dea6ba6d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b510327a-3887-469a-9079-69e544e2f357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5296c52-bf20-48e9-b707-841c0f8a7885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5d43da-b496-45ad-983b-d192fede7a72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055861e7-96de-492b-916b-29c3087b9360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e59960-4c27-4cf3-82b6-3238b62fe20e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3def3baf-1e93-4f20-bbcf-c1455e6d9c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d736ef34-1765-4d2a-9b57-40f7e56c081a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2edf81-ed2d-4814-be98-57b24a42dcfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "558e48d1-a694-4e33-9a95-c5f6a14ced01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3d9b4d-6396-4a7f-85cc-afd4582cba1a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65200b2d-fbbd-4dc6-9241-3dd680d3b50c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c9f9f5c-a907-40a6-ada2-e678f333fde1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5fe053-2139-4294-8f5d-db5a6ac59634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f009ecca-ee1e-478a-a29b-ac140ae00aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f461c0-df48-4a70-b99e-301d8e585009",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e34a90-b929-40b4-95d5-26061a840712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86811107-bed5-4b23-bdf9-317885b7e93c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fd7530-feec-4ff6-8c9c-5bdc43a4a1d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a80b544-cab0-4d9d-b561-11c62be69740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13af7097-1f2b-4634-8354-b93e0eb99a7a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d789be90-2d73-42e2-906b-16bf3e8d9980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe5f0cb7-8c6d-43aa-8fe4-cd6434eac12c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f0acd9-f75f-4b42-8f88-4a292e5a4f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e2d2d9-adb6-4386-b01a-57134770d4da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c06ccef-a0d4-4310-a0da-cfe27f55aefa",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a35659-6663-49be-8386-b4aaf05b6f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1415fc6a-f827-4bbb-b6a0-a30fe86eb1b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7279091-5f02-4ab6-9923-9dde38377a38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb5b0f13-52ea-41bf-867e-45414e4ee3c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9951a7-5619-45e7-ae7c-4be3aa4a0f3b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a210b929-6d69-4be4-8174-c0bc0f0fa11c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7adfaa80-6a85-4557-94d7-b5110c80a9f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9181d9-baff-4f87-8548-99ca96b9ab6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce555e2-3ded-4892-92e4-71b3c745e003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0277f5-33dd-4b13-b642-54f28b56b54f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec883bf-dc25-40fc-a391-e259923c825c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a56d2a6d-4f34-4838-ba7f-3b322a4f003b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba1ffe3-bd44-411c-8a54-72568e0eba3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e58791-fec9-4458-86c9-3099d6821ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e630d9-3d84-48fd-9598-0ac36e536d0d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6340583-f667-43a8-99ec-638a8a328353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc1adab-cddf-4076-880f-e4e6d03eaaa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4ecd12-8b47-4782-a81b-9e75381ced79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2bdc9dc-6f76-4193-8c64-2945980a653a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ddddce-b318-4a0f-ba31-ebf69bcb59d0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997701f1-db47-4c94-aa1f-c9b9c7ceec52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e256dd-974a-4fc8-b328-5f59935f107e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c21717-7c2d-4b10-8058-e2691911c99a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c076eb-ea9a-4725-a94d-b47faf1ec53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66d62ef-5171-43cc-8d17-af5d5fdb36d8",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a20e6bf-6da9-4055-ab0a-9821b0c02fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e077745-e5f2-4813-8265-0fb7218c5c30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a8a89f-23c8-4068-b54a-33b75c8144b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50d0fcb7-282e-4261-b8bc-3338698691d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce63eb0a-a7f3-4570-b1b0-25abfcbed300",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b0b3ac-8006-4a83-bf78-c1a2abb2601a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad8cd38-3f3a-4793-9597-0efd6702107e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1b0e93-9582-4f92-a924-e8d43905d281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cba346b-3b89-4684-ac1d-140df5c577fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3502dd60-02e3-46ca-a328-fca304f421e3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fddbd1-5237-4f5a-beba-bb1c9fed1fb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad557a33-b949-4308-80eb-d9aafb3041a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3866c047-845a-4f3b-a533-58e5770d72ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f193912-0aa4-477d-88d6-e361b04f7436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579fad56-cfa9-4ea9-9ba4-b24b84a7c123",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f234caa-8f78-4e2b-9d19-b88305666638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f80f141d-e545-4308-a404-66a71f6e9f5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df87b991-cf0d-4c68-b91b-f17956359af3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "024a6727-d7cf-45b9-8b01-b769192f11f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0faa6fe-6415-45ae-a5a9-54edb866c9e4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fa8469-51d6-43b2-b667-06c194a61820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba699b42-6531-4865-8794-f8477565cdd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "600f86fe-ccee-4088-9ac6-ce4b2a5a560f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b29c53a-1479-48fb-95ce-9ec30a8c0ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27208b8-b3dd-42df-9cb4-ae88abebaaf9",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4bc76e2-9904-457f-9891-748a9d384202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91ffd35d-1dc7-4bc0-8802-5c5d1a738c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c49821-8a67-4f96-a10a-86292ed6737f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d36f41d-dcf0-4883-96d8-14def17a32e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "413827b6-1ab1-43aa-a1c3-bb55ed165301",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9537a3a-bbdc-459e-89b5-f6504bc9e1ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7198cf7-415f-472f-9713-d95ea354ef4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb7bee8-2a5e-47e4-9b86-193a9a143d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf8186f3-7ffb-4748-9d4d-3e2457387bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77b6c0c-2873-40bc-918c-7e0802ca51a9",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169c93d2-2c81-40a4-bd84-1b39cdfc9f90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d524d2-1358-4644-b6aa-498d29a24a5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "787ce3d0-acb8-4272-bfd6-0c389efd80c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862d34fc-912d-4c7f-8cf0-6f8dc4422d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "533f49c4-6837-4683-bb37-f88f1c0a4bfc",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431022d8-451e-47ef-9407-048e30f4c09b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c125655-2533-4d97-9d83-cafb73d39ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77adab27-6746-4418-952c-3d50adea0d0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd83ab8-90ef-41fd-b772-11fdd1a33432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed923d0-1aaa-4d0e-a830-24097770c0b7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98165442-de13-44a9-98e2-4bfc2bd9e497",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "359a4ae8-afca-4fcd-8fee-2044883e71af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86885d2a-20f9-4042-9e6b-0e9f9b70dfbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c71a70c6-39bc-4b06-b3a2-bf3316b282e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8504b1-6135-48ae-871b-8ce843c56f8d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc424fb7-1692-4921-9671-30dac3594faa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd543139-f1bc-49c1-8ecb-364bae97c53b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d738891f-ca3e-4581-be74-780ee942b805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebc273b8-107f-49ce-8ddd-be9b2e73612e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02330e4a-dc9e-4c3b-9783-64c896854cce",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b480122-bd05-44ee-b9db-ea22126e2160",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e8c2492-93aa-4fb1-bba4-0bb16689a5f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80950cb6-2229-4ce4-b70a-0bd288fcef3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faf06eaa-b14c-420b-ab48-db9da4eb7bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7440b39e-3b55-4462-8208-c9f5f9186243",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b84a4c-bd01-42d9-9e61-4c6a9231ff87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "732af645-71d0-402e-b606-930274a58243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb86c7a-4e8c-4bb1-9194-17e91b74d1a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a529c177-2221-48e5-9664-cffe0085e2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307bcd85-0708-4c72-8434-4e8940454adb",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba1773a-1afb-4078-ba0f-07146b328c71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9037053e-f051-4425-97aa-2c2e2e6baceb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "052df54d-848e-4378-aa33-5666bcde23bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b82977-507e-4d23-a05e-c872b1dd288c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a9085a-5524-48c9-b879-04c1dbc098c0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379e564f-16dc-4128-9327-16c888cd3761",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5eb62619-8109-410c-bee4-7641938e9af1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2565521-aff4-43a8-9650-9ff6eae01ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e27c7cfe-d25b-43d4-84e1-f3867c4acd34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa23a7e-ca06-47dd-8f85-a38e68b4319c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a9954c-b12e-479c-8c0f-26fdf02c88d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6357d302-a5d7-486e-9de8-f4b54a7751c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c950ab-ae1a-4be6-9a9d-1c5a0ba3a233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f28d79-db6a-4454-aa2f-aa8b1304ea6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf2b809-6bff-4120-b446-bdcd5bab8cdc",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303de050-1084-4bd7-9369-0e7a30122f53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfe01eab-f601-4ef1-bbf6-5ec1c6bce362"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6ba67e-ddda-43be-a799-6782d2c23f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19dc05c-098c-4faf-b353-d7619a0fa71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348b3cfa-51cd-48dc-90c4-3fccb71a6a95",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5075e971-9e64-4e5e-933f-309b95c6e135",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cae96e5-9734-43e8-8527-13381031171c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de85f86f-467e-452f-a34e-c8e502392b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4733c87-3657-4c7c-a474-86b0660d8c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d40fae9-ff4b-43b4-9c50-1fb3d7a5dbdc",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65a2939-1b96-49d9-a07a-9bc8681a634e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e78f8a3-ee94-4e86-a6c6-bda847a08ee3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf25481-7c23-4599-83fa-50b481f7edd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0bdf5d0-47b6-4d89-9580-a3d69a33c0ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72443902-ab6a-4588-9a6e-2dc1e2b3d08e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15e1512-80ee-46ed-a55e-2d81f412c4d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bf00166-fe69-43d9-90e9-61cb3a8accf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "571792f5-de25-47c9-9186-12cc1ec84b8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b106bfcc-09d5-4c21-9595-8a674291c836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d42d61-1f0d-4d9b-bb5d-96f4086f01d7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ce4425-3ef9-40d2-8a99-702a3180ce02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7546cb4a-fe41-4535-919e-993a9e1452ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "968eb8e5-8edb-4626-92f6-194010b2976b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac5eddec-41c7-40e8-b38f-a1805ca30506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd065dcf-6fa1-4ce8-8edb-a6c0d72a7439",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c259b0e3-17b2-44af-b5cb-d3e7a284f593",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81c4e788-4ec2-4d3d-818a-b58b30bf0d0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cba1380-d2dd-4838-a561-54e51ae4cb63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a0a39a-ec4b-4a0c-a4f4-d38a4b047796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38b59d2-6e67-4f23-8850-ea5afd987467",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6971a7-08d7-4a7e-acbb-4793a87d3e6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0edb4bf1-0ef3-4c30-bf5d-778ca4ecf735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "712a6375-1c99-4992-ae5b-d68456737090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50447bb2-e567-4ddb-a36e-d9f86707cb93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b522dbc2-0835-4a12-b045-6cc1b560f14d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173e0286-7c14-4547-a7ab-28044e86dd25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d25153d-044b-4321-b74b-9eb2b7b21996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "285f7ffb-56b5-4dc9-805d-1930ff8d0b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4667b750-640a-4911-bf2d-b47cffe43b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b49fbb-fe48-4e4d-bf3c-e8c2fef3b607",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0dcdd0-42f9-4766-b527-c45ff9eea092",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6796729e-bd3c-4062-8fe2-83353b6f6074"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "734f605f-7eca-4d7d-9a2b-2ec0a553f4fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ec62594-7b0b-44aa-8eae-f7850dc33238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d5d8863-b5e8-4d8d-abc2-8de059b303f1",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7b3afd-a4a0-4225-93d3-4d004eede24a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3c4066b-ee1a-4f7f-bd5f-9254a86bd8dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "155c6982-6513-4baf-a46a-8c283ea9c23f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2b6e24e-ba1d-41cc-a8d1-80e26a8be70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c204ea-8950-495c-928d-dab67c666cff",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061da3f0-fbb7-49a7-a800-a5c4d1a9e388",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a454dda-9115-448a-b802-fe36a4b94fdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0aa6914-7a34-41b2-bbdc-8f0f1cab89b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dbc96da-ac32-4ecf-aab1-5287b023fcbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d297e3ab-1ece-4cc7-9608-b476cf46be30",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083ac8e6-6fbf-49a8-8115-e0534dfbba44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05811704-3ada-47bc-8da7-411ef4b2cfbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98e7cdb-839d-4aad-9ced-a29aeb5ddc04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a81c13f-5716-414f-8856-34893fa3ee0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66868f14-25f6-4bdf-bb7c-483ad2fd2adc",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1887fd-d836-4699-9d73-85b874739bf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32ba7d5e-12de-447c-ba9e-e2f880631e24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1947473e-d0e0-4ede-9721-f302d11ff79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2977fb67-31fb-43b7-9859-25278bc11ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7633d412-f10d-4393-bb43-a909b3dbdce5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d09a69-097e-496b-ae28-8f45be95b6bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ceb7b99-76f0-4ee9-96a6-58bc26820cc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac1a3e5-4875-4099-a8fe-eef6074fe84e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2337fa76-5917-48f5-b66e-14f744f4f419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb99773e-fc24-4f37-9d60-1116b247d772",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e676ba1-65ff-4b13-bf3e-9c844b157f83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b18cb252-5e16-4d63-80d7-187ff324e588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df4ed62-c5eb-4f16-b3f7-8427f00eef37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9d5fb32-94e2-4fdb-b242-72521c48a709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800ae2b8-8825-47b8-a197-44fc9a4d8b59",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009f7910-9c6a-4bcf-b5e1-abe021887218",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "975e9660-c5d6-47e9-aac9-619f1e92c798"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80efe3fa-7f84-4196-af37-59f1e51f69fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b197fb15-4fbe-45cc-b124-88dc0a11984b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d22e9ec-9782-42b7-985f-502495720f7b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679b9d3f-97dc-4f8f-bbf7-bf9ffa996e8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38e4b391-28e7-45ac-99c8-85ba45baeef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ccc0fe-7f7c-431a-8c2a-e8fb6ad9ec19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e529e17f-f08b-48f8-ac2a-67f8ecffcb1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4600bdc8-a9dd-484b-a30b-9a3327dd8921",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195bbe56-0423-4fc0-a5ae-3e8a13d6c4cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eafcb9c-e94e-42db-85c2-6f8da3e71bb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b1cb35-3a25-4890-a7ef-8cc7e1e13ede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebcceae5-d840-4582-abd5-56e8023bf1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31072d02-8f2b-4aeb-b836-954478ff5d80",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe6f417-ee50-4825-82e8-05387eb41729",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "952d2689-1e0f-4f6a-844a-09af4a72c745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4ddc5f-2a46-4c02-bfd4-8665dd36d90d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "697a06f0-7e40-42be-a426-b0724c471838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d783cbe4-c35b-43ac-b7e1-4e29ad365430",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fdce91b-4191-42da-99c9-1aee38aa536b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0608822b-3e32-4ffa-8c8d-eed176280297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e09b34-28e8-47e2-819a-0110ba453be0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a08569-d318-4c85-9baa-69d83af7945f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7dec9af-aec9-4842-993c-f5a04ab91a62",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7f76dc-0451-4840-b700-79b6a1bb1360",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e80716f1-b930-4899-8473-4d6a42138fb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60aec80-7b04-4480-9e1c-cedba1de6fa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0297b9d2-0168-4ed0-bd8e-5d49028b5020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758df883-3977-41f0-9589-3bb6464174dc",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4a7258-939a-4ee0-bb9b-0364af185b15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da270240-5b57-46e5-966b-1748040aa34f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "853f9766-5bba-4138-9d19-1066bbfcebf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b5f20b9-9bff-4b22-addf-081a51042e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391a4e49-460c-4b75-b33a-b84b5869a56d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb316c1-183d-4ee4-a279-19d73049488a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc56d84f-a04d-4c15-abf6-ef5cdae7ec29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1cd8f31-67b4-404c-9edd-996b0c247a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac1689df-253f-48a6-9c1a-f47720eedd15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae47b63b-c930-44ed-9284-15ea4aa149c7",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf86eeb-435b-4155-a32b-215c7b9cb127",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e0109ea-c553-4181-8a1b-2a565e738019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25fea4f7-731c-4dce-a39b-ed60d4eec80f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1f2723-eab1-4942-ae63-6e40f13ab015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f41775-bf24-4434-b64e-0a888052c42e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c4c246-70a5-41d0-ba52-c7adc7b3b3f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92788354-c959-4440-92fa-43eaa9db2587"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f45327-d7bd-44a0-84d4-b2b606467e23",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10f041d4-91fd-41ca-91f5-0caad38e8cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a2934a-a14d-49a3-afb9-497ae48e8383",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812f4f39-faf6-497c-89a9-3180aec3c431",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f887a7ac-a178-48a0-a762-5fd63de1e8e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1398c1d0-aa7b-4f6a-ae21-4cc922f71d21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2980e2b3-b58c-4fb6-940d-c32efa012b4b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5924cc4-a93e-47a2-838f-fca0af9a864a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f670d8ad-43ac-47dc-b2df-a324929847ba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d47b2ac-1b88-45d3-a5fc-5a22d705ba08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "df2e0057-6369-4914-99f0-ece27feed354"
                    }
                  }
                ]
              },
              {
                "id": "74eae806-baae-4a32-8eb5-6c5ad1b321ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe740686-10cc-4912-9b1d-c36d556080bb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4aa81ea-12dc-4f50-9093-8cf5dbbac71f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2b87afc1-bbf5-4c97-a374-42d2318e2501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a71bbc-d1f6-47c6-9669-a3dc6b09cfa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2bff0b23-81b6-4a04-9994-35dd3ee9e349"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0147471b-b1b9-4e2a-bcb1-efd3268355c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61aae0aa-7f8d-49e2-b19d-60d05ee6fbf7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c98fb83-8b01-4865-aa4b-7c62c45e5bb8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1299ce7-c082-4c50-8a87-d016b3ea0b3c"
                    }
                  }
                ]
              },
              {
                "id": "c8956531-09ea-4dfd-b17c-09ac9396d615",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "04c22de7-f9be-4bf3-b244-40c60199c9a2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "098d4a8e-481e-4afa-bd00-2b7aa9fc56e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a4e21882-c8e9-48f1-aa70-f6f9d6411652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb924ea0-9cf9-4b3f-b169-0e880dc25685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce6b3003-59f1-4850-a27c-a1794519bbd1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a672d14c-cd7c-4671-abbc-4e2bd1790b92",
            "name": "Positive Testing",
            "item": [
              {
                "id": "45ed359d-5f95-48e8-8b49-d1df92c4a911",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27a06538-06c0-4503-b0ae-d68e8c9e16a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "231c5101-2f0b-403d-93aa-764baffe148f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1115ff04-6cab-45bd-853c-31f6af07d5de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d041e61-7cfb-45a2-9a64-a842a50be9fb"
                    }
                  }
                ]
              },
              {
                "id": "206eab37-4ed1-4817-a9b9-cd5d8b444b85",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55fb7a7d-db93-4dff-9522-7befd927d852",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "778a1d99-0242-43d5-9e67-de9c1d3adc73"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c607af5-9938-4e77-890e-bb429e2408f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b15c3fc-8011-476c-9f44-f43027d2ecdb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "959ecca7-e406-47d9-aef1-286cb867090e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6f5d95b3-f3f3-487f-8a06-ff8674544450"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d98703c-f22e-440b-9a43-be30041c9892",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "02cf1b23-5978-4455-ad44-093b59e56baf"
            }
          }
        ]
      },
      {
        "id": "734167a2-2502-4eb9-8dff-4e34ba9e03f9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0aee2191-429e-4702-a190-4063e283e182",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b15b911-5f4c-4f5d-959e-4350d2e7ada4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4719f74-d62f-4498-9490-bfa56dce67dc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f40a72e-2777-470b-a461-0d670d73b742",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "46c580ff-28b0-4d43-bf9c-29ffb9afb564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96687904-2b4c-4c0e-a42d-41b65f6028ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2e8f446-2ad9-4331-9cf5-9ded1c77cf59"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d94b015-06b2-4147-8ce7-36dae6186d0e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5542faee-1f88-454f-a5ae-81473a1e8771"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8b763f6-6f93-4457-9924-fa1ff077c3f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79500a00-abd3-4d77-9df2-058951247179"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55278f2b-0df2-488f-be0f-4941752c71d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6084e625-ed1d-42e7-948b-42d8b1dcf8e8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f931334-64d0-4dc8-a990-9be1b351a1ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e3108690-6ac0-4cf3-9b7a-02e85673288e"
            }
          }
        ]
      },
      {
        "id": "0be9d6dc-1cc0-40f1-96c0-0e9687774ebc",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6bda4e24-da36-4543-ba48-fe223569053f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "829c9441-20f4-48ae-9ae1-3264b3078a7c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1d79f67-a7a6-43fe-8525-4af065e01519",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17bd5e14-9c20-4d56-b4ad-1035417123a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7706570f-556b-48a1-9495-981f29475d4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0fa66a-0c08-40e6-a846-cdc2b8021c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f79a195-7fd2-4632-9631-e9fb4244e2ce"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf0b55a9-7727-4c35-8e40-26449c75e1af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "251ac4c2-2c11-406a-a816-bd65b6de3c43"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "48b9b848-f656-4858-b04f-f0c7941a033a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8065388e-c57d-4720-b43a-93de64586ae3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2963791e-922f-4eb0-97d9-d6ebb783907d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "03514e8c-3080-4071-bd1c-545abc558261"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50108dea-027f-404b-b0f7-c64dd54d1f8e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b4a9424f-292b-40f3-a418-f2a2e43fcd6f"
            }
          }
        ]
      },
      {
        "id": "b88aad49-c664-462f-9473-01bd3f3e2f64",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3f596fa2-1bf8-4dab-97b6-c8e521736820",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6855dc1c-ec46-4b92-b9a9-928a3ad4c3db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d6177ba5-3ef4-4a64-9cb3-0fd38091451c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a1db72-a0df-41bd-abd3-9814c4abb7ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08a6bf18-f8e0-4670-a698-4d279611baae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f65e9a3-2b53-4808-87bd-7d1328776fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d974d37-cab0-48a0-946f-26edccf7a1cb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80dd4b3e-e334-4e07-87f7-97f531ae087b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "494b6f59-3144-4400-b983-dbe130950b6d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa05b226-23b9-4d13-b5ea-136ad71344aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1384c4d8-1cd8-44a3-99fa-b43edcb54d4f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d3ff48cd-ffd9-4451-8ad0-a3b8d3800acf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "27764ad8-4ac6-490c-8b76-1fcf0f4a537c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7bfbad4-f369-4a8b-a2c8-bc3e4dddb7d6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8787983a-73d5-4a12-aeda-f36227b46fce"
            }
          }
        ]
      },
      {
        "id": "de5fe63c-5020-49fc-81cc-83abc0c64d89",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d5e33f0-265c-427a-986e-fd1bb41be290",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "53f4289c-3e41-4576-a055-a8803bdbe402",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b2d43790-e1b4-4e2b-81b2-ca8c86b9360b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4aaff172-9a3b-470e-9418-e9de94d998bf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8d5cfeb-7031-48d7-ba0e-64313649a639",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 100.17894736842102,
      "responseMin": 21,
      "responseMax": 647,
      "responseSd": 72.29224009421306,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1704760605798,
      "completed": 1704760643823
    },
    "executions": [
      {
        "id": "d24b09f5-bec4-4c86-bac6-0b683ac4e854",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9cdc7b5e-1bf7-4771-81d7-ab1f8d52955d",
          "httpRequestId": "a3a9ed82-ec89-4965-827f-2423303ada4b"
        },
        "item": {
          "id": "d24b09f5-bec4-4c86-bac6-0b683ac4e854",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d1191ce0-9583-437f-bb6c-9bd6afcc9778",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 0
        }
      },
      {
        "id": "482e073c-d170-4b5f-88d6-619f8fe4a536",
        "cursor": {
          "ref": "a046e21a-d8ee-4e46-bb60-1bf672be5703",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3b220336-daba-4fc0-af47-530b4a18c917"
        },
        "item": {
          "id": "482e073c-d170-4b5f-88d6-619f8fe4a536",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "fd7c25bf-741e-4a2b-99c2-3a7a4281592d",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "86db186e-0fcc-425e-804d-3c81731dccc3",
        "cursor": {
          "ref": "8d2319b8-4c7a-4c37-b0e6-68554e2b1eca",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "dde4e1e1-b1d6-48ae-9327-303ae0b90629"
        },
        "item": {
          "id": "86db186e-0fcc-425e-804d-3c81731dccc3",
          "name": "did_json"
        },
        "response": {
          "id": "6c98bfa7-7db5-403f-8192-518065dec0aa",
          "status": "OK",
          "code": 200,
          "responseTime": 397,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd47a2c8-0344-4861-b35c-58f871932545",
        "cursor": {
          "ref": "31197710-b1b7-4258-9ef2-c54f00b7a6f1",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "22a01d89-e7a3-44dd-a6f3-f2388c54ae81"
        },
        "item": {
          "id": "cd47a2c8-0344-4861-b35c-58f871932545",
          "name": "did:invalid"
        },
        "response": {
          "id": "dc3fa83d-297d-48d4-b07a-52900c3d6e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd47a2c8-0344-4861-b35c-58f871932545",
        "cursor": {
          "ref": "31197710-b1b7-4258-9ef2-c54f00b7a6f1",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "22a01d89-e7a3-44dd-a6f3-f2388c54ae81"
        },
        "item": {
          "id": "cd47a2c8-0344-4861-b35c-58f871932545",
          "name": "did:invalid"
        },
        "response": {
          "id": "dc3fa83d-297d-48d4-b07a-52900c3d6e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b738a0-26f7-476a-ad17-65d580581462",
        "cursor": {
          "ref": "f4fb558f-0bf2-48cb-9fc7-5de83bc312ae",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "61110577-2085-4a1e-a276-e01c3af510cb"
        },
        "item": {
          "id": "17b738a0-26f7-476a-ad17-65d580581462",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a90141a0-5ebc-4406-be84-62fb9e96f0f7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 128,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71aca810-6999-48ba-8245-06afac956b59",
        "cursor": {
          "ref": "ad5d6540-bb36-4377-a125-3966d112c5a2",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "23d7d675-32b7-4135-b43e-2b3fb6780914"
        },
        "item": {
          "id": "71aca810-6999-48ba-8245-06afac956b59",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c560581d-492c-4b67-b781-3db09f4be123",
          "status": "Not Found",
          "code": 404,
          "responseTime": 86,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8693324-ffd9-41ef-b431-bf7a23f3a624",
        "cursor": {
          "ref": "b1da44d1-8fa5-42c3-b2d4-ea2cc3eda5fa",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "19fb2512-6f69-4e9f-a473-cb93cf7eb0b8"
        },
        "item": {
          "id": "c8693324-ffd9-41ef-b431-bf7a23f3a624",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8178da93-9e3c-4b2e-a057-646c60e134e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3f05b4-f710-492c-981a-113c79a8659e",
        "cursor": {
          "ref": "308ba79f-e640-424a-872d-dfa707d3c2bc",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4ff504b3-1f45-4b91-a446-b4c475965fbb"
        },
        "item": {
          "id": "ad3f05b4-f710-492c-981a-113c79a8659e",
          "name": "identifiers"
        },
        "response": {
          "id": "6c05b9c4-5647-45ba-bfb3-05dcda8be081",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b28d4be-d757-4795-843c-75320b7b6ff7",
        "cursor": {
          "ref": "f23a0f08-20fb-4702-a347-3de400a817a3",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3cbdda02-8434-43f0-8c90-dfac93379562"
        },
        "item": {
          "id": "7b28d4be-d757-4795-843c-75320b7b6ff7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3a40c24f-3d21-448d-95da-45077a185a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ea7e2e-0062-41f5-918c-2c128220eb7b",
        "cursor": {
          "ref": "9d72091b-3e23-4303-9919-6f7da611ea0f",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d3710b61-b817-4515-aa71-4e458bec195a"
        },
        "item": {
          "id": "76ea7e2e-0062-41f5-918c-2c128220eb7b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bdcd8e7e-4ee4-48f8-bba3-b34aebd13964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f043114e-6602-4c49-aa32-668f53a8b733",
        "cursor": {
          "ref": "c8263d9a-3933-4caa-9f77-f0d9cac8d16f",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "aeb9c506-73e7-40c5-b341-f09a8cb5d72d"
        },
        "item": {
          "id": "f043114e-6602-4c49-aa32-668f53a8b733",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8977739e-2193-4e9a-9a01-ca41f90b321b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132f66be-3c20-408d-98fc-3f6cbe676226",
        "cursor": {
          "ref": "0ace0ea2-2558-48d0-b8fd-5187c7daf655",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0a252d40-8fbb-4f45-a391-876e17166449"
        },
        "item": {
          "id": "132f66be-3c20-408d-98fc-3f6cbe676226",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e1657e67-fd16-440d-9b41-fae5fb1da243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f6f8ce-e5ef-4f70-a7d5-b475dd525630",
        "cursor": {
          "ref": "df70e6ff-9e24-4b66-b246-e363f9fed1cf",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6fd6b257-4689-4041-ac20-019224d04971"
        },
        "item": {
          "id": "69f6f8ce-e5ef-4f70-a7d5-b475dd525630",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "dd88a498-9298-4213-9b5d-25fbde90ac41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd9f24c-99b4-4492-afdd-2dc084134e23",
        "cursor": {
          "ref": "961b2df8-d5af-4c2f-9592-7103dd896775",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "68a81a9f-20f6-4624-bc60-5dc56564ecd0"
        },
        "item": {
          "id": "abd9f24c-99b4-4492-afdd-2dc084134e23",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "08202be2-8c7e-45a9-9bc9-9c8202da3184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2734effd-cb04-457a-ba44-1b6cd583a7ab",
        "cursor": {
          "ref": "5e1c55a9-6347-4ead-9ec3-4f9ec966f01a",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7d295644-26c8-4b60-8d15-2cd2e18e4cc6"
        },
        "item": {
          "id": "2734effd-cb04-457a-ba44-1b6cd583a7ab",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f5919ea7-302d-44f1-ae80-9a4fd6968c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c62507-59c3-45da-a9bf-97ad158506c1",
        "cursor": {
          "ref": "4276b440-2f00-4781-be9b-322dea8ca5bc",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "10b56c93-1d90-40ee-a510-5c133b7dc2be"
        },
        "item": {
          "id": "e4c62507-59c3-45da-a9bf-97ad158506c1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e5098414-b439-4ac6-b4f8-6cc5072a3ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1653e1df-4688-4aab-a84d-be62dbe6b86a",
        "cursor": {
          "ref": "27a20277-a1d3-4663-ba50-04da2f94345c",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5287dec5-9e5c-4a22-beb5-404648fe247f"
        },
        "item": {
          "id": "1653e1df-4688-4aab-a84d-be62dbe6b86a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c03ca110-54f6-40f7-a14b-7b1ce58dce2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7fea46-5f5b-40f9-8671-71c7a0ac999f",
        "cursor": {
          "ref": "5386fecd-bf79-41f4-a56b-2878c913f26c",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a20f4f9e-716b-48d0-9116-0861c3f7d8ff"
        },
        "item": {
          "id": "6a7fea46-5f5b-40f9-8671-71c7a0ac999f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "50ec18ab-271e-4ece-9436-db418464ccef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a13c5f-d38e-4cb1-9437-fca12b726fba",
        "cursor": {
          "ref": "c24e44f4-9cdf-44e7-9d25-0d9eb6925cca",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "efcb69f8-9c1e-4692-9798-b80555ad52e1"
        },
        "item": {
          "id": "48a13c5f-d38e-4cb1-9437-fca12b726fba",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8a46f019-3a1c-4607-8d2e-e43486a4845b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3167e614-56bd-462c-aa57-fded5d484bc0",
        "cursor": {
          "ref": "dd129f98-473d-4b61-adb1-b35e32e9385a",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "39d49791-d654-4e4d-ad33-76ed9c92aebf"
        },
        "item": {
          "id": "3167e614-56bd-462c-aa57-fded5d484bc0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "dde89d84-6dc8-4b0c-82d4-8a8cc1db39a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d30d18-0dd1-4ec7-9881-633b0ee7f4f0",
        "cursor": {
          "ref": "c7773a4a-fefa-4917-a228-9d93fc882a96",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1f311d6d-e984-4a0d-b61a-6f3786edbb4d"
        },
        "item": {
          "id": "66d30d18-0dd1-4ec7-9881-633b0ee7f4f0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "85c44ebf-d6f6-456b-bbe5-e81af451d72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb5f2c98-3b2a-4c53-ae43-72b179f7d197",
        "cursor": {
          "ref": "a6069539-ddcc-4dd4-abf8-0590c5db62e2",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8a9e360b-b16a-4ee7-9c6a-8e2b9283e306"
        },
        "item": {
          "id": "cb5f2c98-3b2a-4c53-ae43-72b179f7d197",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ca2df5c3-60c6-488c-bc2e-67229ea9b89b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355ca04a-8e03-40ea-af9c-f75c3fe62e74",
        "cursor": {
          "ref": "cf59d8a1-bafb-4fc9-b0f5-e80cd58b0f3a",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f5fb9549-7f65-4496-a383-503019aa0a3b"
        },
        "item": {
          "id": "355ca04a-8e03-40ea-af9c-f75c3fe62e74",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d1aef6b4-33e3-4fc7-ad93-9ad710e06ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b971e53-469f-4dec-9576-387be46239a3",
        "cursor": {
          "ref": "4341c7b7-7565-4ec6-94d7-e63acfc34448",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1e4df620-f29a-49ed-b00f-c8d8b08775f9"
        },
        "item": {
          "id": "7b971e53-469f-4dec-9576-387be46239a3",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "cec18ccd-8540-415d-97cd-a7ec47dfa8c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed52fab-ea8a-47a3-991f-882475c03f6b",
        "cursor": {
          "ref": "957c9c6a-fc03-4052-b8d3-610207a41811",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "656ae17e-1d25-4efe-b41c-f68d0f21057d"
        },
        "item": {
          "id": "aed52fab-ea8a-47a3-991f-882475c03f6b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "aacc2cda-adb6-4695-9398-1a8d4ccd2661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881add8c-9a1b-486c-b227-d4b7e26c241d",
        "cursor": {
          "ref": "ebd32572-eb39-4382-a476-4742b0844e74",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "16da9f3d-af99-411c-8785-711835c1ec50"
        },
        "item": {
          "id": "881add8c-9a1b-486c-b227-d4b7e26c241d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8d3de6ec-19fb-410e-b7df-26acbe9dcac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e7bbdd2-4180-4609-a99a-899adb420f68",
        "cursor": {
          "ref": "ff91dec2-c2f9-4538-b081-a51124d4f836",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0d1eb8dd-beaa-4b63-b4d1-1af1b53cbc99"
        },
        "item": {
          "id": "1e7bbdd2-4180-4609-a99a-899adb420f68",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ad3f6c2f-3f28-4f41-b63a-7c5b1a7940bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5474edc-f22c-4d73-95f7-b006fe3a77c5",
        "cursor": {
          "ref": "8b2f7ac3-59b9-406f-9245-35fed3d7dd75",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b02cf721-bf46-4665-9986-6b9d602df437"
        },
        "item": {
          "id": "b5474edc-f22c-4d73-95f7-b006fe3a77c5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "84aba5c1-9a8a-4653-8a76-0e6ad1ac5548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd7f474-83f8-497a-b1d9-93589a13ca6d",
        "cursor": {
          "ref": "df542696-7d82-4945-bb53-220826c23849",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d8994e80-5715-4ba2-955e-b6bde7e5ebd8"
        },
        "item": {
          "id": "9cd7f474-83f8-497a-b1d9-93589a13ca6d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "39f9f569-f20e-4186-9b77-5e817b6aff67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc60a43-dfbc-49b0-b980-b0e20be65966",
        "cursor": {
          "ref": "b7d396a5-199b-4735-89d8-7ac716597dcd",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c0e96737-3e7e-4d73-a633-7ac167d08be3"
        },
        "item": {
          "id": "ecc60a43-dfbc-49b0-b980-b0e20be65966",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f95a5fc6-b312-4430-b704-7b111db86c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080f0745-e154-4283-b14e-0001a965618f",
        "cursor": {
          "ref": "855ae5a9-68ce-484e-bdea-9728da2ff370",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f2d6d9b9-6eb1-4a85-85ce-baec8f59d657"
        },
        "item": {
          "id": "080f0745-e154-4283-b14e-0001a965618f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7407af20-e39d-44a0-99d3-4a83a62b9e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd908d1-c162-4381-ba2a-3d4e31bb2b91",
        "cursor": {
          "ref": "ebb49f61-4a1a-405e-bb38-900384194069",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "aa4bd07f-918b-4daf-872b-313ee723a90d"
        },
        "item": {
          "id": "2cd908d1-c162-4381-ba2a-3d4e31bb2b91",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9760e82d-df0a-40d9-af5e-383aa6adec43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6015ed22-ae45-4957-9790-68ae134e26c5",
        "cursor": {
          "ref": "6e759207-5e34-40e3-bbc4-29b66fe7cf9c",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7b9770d4-bdf7-4504-8ae2-d860bab598e2"
        },
        "item": {
          "id": "6015ed22-ae45-4957-9790-68ae134e26c5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b1bb809c-16ba-4861-acd7-754dee71c442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad2b61f-7d1f-42b5-9424-c6e6eb48ae30",
        "cursor": {
          "ref": "74711551-3ff4-44e3-a34f-b210534c857f",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "54449c8a-fc57-4005-94ae-39a6f4d653ec"
        },
        "item": {
          "id": "dad2b61f-7d1f-42b5-9424-c6e6eb48ae30",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "70483a45-0782-4fc6-8b82-bacdc689c906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3aa8b51-b655-44c1-a8f2-b9e1af786790",
        "cursor": {
          "ref": "f90485d3-b214-4698-a52c-55d0df82c290",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "30222582-7774-439f-b476-0975182b5a34"
        },
        "item": {
          "id": "b3aa8b51-b655-44c1-a8f2-b9e1af786790",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "90c585dd-bb37-4f0e-8a0a-62c346cbe12f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c5f3e0-2341-4bdf-9c07-717f2bfb225f",
        "cursor": {
          "ref": "c22b8792-59cb-40d4-b050-3df8ee3e58e7",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3d170750-cc51-4bf4-a5cf-5cf5b597af2f"
        },
        "item": {
          "id": "90c5f3e0-2341-4bdf-9c07-717f2bfb225f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "512a0497-44ea-485a-be48-8d01f932fa0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c63fa982-a339-493b-89da-40910a4262a0",
        "cursor": {
          "ref": "0ffb740e-dcd4-4f2a-bd0b-a020eaf35b43",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a6ab5108-a7b5-405c-b0db-6e525b546e1c"
        },
        "item": {
          "id": "c63fa982-a339-493b-89da-40910a4262a0",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4bef9949-edc2-4362-aaa2-7ef73a18987e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f982ee-d1df-45e7-8d27-7ecce563a38f",
        "cursor": {
          "ref": "dcd90639-e5d6-485b-82e9-ec0f0429ab1e",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "41ead0a5-9097-4111-b6ec-247fae562d5f"
        },
        "item": {
          "id": "d7f982ee-d1df-45e7-8d27-7ecce563a38f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a6a97b42-041a-4a6b-9726-378cecd4aefd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fff10fa-d237-4d23-bb77-35d655021143",
        "cursor": {
          "ref": "22fe755e-57ad-4f7e-8f28-b5a5856eb953",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1e467dea-81f5-496b-ac66-f2ab877e8215"
        },
        "item": {
          "id": "7fff10fa-d237-4d23-bb77-35d655021143",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "86f35170-edea-493f-90ae-0f46a6050594",
          "status": "Created",
          "code": 201,
          "responseTime": 647,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fcc6df3f-1f37-4415-9fd6-10b6e6ed2558",
        "cursor": {
          "ref": "30848baa-8934-4a47-9edd-571a868d45e0",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e9faa608-4d8c-4ae1-ac01-7b642db66749"
        },
        "item": {
          "id": "fcc6df3f-1f37-4415-9fd6-10b6e6ed2558",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b31786e4-58e2-40a6-8346-707d0dab3210",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "8b89f0d6-355e-485b-95b5-bbc576078a91",
        "cursor": {
          "ref": "905b9097-dab3-4975-a87b-c4cee394800e",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1ca1d8ff-1496-4f2a-9f05-18905c8f48e1"
        },
        "item": {
          "id": "8b89f0d6-355e-485b-95b5-bbc576078a91",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "dccc1dbe-73b0-485f-8eb8-e48d707450d0",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ef8650f6-28d4-4c8a-809d-610194fb0d18",
        "cursor": {
          "ref": "0762496c-8ea4-4049-8924-aa5fc92a90ac",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8545e470-ddfb-4046-b951-3d2c18dd9b1c"
        },
        "item": {
          "id": "ef8650f6-28d4-4c8a-809d-610194fb0d18",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b24d6b1c-ab46-4da0-b4a3-645794c517a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b402619b-a698-423e-a9b2-d2f04136201f",
        "cursor": {
          "ref": "152a8f77-0105-4754-9266-d8ccdf235a5c",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "dbe88427-4573-4260-902e-2d32c5ac98f5"
        },
        "item": {
          "id": "b402619b-a698-423e-a9b2-d2f04136201f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "32dcca0e-e21d-483f-86a1-2c4d7220411b",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1504f2d7-f460-4e71-8408-986f53fa35dd",
        "cursor": {
          "ref": "1a94fd22-8b07-46c6-afd4-09b94b8b14f9",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "80d0c42c-47d5-45c2-813c-a6529dc84782"
        },
        "item": {
          "id": "1504f2d7-f460-4e71-8408-986f53fa35dd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f7968b0d-2d2e-45d8-93a7-09cf72ee7c96",
          "status": "Created",
          "code": 201,
          "responseTime": 420,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7236e8c7-ad1e-4662-8258-c17aea14e4e8",
        "cursor": {
          "ref": "bb9f34d7-1da1-4eee-b237-635bdc5437d5",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1eb22bd9-b11a-478a-997f-5e2d46e2ec2b"
        },
        "item": {
          "id": "7236e8c7-ad1e-4662-8258-c17aea14e4e8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "54597fda-f797-4e94-bf18-bff873ed4cec",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "dbcc3ffd-6fef-495e-86c7-58653af8295d",
        "cursor": {
          "ref": "88943c32-06d4-45b5-8b2e-28544ea6ed95",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "961e3415-3447-4d17-9ca6-bb67886a26bf"
        },
        "item": {
          "id": "dbcc3ffd-6fef-495e-86c7-58653af8295d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f4775ff2-80dd-4c2f-acbf-c90994d4f90c",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5c20a148-4b51-4af9-b25a-1dea65ba70fe",
        "cursor": {
          "ref": "5f4d4971-6785-4b9d-92ad-6e8e2e980179",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6c7097a6-1ac8-4363-bbe3-ca4d13651245"
        },
        "item": {
          "id": "5c20a148-4b51-4af9-b25a-1dea65ba70fe",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "86f6acc0-f628-4c82-848d-b22d52b5787a",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "07a08967-f04d-4a95-bc7c-c04ee6fc7316",
        "cursor": {
          "ref": "62e6edc1-774b-4f2b-a527-47e9f67eb653",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4d2410ee-722f-4dfa-a48b-cc487134a30c"
        },
        "item": {
          "id": "07a08967-f04d-4a95-bc7c-c04ee6fc7316",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1f5939a8-d15c-4621-84d4-163f7ce45002",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1a2ba9bd-178f-4010-89c7-a48c969f51da",
        "cursor": {
          "ref": "bc4aa03d-57e4-486e-9f65-37a56e7be7cc",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "59eb46cf-3a1e-4b88-a737-4a526218dd76"
        },
        "item": {
          "id": "1a2ba9bd-178f-4010-89c7-a48c969f51da",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ed8a1f2b-1c6b-448c-86aa-b2740ef52125",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ef2e55da-4765-4bdb-a844-6effab5c6242",
        "cursor": {
          "ref": "b2dd3405-49ac-4c24-8f4a-b819add30daa",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "aeb338be-e363-4bfd-b623-7ea7dc24969d"
        },
        "item": {
          "id": "ef2e55da-4765-4bdb-a844-6effab5c6242",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4e7295e3-c083-482f-a9d5-c2cc8b5b3539",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "26475368-d717-4428-bda9-172e51de9fa7",
        "cursor": {
          "ref": "a8c25b7c-7193-475c-9dd5-fcfc7dfa0744",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "adeeb291-73f9-4f34-a478-f3df30f83a20"
        },
        "item": {
          "id": "26475368-d717-4428-bda9-172e51de9fa7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "df9c959e-636e-4135-9aa1-1bee3c157fe1",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "20406f59-60b4-424b-ac07-c87373e3fe0f",
        "cursor": {
          "ref": "40776cab-7323-468f-81c2-375a53da9f2a",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1627aaab-357b-451e-8c2a-baad502844fb"
        },
        "item": {
          "id": "20406f59-60b4-424b-ac07-c87373e3fe0f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5197d252-d332-4715-bd96-95f9a6fed229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af15fd3b-5125-4294-ae76-9b9e71454944",
        "cursor": {
          "ref": "f95d5356-6e96-4f3d-a5c0-b2d16e1c646f",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "802419e6-d3bf-4515-aa98-32e8063ebcb4"
        },
        "item": {
          "id": "af15fd3b-5125-4294-ae76-9b9e71454944",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b8b9bab3-7cff-429c-84d4-86c7b72e0373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6658077d-ceef-439c-9b1a-8f681bd44cad",
        "cursor": {
          "ref": "18fefa26-74c3-42f8-87a3-43d51f24d109",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2da95055-78ff-47fa-b8d0-cf7de25b9a2a"
        },
        "item": {
          "id": "6658077d-ceef-439c-9b1a-8f681bd44cad",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d610d937-f97a-4450-8f27-b9c2e2037c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fae9d6a-da39-4116-a2c1-035b9c94c5d3",
        "cursor": {
          "ref": "379791a8-358a-4f93-9ced-46f5833b7977",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9c31b9ef-6356-49b5-9eb3-44c90b7b5a89"
        },
        "item": {
          "id": "0fae9d6a-da39-4116-a2c1-035b9c94c5d3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "187a76eb-3947-4570-931b-782f4cb02139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6130f0f2-0ac9-4e84-9d54-0a7fb3420f86",
        "cursor": {
          "ref": "e1be2dee-b457-4e03-b0e6-adfeac4f27a4",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4284bed6-bf3a-4eb9-bb39-d47d45ab583c"
        },
        "item": {
          "id": "6130f0f2-0ac9-4e84-9d54-0a7fb3420f86",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f6a858bf-dd27-4594-9360-2a4f90b53ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4fb9971-f15c-4953-8859-dbf99274bf7f",
        "cursor": {
          "ref": "a6f4ce85-8dd3-4cc7-949a-add50a171dc3",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f509ef9e-4aaa-4c78-9f42-daa591fb3200"
        },
        "item": {
          "id": "d4fb9971-f15c-4953-8859-dbf99274bf7f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f8dfb340-88d9-42d7-8712-8933a6a59c38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309432d5-e3c2-40d6-b30a-2731d78b8d02",
        "cursor": {
          "ref": "0078919f-e2af-45f1-8e28-70c549410a72",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1037e00b-d00a-49db-b43d-2db379de48d4"
        },
        "item": {
          "id": "309432d5-e3c2-40d6-b30a-2731d78b8d02",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "86abd198-3894-4177-9310-09708c5c854f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c22bed-d788-4669-aa39-4518fa011916",
        "cursor": {
          "ref": "db9fca96-7bda-42e9-af90-348b2dbdd5b0",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3fa22538-bd64-461d-bddd-ff15224acc4d"
        },
        "item": {
          "id": "f2c22bed-d788-4669-aa39-4518fa011916",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "24e7549a-368a-43ed-91de-fc6dd76aef22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56c2099f-a811-407b-a337-18c81aac870c",
        "cursor": {
          "ref": "1cc7ee8f-9654-4306-ad13-a5092ee64db8",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "52b25234-48af-4b1d-9be3-c6095bd820f5"
        },
        "item": {
          "id": "56c2099f-a811-407b-a337-18c81aac870c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "abd218ad-0116-411e-8af8-7688f81375a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f25b05-4b69-438c-a8c9-42c2ef3b2e9c",
        "cursor": {
          "ref": "21897b05-55a4-49c7-90e0-a7b0da20f763",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5037226a-9825-48a3-acf0-3a006736363e"
        },
        "item": {
          "id": "96f25b05-4b69-438c-a8c9-42c2ef3b2e9c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d1bccc9f-0e0b-44b4-b04a-b70f7b306900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e49651-8ff4-4ed6-80c9-a91c7020f086",
        "cursor": {
          "ref": "2217cb31-ca57-4e75-8e61-9c9321b3e8e0",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "046bed64-d1e6-4a17-9232-3390d060712f"
        },
        "item": {
          "id": "c9e49651-8ff4-4ed6-80c9-a91c7020f086",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8496276d-2467-498c-bf15-70e1872426bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c00392c-5b8e-4a6e-acaf-137f8687c747",
        "cursor": {
          "ref": "9bfbe3d3-8cb3-4cc6-b821-f1a422ed6a44",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9f959819-1ca3-411b-acdb-7df57535cce1"
        },
        "item": {
          "id": "6c00392c-5b8e-4a6e-acaf-137f8687c747",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "838333f1-34bc-4c41-8474-06c897c0a320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa34d753-1b56-49dc-ac7c-99b8a7b8975e",
        "cursor": {
          "ref": "73a8fa3e-7c65-4668-9dd9-82812fc33627",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c305d4f6-9455-4443-aaad-99f61ec605a0"
        },
        "item": {
          "id": "fa34d753-1b56-49dc-ac7c-99b8a7b8975e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6fc0647d-7b6e-459c-913e-1b7868376481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea1d27c-f05b-4f36-b6bf-cc10924506a4",
        "cursor": {
          "ref": "580612a6-bad3-474f-81d8-f5ec864e80c2",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1a895274-c02a-4182-9b79-335500e4827c"
        },
        "item": {
          "id": "1ea1d27c-f05b-4f36-b6bf-cc10924506a4",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1e38069f-88c8-49fc-9fc9-8a286aec757e",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ba1678d1-50ad-429c-ad13-daa7217119eb",
        "cursor": {
          "ref": "e5129a56-8442-43ef-bbcb-1a18c76880a0",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "372be6a7-a74a-46c7-9063-4c92aefcd7f8"
        },
        "item": {
          "id": "ba1678d1-50ad-429c-ad13-daa7217119eb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "47d2911a-9280-4fb6-b028-305363a109a7",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "94e19ece-dbb8-40a1-8cdb-807ab3e9478a",
        "cursor": {
          "ref": "3f3813b6-ebc7-42ff-ac9e-cb375aae6830",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9def7b72-05b4-44b2-9f8d-d8f6c9f71228"
        },
        "item": {
          "id": "94e19ece-dbb8-40a1-8cdb-807ab3e9478a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3c17ea7c-f88d-4960-b733-02c9563ed898",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "16197c25-c11d-40e5-9aeb-85a68322d13c",
        "cursor": {
          "ref": "24d11ab0-65d1-4fec-aa18-15d654ad844c",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b3a2809f-6853-4eb8-a775-057a8d3f1d8a"
        },
        "item": {
          "id": "16197c25-c11d-40e5-9aeb-85a68322d13c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "aa827236-8b11-47fb-90ab-4d1043dce973",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "24119de4-a2aa-4712-86dd-8561637f9f6f",
        "cursor": {
          "ref": "c79e8ad1-ea75-4fa6-9a3a-68e4b36063ae",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ff0d213d-e525-4165-9059-cb4e6f0725e4"
        },
        "item": {
          "id": "24119de4-a2aa-4712-86dd-8561637f9f6f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "101e3025-6841-4fa6-8a0b-571f512f9e8e",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ba141450-a81d-4816-91da-4ee2da528733",
        "cursor": {
          "ref": "40226bb0-5ede-4065-a547-8ef6e5c4067d",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "64dda0b6-fbb8-4a70-9cb3-6dc5289d9846"
        },
        "item": {
          "id": "ba141450-a81d-4816-91da-4ee2da528733",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7124c3cf-7179-47a3-948f-c35470d8b9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "857a8318-a805-4dff-8c6c-2177c241b86e",
        "cursor": {
          "ref": "bc177003-0747-4b91-9072-215699a161b7",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4d737d4e-7a6f-4d69-ac44-6c7a65c115da"
        },
        "item": {
          "id": "857a8318-a805-4dff-8c6c-2177c241b86e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "66894981-6498-4a19-8018-b818e6c6225c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b8cf48-0614-423e-8abf-cc312a378618",
        "cursor": {
          "ref": "f9f6fc2c-623c-4f8c-b249-0ae46c5c31ef",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "cc8d9525-3594-4390-ad5b-db268f83c74a"
        },
        "item": {
          "id": "77b8cf48-0614-423e-8abf-cc312a378618",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0f5a97e5-4e64-480e-ae18-038177483db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddfef49d-faa3-4a5d-a535-4adc91a45cb7",
        "cursor": {
          "ref": "708afff7-8d46-4fdf-ac29-dc82685ace1b",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "315877a2-a7fd-4924-989f-860ed50ac254"
        },
        "item": {
          "id": "ddfef49d-faa3-4a5d-a535-4adc91a45cb7",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a5b5b235-ccee-4e87-935c-1aafc3ab5d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef8355e2-3565-41ba-8c87-72e6f5c72876",
        "cursor": {
          "ref": "f2082a14-8217-416d-ab1f-f7719debb674",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "db7eef38-fde4-4bd1-8f1f-7edcc1b251d4"
        },
        "item": {
          "id": "ef8355e2-3565-41ba-8c87-72e6f5c72876",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b1907c60-2272-4afc-a432-1c08444df326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e020711-b452-4a4d-8d4a-57b81b9f1233",
        "cursor": {
          "ref": "81c208cf-4aed-487e-a12e-aef70510da67",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "648fa1d1-2d5a-4f4e-809b-66ff2404d072"
        },
        "item": {
          "id": "0e020711-b452-4a4d-8d4a-57b81b9f1233",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2f639d7c-6b80-47ff-a758-949d6fec9002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d911a23b-2e82-49f2-85c6-b24f32b28850",
        "cursor": {
          "ref": "815eb697-7fc4-4451-a484-285fb56eec84",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "07ecd6ef-ff25-43fd-8189-1d3273704f98"
        },
        "item": {
          "id": "d911a23b-2e82-49f2-85c6-b24f32b28850",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8a696939-11f4-49bf-b8b8-a142e97e475f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56c3d520-8811-4204-a03f-222b66db69d8",
        "cursor": {
          "ref": "711a0d3e-81d1-4e50-9761-cf555058baeb",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "fd27bc73-39d3-4480-898d-19b4bcd85817"
        },
        "item": {
          "id": "56c3d520-8811-4204-a03f-222b66db69d8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d342c8de-2fb8-4f37-b97e-ddc70bfee65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c80aa8-13a7-4d73-bcb8-1a41854bd63e",
        "cursor": {
          "ref": "f510c93c-2c03-4220-b7a9-a9ab2af2ec9d",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b2d6a160-0ded-4f30-9fb4-0b3220123a5b"
        },
        "item": {
          "id": "f8c80aa8-13a7-4d73-bcb8-1a41854bd63e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "18a34770-c114-4318-b118-aa833bd35caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393c7025-b10e-454e-a3f3-ad9b99b9aa2e",
        "cursor": {
          "ref": "c07c58e8-6921-48f7-bab6-fc92f531ac0a",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "76ad1033-cb5f-4d35-bebe-8d9bd6a63529"
        },
        "item": {
          "id": "393c7025-b10e-454e-a3f3-ad9b99b9aa2e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b11b8b60-f066-4682-8a1f-01097e049a4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14863430-adc0-46dc-aa48-15c8bf82db86",
        "cursor": {
          "ref": "47a13c1f-5a00-40bc-ab14-8c7af94f5e34",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a46288fe-ef78-470b-b799-155cd74798ca"
        },
        "item": {
          "id": "14863430-adc0-46dc-aa48-15c8bf82db86",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7235fe7d-5a7f-4bf1-a078-b9a858868d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82bcb3d-4ccd-49a8-8e44-8b04ee3ee473",
        "cursor": {
          "ref": "31c0e4bc-d42c-4711-9b17-03d4f1446afc",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "799f16ae-2df7-41e5-8e86-bfa4f73ae962"
        },
        "item": {
          "id": "f82bcb3d-4ccd-49a8-8e44-8b04ee3ee473",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9a8ea33a-3902-4b81-b6e1-107dd38121d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec931bf3-64e8-4d61-9814-1eb40ef7d40a",
        "cursor": {
          "ref": "29b928d2-5a80-4dd7-82a3-590717d679be",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e20404b1-1828-42fb-886d-ae964e50da09"
        },
        "item": {
          "id": "ec931bf3-64e8-4d61-9814-1eb40ef7d40a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "89d34f73-939f-4c50-9b15-6fe68813e683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf6f713-0cdd-4af8-9b79-3081c0b27968",
        "cursor": {
          "ref": "47c8a665-fc46-49aa-be68-a26e4c34a835",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "307ce277-a145-440f-bd57-e4d7eef92b33"
        },
        "item": {
          "id": "5bf6f713-0cdd-4af8-9b79-3081c0b27968",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1e44dfc1-8fbd-4969-8129-482801dac022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598ff906-d75d-496e-b695-938081df1ca9",
        "cursor": {
          "ref": "7a95425a-c340-480a-bfd1-fa09b5435423",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1725a3e8-521b-406f-b72d-1675b9ba1d17"
        },
        "item": {
          "id": "598ff906-d75d-496e-b695-938081df1ca9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "50012d09-354b-4f1e-a373-e04f4ab8ce83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f820ce50-180c-4cea-8054-1e728a5516f8",
        "cursor": {
          "ref": "9653bfbe-9743-47e7-9179-7138333ce653",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "326e23e6-9c01-44ee-8b33-cc3170cb5bcf"
        },
        "item": {
          "id": "f820ce50-180c-4cea-8054-1e728a5516f8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "db2e8b2c-d581-45e6-a365-44448d77ab7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8131113a-a6db-4e33-89fb-d105c843ae58",
        "cursor": {
          "ref": "c7c71688-e962-49b3-8f61-1ab729618068",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5bd10609-f48e-4f0a-ad86-539bbd940e4a"
        },
        "item": {
          "id": "8131113a-a6db-4e33-89fb-d105c843ae58",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "fe089642-1a98-4506-940e-441b1d689706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680d7766-3439-4919-9520-806cd836b293",
        "cursor": {
          "ref": "7b56fa10-5ddc-4144-b050-9af8fd25084a",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c676b30c-6612-4933-a97e-47d2a6749bdb"
        },
        "item": {
          "id": "680d7766-3439-4919-9520-806cd836b293",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e10ce36f-c78d-4e07-b3e7-a2582ea9cd93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1550fa7c-24b2-467b-8885-9fc2be85602e",
        "cursor": {
          "ref": "700e74a2-8f81-428c-b710-ec27ec8209e0",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ef54f96c-ba9e-480c-ac93-ed206a738653"
        },
        "item": {
          "id": "1550fa7c-24b2-467b-8885-9fc2be85602e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "58722d4c-0616-4444-8b2c-3159583005cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eecc591b-4efb-48f9-9b77-c9bd4c41ebd2",
        "cursor": {
          "ref": "1477604d-0831-4d36-bbfc-c8d20fc1a983",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c78425b3-b4f6-4514-8283-bd537dbb0612"
        },
        "item": {
          "id": "eecc591b-4efb-48f9-9b77-c9bd4c41ebd2",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "da78dac4-dbea-4942-b4ad-762537fcfefc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ee3bfd1-2c71-4248-938d-f9d5f5c83aa8",
        "cursor": {
          "ref": "7f7ada09-99cc-477f-aec3-6c4069e28ad3",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "baab6c49-032b-4e99-8197-addb33f8d131"
        },
        "item": {
          "id": "2ee3bfd1-2c71-4248-938d-f9d5f5c83aa8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "63ce271e-7d4f-4b9b-b66d-1455cead54e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0057e0f-bf79-424c-a174-c904e9a85ade",
        "cursor": {
          "ref": "92b77b27-4b77-46b9-a043-c5b17c68ea31",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2de2de06-46ac-474a-ac9e-957fc05c9945"
        },
        "item": {
          "id": "f0057e0f-bf79-424c-a174-c904e9a85ade",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e838c0e3-5242-4271-b2a8-b18a6354a4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc37b49-0daf-43ad-bcee-9a273c03aff1",
        "cursor": {
          "ref": "ad790cc8-9a1b-4ae2-b7a3-623cd0796ca4",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "fe8e6fbc-27c0-44f1-b306-d78d5372d7cd"
        },
        "item": {
          "id": "3fc37b49-0daf-43ad-bcee-9a273c03aff1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0301fa98-1cd4-4bdd-9f64-1d9a8e80fdfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b502dc-fd45-4c9a-960f-ced810847193",
        "cursor": {
          "ref": "6d888c91-209b-4808-b394-173328f68491",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "23f2915b-f920-48d7-856f-35e5fae168e8"
        },
        "item": {
          "id": "11b502dc-fd45-4c9a-960f-ced810847193",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f63017d1-edfc-4e1a-a02f-f88429ae86d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ef4b39-8afb-4ed0-9760-5477962537ba",
        "cursor": {
          "ref": "5d1b8615-6077-41c7-9482-e88b543188fd",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "85fc95b2-b33e-4493-b188-c1f519a27257"
        },
        "item": {
          "id": "23ef4b39-8afb-4ed0-9760-5477962537ba",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ea1a5626-b3a8-4598-a97f-e200f1fbb6a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5976b400-8caa-4b09-b9d1-a7ece4ed950c",
        "cursor": {
          "ref": "d9db7d24-9325-4786-85a4-d7d9bc6cc629",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "def11e8d-e1eb-4fcb-b11c-0a8bdb3bb4da"
        },
        "item": {
          "id": "5976b400-8caa-4b09-b9d1-a7ece4ed950c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "dbf9101b-1f8b-4a12-ad15-ae50ab73dc68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b606cac6-786c-4ef3-b592-433b8d92b5b9",
        "cursor": {
          "ref": "bf7ce987-0b71-499b-be3f-fb48a56a3ced",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "88a77d26-0d80-4e43-9346-53b45f4a768b"
        },
        "item": {
          "id": "b606cac6-786c-4ef3-b592-433b8d92b5b9",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "aea038a7-49aa-48b7-973a-7885a571e05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ce4445-65cd-4532-99e4-1bd0cd193c2d",
        "cursor": {
          "ref": "54214869-1120-4ba5-ac75-37657c0faca3",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3a6e5640-2d09-4f34-a359-dd7419de5fe2"
        },
        "item": {
          "id": "23ce4445-65cd-4532-99e4-1bd0cd193c2d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "fab13502-d056-4572-bdaf-164353b3ea48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b086ead0-67b3-4ac7-88ca-7f9b96f15ee3",
        "cursor": {
          "ref": "6851d4ae-90e0-4427-a8c2-3c9fccd9a95f",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "81593321-0035-42d4-badb-004827e5ddab"
        },
        "item": {
          "id": "b086ead0-67b3-4ac7-88ca-7f9b96f15ee3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "306a2530-b87f-4b1b-8509-7b451c87f0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605455d4-02bc-4345-bff1-4da22049130e",
        "cursor": {
          "ref": "e0e55664-3015-434c-8313-1b96292fbafc",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "dbe702da-ab88-49f1-93cb-af9f3dcee3c0"
        },
        "item": {
          "id": "605455d4-02bc-4345-bff1-4da22049130e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "00613498-2c4e-4dbc-92b1-6f9de22a1322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c83544e-9478-463a-afa9-9ec855476667",
        "cursor": {
          "ref": "b1d25d6a-08ad-4c8a-a566-f7c9f7ad7db9",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5a21afc5-1648-4e6a-a52a-95fb946ecf4d"
        },
        "item": {
          "id": "9c83544e-9478-463a-afa9-9ec855476667",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9f477c10-6ff6-446d-9104-a3866539d0e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475e9339-3ee0-4c05-824c-3d31c594e0e1",
        "cursor": {
          "ref": "e133ca9d-d9c8-4154-90c0-52e256572a9e",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "56bd948d-6dd9-4435-bcae-cf74695c21d9"
        },
        "item": {
          "id": "475e9339-3ee0-4c05-824c-3d31c594e0e1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a2fed348-c831-4d75-b7eb-f1f99b91ee7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec317ad2-dcf3-4739-b407-b870da0392ce",
        "cursor": {
          "ref": "51a28977-a83c-4a5a-be4d-5c07c26a7255",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "17aaa4a3-bb6f-4392-9af7-276d5076c1ed"
        },
        "item": {
          "id": "ec317ad2-dcf3-4739-b407-b870da0392ce",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "b150babf-bfbb-4058-a117-0d43bbd15635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "949791b2-1959-4a48-8510-96ee3c65d53b",
        "cursor": {
          "ref": "d6976a6f-de20-4df1-9d99-acd85de13ba8",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e84fb6fd-acdd-4d9d-9289-a5b16ee579d3"
        },
        "item": {
          "id": "949791b2-1959-4a48-8510-96ee3c65d53b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1ee52f6c-471b-45e1-b17c-7722a638c831",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "348bd126-10f7-49fd-bad4-d728b91da1d3",
        "cursor": {
          "ref": "9c338424-6401-4fa0-8053-7cc6b9972b3f",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4a8dbfe9-1536-4500-9bd7-c542bd42a685"
        },
        "item": {
          "id": "348bd126-10f7-49fd-bad4-d728b91da1d3",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f5121495-398c-419b-a93f-6d25c16fb4e2",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "52055950-23b6-48a6-a844-0c9f44458604",
        "cursor": {
          "ref": "4b334840-63ff-4046-8634-4c98fdc6b8c2",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "060c964d-8176-418f-ad73-d74abc2324b1"
        },
        "item": {
          "id": "52055950-23b6-48a6-a844-0c9f44458604",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "15319098-4af7-4002-9e73-72bb949c1ded",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77fc06b-7c36-4760-8f0e-33e2a63ce1b4",
        "cursor": {
          "ref": "673d4978-a110-44a1-96e6-43ee3130dd8c",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f319e578-83a9-447c-bf1b-d6b29f348c6d"
        },
        "item": {
          "id": "c77fc06b-7c36-4760-8f0e-33e2a63ce1b4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b6d73a5a-48eb-4176-8718-9f1654ef828f",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c329c8a-f831-406e-a7f2-a567e9fd4881",
        "cursor": {
          "ref": "7c8e8cb2-a590-4b45-a7f2-2a16d50c12e6",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6c99daf4-bfac-4f1f-b9bc-6668cb1a8620"
        },
        "item": {
          "id": "4c329c8a-f831-406e-a7f2-a567e9fd4881",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "946f0382-98cb-4355-bea9-c3d61e9879af",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-09T00:37:03.395Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-09T00:37:03.395Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "48b3ec7b-694d-46e5-a0c3-d9d91a2d9848",
        "cursor": {
          "ref": "38155baa-9373-4fb2-ade6-70e989f1f9cf",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5634402e-26ed-481c-a82b-f4abaa808f16"
        },
        "item": {
          "id": "48b3ec7b-694d-46e5-a0c3-d9d91a2d9848",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e46603a6-004a-48ef-afb4-2fa84cc7db60",
          "status": "Created",
          "code": 201,
          "responseTime": 434,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a979dc-68a3-4f18-814a-adf4226f9ea0",
        "cursor": {
          "ref": "6a02e97e-7f2d-4c02-91ee-915bc94bde0b",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c42eb1eb-53e2-4d44-a99b-660f828fa4df"
        },
        "item": {
          "id": "68a979dc-68a3-4f18-814a-adf4226f9ea0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "da1d5649-5318-4172-aaf4-e68fc7c8d665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3837a7-9f2c-47e7-8feb-070286542bfd",
        "cursor": {
          "ref": "c5c56ec6-2ac2-4cb0-9944-023a695e200f",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "79b6a1d4-ab49-4f6c-9f44-8b485df23ed1"
        },
        "item": {
          "id": "cc3837a7-9f2c-47e7-8feb-070286542bfd",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e457fa4d-06b6-4438-b76d-38d3649c5dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c4aa3a-6bf4-472e-a710-b3e0ed75aae3",
        "cursor": {
          "ref": "f63f33c6-3f10-4532-93c3-a0bd3140d167",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1254408a-7b04-451c-90ae-7586d91f4edd"
        },
        "item": {
          "id": "58c4aa3a-6bf4-472e-a710-b3e0ed75aae3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e069487f-bda3-42c5-ac1e-a8346b8e61b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a8ff2d-d3bf-48bf-99c1-7255a826a0a7",
        "cursor": {
          "ref": "9132f1bc-54a4-4a14-bac9-9c134df49a0a",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e28014a7-6e57-4d37-a7e6-dcfe63c2e35d"
        },
        "item": {
          "id": "56a8ff2d-d3bf-48bf-99c1-7255a826a0a7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3c0362f8-cc92-4025-be15-e3cca70f1634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8df1aab-e509-4da0-ae84-9759b1981d57",
        "cursor": {
          "ref": "dbc9e73d-22fc-444c-b1c5-3a2fc9598e48",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f62e1c6e-6e62-40e9-8a47-cd468dde6f08"
        },
        "item": {
          "id": "b8df1aab-e509-4da0-ae84-9759b1981d57",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "aa2320a6-cca9-4488-9899-2033365e8a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5644b46-7785-45ec-83a5-0375b808e96f",
        "cursor": {
          "ref": "d24b54f8-bd38-4224-a0e9-a168686b09bd",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d60664ce-fc07-45bc-aff5-d2a6f8c755fc"
        },
        "item": {
          "id": "c5644b46-7785-45ec-83a5-0375b808e96f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c4e0dcf7-d8f8-47ae-b858-e8730c151f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0626f3d6-c4af-4efa-9dc4-1a58a6331498",
        "cursor": {
          "ref": "0f85278c-7169-4759-b704-0f1e57cb4b41",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e3b28b6f-2a2a-47e7-9d98-d20a33e2c954"
        },
        "item": {
          "id": "0626f3d6-c4af-4efa-9dc4-1a58a6331498",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e0bae312-7486-4ff3-9053-ca95f1c464dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df2e8c9-b2e0-4903-aef9-24d3bedd8846",
        "cursor": {
          "ref": "f1ef8f23-3213-4ac9-8637-0a1f73d53309",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "204d1a4e-9f2c-4e7d-9ad8-a1f646054cd1"
        },
        "item": {
          "id": "1df2e8c9-b2e0-4903-aef9-24d3bedd8846",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a2d48b97-ba09-4d0d-b5d4-bdabe3f427ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6dcc310-f25f-42db-b0b6-26e65b7cfd63",
        "cursor": {
          "ref": "f3e8bde9-b1ad-4a79-ac3f-e6dcdde5a54c",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "675ecc0b-f8a9-4374-a4a6-dc21bdbd551c"
        },
        "item": {
          "id": "d6dcc310-f25f-42db-b0b6-26e65b7cfd63",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "88073ecb-adc3-4bad-b3cb-d1e797c1f6c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae271038-4dc0-4766-a4d6-526dcbb7aa78",
        "cursor": {
          "ref": "ec8ae666-b0b3-4df6-86f0-7709bdc6245d",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5116d9e0-8211-4fa0-bc0e-a408b42d85ae"
        },
        "item": {
          "id": "ae271038-4dc0-4766-a4d6-526dcbb7aa78",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "dd2d8a6e-871d-4b7e-bc33-f6a8550d7dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db989e82-77c0-402a-b34e-7ecb0ad5772f",
        "cursor": {
          "ref": "22d4df9b-f768-4b1f-88a7-4c7df64c964e",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c8910d57-2e4d-4668-a9ae-bfab2d0da483"
        },
        "item": {
          "id": "db989e82-77c0-402a-b34e-7ecb0ad5772f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b9b2e696-911d-487f-836a-25f585dddf2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9bb853-7614-45d6-b4b7-a458630ed43e",
        "cursor": {
          "ref": "8f4027c3-6541-48c9-9bd8-6ca58d601e45",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "95ae173a-f9a8-42cf-84cc-a87a0f1ea9b0"
        },
        "item": {
          "id": "2a9bb853-7614-45d6-b4b7-a458630ed43e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d3a71d1c-89b5-4e27-850a-fb7fa4c53a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bde0c6e-2e77-4e31-abf9-9843507aeb9e",
        "cursor": {
          "ref": "d7896ecc-dfe1-40d6-9caa-dbb82da4d3ab",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ec5e554a-0ada-4484-a2f3-3dd8f9312bf5"
        },
        "item": {
          "id": "2bde0c6e-2e77-4e31-abf9-9843507aeb9e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5dc22a02-b4b8-4db2-8224-a191b076d161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1517ef0-3255-4ecb-b917-749278a818a7",
        "cursor": {
          "ref": "58764e39-386c-4dd6-a973-6521549b9b9d",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "959c4e73-5e0e-42c5-a18b-947c5e652bc1"
        },
        "item": {
          "id": "f1517ef0-3255-4ecb-b917-749278a818a7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "534fbabd-9dec-4bf6-8615-a0b743cf7527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a718fa-a9fa-402d-89c2-9b8fc02945c7",
        "cursor": {
          "ref": "fda83f8f-de77-4b86-86f9-c475344445c9",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "54f500ea-06da-4093-bbce-1e8e0b3d7d8d"
        },
        "item": {
          "id": "a7a718fa-a9fa-402d-89c2-9b8fc02945c7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1608de5b-aba5-4692-843c-38a43ed54466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d20b7e35-13f8-446e-8caf-dcee132ca8e1",
        "cursor": {
          "ref": "2253ff61-ab07-4108-9e4f-5bf12462febe",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2d5fe907-e4b1-42b6-b6f2-02335c7e587c"
        },
        "item": {
          "id": "d20b7e35-13f8-446e-8caf-dcee132ca8e1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fa7a3c07-e3f9-4599-acc2-13b06e0c451e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b327570-12be-44d4-b4a9-e520ba439d53",
        "cursor": {
          "ref": "a949308b-5be2-469a-94cf-1b91254d6bf7",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1136c712-8405-4fc6-8558-160e6166237b"
        },
        "item": {
          "id": "2b327570-12be-44d4-b4a9-e520ba439d53",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b952ffbb-9dfc-4104-809d-626db2787951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6f1ab9-38b5-41a3-a377-423441d85aa2",
        "cursor": {
          "ref": "cf6501f5-9c09-4657-abb1-56f09bfcbbbd",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ef1bef10-5932-414a-9418-4671a5c20e52"
        },
        "item": {
          "id": "8f6f1ab9-38b5-41a3-a377-423441d85aa2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6048c08c-2b2c-459f-9e30-e8f22181f8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99272651-d50d-4d65-8518-856c48b875f6",
        "cursor": {
          "ref": "0ba8848b-de7c-44df-9e7e-d04c7a1aef15",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4f49da9f-99be-49cd-b203-dd0cb89945d2"
        },
        "item": {
          "id": "99272651-d50d-4d65-8518-856c48b875f6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bbaef434-5e1e-45b9-b318-8517652988f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cc4bf0-6c2e-42b5-b410-a7949be8d783",
        "cursor": {
          "ref": "f31b54f5-a0fe-4aba-9555-90a8151dde37",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2cbad48a-e959-45d2-ad98-f2ead9de9486"
        },
        "item": {
          "id": "e7cc4bf0-6c2e-42b5-b410-a7949be8d783",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "47aba8f4-e831-4a62-941c-20b3d0bce70e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da48160a-48be-4d19-a429-4cead1cf9f63",
        "cursor": {
          "ref": "cd40b88e-ac9b-4abe-ab51-634e8f3efbe7",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "03188cb3-5257-4b55-9f44-f5fad47f31fd"
        },
        "item": {
          "id": "da48160a-48be-4d19-a429-4cead1cf9f63",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e593089a-c6c3-4c27-96a7-d8db0be0f23b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fddb70f-0086-4f15-ac23-daf8fc671584",
        "cursor": {
          "ref": "d8a4ea68-a15b-434a-be88-8e06060c8d7c",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6a168c44-9b84-4801-b78f-24bc3124ecf5"
        },
        "item": {
          "id": "1fddb70f-0086-4f15-ac23-daf8fc671584",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f92b80c2-c54e-42da-8a3c-5b6702d8a2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d60c9ac-e2c2-41de-9db7-8c8c7565e2a1",
        "cursor": {
          "ref": "728443c6-1ec8-408d-9102-d8b73b92ab05",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7f5d7bf7-c3fe-43bb-87b6-ed01a8e03422"
        },
        "item": {
          "id": "8d60c9ac-e2c2-41de-9db7-8c8c7565e2a1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "73d4e082-b800-4e7c-ba98-d406e0f7de8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2801a4e-456b-41a0-965c-3ad65d5a3d79",
        "cursor": {
          "ref": "7f49715b-998d-4b08-9ce2-e8ac974e71dc",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "44f1c397-e979-4858-ad2e-1c501f20ef55"
        },
        "item": {
          "id": "f2801a4e-456b-41a0-965c-3ad65d5a3d79",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "892c2332-50fb-49b2-ba02-10a842f9a8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681b9a5a-b1b9-4ead-b76b-834b8d2c5a9b",
        "cursor": {
          "ref": "b7695a3a-c9f9-475a-ae20-31f73fd1ad67",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "435cd036-7a68-4571-8c14-cbd471c537c1"
        },
        "item": {
          "id": "681b9a5a-b1b9-4ead-b76b-834b8d2c5a9b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a3519eb2-9cfa-424a-a431-3cab4b2b7d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911343de-d606-4544-a7e9-e8e8c6a443dd",
        "cursor": {
          "ref": "6bef3537-e928-4dc5-89bf-65ff35a8aa3c",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "55cdc7c1-6cae-49dd-8544-0c5e5f1d6b9f"
        },
        "item": {
          "id": "911343de-d606-4544-a7e9-e8e8c6a443dd",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "89f1ea03-c4b7-4ee8-8ed2-fbb520a08acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42954b6b-cdd6-4b77-aba9-13efab031914",
        "cursor": {
          "ref": "21fb2937-8fc4-4317-b779-f6e2fad0454c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3040a86e-5da2-4acf-b849-9cf71b15c5cc"
        },
        "item": {
          "id": "42954b6b-cdd6-4b77-aba9-13efab031914",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "759ca2da-04ae-4943-8df7-b8c1acec8de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52388da3-0958-4fcf-bcba-509932943ddc",
        "cursor": {
          "ref": "737630c0-53f8-435e-b4a7-af753c1bb500",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "69e19bac-ef68-46f9-8afe-72d18b594f9a"
        },
        "item": {
          "id": "52388da3-0958-4fcf-bcba-509932943ddc",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d5800f17-bada-4da9-9db1-0711528a1667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e41b815-68c5-49fd-8acb-645d40de1c53",
        "cursor": {
          "ref": "66255d51-5b19-4cd7-bc8b-b3986d1280ff",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4b8624e4-2273-4e27-9142-d2d495555504"
        },
        "item": {
          "id": "0e41b815-68c5-49fd-8acb-645d40de1c53",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8ee614a4-4345-420c-b678-d49538fa3587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842685df-e9e5-4ace-9c62-e5dd855005a1",
        "cursor": {
          "ref": "2015dffa-f0db-4ed5-9a4d-cab2f1cde3ae",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e473d436-523b-43c5-9a15-20053cb7536e"
        },
        "item": {
          "id": "842685df-e9e5-4ace-9c62-e5dd855005a1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "360a4d62-8d8a-4545-ae21-7c9f36d1a363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1d4c47-b881-4dfe-8010-f39b0626cc38",
        "cursor": {
          "ref": "fa6c9bbf-f330-4bad-85e1-db4c6d3b9247",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "adca2e80-97b2-4a4d-9826-42177342a89c"
        },
        "item": {
          "id": "dd1d4c47-b881-4dfe-8010-f39b0626cc38",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "046e9cb5-bf59-40fe-9796-572efab71e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec606bb8-1ce5-45a1-96b4-50c757eb34d5",
        "cursor": {
          "ref": "a33eae36-e311-4958-a7f7-d20581c2a133",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8aed2824-47ad-4a99-b582-b9d883cfa7a6"
        },
        "item": {
          "id": "ec606bb8-1ce5-45a1-96b4-50c757eb34d5",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "135ebe04-3e6d-4a82-901f-3724c47b55fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b07b44-66f6-4b8e-837a-829be77b75da",
        "cursor": {
          "ref": "3b4a2bd7-c006-4cf0-82f8-0ff29f450fcc",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4ba2e8a6-9662-487f-bbed-69836c2e4a54"
        },
        "item": {
          "id": "35b07b44-66f6-4b8e-837a-829be77b75da",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a5d3c472-a652-42ce-bdc0-e370b624621f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8db0e8-358b-4706-902d-fc1ba9fc9dc0",
        "cursor": {
          "ref": "58e00f68-548b-4864-9d71-3684ca6d7b52",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f3401ef9-824e-4a10-8d29-f6706bf06e97"
        },
        "item": {
          "id": "7d8db0e8-358b-4706-902d-fc1ba9fc9dc0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "37323249-2f2c-4ee0-af54-581bfd81406e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a189a6b6-ac0b-418f-9938-53281e40c6a9",
        "cursor": {
          "ref": "05fccb38-b59a-4c44-9953-ecfccad92fe8",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3360ffa7-0b7c-42b0-919a-230a026f96a8"
        },
        "item": {
          "id": "a189a6b6-ac0b-418f-9938-53281e40c6a9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "05a61993-7139-4ac6-91e1-cc16b460d3cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47814843-76af-4318-b9ac-8da4d648f412",
        "cursor": {
          "ref": "5ca53656-b443-48b1-a93a-8efca9f90c9a",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "94c78236-ab0a-40fd-82ec-d854d948bbd6"
        },
        "item": {
          "id": "47814843-76af-4318-b9ac-8da4d648f412",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e8e6e7db-6055-404c-bec0-509a91ae14a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c179fbaa-f978-427a-8c4e-104b9d4f68cc",
        "cursor": {
          "ref": "68bedc77-3aed-48a8-9c6e-b53c657e47c6",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1ddef8a3-6f58-4f67-b8f5-cff7b5939657"
        },
        "item": {
          "id": "c179fbaa-f978-427a-8c4e-104b9d4f68cc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5fdd8c20-2047-4b32-8e0c-3f1f0c7c5dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4081894-23aa-466d-ad6a-b23bb988e7aa",
        "cursor": {
          "ref": "7f799218-df2f-40e1-809f-5c4144e2d566",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9534583b-7c21-494f-a7c8-67c7c10cdc9d"
        },
        "item": {
          "id": "c4081894-23aa-466d-ad6a-b23bb988e7aa",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8ef64508-5794-4a7e-8244-23f6626649bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876fc1e5-0d92-4677-b9d6-b54774269d9c",
        "cursor": {
          "ref": "abd22b18-0f66-4257-a21e-f670e2670fa3",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4292b790-b14b-420a-9e09-2967215b7ee6"
        },
        "item": {
          "id": "876fc1e5-0d92-4677-b9d6-b54774269d9c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "97b2fc23-fd7e-4c20-b11a-449e391b4bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8158dee3-e1b9-4a8b-a451-75db8fa07521",
        "cursor": {
          "ref": "473c73a9-4ca4-4be4-afb9-1dc02d445166",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d771134d-a03b-4a26-a1bf-98e22f5844e9"
        },
        "item": {
          "id": "8158dee3-e1b9-4a8b-a451-75db8fa07521",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6ac26a85-07d7-460e-bec6-7758119306e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e723b22-f1da-43bd-b66b-80755eb6ed58",
        "cursor": {
          "ref": "1b3cf168-0d8e-4868-aec8-2b0b4b1ddc99",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5ba13e92-9f33-41f3-9cd1-60a618f6d7f2"
        },
        "item": {
          "id": "9e723b22-f1da-43bd-b66b-80755eb6ed58",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c44e657a-8ebc-49fe-b8a8-f18030b212be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4bc361-9bd8-4850-bb1a-6fd203c8ffdf",
        "cursor": {
          "ref": "fda722e7-bfcd-4c16-934b-2b246335bddc",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a2034c18-2a81-433e-8b74-cfbf1cd041a7"
        },
        "item": {
          "id": "5b4bc361-9bd8-4850-bb1a-6fd203c8ffdf",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d9154456-7162-4c7f-8161-7738a7e73d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "264c7c6b-fbdf-4184-aea6-d931ef581c32",
        "cursor": {
          "ref": "4bb25a9d-8a1f-4b28-a5aa-96a000782e0d",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "dbfcd25a-2e1a-4f30-b402-587f6533ab16"
        },
        "item": {
          "id": "264c7c6b-fbdf-4184-aea6-d931ef581c32",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "834884f5-36e1-4bcf-8332-a1154d1d2c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c9c6d9-2f3b-43b3-bfda-c88a4f7fbfc4",
        "cursor": {
          "ref": "90f4aa47-f112-44d7-a3b7-ccaf1b265350",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5315df16-3292-471b-84fa-f0b900e0bd14"
        },
        "item": {
          "id": "72c9c6d9-2f3b-43b3-bfda-c88a4f7fbfc4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "473b3aea-742e-4946-a3c7-315f660c323e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a951c2b-10fe-4944-a3c2-cc2a3b819273",
        "cursor": {
          "ref": "e1654419-dadf-44b3-a7c3-2859ee242179",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "098fe20c-4edd-4b88-afe5-6114e3f19fc7"
        },
        "item": {
          "id": "0a951c2b-10fe-4944-a3c2-cc2a3b819273",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "030f16fd-9ccf-4a90-9da6-6ac61715c1fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9e22ec-76ba-4823-b035-e4077ada0179",
        "cursor": {
          "ref": "4b084172-e154-4f52-8854-389d5317d651",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "30816fde-8b15-42b4-bd7d-33f2fb93fa00"
        },
        "item": {
          "id": "6c9e22ec-76ba-4823-b035-e4077ada0179",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "13e824e9-bf9e-446b-a70b-93cf02900226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0707146-248d-4da9-8641-f24506d36dd0",
        "cursor": {
          "ref": "5d8163d4-9f78-4d53-bf9c-3ca48f043788",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c3166f26-199a-4888-9323-03597c379d48"
        },
        "item": {
          "id": "a0707146-248d-4da9-8641-f24506d36dd0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ccd1d50a-145a-40aa-8229-8efaaa138db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d2199f-6719-44f2-9061-eeef2839375f",
        "cursor": {
          "ref": "9adabc71-a93d-4ad4-b139-25aeb0941c79",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "10a7b9ca-5e8d-467f-9515-fc7072578cb8"
        },
        "item": {
          "id": "56d2199f-6719-44f2-9061-eeef2839375f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "76e391b1-036a-4b85-89c6-0afc7bd55d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364cf1c4-44ff-480e-910b-d5ebe1abd9a6",
        "cursor": {
          "ref": "5b65556c-021e-43db-934c-66724cb634a5",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "451688fb-4141-4509-9691-b160b8071651"
        },
        "item": {
          "id": "364cf1c4-44ff-480e-910b-d5ebe1abd9a6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c6dbf266-2dbf-4bee-86dd-4fa65377abb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95426fd-5376-441e-b0d0-7417c10fd06e",
        "cursor": {
          "ref": "cdac04e1-7eb4-49a2-b8fd-fd4487ffdcc4",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "270ebe25-a323-4c9d-a84a-b05acc7588a6"
        },
        "item": {
          "id": "f95426fd-5376-441e-b0d0-7417c10fd06e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1e35acb1-0aec-447e-bc5d-e483e6ce5662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbef151-f47b-4969-906e-ee7aae2ef6c7",
        "cursor": {
          "ref": "0a8d7336-fb76-4a3f-ac29-9aeec9b72a04",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5f031b99-b2e7-47d3-a11b-20946ec2e569"
        },
        "item": {
          "id": "fdbef151-f47b-4969-906e-ee7aae2ef6c7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "15708e53-908d-4cc6-93d6-29ce597e06b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7efbb592-cf74-423f-a6e8-b4cabbaf1a0b",
        "cursor": {
          "ref": "e03e9ba1-cf15-4334-83a8-50de76d26194",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1df34260-bb90-4628-a8a9-655ec7491a02"
        },
        "item": {
          "id": "7efbb592-cf74-423f-a6e8-b4cabbaf1a0b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9903621d-d610-4fc5-a86e-58b922cbeab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998f231d-01a6-4e1a-809d-e539ba94af49",
        "cursor": {
          "ref": "aa84e25e-c052-4d0b-bb6f-dbca6898f9ff",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3c6da572-5882-4cf3-9fe7-18741fa358ff"
        },
        "item": {
          "id": "998f231d-01a6-4e1a-809d-e539ba94af49",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "47454450-3c2c-4c9a-909f-bb829b08880c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c053495-ed4a-4800-87a0-5b0aa52f2c2c",
        "cursor": {
          "ref": "2943a28f-385c-4475-af0f-811a33d7f2f5",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "03eac18c-edad-42af-8ea8-32e218d057ec"
        },
        "item": {
          "id": "4c053495-ed4a-4800-87a0-5b0aa52f2c2c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "768b5813-0750-4388-bfd3-e4b201f0a827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d62ba76-0049-4dae-bc87-b509402b97c4",
        "cursor": {
          "ref": "08e10727-ba1d-4c03-a437-fd1de011f81c",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "eb85c3bd-492a-41d0-890a-9a94278ce70d"
        },
        "item": {
          "id": "0d62ba76-0049-4dae-bc87-b509402b97c4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7992ed55-858c-4eaa-8e33-b6d3bef473c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f2f4ca-1068-485d-8804-50344dfd81bd",
        "cursor": {
          "ref": "34bd422a-3ef3-4a2c-b059-7dd82cf10b15",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b38ea69d-ee04-4943-b728-2000dd03f61e"
        },
        "item": {
          "id": "c5f2f4ca-1068-485d-8804-50344dfd81bd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b8075b64-d384-4ee2-92c0-924f699cea18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "038aeaf5-1ce0-4a03-b407-d22ebc18c09b",
        "cursor": {
          "ref": "9a0a0364-d658-4e59-9435-b1615d9643fe",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "63ef9687-7016-4a83-8fa8-14f9d029dff9"
        },
        "item": {
          "id": "038aeaf5-1ce0-4a03-b407-d22ebc18c09b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1c972438-7f02-4165-a56a-b4f4cd1ebfc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "847a9d00-2e4e-454c-b3d5-9273903e71fa",
        "cursor": {
          "ref": "6ccf7a9a-d9aa-438a-bc7d-4b69a0b059dd",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b35904d3-a793-4cd0-99b5-81a68a3e1112"
        },
        "item": {
          "id": "847a9d00-2e4e-454c-b3d5-9273903e71fa",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4748d66a-243e-45f3-adef-439fc2388898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b198d64-fb22-4e46-a712-b5305400fe9c",
        "cursor": {
          "ref": "9deb8d36-3601-445f-86d1-b40f6b4d795f",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bf77a2e7-8ee6-4b77-8e18-bb1bc0cb3d6b"
        },
        "item": {
          "id": "8b198d64-fb22-4e46-a712-b5305400fe9c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a5f31807-7ad7-42c0-8eca-d72ccbdc4735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d07a9d-164b-4490-94fd-38cda1041360",
        "cursor": {
          "ref": "e297017d-ce82-49ff-ac0f-4472bd3e5250",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "15dae080-f7b1-43ce-81ca-b58c1e6cd8c9"
        },
        "item": {
          "id": "a8d07a9d-164b-4490-94fd-38cda1041360",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c4ce08b3-3dd8-410e-a615-33223b85c9c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a706f171-6f6b-43a8-8abb-2b683386b669",
        "cursor": {
          "ref": "eeb5978b-0ca6-414b-b8a5-a2c8b74a500c",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1b3bdf64-7fea-41a8-936f-a86ecaf678d8"
        },
        "item": {
          "id": "a706f171-6f6b-43a8-8abb-2b683386b669",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d415331e-458f-4007-810a-6655dae7e4c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f819528c-7c8c-4105-b9d6-e41e8cb790b3",
        "cursor": {
          "ref": "f365a883-de76-4d32-9f3d-acf90f77b1da",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d6b0d187-51dd-4d70-a04f-49b25262d2f9"
        },
        "item": {
          "id": "f819528c-7c8c-4105-b9d6-e41e8cb790b3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4f070bb7-e764-4785-bdca-4d6715fac963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1b7ea3-663e-4982-bbbf-c655730613dc",
        "cursor": {
          "ref": "633f756e-d69e-4b80-a421-1fdbc4e1b187",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e83fed7d-a947-40c4-b0e9-a9c926f90914"
        },
        "item": {
          "id": "9a1b7ea3-663e-4982-bbbf-c655730613dc",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9292adc6-6844-48ca-ac73-cf4df8187b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef164caa-89b5-4f5b-ac71-f8c29c2be416",
        "cursor": {
          "ref": "773e3e11-c560-4a76-8a06-e7ebfd303044",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c904b0d0-7e6a-46ff-9832-2f43470fa652"
        },
        "item": {
          "id": "ef164caa-89b5-4f5b-ac71-f8c29c2be416",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3d12310d-8d1f-4b7b-8c6c-a8661b60ab87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b860a2-fc11-4b32-b513-42b457c94976",
        "cursor": {
          "ref": "a3d2a12f-1bd6-4743-8d82-550a30e42d9c",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a497a073-a8bd-44e7-b75e-790e7fa6e7ec"
        },
        "item": {
          "id": "60b860a2-fc11-4b32-b513-42b457c94976",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7ae2fdff-1300-4344-9651-ebe77d6d6d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90cfbf29-d115-4334-8983-2fe1c69b8d89",
        "cursor": {
          "ref": "f15c254e-e474-451a-bb55-43ac6a11d935",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "98f17e0e-393d-4633-ad45-d925a14a78c0"
        },
        "item": {
          "id": "90cfbf29-d115-4334-8983-2fe1c69b8d89",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e95beb0c-362e-41aa-ab1d-2f03e58b9de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b8e957-19b5-4877-85e6-c6c25bdaa930",
        "cursor": {
          "ref": "ebbd875e-fda2-4467-a941-452c7461d049",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "015ea712-d225-4805-9815-de464f98b19c"
        },
        "item": {
          "id": "c4b8e957-19b5-4877-85e6-c6c25bdaa930",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "bfb552c2-6b7f-406a-b792-fcfe35aeb0ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b706eb-8df6-45f3-8594-cf2944677437",
        "cursor": {
          "ref": "9e9a46af-3a58-4eb1-a811-5fb108988e74",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "13fbd180-eb75-4fdc-93bf-a4044cd4dff3"
        },
        "item": {
          "id": "76b706eb-8df6-45f3-8594-cf2944677437",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e31e618e-ae3c-450a-9b0e-b56e06186e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3fdb4c-8eb6-4ae9-9379-8cd9cd5eee4b",
        "cursor": {
          "ref": "1372be9d-a72c-4f1b-bd7b-bbb8af9c5811",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "cdd9c35d-2f9e-4983-9676-803dce7047a0"
        },
        "item": {
          "id": "1b3fdb4c-8eb6-4ae9-9379-8cd9cd5eee4b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "04f3cf8e-aba2-4569-b0f0-774077dab4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06713a48-fe7f-4c5d-8be5-73ab1d461da3",
        "cursor": {
          "ref": "66eb429c-1356-4d71-ae2e-2aef95d9d6f9",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ff6542a6-ebbc-4ee4-8577-bec225746fc1"
        },
        "item": {
          "id": "06713a48-fe7f-4c5d-8be5-73ab1d461da3",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "e9618047-b628-42a3-94ef-67a78c22c560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3181e547-1c56-4094-8819-a00342c9745a",
        "cursor": {
          "ref": "71ae121a-909c-4039-bd03-cd7ec680f934",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c1583e56-5c4e-41ff-9f73-4c550892da19"
        },
        "item": {
          "id": "3181e547-1c56-4094-8819-a00342c9745a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9ca786e8-5803-4751-8984-c7aff51e0cdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75a1f50-73a7-43a1-927f-4107724df2bb",
        "cursor": {
          "ref": "385f9d13-d3ca-4614-8b63-c31535049935",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "922ffd28-356a-467b-b154-dccf9beca9d7"
        },
        "item": {
          "id": "f75a1f50-73a7-43a1-927f-4107724df2bb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "dbd13438-42ce-46ac-8d75-41c6c819b607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46ee7fd-7b1b-428c-8f9a-12d3961c314c",
        "cursor": {
          "ref": "36fa3f5e-14e7-4e81-af5e-e21738a6db79",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "918109a2-cbcc-4b51-9aa4-6a0b1161ae75"
        },
        "item": {
          "id": "b46ee7fd-7b1b-428c-8f9a-12d3961c314c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a66493b7-1955-459f-8941-acb9ec55fe3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98874370-1e6f-4c1e-af8c-110c656cba9d",
        "cursor": {
          "ref": "86fa8f55-c1ea-4d62-a40e-016fe428f545",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9ae7e442-c5a0-4f67-9e77-875c60f14a1f"
        },
        "item": {
          "id": "98874370-1e6f-4c1e-af8c-110c656cba9d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ff456217-ab29-4d2d-b585-cabad61e6a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b7d589-16c2-4e7d-bfe7-a554f76cbe28",
        "cursor": {
          "ref": "d9223591-2389-4f24-b240-fa6ea8150f2b",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a41c5c8d-7a94-44e8-9b19-beaf5e2d5859"
        },
        "item": {
          "id": "e3b7d589-16c2-4e7d-bfe7-a554f76cbe28",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6827ea2a-559d-47ee-b5de-0205f02aadfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccdfcd7d-5978-4838-aaaf-039f61bc2132",
        "cursor": {
          "ref": "50d55e03-4659-45bc-ba37-feb4c9c7d55b",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b7d824c3-e332-45b9-a497-bdcd01688860"
        },
        "item": {
          "id": "ccdfcd7d-5978-4838-aaaf-039f61bc2132",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "dda70037-efe7-4d7d-9a72-3eb0ae99ec9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18819021-05ac-4bb8-94e1-b4f2efa82280",
        "cursor": {
          "ref": "a32259df-b590-4992-8776-e75bb63c23a8",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e1879700-21c2-47f0-9c4d-25b7b142a066"
        },
        "item": {
          "id": "18819021-05ac-4bb8-94e1-b4f2efa82280",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "09b7f15c-2039-418b-92a0-b70acd0a4591",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "918c0cb9-f538-4f5e-9479-26dcd0d56e12",
        "cursor": {
          "ref": "c7f63833-ad1c-4218-b522-54742103be02",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "02b0905b-9d21-4505-976e-4c114a6b0224"
        },
        "item": {
          "id": "918c0cb9-f538-4f5e-9479-26dcd0d56e12",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fa61921a-f2fa-4d39-9414-7e0dbe413f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c084180c-6f7a-42f8-a7c7-66d9e5ef2a37",
        "cursor": {
          "ref": "f2e44347-617b-48fa-b02d-7f0c82fed4c1",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b5cdc86a-6200-49d5-9616-ff83108f8c09"
        },
        "item": {
          "id": "c084180c-6f7a-42f8-a7c7-66d9e5ef2a37",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d5bb0d7e-abc6-4fb9-88b9-3bb170bae3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090896a7-ff6c-4c3d-8c2a-0b28737dffb7",
        "cursor": {
          "ref": "ef6ace6d-2264-460e-8901-29f5bdf8c3e0",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "95782e11-f3da-43bd-b1bc-0ea41fa11779"
        },
        "item": {
          "id": "090896a7-ff6c-4c3d-8c2a-0b28737dffb7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "90f07736-b5e7-4c5b-af8b-dff628b04f09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2898c7d8-f752-4d8a-9b91-20b5ae2cd928",
        "cursor": {
          "ref": "c3ec8d4c-1870-48f5-9a42-46f7751806fe",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2d26b8d6-4279-4e13-9f8f-db2bf9714c83"
        },
        "item": {
          "id": "2898c7d8-f752-4d8a-9b91-20b5ae2cd928",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0dd23ede-f771-4f77-9b8b-5cdd5101b99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5fd411e-66a5-4227-b43f-65a3043fb073",
        "cursor": {
          "ref": "c88ab69e-1b88-4f65-a9f8-9e7809bf5b7b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c3e224ad-6bb9-4d5f-966e-5d3e90ef364e"
        },
        "item": {
          "id": "d5fd411e-66a5-4227-b43f-65a3043fb073",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "91fb0867-0da3-4630-ace3-e22733c48a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "862d79d4-2bb4-4888-96fc-5944d114b783",
        "cursor": {
          "ref": "cf7511de-6443-4e41-b37d-a302878f7ce2",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b19d97b5-eaba-4de8-be5d-ece99f19e527"
        },
        "item": {
          "id": "862d79d4-2bb4-4888-96fc-5944d114b783",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "de2ca5b7-9a21-44f6-a245-35e7cadab781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109fe55c-dd15-4f24-89b1-8b85047f317a",
        "cursor": {
          "ref": "3641efef-bd28-44d8-a2bd-41c4a246bfca",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "76ddb836-8abc-44eb-9ebd-4f04da3d0917"
        },
        "item": {
          "id": "109fe55c-dd15-4f24-89b1-8b85047f317a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3781761c-ead9-4104-af1e-1c6333024f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9010cf3-72c3-430f-a72a-ca7c4606bcfd",
        "cursor": {
          "ref": "03f436b9-60b0-413d-bb32-af26a612877a",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "34728ecb-ea8e-47d1-97e5-84af6a589e4e"
        },
        "item": {
          "id": "d9010cf3-72c3-430f-a72a-ca7c4606bcfd",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c86bea58-5121-48ff-b7ad-14e63467febd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ef3dca-cf03-4d1f-92a8-43d3cbbeb60d",
        "cursor": {
          "ref": "c96fd9b4-78c9-4720-b8f5-1c2657bb916d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "25324cf9-fc4e-4b01-977b-2ce36ea2388e"
        },
        "item": {
          "id": "b0ef3dca-cf03-4d1f-92a8-43d3cbbeb60d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8eee6f5a-4358-45ab-8ce8-20a083705e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75440fd3-6f63-4a31-9427-1cb0a30d1513",
        "cursor": {
          "ref": "f8428491-52a8-42f1-8f20-23715d22fb7e",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "21f701b2-e0a3-4e17-8917-a5a2357e046b"
        },
        "item": {
          "id": "75440fd3-6f63-4a31-9427-1cb0a30d1513",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "bffb2031-a1ba-49b4-afbd-13f0f6ea04af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af67dfaf-24b0-4447-95be-96f0f4f30378",
        "cursor": {
          "ref": "b4a03b59-1366-4101-8224-a0dd033c01b4",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d03824bb-9cfd-4316-a691-f9e0f86f1de9"
        },
        "item": {
          "id": "af67dfaf-24b0-4447-95be-96f0f4f30378",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c6c92844-e6fc-4bb5-881c-5356ca231ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0df9c5-e3e4-488f-b3d0-6a9e08272b35",
        "cursor": {
          "ref": "5d946ae4-484b-4951-a1dd-96d8ed8cfcd5",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9ebc18ed-b4ca-49bd-929f-eecfa86270e9"
        },
        "item": {
          "id": "fc0df9c5-e3e4-488f-b3d0-6a9e08272b35",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "12de9ca2-8197-43ad-89f2-9ac9aef6b83e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97cf3823-a062-4ef2-9e4c-4e79f3b0070a",
        "cursor": {
          "ref": "477201bb-fbeb-4ee2-8a73-a24ce6f90a93",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9907f864-5c3f-4cb5-9b49-bc9d27cf8de8"
        },
        "item": {
          "id": "97cf3823-a062-4ef2-9e4c-4e79f3b0070a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a9a2d377-3843-4e26-a9de-b20923c83f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354f6684-6d61-4cdf-a4ba-699c24b9e8a1",
        "cursor": {
          "ref": "510ba0ef-f7a1-4007-bd35-7a1deca371ac",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ddfc0343-008d-41b6-9991-0ad689548921"
        },
        "item": {
          "id": "354f6684-6d61-4cdf-a4ba-699c24b9e8a1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9a38cedb-8ffd-40d8-89d2-fad8a1b84cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b86175-678a-415c-8cfa-7f45e440f6b4",
        "cursor": {
          "ref": "b4257b90-a8cf-4599-a351-30a867835773",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c8464797-bf25-4ffe-84cd-afa62d804513"
        },
        "item": {
          "id": "17b86175-678a-415c-8cfa-7f45e440f6b4",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7df915c7-5eaf-4c43-9768-d39dd261d060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79323beb-3556-4147-a7dd-fb482a5bc572",
        "cursor": {
          "ref": "a3dd83d2-7d95-49ee-a8f4-bab1e92c73ca",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "51936864-d3fb-4934-a379-3f2002650725"
        },
        "item": {
          "id": "79323beb-3556-4147-a7dd-fb482a5bc572",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3047c9d0-b0c0-48bc-a6d0-43c67230748f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49c48e7-2c1b-4662-8f12-e29c4a89ab4a",
        "cursor": {
          "ref": "1cc5de9f-4c48-4b64-aff9-d6f8a74e5cee",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "63a57ed8-5f1b-4cc6-8bce-1c93f8b07380"
        },
        "item": {
          "id": "b49c48e7-2c1b-4662-8f12-e29c4a89ab4a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8f265d3e-6b53-4bce-8e98-9f269fc2c105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a2181b-b1eb-4376-8e3e-9c98b993f5b8",
        "cursor": {
          "ref": "7dc196c2-f1f5-47e0-bb59-a945103a0e9e",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cab84ade-e271-4e96-897b-fa4e9c6a5616"
        },
        "item": {
          "id": "b2a2181b-b1eb-4376-8e3e-9c98b993f5b8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4eb28860-e823-4c97-8fc7-5dd75a4b1a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70bba5ef-4131-4da4-a22d-1fcbc9795833",
        "cursor": {
          "ref": "690c1419-c15a-4bf0-a2fc-ec387367fba4",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e3b40043-d4d0-4aa2-9682-301fcc1af710"
        },
        "item": {
          "id": "70bba5ef-4131-4da4-a22d-1fcbc9795833",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0cca0c04-c658-4f17-af7b-e83c702ed830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d1ac57-c5c7-4287-836e-c41034732bf9",
        "cursor": {
          "ref": "5c24ed3e-0811-4798-a596-09495f2ff70c",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "005fb7eb-a450-46bb-b3f6-60c442f1dadc"
        },
        "item": {
          "id": "72d1ac57-c5c7-4287-836e-c41034732bf9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3ef30292-43a4-4ca7-bf6a-ee79d2453109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30c975a-a4c7-41e0-b3c1-c0b2076251b5",
        "cursor": {
          "ref": "d7142e4c-fe56-46de-a34c-1f6589e7f52c",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e1002444-3f86-422b-bc84-3e59d92852e5"
        },
        "item": {
          "id": "a30c975a-a4c7-41e0-b3c1-c0b2076251b5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "849e685e-7e40-4e2e-bbc3-d4b053b9ae43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe6f689-15f9-467b-84ba-bf14731f020a",
        "cursor": {
          "ref": "57b954a4-b113-4b83-b525-b854715a3e67",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "fa6f51ab-152a-4c5d-a69c-0d062ab1498d"
        },
        "item": {
          "id": "afe6f689-15f9-467b-84ba-bf14731f020a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b14e1b08-bc71-43a3-a554-a2bc6da91e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783014fc-8820-417e-b228-afd6368bc016",
        "cursor": {
          "ref": "aa2bc85a-d68b-4ade-98d2-fa20f2176204",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "86fdcf1d-18db-4c12-af31-27d1fb86e769"
        },
        "item": {
          "id": "783014fc-8820-417e-b228-afd6368bc016",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1320909c-ddf6-46e1-ad36-c8d9f63b8a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ceadd53-4fb4-4835-a613-b2abd30b5448",
        "cursor": {
          "ref": "a2246f51-18fd-4d7a-b06b-e0d5d9d84448",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2d3bdf16-9f45-4155-a904-89b8937a630d"
        },
        "item": {
          "id": "8ceadd53-4fb4-4835-a613-b2abd30b5448",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "28f4c51b-cebd-42b0-a0d2-19c22230ef99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26474887-5bb8-40c3-813f-21f5c66d8f78",
        "cursor": {
          "ref": "049b5368-2fe8-4f0f-b485-25534a195c44",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8633fe0e-90dd-4b97-b417-66053e1a7743"
        },
        "item": {
          "id": "26474887-5bb8-40c3-813f-21f5c66d8f78",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "99cf0687-e5a5-4370-a258-2de2f4446528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3023bf23-2be5-46d7-a782-5febf930044c",
        "cursor": {
          "ref": "458768f4-1908-4e62-a7d3-c2ae22fb9f60",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "21449360-daf3-493e-b626-9805745bd581"
        },
        "item": {
          "id": "3023bf23-2be5-46d7-a782-5febf930044c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a375bbbd-d053-40dc-9afc-1f2d67635cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff5afdb-59a6-40c9-aeaa-50a4b26c0e81",
        "cursor": {
          "ref": "467e8c2a-12b3-4557-ac8a-173976fb9e42",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "112e310a-0183-446b-800d-5f5e97114273"
        },
        "item": {
          "id": "6ff5afdb-59a6-40c9-aeaa-50a4b26c0e81",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "73945f87-6928-413f-be8f-9173fd37e7aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "523d31d1-a3dd-40ef-9ecf-b4567caf5665",
        "cursor": {
          "ref": "6ade59f4-a982-446d-a63c-eb7f74d7562c",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cca4e396-c589-4937-9c8a-c4331d35f749"
        },
        "item": {
          "id": "523d31d1-a3dd-40ef-9ecf-b4567caf5665",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "edd3e4b6-c08d-42c1-aba7-d54b9f8247fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02303bbd-1e87-491c-ae0b-20a08be532a9",
        "cursor": {
          "ref": "2f31abcf-3b2d-4754-b458-3c7dbebfa063",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "30a1f6b9-054c-4535-bdb0-3de651f2ed8d"
        },
        "item": {
          "id": "02303bbd-1e87-491c-ae0b-20a08be532a9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a10f3706-3c51-4737-855f-a359a1fd1a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69123c4a-5f39-4040-b01e-bc84cd946717",
        "cursor": {
          "ref": "d2e667ea-a555-498e-9a44-1ac22f16648b",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "52e395bc-86fe-432c-a5b1-cc822fda62f9"
        },
        "item": {
          "id": "69123c4a-5f39-4040-b01e-bc84cd946717",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a2e9cd0a-da03-4a3c-be08-27cad5ac32c3",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "e5ee0efe-e2e6-428f-931c-7deed3236278",
        "cursor": {
          "ref": "bc367d2f-4048-48fb-9add-f25f4cb6945a",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "12912da7-c405-43dd-8ebf-09708402abd3"
        },
        "item": {
          "id": "e5ee0efe-e2e6-428f-931c-7deed3236278",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5e29cc23-04e7-4940-b4c6-be4f8b9afa89",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "14c80b2a-1545-4c92-893a-631d5cd7e29a",
        "cursor": {
          "ref": "7e3e83ce-4aac-4320-9679-a65d413c2e11",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1241754c-a2c3-4653-b4bc-8c992f4003a5"
        },
        "item": {
          "id": "14c80b2a-1545-4c92-893a-631d5cd7e29a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4acadb10-5688-412f-8fbc-d35e7cfedd6a",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "49378ff0-c955-41b5-a57c-f9952f3381bd",
        "cursor": {
          "ref": "58a2644c-7370-4571-bd76-20d9b175e810",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2ef6c51e-7a35-4146-9167-75fddc2c005a"
        },
        "item": {
          "id": "49378ff0-c955-41b5-a57c-f9952f3381bd",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a8af22c5-9a1b-4ed2-a90c-4fead5c6cc20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8631af26-40c7-4ebb-973c-3d29fac9441d",
        "cursor": {
          "ref": "4743c4b4-d9ac-4ff0-91be-2355a1f4130b",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b8430ba4-2f8c-40e6-a817-7e52b33cf2d1"
        },
        "item": {
          "id": "8631af26-40c7-4ebb-973c-3d29fac9441d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8521299c-03bf-4e82-ab9f-a106889f7a42",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "e32b92d2-a467-4974-bd66-f783fcd44390",
        "cursor": {
          "ref": "652438e5-3e4a-4b09-a4e5-913634359ad3",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b42ecb3c-d8ff-4369-ae90-fa63f0e8abcb"
        },
        "item": {
          "id": "e32b92d2-a467-4974-bd66-f783fcd44390",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3e2b2ea6-cd14-4474-89ae-12913b5ff66d",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "193fee43-3282-40da-acdf-d6a088f4b8b4",
        "cursor": {
          "ref": "5cc89b5c-708c-49d3-8c81-34244081cb8b",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fb0890a3-0516-428d-973a-a425ad62f5ff"
        },
        "item": {
          "id": "193fee43-3282-40da-acdf-d6a088f4b8b4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4c8b8d54-675c-406d-a4ae-42cc5686edef",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "c5c045ea-db3c-4023-a58f-bc3b3bad9943",
        "cursor": {
          "ref": "232a20e6-4f4c-4a72-bcb9-521623af20ef",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ab37e7df-5afb-4380-9ae1-5e097ba2f4d6"
        },
        "item": {
          "id": "c5c045ea-db3c-4023-a58f-bc3b3bad9943",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5ebfe4ba-0d2f-4475-a265-41af90d18a8b",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "a271389f-175f-4ac5-8b03-2a600360041c",
        "cursor": {
          "ref": "22354f4a-352a-4b38-bf5f-0e0d72ccd7ea",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3710e80c-f2a2-4f1a-afd7-5ca5d44a17ca"
        },
        "item": {
          "id": "a271389f-175f-4ac5-8b03-2a600360041c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bf8f0671-05e1-4c98-a607-ff13b2e4485f",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "319bf843-b110-4f40-bad0-4749dc5245f1",
        "cursor": {
          "ref": "e0c35e5c-9a24-4fdc-974b-d858f4e82f6e",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4df07a70-912d-4977-9ffc-8348d366656c"
        },
        "item": {
          "id": "319bf843-b110-4f40-bad0-4749dc5245f1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3cc06544-c46f-4b1e-8ef3-91e4f7801f61",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "5d80e303-e91c-44f3-ac27-a813dea6ba6d",
        "cursor": {
          "ref": "66d9e9d3-29c2-4838-9b5f-08d6b86f10d7",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "56ba1da6-5cbf-4e01-a1eb-0752df05fc70"
        },
        "item": {
          "id": "5d80e303-e91c-44f3-ac27-a813dea6ba6d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d704c026-a1e6-4dcf-8e2b-93ffc398c5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e59960-4c27-4cf3-82b6-3238b62fe20e",
        "cursor": {
          "ref": "3f44e4cb-607c-4c3a-afd1-ffadc4dc58dc",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7d19e80d-fb39-4d14-b133-1a1fe77a1a47"
        },
        "item": {
          "id": "73e59960-4c27-4cf3-82b6-3238b62fe20e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4c1cc230-2046-4e40-9890-418f8c2bc1c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3d9b4d-6396-4a7f-85cc-afd4582cba1a",
        "cursor": {
          "ref": "16c52ba9-4e82-440c-89ed-d7b3a170ef3c",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0e875611-169a-4932-87a6-0215dfd7ca66"
        },
        "item": {
          "id": "fe3d9b4d-6396-4a7f-85cc-afd4582cba1a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a6c0ef33-8f69-4b8f-97df-fcf3af57f47c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f461c0-df48-4a70-b99e-301d8e585009",
        "cursor": {
          "ref": "569c6fbe-c47c-400f-81f6-bfa07c9da8e7",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a0a16404-c51f-4bbb-82a3-a22c445e2497"
        },
        "item": {
          "id": "14f461c0-df48-4a70-b99e-301d8e585009",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9b7f8ce3-74d8-4661-b40e-3e245bf251fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13af7097-1f2b-4634-8354-b93e0eb99a7a",
        "cursor": {
          "ref": "9be0c88b-b59f-4c75-9d9a-b3b1d5a47f7a",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "399345eb-511e-40b4-b00a-185d34e82aa5"
        },
        "item": {
          "id": "13af7097-1f2b-4634-8354-b93e0eb99a7a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e932defc-bac4-42e7-8543-422ab25f23e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c06ccef-a0d4-4310-a0da-cfe27f55aefa",
        "cursor": {
          "ref": "0ea4da89-320a-461a-863f-750980316544",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3b578a34-11db-4d00-aee5-9fb5229e3bf3"
        },
        "item": {
          "id": "3c06ccef-a0d4-4310-a0da-cfe27f55aefa",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "bec74101-a87a-4d2d-8f6f-188b0a4658d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9951a7-5619-45e7-ae7c-4be3aa4a0f3b",
        "cursor": {
          "ref": "4975f1b8-54d4-434e-b814-3910b7c66c8f",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "df5ea5c8-9aa7-4a71-917f-423b43ddc50c"
        },
        "item": {
          "id": "7e9951a7-5619-45e7-ae7c-4be3aa4a0f3b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7ab3586b-f12c-4e5a-804b-5b42d038ae80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0277f5-33dd-4b13-b642-54f28b56b54f",
        "cursor": {
          "ref": "7b362f59-4fa3-4a7c-be45-119654839f35",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "68b2ac7f-0a04-4363-b578-7500e9e7aa97"
        },
        "item": {
          "id": "ae0277f5-33dd-4b13-b642-54f28b56b54f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d88c2eff-1567-4ce1-8f40-3b41736c0a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e630d9-3d84-48fd-9598-0ac36e536d0d",
        "cursor": {
          "ref": "a6094876-80b3-4a05-a498-81a94c6bb98f",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "516acc57-8fcd-49c6-b636-67bc7de2e2cb"
        },
        "item": {
          "id": "16e630d9-3d84-48fd-9598-0ac36e536d0d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "502811fb-1830-4ab8-a98b-38aef5a7522e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ddddce-b318-4a0f-ba31-ebf69bcb59d0",
        "cursor": {
          "ref": "6becc426-e30d-4ac8-9d1c-6a197928509d",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "dd3ef511-77c5-4676-b02a-8477d742add1"
        },
        "item": {
          "id": "d5ddddce-b318-4a0f-ba31-ebf69bcb59d0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4b5a20a6-6b49-40be-b7a9-a60eabfe515c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66d62ef-5171-43cc-8d17-af5d5fdb36d8",
        "cursor": {
          "ref": "61a3b176-3791-4d3b-8f47-da41a285870e",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "577d8b0b-0a96-4c83-9d00-3c7a58b31916"
        },
        "item": {
          "id": "d66d62ef-5171-43cc-8d17-af5d5fdb36d8",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5e331032-319c-451d-bdf1-15a01c0fcd1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce63eb0a-a7f3-4570-b1b0-25abfcbed300",
        "cursor": {
          "ref": "ac8e85af-4102-4658-be71-401c1f34457b",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "347155d9-61dc-4d35-af34-f002fdf4edf1"
        },
        "item": {
          "id": "ce63eb0a-a7f3-4570-b1b0-25abfcbed300",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e50326a9-2292-4c8c-9d65-e1ba110c785a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3502dd60-02e3-46ca-a328-fca304f421e3",
        "cursor": {
          "ref": "f79ad6d4-b5b5-430a-8940-3075c4821bd9",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1fdb39a9-c30a-488e-a90c-18785be1e96a"
        },
        "item": {
          "id": "3502dd60-02e3-46ca-a328-fca304f421e3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ffa2775d-08c5-4d12-b50f-4c0729262282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579fad56-cfa9-4ea9-9ba4-b24b84a7c123",
        "cursor": {
          "ref": "079e8aa4-b183-4a80-ae2a-cf00f2cea46c",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fa0fc07d-dd03-4b10-a1c0-a4a1ec17cbdb"
        },
        "item": {
          "id": "579fad56-cfa9-4ea9-9ba4-b24b84a7c123",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "78b85e30-5f7f-484d-a879-a0be1d28b2ce",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "e0faa6fe-6415-45ae-a5a9-54edb866c9e4",
        "cursor": {
          "ref": "1200caa5-8d84-4724-878b-027d35c09c84",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e01c8624-ff30-48f7-b21b-065a3faed0bb"
        },
        "item": {
          "id": "e0faa6fe-6415-45ae-a5a9-54edb866c9e4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b7aa1a34-ae72-43d2-96f2-07778a989eae",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b27208b8-b3dd-42df-9cb4-ae88abebaaf9",
        "cursor": {
          "ref": "714582bf-9c85-420a-9cdc-b092398a1a85",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3891b8e0-5b69-43cd-bab4-989f950fbbcb"
        },
        "item": {
          "id": "b27208b8-b3dd-42df-9cb4-ae88abebaaf9",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d7308cd4-bdd0-44d5-8564-1701a32691cb",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "413827b6-1ab1-43aa-a1c3-bb55ed165301",
        "cursor": {
          "ref": "d5343763-495e-4f8b-b0f4-a4e06a939c36",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7638c75c-2e97-4b2a-b51f-dbdab214c97a"
        },
        "item": {
          "id": "413827b6-1ab1-43aa-a1c3-bb55ed165301",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "681bda4d-5d82-4fcd-823f-8eb1338ab774",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e77b6c0c-2873-40bc-918c-7e0802ca51a9",
        "cursor": {
          "ref": "e45feafe-957e-4e84-b3cc-f197f46c5689",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7bbcd887-4c61-4f7b-879b-64ba6a0bc996"
        },
        "item": {
          "id": "e77b6c0c-2873-40bc-918c-7e0802ca51a9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0964b032-b9dd-4d7c-b779-5e145a0ce5e2",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "533f49c4-6837-4683-bb37-f88f1c0a4bfc",
        "cursor": {
          "ref": "b74fdfec-158f-44d0-8907-f2ac3d57f05f",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ecf7128e-da45-4af2-ae6a-195967357db9"
        },
        "item": {
          "id": "533f49c4-6837-4683-bb37-f88f1c0a4bfc",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0d155cc5-7d49-473b-a4a4-b102ac11e569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed923d0-1aaa-4d0e-a830-24097770c0b7",
        "cursor": {
          "ref": "8fa8eba8-f306-4add-86c2-99c181781680",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7261aa2f-4ec6-4f2e-bd30-4d56257d3dcf"
        },
        "item": {
          "id": "9ed923d0-1aaa-4d0e-a830-24097770c0b7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "46ecc887-a04c-4821-afbe-4e58ff4d0898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8504b1-6135-48ae-871b-8ce843c56f8d",
        "cursor": {
          "ref": "9ef54e99-81b1-4037-9347-b8af978d88dc",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "89446cfe-79cc-44b4-83f1-4b6a6c60b93a"
        },
        "item": {
          "id": "8d8504b1-6135-48ae-871b-8ce843c56f8d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "96ed6673-7fb7-4611-9e6c-659d5b71bc7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02330e4a-dc9e-4c3b-9783-64c896854cce",
        "cursor": {
          "ref": "53fa1a48-5512-4eb6-b9a3-ad394eaa31aa",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "25e144d6-95af-4ae0-b48c-c09fee248ada"
        },
        "item": {
          "id": "02330e4a-dc9e-4c3b-9783-64c896854cce",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d54c82fd-44b1-40fe-9a96-8db1298cdafb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7440b39e-3b55-4462-8208-c9f5f9186243",
        "cursor": {
          "ref": "4abca235-8680-41be-849c-fef80c1f2a6f",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9f297c66-a752-4de5-b8db-256808c3cd02"
        },
        "item": {
          "id": "7440b39e-3b55-4462-8208-c9f5f9186243",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7b5be3ff-d909-4f97-8b1e-3ccbe3192cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307bcd85-0708-4c72-8434-4e8940454adb",
        "cursor": {
          "ref": "7abbf319-273d-4595-965f-bad804fa4ec9",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "115ea83d-b972-45eb-b8ba-51eb41623610"
        },
        "item": {
          "id": "307bcd85-0708-4c72-8434-4e8940454adb",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "739a39de-78f6-4b2e-908c-9ff56a481e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a9085a-5524-48c9-b879-04c1dbc098c0",
        "cursor": {
          "ref": "d2362294-a610-4bc0-83ec-6ff870c1668b",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d80f81de-ceb3-4874-bdb1-4aa3fe774938"
        },
        "item": {
          "id": "d6a9085a-5524-48c9-b879-04c1dbc098c0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "417950e1-fb55-4b27-86fc-cf82be1f6ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa23a7e-ca06-47dd-8f85-a38e68b4319c",
        "cursor": {
          "ref": "8e15b72f-e39d-461d-9a46-d599439a09b6",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "85c73a42-02d7-4d36-9587-3b0b44e6d179"
        },
        "item": {
          "id": "8fa23a7e-ca06-47dd-8f85-a38e68b4319c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6c8210a1-b153-40a2-9286-b56b2e4a0917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf2b809-6bff-4120-b446-bdcd5bab8cdc",
        "cursor": {
          "ref": "fbc9eea8-a47d-4a4f-9a27-a201e0591725",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "78ec92a6-5e23-4841-aa71-6fc1e010c641"
        },
        "item": {
          "id": "3cf2b809-6bff-4120-b446-bdcd5bab8cdc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "641fc3e1-e142-4191-8899-4349c3274fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348b3cfa-51cd-48dc-90c4-3fccb71a6a95",
        "cursor": {
          "ref": "de5f3b5a-2424-4aba-850e-88e5155362e5",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "cd8150b1-3d15-4b27-80bc-e805d26073f1"
        },
        "item": {
          "id": "348b3cfa-51cd-48dc-90c4-3fccb71a6a95",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a5cbc3a0-b9f2-4879-a60b-0290b34975fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d40fae9-ff4b-43b4-9c50-1fb3d7a5dbdc",
        "cursor": {
          "ref": "5474a680-6359-4e61-84e1-0375c0765328",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "08d58a70-2c3a-4b65-8da3-3bbac8390e8d"
        },
        "item": {
          "id": "8d40fae9-ff4b-43b4-9c50-1fb3d7a5dbdc",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c32bccb0-0eff-48f9-b807-9b07d22cd797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72443902-ab6a-4588-9a6e-2dc1e2b3d08e",
        "cursor": {
          "ref": "7a01d8d5-be44-4a75-ba06-15e17c23012d",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "0ce812d0-8803-4098-b5e4-97a63411fdf6"
        },
        "item": {
          "id": "72443902-ab6a-4588-9a6e-2dc1e2b3d08e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "77cb155b-7023-4bff-93bd-6bbca7e804c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d42d61-1f0d-4d9b-bb5d-96f4086f01d7",
        "cursor": {
          "ref": "c283d88c-fd6d-4a9f-b272-f9e2dd86dff8",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "5679c76f-2e17-479a-99aa-cde20c0be914"
        },
        "item": {
          "id": "59d42d61-1f0d-4d9b-bb5d-96f4086f01d7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c53e4234-c353-4395-bb5a-c68efbb6b448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd065dcf-6fa1-4ce8-8edb-a6c0d72a7439",
        "cursor": {
          "ref": "6982a5c6-a2f6-44a9-a86b-9498602594a5",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "b634b272-935d-4b7e-8c95-980d5c7f1fea"
        },
        "item": {
          "id": "cd065dcf-6fa1-4ce8-8edb-a6c0d72a7439",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b2a3aa0b-bec1-4873-ba35-b85c3ae559ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38b59d2-6e67-4f23-8850-ea5afd987467",
        "cursor": {
          "ref": "8a8be931-4d35-4ff5-824a-01439581776d",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "88938a67-0517-420b-9171-151b8db2a5b8"
        },
        "item": {
          "id": "f38b59d2-6e67-4f23-8850-ea5afd987467",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "acfda731-f518-49de-91f3-93727707c69d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b522dbc2-0835-4a12-b045-6cc1b560f14d",
        "cursor": {
          "ref": "ce1bb61d-afc5-434a-b7c2-17b7e93f8aa1",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "03cc263f-cddb-4e4b-bf58-1aad715a7c0f"
        },
        "item": {
          "id": "b522dbc2-0835-4a12-b045-6cc1b560f14d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d25baa78-7f55-4fa9-86c5-0944a975c7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b49fbb-fe48-4e4d-bf3c-e8c2fef3b607",
        "cursor": {
          "ref": "13acb962-e732-4d2d-83e0-62dc9ff3fb92",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "7a752a0b-be6e-4171-93c5-965d606d34d3"
        },
        "item": {
          "id": "04b49fbb-fe48-4e4d-bf3c-e8c2fef3b607",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "86609b47-207e-4e24-ab8f-bd46f1ef07ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d5d8863-b5e8-4d8d-abc2-8de059b303f1",
        "cursor": {
          "ref": "d1b5fd80-b485-40b7-97ca-eb28f9a4f7a6",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "12c35227-312d-4ee8-ade3-fd9045c335a9"
        },
        "item": {
          "id": "7d5d8863-b5e8-4d8d-abc2-8de059b303f1",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6a11a5a8-dce3-444b-a257-3893f4b5657c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83c204ea-8950-495c-928d-dab67c666cff",
        "cursor": {
          "ref": "96e8dfbb-5e30-4e82-a371-1bcca9ca47a4",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "3c8d9a6d-511c-4581-8ecf-4cb8e3f6b69a"
        },
        "item": {
          "id": "83c204ea-8950-495c-928d-dab67c666cff",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7790ce51-f004-46d1-b98a-8f0ec03a9d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d297e3ab-1ece-4cc7-9608-b476cf46be30",
        "cursor": {
          "ref": "30f41d78-9a22-4ebe-ad11-8f40eb9228f5",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "867c14f1-8db2-4a98-a558-15544c7a85fe"
        },
        "item": {
          "id": "d297e3ab-1ece-4cc7-9608-b476cf46be30",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "671e76be-1433-4238-a25b-69b14ede73b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66868f14-25f6-4bdf-bb7c-483ad2fd2adc",
        "cursor": {
          "ref": "898f05fa-3f9d-44a4-8f51-75c6cca216d2",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "909df621-abb6-4396-ab70-b236a0661cf1"
        },
        "item": {
          "id": "66868f14-25f6-4bdf-bb7c-483ad2fd2adc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7075b603-5be5-42b7-a5d0-a14671c895df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7633d412-f10d-4393-bb43-a909b3dbdce5",
        "cursor": {
          "ref": "3dda03e0-2f1e-443a-b365-99300c36364d",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "c9494c7b-4175-422d-8506-c8ebcd262782"
        },
        "item": {
          "id": "7633d412-f10d-4393-bb43-a909b3dbdce5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "74c9f500-8c08-490f-a9be-8eb2dbcc66ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb99773e-fc24-4f37-9d60-1116b247d772",
        "cursor": {
          "ref": "c16a9292-0b39-4518-971a-af413db022df",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a6961784-4e2a-4790-bd81-bc53ac3b815d"
        },
        "item": {
          "id": "bb99773e-fc24-4f37-9d60-1116b247d772",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "82adb9d2-f981-46a7-ba4e-97ff8d58713c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800ae2b8-8825-47b8-a197-44fc9a4d8b59",
        "cursor": {
          "ref": "d676bf8f-d537-46d6-96ec-13471f59c5ea",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "7a47d8b3-cb66-41de-985c-32a9c30fd857"
        },
        "item": {
          "id": "800ae2b8-8825-47b8-a197-44fc9a4d8b59",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "14ad2ac8-0bee-4dfe-ad8d-65435d050b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d22e9ec-9782-42b7-985f-502495720f7b",
        "cursor": {
          "ref": "a31145e4-51d0-4f53-945a-72db334e7bfe",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "ccd0dbb0-6077-4167-833d-c50c55434fd0"
        },
        "item": {
          "id": "4d22e9ec-9782-42b7-985f-502495720f7b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "598b5002-4154-4d64-b622-4c7ac19c8c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4600bdc8-a9dd-484b-a30b-9a3327dd8921",
        "cursor": {
          "ref": "e51970e3-4e52-49d8-8f89-08b4271613d3",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "256119a9-bd52-4fe9-9b4b-13507cb13e3b"
        },
        "item": {
          "id": "4600bdc8-a9dd-484b-a30b-9a3327dd8921",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "71c099bb-436b-478c-a096-dca847415bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31072d02-8f2b-4aeb-b836-954478ff5d80",
        "cursor": {
          "ref": "3c18d313-a5ab-4949-bf3e-be52e5cfdc94",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "04d19602-08f9-4e5b-a980-baeff1e1fe6c"
        },
        "item": {
          "id": "31072d02-8f2b-4aeb-b836-954478ff5d80",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e305953b-2af9-4a1d-b646-01972009ddd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d783cbe4-c35b-43ac-b7e1-4e29ad365430",
        "cursor": {
          "ref": "f9a77070-878b-469a-beb9-5c70fcccc307",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "585e88b0-2da7-49f9-b706-25fb069c3a48"
        },
        "item": {
          "id": "d783cbe4-c35b-43ac-b7e1-4e29ad365430",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e114a050-0780-4780-a111-fb3bf8f15c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7dec9af-aec9-4842-993c-f5a04ab91a62",
        "cursor": {
          "ref": "4bd92b5b-6d42-4d35-acc6-776c492bace2",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "655d8632-7b8e-44a9-ac3c-4f97ec6e4b38"
        },
        "item": {
          "id": "e7dec9af-aec9-4842-993c-f5a04ab91a62",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f4020591-8a59-4c9f-8304-544663a8f29e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758df883-3977-41f0-9589-3bb6464174dc",
        "cursor": {
          "ref": "9b4e611b-d22b-45c4-bb2a-52fc994bc6ad",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "5c05cdc0-d6c2-4084-b4e2-08cd352edf22"
        },
        "item": {
          "id": "758df883-3977-41f0-9589-3bb6464174dc",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ea07608f-e80d-470a-854e-c481e04edb53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391a4e49-460c-4b75-b33a-b84b5869a56d",
        "cursor": {
          "ref": "eb53a8a6-6eea-4f64-a576-75ef6deaf816",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1c4c2e01-644d-442e-a5c3-03431cd8d935"
        },
        "item": {
          "id": "391a4e49-460c-4b75-b33a-b84b5869a56d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2470e5bd-ad74-433a-97fc-91e03061e0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae47b63b-c930-44ed-9284-15ea4aa149c7",
        "cursor": {
          "ref": "c069ca96-b3f5-4e57-aba0-a9d6a89d84a6",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "17c1ebd3-fc4c-4b66-b7da-47ac6c83fbd1"
        },
        "item": {
          "id": "ae47b63b-c930-44ed-9284-15ea4aa149c7",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c8efb76b-3f17-4303-91fc-7209d85cafaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f41775-bf24-4434-b64e-0a888052c42e",
        "cursor": {
          "ref": "6979b66e-1510-42bf-925b-169f7c2d5cad",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "dd82fe68-7a3a-44d7-ab65-53bb0fa0fb8e"
        },
        "item": {
          "id": "d7f41775-bf24-4434-b64e-0a888052c42e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "df6866c7-5615-4cd0-8465-b78457950293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a2934a-a14d-49a3-afb9-497ae48e8383",
        "cursor": {
          "ref": "682315bc-e9cf-418a-b154-86d65c60e7ea",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "21ab1deb-2a7e-44dd-83e4-e50fb31ebf70"
        },
        "item": {
          "id": "83a2934a-a14d-49a3-afb9-497ae48e8383",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9d1c74a8-f400-49bf-a8b1-db74e701ab44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe740686-10cc-4912-9b1d-c36d556080bb",
        "cursor": {
          "ref": "b6b528cf-ae23-42d5-ac56-ddee6f66176e",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "08771f9a-c785-431d-9abb-0d84e7e58ee6"
        },
        "item": {
          "id": "fe740686-10cc-4912-9b1d-c36d556080bb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ceb94690-a9ba-490c-a5b7-b2ac59c207db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c22de7-f9be-4bf3-b244-40c60199c9a2",
        "cursor": {
          "ref": "96caee1d-a685-46a0-bad1-9bfbf290150e",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "cf0a1540-fb5a-47a6-aa6f-8fce4bff9f18"
        },
        "item": {
          "id": "04c22de7-f9be-4bf3-b244-40c60199c9a2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a3be8eaf-9312-41c4-b1a9-024d0c7e8787",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "45ed359d-5f95-48e8-8b49-d1df92c4a911",
        "cursor": {
          "ref": "9bb52f66-7d4f-4fde-af50-12bf819fd3b0",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "029080d0-7a4e-42c7-8662-11499d39fe32"
        },
        "item": {
          "id": "45ed359d-5f95-48e8-8b49-d1df92c4a911",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ae4410ad-6ff5-402f-a59e-828299f0bfa0",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "206eab37-4ed1-4817-a9b9-cd5d8b444b85",
        "cursor": {
          "ref": "28399752-0721-4811-b561-7b77f2464749",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ecaccfec-8e7f-40d1-babc-f8caef0684b1"
        },
        "item": {
          "id": "206eab37-4ed1-4817-a9b9-cd5d8b444b85",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "fbe917d9-a80e-4e1e-8e89-76ccdc4f37e1",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4719f74-d62f-4498-9490-bfa56dce67dc",
        "cursor": {
          "ref": "03109048-e9d3-4863-973f-183d18f5371a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ad201eb1-db3c-463c-90fd-977b7d8bdcf1"
        },
        "item": {
          "id": "d4719f74-d62f-4498-9490-bfa56dce67dc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b7b057a4-b42e-40b9-b973-80ea5cfa0daa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4719f74-d62f-4498-9490-bfa56dce67dc",
        "cursor": {
          "ref": "03109048-e9d3-4863-973f-183d18f5371a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ad201eb1-db3c-463c-90fd-977b7d8bdcf1"
        },
        "item": {
          "id": "d4719f74-d62f-4498-9490-bfa56dce67dc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b7b057a4-b42e-40b9-b973-80ea5cfa0daa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d79f67-a7a6-43fe-8525-4af065e01519",
        "cursor": {
          "ref": "b4040971-84df-41be-9965-243ea72fcc99",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f7ffd56d-edb3-478e-90ff-63928409b6be"
        },
        "item": {
          "id": "e1d79f67-a7a6-43fe-8525-4af065e01519",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "45510507-f474-4d77-ba5f-b027dbd5c6b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6177ba5-3ef4-4a64-9cb3-0fd38091451c",
        "cursor": {
          "ref": "d80a663d-c8b6-4774-ba69-da6bee01700d",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "22de4afa-9c87-47a9-bce9-72b7b024a204"
        },
        "item": {
          "id": "d6177ba5-3ef4-4a64-9cb3-0fd38091451c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9f03da88-6762-4fff-9ca9-a5181c6247b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}