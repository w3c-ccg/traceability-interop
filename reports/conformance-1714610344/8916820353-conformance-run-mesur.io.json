{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "edccaf06-a0ca-40d0-b806-d4815b69a537",
        "name": "Clear Cache",
        "item": [
          {
            "id": "eb6b20ce-4298-4350-bfe2-f88d76dc5d81",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d38cdbbd-c49f-46dc-85b9-5fb3eb83ab80",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4bfdef53-c554-4530-84ca-5d1c92aed6c6"
                }
              }
            ]
          },
          {
            "id": "7ffce925-1ebc-4699-bb80-558c63f29665",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ddd2f82a-318a-4d92-8bcf-aa57a3a7016c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4d3bb049-e8e0-4866-a6b9-fc8cab2e9209"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6002121c-9b74-4f2b-8ca3-7b135ac607f9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f4b98e95-99e7-434b-867e-9e462f98c709",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9d615c08-61a2-43dd-82ab-d9cee6a4f0da",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44c6b9db-5176-4ffa-b0d7-cb49d394b483",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "73a7cc3e-a343-4ece-83ef-603c72993237"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a3a21626-ac01-4b48-b902-70ea04d9215e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "caac3455-0173-4cb5-82ea-e848b84ac9de"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6e919993-4ad0-4d10-9792-c673e30ede95",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cdf1dd24-f5e6-4c3c-a8e7-74a0464cd182"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42dc13ff-d265-4794-8071-04f5ab803e77",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6aee67d7-492b-48e3-9f7e-9129b6ba6159"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70b537eb-c442-4fa8-865d-d8d47514bb43",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2d97b7bc-2eea-45ca-bec6-32361a0e95c5"
            }
          }
        ]
      },
      {
        "id": "1147a9e7-0027-44f3-9e6d-0b8aeeb079de",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "608995e8-eabf-46b5-a8d2-092ecca92cae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e1b5530-aabc-4157-b3f7-c2962f3c5820",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5bebe4d6-3253-4351-a859-f733efd6d7bd",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48750d49-c1b6-4e3d-a07b-c66e3eabf6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "966bed17-99a1-4d82-9e9b-46e1ff18042b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aafb4d2c-3a1b-4f6b-ad8d-013436ef99ac",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8896ad4-bc5a-4221-a8ef-6b57393a4ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1802c0d-c2ea-4e18-893a-e11278fb1ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3380b67-2424-4ce4-8f86-e01eee185518",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e1efaa-5b3c-4e0b-a822-43e3d7b46b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbf28986-bc61-4958-8ec4-d47bf332a962"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4a0e7c61-adf8-44c5-86e5-b3a9fad0cca2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "64e8d404-303e-4772-b523-c29a86fc183d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4fe7fe-2437-4633-89ac-2af819a4cbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f75c0aa1-b44c-4923-8882-a57606864db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2a3eaa-e4d0-42c2-92d9-9adca331bed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd4c51f-377d-4517-a788-6c468aa61c14"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d531d102-5b64-45d0-a5e7-760641ac72f5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3e94df1d-8cda-4377-9d13-b6be9e67480f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df7ceda3-40f1-4ffc-ad1d-dbb36b66ef4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2cdd5122-b5c3-4eb2-abdd-1d8e16595a4f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3480c1f0-d361-4288-a249-52867239e5a5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "71359791-bf96-4b39-bbe5-6ba9d7b804f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1032e537-f98e-4d88-9652-52e9c850778c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ecfbc8f-d89b-4a4f-8f6e-9469f805b080"
            }
          }
        ]
      },
      {
        "id": "522b98a7-63d7-4c23-a7b6-ef17d397b62f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "036b150c-c427-4537-bb81-3cd55fe1cc2f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9c18e7a9-caeb-4375-ab86-6243538fb4b8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ffb91abf-4f1f-499d-8a44-f2167cddccc0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3ed879-3c35-4354-92a4-7d0d7ade68d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "110ab3c5-1891-4bf8-8e36-0ecdc6c841cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6f09af-4bab-4628-b86a-4843d1f12c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6288280c-8927-4e6a-8465-822d86c13df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b243c24-4e7e-49dd-9619-bdfe86caf7ed",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66e7e05-e4e0-4cdd-a5d4-1049d617234a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "437b98db-b10c-45bf-aae8-3aaa9401a1b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff99e79-2659-439b-9814-890906353c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6fee1e5-e9f7-4e89-8a46-15d37627251a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ed6d7c-f74b-41dc-90f2-2c297525b1d0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "983ffac5-f074-4e7d-bf65-efd50ab03e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fe07ae8-af45-4380-b5a5-f686c445f74e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba94447-db3c-455f-ba8e-6c6b5e51739f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a04fac4-0548-48d0-b1a1-9191150dd610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d884597-e620-49f3-bad4-6c98126781cf",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1309f850-d2db-42a3-91e5-1eec532da209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86de5867-1f5b-4f59-ab4e-8ac3ab24ebfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782a0411-2520-4c4e-81c7-1ed291c65385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9dd532ac-69d9-4d55-aa71-ff268e6af4ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55b5df1-9055-4eb1-9c97-b405021dfac7",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2b904f-7db7-4dd9-b31d-42329a6d3dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9be4ae4-46a8-4efb-b090-41f2ed703547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f89539-2d01-4a5a-be1d-e58571a86587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d8f9007-2c3d-4f00-a760-10a760bf0c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71820211-b322-403c-89c5-5ee68c680fd9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6fea939-af9f-4212-88a6-2161474a08a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ca9bde6-e60c-4783-b20f-dd4ed82e5a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1729f0c2-edb4-4108-b6b3-39d37bc3705e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afa3ebeb-7216-4a24-a042-30ad6fa395fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2503863f-0c6d-49cb-a6ea-bd9f7c38e0e5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59aefbc-1dd8-42eb-a1a3-e4a9eb7941aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd0b34d7-31b7-4f62-b552-a08cd7c408ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030d91f7-178f-4640-8d8d-dc06b59151e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eaad51d8-8c80-4a9d-81ef-fecb2ad69778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815cc6ce-185f-406e-97e5-f5928ef4f89c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41f7d84-0a24-4143-b437-cff32a3cd038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce3bef38-f6aa-4cf6-973f-e66ed54bebca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15aa83d-0615-4efe-8426-856e10cbfdd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1c5692e-569d-4ce3-9b0d-f0f83194c050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9d1058-ee98-4caf-bc51-084eb79e5e27",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e9092c-a944-406e-bd76-9a3f27abd8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b0b8552-1fa2-48ed-aefb-2672c54135e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b6b458-1b8d-479f-b6ac-e4d3682baac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12f9b866-b174-486f-a8c9-7f9e73e09817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc103227-9fc7-49fe-9915-f4205b88c225",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3979c7-a1c8-4e98-8d7a-8d44b2cafe0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef1d4aea-99e8-4903-9949-df64aea1102f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ad618f-3cfe-4d16-aad7-b180aeef1f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca0ad312-fedd-48e6-8efb-c7800e46a533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea14b67-b020-4854-ad4e-e2d51609124c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58079108-9268-48e5-8acb-a9034d6e5d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3935691-7f75-45ed-9077-b544fb3b34c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2fa0836-328e-4376-934a-6a7885799a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ddfc26e-da84-491c-9508-51409b519b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5666709e-35cd-4088-849f-0155fc20c5b3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6485ae22-6844-4bfa-b7c4-6819e17edfe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f53ac17-e236-4c2a-a31d-000623f12e59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9af011-c981-423e-ba27-52af0e90a9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38213add-d902-4f39-b5f4-168ddef00ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d3483c-97b0-455b-a546-fbd98938ed00",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4ed45d-46cb-4af8-a4d3-4fc8cf13812e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "997cb8cd-1510-4ccc-8cd9-2c954804ae9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50659234-5633-42eb-af83-dbe5db9e0121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c00daea-d227-4532-aa61-491fc664e9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cc7f74-9cb4-43ee-9a9d-76a73ee10b97",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "754dc319-23f3-4576-83b8-033ad8552f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceeed949-e200-421f-8af4-1c5e618d7a8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b0dafc-95c4-4015-9df5-4718eca2f0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "710e5f95-01e6-4bab-bcbb-b84f3662652d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411baae6-0a2b-4879-9ce0-f09ff583c1f0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f25e586-88f9-4fe4-bf18-ad00639cec99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d95fe8-5482-4e71-9ab3-e8cd3e238a9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f305c37a-7cea-4887-9ac6-f40d7f07ce35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3247a5b0-e7e4-4812-8f62-fdb9f284320a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e648453-c835-4cdf-b445-1f548d7eedab",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d58a8a1-e89f-458e-a491-3a950e650f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e240e3c-92fb-4758-8931-6025ecc7f207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc081dc-f719-4067-b69a-1fc7a270c75a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0f71781-d34f-42e6-a24e-e6a2619c75eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa1b94c-14b7-4ff7-82a2-f4705950bdb4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e958ce2-76c4-478a-9845-5e822e843ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03033fe8-2a78-4f7c-b084-1e9dbda511e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467f12f6-d9bb-4ef7-9a66-3e722fe7a680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebe3a849-0130-4dbb-9e00-1c2114598531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57c0bbe-4f67-4550-a95d-fc135cdfd9c1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba52043-5a30-47c6-a966-ae757c1966ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58ccd85c-1979-49db-9c09-45a45d30f039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b95b83-9be4-4bd4-b941-d66f7a2f1e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "60e1f46d-1b34-4aa2-aafd-d729aa785b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a58e0e-be37-4591-ae2e-fcf68dd0a9a3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4958cb-1337-4198-aeaf-b69b3494ebfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704c63e7-41d3-4eed-9476-cdcd6a3ca430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f91456-3b45-4254-ac7f-93d5e691d0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2234e312-958b-42f4-ad5f-683ee0c9e521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897df7cc-dda6-4c73-9c06-7999490ac090",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd47750-d721-426a-8985-08a17086a9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cda13f69-9cc8-444a-bec6-626ffcf6b871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f053c7-b1c6-46e0-ae3f-bbb87b233c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c04a409-7ae4-4fd4-bb64-75d1f109cc71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db32fa5a-1023-4a2f-9b10-4c4b388b6e17",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ca4768-e803-4e22-995c-e3ca2f709881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6594361b-39a9-4a49-b17b-b41eaa65a2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024ece01-2ecc-43b1-9edc-21f2ccd75b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9be21aaa-f404-4e6f-b78c-7e7b3e61b563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d30b467-edd3-45f8-88ae-7f87a024ec52",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21bf5175-f067-47e6-8896-fc92ff9d93a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "200c0dcc-1541-4ad8-adc9-d879024c6994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c5790d-ff48-465d-9d74-265fe79e5835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b928451-33e5-4e42-b733-390ff6987fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9175eb78-5bf8-453c-8ddf-ead54f1baf89",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b608b837-c7a1-434e-b7f5-9e5ee643da02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "014d2a93-d7a3-495a-aeec-c1377884ffae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4564d14a-5c4d-47a1-8d90-c145d70f5ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b4024f-543d-4c2d-87f6-2738c7ee02bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134f59a6-0683-43d9-baad-c5d9a5d8510a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8feda2ed-2c02-4e1f-aa2b-ac032945987a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d5ffc11-490d-4f82-a026-9ab9023f2437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb2629f-0527-4994-a7eb-134ac8e6686d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "da99fec1-8554-4e91-aebe-80654bb136ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00283c94-bcab-4ab0-bc00-d3d51a02dcdc",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "388d3948-6280-4051-b809-6fed4a7d1b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39fcfc86-ce2b-4a73-ab73-fab48751497b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1220b62c-beb5-43a0-b116-5ee48eba7693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "91795040-ff95-4aa0-83c1-cdd39269a614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07510ce1-7d08-4307-a7c0-05d8ed3d433a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51fc7f7b-bc64-432f-b51b-95a91595443e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5ec0a0-1d23-4ef8-a14b-02ffc133925e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58f91e6-118b-41c3-be5f-82e281b06aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb52305e-b9f0-4c7c-b02b-1887cb210f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabe5bfe-8cc7-438d-8ce7-d45d49a61903",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9132b640-a987-461f-abcf-c4793583051e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be02c597-0630-41db-81ce-21117c54b74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629cbceb-fe38-4d6c-b72c-36a1716468c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "07825112-5a7c-4481-986c-65bb0944cff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d34ce1-93f1-4ccc-84ea-c116f292eaff",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365ce70d-dfe5-44bc-a057-6ac57f89d0fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a303142c-5cb4-4f00-a12c-151fbbcdd6c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a39ce2-2998-471c-94d5-255ac6c3774f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "feb52ef3-b968-40b5-a571-50b317d09b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3745e78d-2ec2-49a2-a1f9-5ddf2fe86530",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786679f8-9453-41db-9f5c-6ff1d9f2e4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe03aca-1812-44a5-9498-7175115e77b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112fd2c4-38a2-4ee8-a1aa-83b48106a650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b91366d2-b66d-4fc7-8951-66fdff73d8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ec3613-9611-48a8-bb34-1dc1290dec40",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc6423c-a009-42da-8f91-c86a3b6eee6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b408468d-1564-44ad-b8a7-bb204e4a91f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d461cc99-5f4b-434f-be6e-fbbb4f1fdece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "529c1f92-bdc1-4d9e-a83d-2a84484455ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af26f91-a469-47a6-92ff-d8c348e8a0b9",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48626e4d-287d-44ac-89fd-17ebaee1d667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa9d458-483d-427e-8077-700ac9f73ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036618dd-314d-4a3d-bac0-c9e696a9613c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "721fe732-623d-4a55-8934-2f77dd439d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04591c13-5556-4af3-af59-f50349d47205",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37be2866-d48b-4af1-925e-360c930f58c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a40cd23a-6607-48e2-bcd2-9b6aee8db6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9356f1-7e3c-419e-9bf4-626c98ad215d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d950de7f-59bb-4c41-b1d4-377cae30ad7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37b2cfb-eb67-483d-9351-e3fd14cef40c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "055ecaaf-9dc3-46cf-bf7c-7cc63636881f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5bd63c-b0b0-411b-a069-9857a2595352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf4ea17-9396-43fa-834d-1870a531a2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b904ce9-d129-4788-9f9f-59d4be6acd6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de016a4-c030-41f7-89ba-3e0d91b69aeb",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5a92b3-ff02-41f5-94a9-1832f3a1d136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375a93c7-aa1b-49ca-8f16-fca4c7d52e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefa8762-10a9-40fe-a778-7ded5b2b0227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9cd2bb-b2f2-47fa-89bc-e8aade977009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7df169-af4a-4006-acc2-3b10a7e97455",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60486f2f-d0bc-4546-a8d3-23f9f523e7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e04ace-68d7-4349-aebf-a8424ed85ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e5731a-ac83-4d0e-a21d-cd5f66f26ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "27dfdd68-9302-489f-8816-3a630fa5e5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8cd5b6-874f-415d-83b7-346f746a07c0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c60d1c5-2a33-463a-b86b-127343ac4dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3ac5472-c587-4e67-b9b3-d344dfcbc710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669a5d0f-c73f-4583-b58e-177648b960f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e72ff0b4-9bb4-4936-8acf-eed3ab8db790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba6df0b-a32e-4ce7-84e4-3f9a14eb3af4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcca8fb6-6793-4df2-a3a3-7f6a98494cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e463d843-dfd0-432b-9628-c44be77eed7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0cbd328-2080-49ad-8d65-87852751a729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "09078d24-0219-48a7-96ff-11ac146a5044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc20fa0c-3b6d-436c-9943-937f9aa9890a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3fe1c3-85eb-4321-9e1b-77daa068eaa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "031ec2f2-ee9c-4c7f-8744-77b6545975b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfdfb7d9-15eb-4db0-96de-49634f38f41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2cf018e8-4166-441e-a204-01a3ef24bbbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79726de3-86d5-42a5-a761-76d7877ca2c6",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c0b9d8-5273-4829-a224-500cd1146670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df702b6-ba6b-425a-9a53-ffdfb032aa4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9881617-eee8-4bcf-a2e8-8c26d683e5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "07472427-ff9f-43ab-b552-6a1347fea7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f775c71-76ca-42b3-9f62-0ba6cd81822b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27c499f-ba1d-46c6-8e84-a12188913be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5470239-92c0-4592-a281-5ec677125bf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a17043-3789-4d3c-90c4-ea2d6ae79604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "584f0997-6f2a-4806-bd00-b3057d69ea1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264d3896-3d61-4fc8-a5de-42ec0105f37b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b240e4f-7c6d-4887-bc2b-a3a5e1139790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff11f008-43ae-4e22-af69-05bee7f4a16d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c606f13-c5b3-4c50-aca3-81c1276608b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d41f9108-6cb5-48ec-9313-5d17dbfea757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eaf034d-2e8e-4108-9b2c-8b0affc5bb42",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b6e71e-0ff5-4e2a-bfcd-d01c860f7c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5369fcc7-8a59-4ad3-9bd5-244222ea2996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76318da-3ea0-41df-8e65-5a2238c4b6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7d45c25f-844c-42ae-90c5-6d5b81855f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a2cb4d-1e8f-4b17-b994-9641ca47731b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445a35ca-c677-4a5b-a2f2-43c3b405412c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b71fc31-399e-4a21-a047-bafa36c1a3d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085533b9-edc4-44c1-a515-fde4ec13a078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe6f5718-bf49-4638-b9cc-e662c8cb6747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df64eb78-8d0e-4d19-a195-bc3d2612a104",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1a9a3f-42fa-43cf-856d-2941e1b29e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "039a2a8c-ec98-4a9b-8dbc-4923d40bd48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fe965d-fe99-49ac-8561-342bb12ff4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5f85280-7011-4bbc-a9ab-40d22ff62be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52481624-6480-4431-afe0-a9868925c6a1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15875ad-d442-40db-9e9c-9e95aa6d548f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d5660ca-52e1-437b-a067-fdd60a88bc8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e3f0ed-9b34-4d9d-8dad-1ed638a83712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fd54be4-0433-44f1-8afa-95defc3eac41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885b3f3b-f644-42ff-81ea-8d2d2a76ae44",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "832d8f19-b2f5-4f22-8aac-ce3785057b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe66491-465d-45cc-aec7-3889be6ae0df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c756cc-47e3-402b-b8f8-3e99b4320809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3fdcf4b-0a9f-4b8b-ad44-1273190a0a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc3c832-0ccd-4d12-9ecc-0ea90a82ba5c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4fc6b29-1154-46ed-9157-c842495611d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b0cc9eb-98ee-428a-90cc-f5d5647bd651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e22a069-9e22-403b-b00c-06513a865c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "816f9366-6e2b-422d-a162-d696a518286d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599b9e78-bef7-4a6f-b70c-53808b86e621",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "184181f5-d7b9-4bfa-9206-35312595ff9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080c8fba-9a4d-4557-90a6-fe0a06336a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9cf8d3-de1e-498a-be31-334333f44649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5069cb2d-7c16-4c9c-93f2-a82c26f7e110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8126e56a-f78f-45ae-8104-e591c1cdec17",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5facb2-7472-4e65-8ff3-1d474fc5e96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ef8c412-c6a8-44de-b86b-708f7b900c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c442f29-b6ff-4303-93d2-fecfc4c6b0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b7605d4-b146-48c1-b73d-dd0850735ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5fd46b-8ed1-4b13-b85d-fdda8fe6d848",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8ce892-d2cc-4a04-8859-375ab1660d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cb7aa85-a8f5-4061-a60b-12a3a5a838a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6971ed-ee0c-4816-a522-99d6fa14e429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d19f5338-9077-4483-a812-e2920015edff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da63828-e907-45f5-b426-360c168070fe",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "460199ac-4b52-45c0-baee-897640e6ac27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99fa7e04-42bf-40d0-b05d-b148c7e73ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816c4097-e66f-4fb0-bd97-8f8bd0672753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cb08f3c-17e9-4be4-88df-3051e8270006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e6d39c-7245-45f6-984e-13ea4c3121b5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d099ed-bf33-438e-bb8b-c8b861c67e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d06f2671-e07f-49f0-9f2f-a96a8e06b183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ef0e66-14d0-4ff9-b73e-73ce5dea3815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e26abaa-60b6-49cb-95eb-8812bd93db43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119db7a9-885e-4e41-b3a2-5b3b0fd1e978",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373aa735-8d94-4c61-8f1c-fa20ad9b1717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f618bf7e-ba95-43b8-959a-d9224f5d98ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215136ec-70af-4d38-9260-daccbc2c42ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa7f74ab-4fbb-4e2a-8ddf-7bd7611c0e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65487306-f088-4abd-8fae-a89aa0a0a823",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7270a6-cc2b-40c1-a034-2d2118c53f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bfcdc09-51d0-4935-af24-a77e965c47d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1f4f6d-76e5-47c4-9613-49b424587093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6eeb53c4-5da2-4a72-8dc0-ded95d3a2610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c835fe73-a741-4c1e-a59c-cf447ddab692",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2c602f-fad8-47d0-9781-0354cd35a18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30dbab1b-14bc-47c9-8309-94ad96ecea2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9efb968-71e2-4c74-9284-6f7c425d40d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "801d0258-43e4-4333-ab3a-cf5befc70d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02672569-a431-4130-aae1-c637bc7e03aa",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9785c8c-9467-4ce3-a989-0d50459662de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a3efa90-2f81-4cb3-9be0-6b4dd1569291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9056c2-5e95-4ea9-95a9-2eb54e8cff49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9068975c-a947-461a-9da1-6e6b17698073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16099cf-c95e-414c-ab90-1e6b89c7c6e0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebf16d9-99d7-4fbd-abe1-27b229e1a3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd12a3f-4545-44e8-92dd-e09855513957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc27a44-11bc-425f-97c0-a5ade017ed0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "932dfbba-24c1-4e41-a887-fda0831a8f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26e69df-cc65-4ccb-95cd-8db35560e80b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e460cbb-f97e-47a7-9c20-f3a25c9de919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dd51dd0-badf-4467-b040-b72069a9feda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f8bcd6-5316-4361-b278-38b3cd5b4dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5db7d0f-deca-453e-a5d8-990a55af32ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a4a5e4-b49d-44ce-a6df-ce6b21f489ef",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e7d78b-8930-471f-ac7c-2789267c57b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387658f5-3ce7-4897-a1d7-4b27cf83e86a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f250329b-b572-4ada-9f78-ad761e7304c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3dc97836-d185-4a61-aab6-a25e0d8c5040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35949b1c-41e2-4632-80d4-bc711aebbf49",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfcec246-7d7d-4fa5-84f1-3dfa120d969e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ede46ff-fc8a-4941-89db-3f39c67ac1b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da8f9ae4-32fc-4ff8-a4c5-f902e485a1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "053fe83d-351c-4392-b63b-05d8da97359a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daec578a-9b47-4246-9484-46fb51c632b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96390b93-0875-4d21-9fd5-8beadabefbc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ef1096-3b32-4665-bec0-fe229a252db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd39008-dfb9-4cfb-9e8a-9426a0d09cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "44de22c0-d32a-4381-b629-b84d9d0eb1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f42039e-ee51-483a-8c03-270b4fe9457f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcdc23aa-fc90-4817-913d-a1026803eec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b011f083-6603-4ae4-9dd6-415ef6e8c3fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdfa05b0-97a2-4f2e-81a1-e69dadda2988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc35323-d101-4dfe-9d19-32152882365d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b3b59e-ea26-40a4-8db5-90a59ba582a5",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe181b3-0bcd-4d07-b6de-0b0ce90ca8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a46391f-ab62-4ea9-933c-e6f039d83c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927bf59b-103a-4891-ad61-48b1ff1022c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba0655d-74b1-42cb-9257-5f0f790207c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c076b6c-0027-4010-aa97-81f72bea265a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611468e8-5418-4d14-9baf-ad3b8ae183e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f08ab72-815a-4804-89ca-6fa822697bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24cba65d-0a5e-47bb-b056-5d01421ccadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee98066-8029-499a-b9e0-b6b26e6972d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d1e326-933a-4844-8054-c893fe54debd",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e638b8-fd53-4e5e-a8b3-83d354cbc5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c37db764-8290-4aa1-b576-2f544260ce4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ecc208-0627-4940-a837-2b5328f13b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ae258c-61bf-409b-87bd-63657310c758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5b8552-66ef-47eb-8855-2c86a511d334",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "902c9ae6-b9e9-45b7-b6bd-80d401ce6bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c83e739-bfa9-4458-b573-dc0d4d99c01f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c847868e-f869-4452-a616-64547777ac1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9316f997-982b-4259-a608-30346cc1225d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce85380-0eff-41db-8ec3-7db88e4a934d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "126d3208-c9e0-45ee-94b4-089766a3e19e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59bedf76-00bd-4e91-b08c-366bb6a9c1ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c83c5a-e8c7-4cce-a424-f91543871f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "10243dc3-6482-40d2-ae88-3ea805343f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad13fe7-4b2e-42f9-8c65-edf5e06e2abe",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6874e9ec-102b-4f98-b60a-3cbbe4f56f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d889b2-831e-4db9-8115-ed1b69230900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc54e2b8-acb0-49ef-b93c-2a3a1526830c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "22cb8736-fa02-42d7-aab1-120fd573c34f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c5034d-7cf7-43c6-96d0-8f1526639a11",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd01858d-2f77-4038-a6a5-76f1f232482b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859b67e9-8234-412b-a758-52d383aa1cfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0be862-4192-4f09-bae4-e85bf9166907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3c58849-7001-43e3-96ca-b48f49401f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "127fc1cc-920a-4959-8c2f-2506b02c3ff8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0aa5701-f3c4-43c5-9979-aef4d2088c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b9fffdf-a76e-481b-a0f2-fc7cd16f8bda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629bac30-62fe-4e2d-884c-b31a1d12dea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4090b4b-4e79-42a7-998c-1a8eba5f4c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173ac012-7e8a-4af8-8beb-a4cf9e1c7f59",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d5bc9f-071b-4916-8e67-e22f30718979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78fae22e-3135-49fb-952f-e37ef8264c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb1b369-2ee6-4a0a-8af9-8d74192114ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb0f479-d6c8-4fba-b0c5-416f6153063f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eeff510-6ecd-41e7-8278-1295330fbf32",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8550fefa-30bb-48ae-a2f8-ebeb2e6d097e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a9b354-a9e2-4ffb-ba84-635c87c67a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58365e97-c268-484a-8ad7-0627f48010fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d21c17e-35ed-4813-ac06-b98bd933ec6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184af845-bf85-4fc8-b30e-cf95d95910de",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8c77cc-2a3c-471c-a83b-eb0d37b43770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b041fc5e-2352-43ad-bb71-155fb0c3f5f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4029d681-359d-447c-8667-5658f18a275e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1adf846-5682-4e8c-8865-86a9900beaee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf0b212-02e8-4086-b476-b101cfcddd7e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8f67c7-fe50-4967-a2db-ba993e4dc8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14d8ca41-7039-46ef-a9d4-d649c8e06839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247d25c0-0f85-4535-b54c-a32aee10940d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e205affa-893b-4729-b8fd-44e7e4fca3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7960d86a-b7a3-4542-900b-f7f96b88822a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd11383-c403-4892-a77a-467a3c2514f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f25b13d-5035-4659-b821-04240c9f8382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9feda444-96a8-411b-8797-2f30cd3fdbba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f4f28a1-94d1-468d-8911-ff0f2bdde40e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6f5950-4dcb-40bb-81df-58d7e3a6dfd0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f23a14-44c5-47a6-86bd-3ab058126878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d9965a8-9aff-47a2-8c54-15d785ecc86f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214ef7e6-373e-4775-b56a-74da259756ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d709b3cf-feab-4782-8cf8-317ff5329413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f46e3b2d-02e9-4aa1-9479-41379a61a75e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6588a9e9-6202-454a-8a35-9e3a9aad25c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d997125e-4617-455f-acfe-2102a8c1727b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b62b99-8199-4986-bac4-54c90a511070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "622d4b9a-be9a-4f54-a77e-6278be263b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2697a687-b6a4-4b5f-b881-0dec7c4cfd0f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "614a518e-050d-48c8-9e8f-5230c0b1fd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "545e60b9-7175-4637-a2aa-77684295e42a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5415dcb-ca8f-432e-9d17-f374a34b6527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "72018e81-a751-44e4-8504-30f3b8a07061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5fad1a3-0139-4fa4-b215-eeecd608cbbc",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb535899-fe73-411b-bd76-3e836ff3eb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a554587-9b17-43ea-a0d5-58fa4462b3a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57609c34-85fc-46d7-a6db-fd3163d317e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36e59034-93d5-4d1c-b3ee-f34d59e8ea5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75f0cdf-3ff7-4083-b253-3144a8736d36",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f430b89-8e8f-47bd-934e-1116be0d7107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6ef2610-f180-4f37-9a8a-00cc43f6e11a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeefbce9-d7c5-4b31-a0b4-97f50e85afee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd51d47d-c5f7-40fd-98f5-09ed5f924f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73ea9ce-ec49-40e1-a33f-385823459baf",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c79828-cd88-49d6-9778-da879628f1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12e53aa1-1cbf-4806-8932-d0575140844e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c539d4c0-9ad3-491b-8343-621e3b744615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d07cf13c-d783-4163-a4f1-2e01885bf867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81363467-3c4f-4419-ac51-4ee8f8fb0778",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbdc5fa-3108-4b29-95b6-5d47edf88b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b261a8-ec57-4407-a74c-b3abf1faf5f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fce5835-bdcc-433f-9858-9889bfd2b30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8596bc1b-4524-4ed9-9dce-3a482df29e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7f93b1-e882-46ce-b9b1-b3b183060c22",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ad4a81-7629-46ec-818e-eda608b2b2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44325af2-be4a-4be0-b7a0-be4cb15694ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6387d1df-485a-4331-a7e4-76f39430027a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6d6ef9c-bf92-48bb-bbcb-782a096b3a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d370f8a0-3912-4e0f-b5e7-6a6db8f1db07",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74080751-f16c-4671-88a5-8c554a72cd5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17aa0a34-72ef-45f0-a161-3056657d68ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8f85c9-24c9-49ea-a49a-6b55eac44fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54479586-8097-4067-bb77-cd7cc8d68e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9858c7f2-8730-4c9e-bbec-1fc0c95cedaf",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de453d4f-710f-43e6-a781-814f6c580ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c78bb34b-23cd-4893-9444-af3ce4b3edd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7eba4d3-aede-43cf-bcff-acc1fc92cafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "82585c62-e3cd-4e4a-8ecb-15881ad0e7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c673ace-1e1e-4457-9904-fcc4187820a2",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c76c12-228e-44ea-ba27-13d858dee0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e69c3a-fe1a-44a8-8f44-a610db26216d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16536234-54ae-4ea8-a107-a8189c152aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3dea275-ec7c-4d80-8cc7-732f88595514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9a9124-0192-4feb-89e3-30b8c640b06b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e168383c-cb24-4559-a6e1-356a3470174a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29f8f60b-9d86-48f5-af5c-9f7d2b698cca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40902ace-4e9b-4656-914a-38d16a5ac479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d21edeae-c747-4294-8341-a37a72178656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7473627c-baa6-4f1d-a324-5ee176177a77",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d736c7-2905-495c-a535-256ab62d354b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46d72c8f-e565-4011-81fb-3038877c098d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a910d3f5-4aa9-4634-a29e-d49dd1574223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c7de33d-9842-4784-b8b9-a26fb134ab8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19bebac-595f-41b6-95c4-35cabf5526bb",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b53bc28-d18c-41aa-9e64-65e806e230d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b97f316a-0299-4d3e-b5de-f12b4c6d9097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df665961-02d1-4110-b9c7-12d1a65ef577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a853812-99a6-4f26-86c1-c64ccac262db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9e974a-0733-47c4-8285-8385b71139f7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cdfb10-c778-4c3f-a38c-753cbc6edb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6830900-218a-4167-9dd1-0a1af5fd6b38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ff8a58-6c15-423a-b2cf-525796a6354c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb051ab-c3af-4a2e-a0b0-fea2d7bcf782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193813e7-b40b-43b9-9a80-cb14aff6bf5b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d2a6d2-18af-45ed-b2d9-3727e7186cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f2fac9-4106-44ec-a6eb-480f090f9c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0cb942-2e97-46d7-b37b-e0d699490a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6e36a9d-ae99-425a-82d7-a90f1941a74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f034211-abca-4fd8-92be-c39bfc18c300",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafc67ac-3a7e-4836-8b6c-a0db4c01579a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0419d3c7-e274-4174-88df-76a2f01bc385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bd73f0-e675-413d-a8d4-fd4e49bd2521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6522a2e-08b7-4308-a21d-338556c1cc14"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1f31afcf-8b7d-47d2-b7e5-9fbe375c72a3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25aed820-9cbb-4391-ab2c-702a4ccb3b34",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d72c5f-fc4a-40f8-9d8a-76b695899157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74559964-d80d-449b-bcd9-8da6aabfb054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7eef3fd-3291-42cc-bc1b-28d84b162665",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0db23831-b5df-46c1-9ea9-f534a05c5304"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d61fd2ec-ca03-43fd-b9a4-22f89d2a85b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77deb853-d2cb-4c14-b270-7ce2febb535c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "16859bd2-1ac9-48af-9e14-5a290ced32f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b690449e-ced1-4720-8c50-0247df6b9ffb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "142d12ac-1f2d-4664-9a42-94c47c31b75b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "34fad7f1-c5bf-4ab5-a608-7573dc872769"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "22976400-c9af-45d8-885b-fadfa315af6b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5bd57f70-6adc-4d78-94bb-69ca726a1360"
                }
              }
            ]
          },
          {
            "id": "9ce28fb2-2935-4af4-a2fe-c07da71daae7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "336efdf1-f1c4-41d5-8e78-92710bef1ec9",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "90f6bdf2-660a-4223-ae04-e35f6aca1fed",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1938e48a-cb88-4731-b77e-241df9525fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "535e455e-8cae-41c8-8a60-b87c7d0c0db8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6fe25a-8c72-4499-9cce-ace1f99858d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e923cf7b-9806-4ab8-8b84-027da80020c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cb24bd1d-1215-4808-8586-929d31b41434",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6922e267-498e-4fe7-af62-b506ac424651",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "874fe88b-8dc9-4f85-b5e6-3e41638bd735"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "daac7c5f-79ad-41f2-b1cf-0d51c05ab6f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3b3fe39f-3075-447d-9816-ae52f37188b9"
                    }
                  }
                ]
              },
              {
                "id": "da20b558-6ca5-4b6b-86fd-3e062ef7d823",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ee2da31-a21f-406e-960d-c47f9f268b86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7decf3d-f44b-454e-9199-63637a4580bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "beabcfaa-3ced-4d94-a93d-42f8e1aec0f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e155ddda-1ee9-4919-8325-e5488e182474"
                    }
                  }
                ]
              },
              {
                "id": "eb31d4b5-e31f-4b30-9e72-e75ec65e960f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6bdbf050-4272-46c6-a984-0c8385d5ff02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f4a9dda-62a8-4100-abdd-4f26641c707c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27d5f4d9-c8f9-4f0a-b8bf-9577b598bcbf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "78a316d6-95fa-4c1c-a761-0476e7ce495b"
                    }
                  }
                ]
              },
              {
                "id": "9554764e-868b-43c6-ac4e-929311fd5874",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fb30d68-23db-48f0-a3c9-8075803dd400",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1adb3d96-b417-4676-b17c-1aa80b20f173"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "056e2e32-3924-4331-bf67-09d005836333",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "691b93b3-1b58-44a2-92b3-8bf478f4d03b"
                    }
                  }
                ]
              },
              {
                "id": "df44e044-ae48-4a07-882f-b9bc630aee8f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6ed54c8-4522-4b85-ab69-3bd4f7e63af2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a7d258cf-595f-4eab-a9ee-7f9702fe373c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "381908d2-1a59-4cf9-85ad-6ef6c3fc46a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "03dd5e8f-fe2e-4f08-9141-863e3faedd68"
                    }
                  }
                ]
              },
              {
                "id": "9f3779b9-8bd9-4e71-aa13-ff2bc76d8a1a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "335d6866-d887-4f9c-830f-23c93851b0c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0443499f-3811-455c-810e-095ada2a1b68"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a60bb3a-e917-4081-8eac-1b4a34ef26aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7e5662aa-35ba-4d32-bdaf-a0839974e7cb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2b030725-c036-43c9-a238-a579ca409fbf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6dfdab0d-566c-48a5-b5c4-216fb70600a9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b02a8144-f01f-4aca-a6da-8d4a08d3614c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1946e8cb-2628-4a66-846f-fb46749d82e9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ced3d9fb-49fb-4696-8338-f3f6bb38e101",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f22de474-3b2c-4446-ba4b-b413897e8ba8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7dc27bb3-1203-47cd-a466-d807f82c54bc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d2c61166-2c14-46a2-8131-65a0c9dbeae5"
            }
          }
        ]
      },
      {
        "id": "0e242f30-269f-4c18-9f5c-8493d7b45c90",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "cb5cad54-e83f-4765-b799-469b6b56bcd3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "82670ce7-15e8-4903-b7cb-63a2ae7946ba",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "000bc919-dc1c-4089-aaff-bb8828c717e7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b693ed1-19ab-43b0-a637-8de6a8f80118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d138d6-202f-4216-9709-668600c3f770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02802b1-0d26-477d-b91b-417234e098a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a014f19-f683-45e0-9c33-4e777b21c502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c264ca-885e-42da-a5d5-384004db28fa",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "933b4b6e-5c10-4320-b6ad-ad08d07b6fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f511b44-5897-41bd-b884-f220e900c38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fdfd5b-b955-4b22-a9f6-dfd789774127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5ea1a5e-5d4e-4afa-9b23-ea5b68b25433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bcfe44a-4dad-4a55-a864-839eadcb7124",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf5fea5-65ec-402e-a916-d0f4c60527fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16fdb221-1576-434f-a028-65b220afb687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98cb8cd4-6e83-4578-942c-0470ab1df67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5720d15b-ef2b-4e3c-a993-d7f6b65ca2e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4bb567-ece2-4c52-9c60-8aa199f11447",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7cdbe4a-1dd0-4444-b97b-26d7f9396006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cd31a89-dff3-40c9-98c6-47b84d5725e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf304db-4358-4fda-a437-bbf843064722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "09c3484b-9343-4988-8aba-ff05c63e0e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e1c550-24b6-4f62-b699-da9131de571b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b59f55-58a4-46b7-9b0e-aa3ff41bfc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa3e60e-3a7b-4b71-a84b-22756f0ee169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6173b5a-99a3-4eaf-a520-c78b057b4a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5800b0ce-df69-4218-8440-d940c6af3c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924112d6-cb4a-48a7-bffe-2b2f45c5f67d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebadd92-c014-4eeb-98b7-564991e3c6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b325b47-4ba9-4832-b143-5eeb4bb85354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b31aba3-f861-41c9-bbc5-6254b11e3fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "12b447f2-d62a-4374-a9d6-07f1a2e8da4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc229647-208b-47cf-9811-62a51e2c7044",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7bb0ef-4939-4ae5-89d6-1f17cac59f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "008b1b61-f15a-4111-81ab-a95d1f11dab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fda75b1-48fa-4279-9853-5134e47330b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9029688f-3ee8-4e8f-8461-f6fab422b10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef64491-3bd3-4ffe-aedc-ffa7a1939a4b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c527c26c-7ec3-4b7b-8c24-cb399695233e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "668e3c59-15ae-4f17-b606-954b04dcf1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79930c9f-4815-4a17-a36c-f3f32f1188ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcf394b5-5cbe-43a4-91b8-60f6d7b9298e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f5f237-055b-4e3a-85bb-dc922949db29",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2343a3cd-530c-4659-bf89-ac3a5f95d284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b93681a-6d30-448f-94a0-7159ca0e5087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6553fa5d-6a52-47a7-85a3-6b02a8e7417d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1dcbc713-f3a1-4720-946e-7a366e841805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d05ba2-6450-4e0e-927b-1ee45c2ff07f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a7004a-2415-4603-87fd-655673c6c155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d094dc8b-44e1-49b2-837f-23e390733ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe01b4c-e81c-4c08-8c9a-a1ab40889a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81ab124f-a67f-4ad6-9203-ea1b532ff83e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423cf059-e169-4ba9-90ee-a6af2754c594",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6210c08f-dd8d-42ff-b073-488f76bdd7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06cfcde4-3a5a-4165-acc1-eb5bbefff2cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5056faa2-0e48-4655-a749-17fa49a9c8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e6cf0dce-3b13-4686-b63d-a0c045129e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd81478-d515-4d73-b8d6-f7c027aa32b2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1787505b-0649-4d44-9c21-b4f90dea6291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50928f68-ce64-4a35-9c7c-1cb5a8a00432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ff7df6-6700-4f43-86cc-84be17d2f217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c8277621-27fa-4014-bbc0-6ac1561f4a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c35b77-0b96-41ae-be8f-2fed0c0d1157",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0d7e37-3a14-4921-9ad9-8da246a5cb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d03e4dc-2559-4a1f-ba11-f7f2c94bd637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb872a5d-f072-46f5-8208-2ec2ff272e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc683aa2-b0ac-4a1b-9c7d-218c83be31b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cdf590b-eb10-4a78-9ba9-80161ac3c631",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d024344a-1b2e-422b-b01f-f8dada2efd3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c036c67b-c004-45a8-a0eb-6428bff94c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a1920f-5522-4f5c-9ccb-6f91111d9a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5552da3-e232-42d7-8ccc-414e2955e479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0865cb-ba6e-4942-95e6-d4d1f729aa91",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db26192-dbb6-4586-849a-fe065dfd6453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "567fa86a-9703-43eb-b763-98f1668d585d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd4acd5-e5fc-4da9-ad21-e1714e6283c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bec5eef-5125-4d1b-ac11-dc37e8d5e608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51510c8c-48e3-4361-a6ae-ba71d559b9fe",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3ecd0b-e2ca-4088-89d4-207a7d1dab12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebe43a72-1bff-4c80-90bf-0e6e22730ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8891f1e6-ec16-4096-9f23-f93697011c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ac3cd89-ac47-4bc0-ba1d-7c794657531b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e02860a-d952-44a6-9d84-db5735d6a248",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50b17b5-14e7-4cbd-a8b4-1351c6e45690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "391bfb66-e926-40e9-af60-86283d542d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3675ba29-67dc-4f6f-bb0c-66e4bcf10277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e922031-797d-465e-9e8b-17f7ee37e10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5594b030-cb03-4071-9b20-498de7c2c39f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b72a9a-5c05-4885-abd1-4eaea8e08c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa4ddbf-214b-43a3-a90c-5bbb0f9b0751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee868fbd-abce-482b-b9d2-182b220cea25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "147cec6b-8ef9-46ce-985f-cde06c7c1c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679edc2b-ea0e-4f40-a2c8-09e885470205",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2917dd81-1728-4871-b4dc-1e816f9fe46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a62860f-c106-4ede-b48a-e6fa47fb726b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33467f6a-6372-4c33-8ef1-c547b046ac1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50c7af05-11cf-419b-8c95-af7490dc59cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0648f120-167b-4cc4-b8a9-eded03586692",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9b265d-499f-4f02-ad65-b1db70990582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85be5d3a-32fc-478e-ba65-ed2a95213402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb79959-fc97-48a1-a6fe-7508fb906ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26b53947-3bd9-438b-aa0d-ff45f056d503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ca7ac6-9937-485e-9126-be5f5393d985",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "961be8ac-21d8-4fb1-a4f2-c185aec6a6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca4d38ce-24e7-4bd6-9029-54453275c03a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb77a532-e63c-4c18-844e-3135b09ecd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf20db44-6b4e-421c-a590-970775a3c4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5635eba-483f-4bbb-a068-66fcaf2c09a3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a98058-e7b2-4a89-8ec7-e400a396b8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f82bbe-dde3-4298-ac59-027bfd9d583f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0c9f24-d051-41a5-8ef1-a93c98213fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6367282a-f874-4de5-ad9f-b6ebb15513ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60621c44-e33f-4868-adfd-97b2954c17c4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "275b1d05-8017-49c0-8731-ebce79b58bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "652b176b-bdcc-4727-8cc0-528b6b4b380a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960c3c52-b2ac-4699-9f67-c179fac2e72a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d08c5ac4-06d9-458b-95f1-8336a71e1b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf43b778-75c7-4b88-85e5-092afbf74955",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937cb1db-29c7-4189-9a68-335ae11cb28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "764651f4-5397-4c64-8a28-0db467a221ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3daac76-53c8-48c7-8848-b5f49d5eb742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b8533e8-63a9-4d74-94c6-ca61b233b948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2764a5d-197b-4059-8ffe-95400dd98378",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b39ea3f-79c6-48c8-a4db-8e5cb4a5e068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c074265-a114-481a-ac5f-7a3f274fa73e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9e1694-fdea-419d-ac6d-de329ac4153d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb1e3871-1949-4416-9e4a-fbe954c02882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45334c0c-711c-4581-9942-5760a0b45aa8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83fc72c-604b-4c5b-b518-94047cfabc17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d294d50f-90ae-46c5-b0c4-4e79c83e8e6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0eebba-e961-4f3c-b641-3934d6e11eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c69b9cd7-36df-4d8d-92b6-d21c12bd01a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cef0fb6-c9d4-4ce5-a9d9-4d8fcd374adc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9813488-8f40-4a70-91e6-9a28d0dfb4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e43d6b89-161b-4b64-9995-cf333c764b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7344d1ea-c406-447a-9c36-11e8eef1442f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69581705-f24f-465e-91c1-112e65a56081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb21a469-4779-4e7b-b2ab-2a719f72b35f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9954c3-3489-4f2e-a1db-14e894bc5e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f48c09-0b7e-4864-9814-fee29bc1ea9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54d0e71-a3c2-4418-a357-1ff2981c124d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2c6c70b-2b39-449b-ac81-5038b3c541b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679d8ded-e90c-490c-bdf6-55e3ddf075f3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62e3af6-2ef0-4673-a39a-8022e803b1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e87943-f06c-4d23-9714-5a8a867b3de5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0cd4e1e-f73b-4579-ab1e-658ca3f45234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ae6cf0-2753-4eac-9813-936858514e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ef6642-433d-4d18-845e-81dbfd1cd3c0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ece4d9-0cbc-4fce-b645-0d5c7d5baeda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c2e28c-0057-4940-beb7-c139e2edba83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b372d2f-95eb-4553-9114-d01ee37524aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79f03aa1-7295-4ae2-9952-404252e02dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89540485-eb34-47f2-b728-42e0721e44fe",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "764ca73f-620a-46f5-9212-ae2de8a13f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b618e735-92b9-4165-98cb-e0402e5779f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071100a6-030a-4d1d-aae7-6c68f6f27137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c788db14-741c-4496-9f61-2da47779cc68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1996d38b-8cc4-4120-9166-0076bc5b216a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0132e7-c0aa-4e8c-bca2-82931e7aea8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d85232df-c7d4-4ff9-ab84-bb6ae9f77354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ea4746-a8ff-4bb1-b9c3-50817642130b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d12174f-a177-46ec-8efd-ea0342319134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ef8ebf-aabe-4238-92ce-282f57ba17c2",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30938d4a-aa9e-48c6-a398-3bbbee7777d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1285d6ea-1c41-4d39-ad64-f5e97fb6e77b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e2edf0-4d02-45df-83e9-9307c1b12ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8deab890-280c-447c-b98a-021bb4f663e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb47dd40-1daf-4a8e-995a-cf3316375c93",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd418f1a-fc4b-4af6-a699-32a30a9e1086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecadf619-506c-4216-9909-83de20223f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526d4898-d4ed-4468-bbbc-006205bd14de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb6b2613-1293-40e7-9a3a-412e165095f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2cd212-a96b-468e-afc7-1c7d5f2f574c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d3443f-4c40-4f1c-a23f-4afe0669114d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51144dde-0ca6-4cfe-a356-0001f1ca161b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ef1d21-38a5-4a48-99b1-fcc9be6a7ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffe7a207-5839-4330-ab3d-ad014a1b960e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e8d0cf-82c6-4ab1-b6d3-847c9e7cbada",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4599aa79-2f1e-49ca-9471-ca9779e0d117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47703116-58a7-435f-83e3-9c8cad5714c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9683a38-462d-4d65-b0a8-bb35ebd23445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "990995d5-2f6c-4185-be6d-408c6d22532d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67907f61-12af-482e-81dc-763edef80a0b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56dce55e-6e34-4236-8a0f-b0a7e64b0f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4118ba9f-3dd6-4afd-a40a-815831bb3783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca08e7e4-c80a-4e73-aab2-ebc196562ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02304907-bf1b-456a-a217-c154edba475a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dd063478-7a06-4f01-8bdf-40dc08ac9b69",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec8bed06-b86a-4c50-8d9e-642ede81dfa4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1ed207-54c1-497d-908d-e57af6413f6f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9d78a914-22cc-481d-8f5f-57b0cda34446"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "542c3b50-92c4-4ef2-977e-6bfb33060fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7460cb8-e495-4c80-90e0-fe5436944671"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa18952d-3fc4-4052-980d-f4a5299a2219",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4af155d-9ae1-47d1-9aa3-91d4338fe920"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e67a214-5399-4c9c-9fb5-b03844588233",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ce138b8-4f88-426a-9587-70165662d568"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9ac6c638-f846-4dbc-bb7c-b9c260a73db8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "08688d1d-d40f-4320-8226-8be6f7fb86d2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8b44c51-8778-4a04-87ef-ae1f0e9afdaa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "094dbdb9-9ffa-4457-93e4-3890e5ca9202"
            }
          }
        ]
      },
      {
        "id": "b13b2e56-e35d-40e9-ba4e-5e59806dfd2a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ad8c1f99-e132-46bd-b080-5afd5397deee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "99556e00-0250-47b4-9eb4-a491e1cf5b50",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "69e93d62-41d1-4975-ba29-1ff5695c4342",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "647aebe8-5235-4457-a3a2-63729e429df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51aa2806-f852-49b9-9789-dfa4e3ad3ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8e65f7-3b19-4227-bf34-d68607146bc3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13bc4e9f-9f3f-4ab3-b3ad-cdc2c2cbde55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e855b6b-5e45-4ed8-8673-fff7b27943f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd81cb5-d122-4103-b591-94d42f6fbb84",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3194ccdd-265b-4817-a29d-42de64cfb4aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed12b485-91c3-4a45-b7a4-979917496d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ab9b3c-f4cd-4f8a-be66-8470e6fcd7bc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65fd4cd-dd84-414d-98c4-1c96f36b40ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a752e4-56b4-4ed6-be73-e5372bba1125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6617f9a3-d53c-4062-b864-c55802c92ffe",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff99ad63-989c-45fa-88a3-80cad7e5b78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f7369b3-8bc0-4864-8772-3b4a994f16c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76cfca67-f5fb-45ad-bfef-738f47bc839a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320a25c6-6dc5-44d7-aa6f-a97d2a170946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b71f28f-0de0-4d67-a2bc-be6baf0f9f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a603a774-729b-4afe-8d39-d832d2001ed2",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d94ccb-f070-4bf3-b816-597a5c74641c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3372724d-ed5d-4971-b8dd-b8bba37930e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60df882-f159-4a5e-8aad-f2363174c01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39eb8dc0-4ae9-466f-a5da-84e3f336b7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b5c0eb-9a03-48a3-a8ab-8891b4f5b5a4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73de7aa2-a55f-465b-bcb8-bf14c789dd86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84820d14-36dd-44cb-8b5a-e30d74f76ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca513477-f4a1-4628-bd45-7582bec4f185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffeceb48-8731-4cee-bfb6-b4bf0b0cb372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2881fdc-96bf-4163-b77f-a6d3f2a3a479",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99e8afc-e76f-4bc5-9269-35b6ae23514e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bae90679-c14f-4894-9c1f-1beaf3ecfa68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34cf3a77-5368-4586-aa98-f724b5037148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e4e96a-d041-472d-b2fa-7b09f820710d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4b363c-735d-4763-8cd0-6257643d9990",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397992dd-9b05-4611-9990-edfc5cc64231",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5974a5d0-ee4c-40ba-ab64-1c9b1f1a5689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed76e99-91e3-4aba-8cc6-b111a46a48a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ae38f5-3160-4a3d-97a0-d43cf850afab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d609bf-45b2-446e-8a0e-7664a7e25e09",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb38e2a-7289-4b6d-8260-0fbaed626e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc65ac06-9daa-4f02-9769-78da71849f10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef65cffa-9604-4954-b56b-7de3ff1eef9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee283095-fb25-472f-b2a5-fa2835c073fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23cd640c-da7d-4347-a8b4-7c1d4526c929",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a6ef9e-2ee9-4586-aa69-230241431b85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc350172-1270-4256-9239-48a076c53e50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70740b14-a836-402f-b8c5-17ec48372d8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca031233-c0b2-4abf-a122-6af65ba4ce39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39f890b-c695-4ef5-92af-9bc6e4920fa9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07788ea5-3831-425b-8350-7948e4ff1f90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b77c8432-3933-4837-8467-e12d5b62fce2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4c7857-4b92-4061-8b1d-a5cb49380ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "987843a5-a6e6-40ce-8d4c-276d028a4b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696c5fb7-1052-4765-8954-b0ab0a9c57b9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b6e22d-8d19-46d0-b03c-a840c508eb3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e1ce88a-88b3-4b39-bda9-2ad8bc1d3ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87d7618-31b6-49bf-991c-75a1a13f84a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0755fe9-4db6-4e23-b31b-2eb8b3289493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d39e71b-9553-4fec-abd1-9cafeb2da2ba",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056ce5c1-2df1-45b6-bbc0-32d0b4533248",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9a293cb-9a4a-4de5-9cc1-5a8435ac0566"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "274e2191-8834-4761-bac9-d2ac537de2d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "046ad803-6815-4ca7-91da-5d6c64fd4735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c30697-b88d-4542-8349-9b2f5072aaea",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e122eb-b08d-42c1-a695-010c5f0ce5b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22dcd990-2a6b-407f-8ef0-a5993f411a36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51cd587c-9daa-4b94-aef3-e22d57fbd700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a605590-2c48-41fc-b808-d2ba90cadea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52fe09b2-d671-434e-9e63-650643bd69c7",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65787b4-c244-413c-9d2e-96068f3e6063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e5ebac-1ef6-42b5-b0a3-0535805eb6ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bcf5ba-867c-44ca-bf96-7af70c727e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "038bd37e-bc6a-40cf-9c42-420e53654737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860586ab-c4f4-466a-a3eb-f87930e213a6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fe8313-50da-4213-b3f7-fa5d1d46fa31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea75585-4376-4ae7-9e9a-71890b41a6c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25cfc33-396e-492c-b941-c268dec15e6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6235f93-0f44-4289-a5c0-221997423991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb02bb0-1358-4d66-bf2d-342963073b76",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d7d9dbd-199a-4059-8d45-e62b370c988d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cb68e02-6087-4280-9420-dbdb76e97ce3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bcf554-d892-4b5d-9dc9-cd363298944c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08fdca36-827b-43cd-aa6f-626c43bad36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebdf5353-2267-4243-900f-331a7da05a9c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3671c0df-851d-4351-a9cc-ac9da749bcd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b77d1f11-e6a2-4735-a379-ad06663c8f0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05419f25-d807-4a2b-af04-e2134801111d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "852850b4-5d31-4225-be3e-a4aa38cfb5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a218f39a-a69c-4d1c-8efc-e5dbcf2318a4",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f325b578-b387-4539-a458-68c8ed6af3b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a8765f-4561-472f-a29a-da984b06e2ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76766428-de1a-48bc-8cd4-3a244504036b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b04afcda-8226-4298-9791-8a8b22f015d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557f097e-59b6-424f-bad6-000c26195876",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac2a86e-320f-4f12-9cbf-3687838ec566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52897336-6d3c-4e34-9cd7-0bb67ecfe6d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6499a1-0d34-42da-b548-ede912eb55f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b01a13f-d2f7-48be-bf6e-9c1228598b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39362e63-3586-4126-8e35-451c1e27905c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df555196-ffe0-49fe-94ad-1d683cec95fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3992e425-ec16-4d62-a2d5-3d84437d1141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "727c9534-0fb4-4b5b-b1ba-52e8754cb8bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd9fdbe-07f3-4ee3-8bf4-d4c5d3ce6007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba2bb1d-1f68-4d94-9abb-d439d1bc7241",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65bd29d9-83ba-4fc5-9366-44e4de7e34f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "396ca868-c6d0-40be-b15d-daaf27a63c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f863b689-b285-49e4-bad3-f58aea7e8045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17ef1f6-4b5a-42ae-9aca-a5a324703d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5865380-25c2-4a00-83e7-6829d938a7c6",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e965e687-c7f1-4ceb-a039-d28c22d68221",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "363abebb-7996-4afb-95bc-c032586c9ffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f22551-dab4-4b51-838b-6a22714e9e92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f5dfc0-3d89-4a38-a7fd-b3757b5b579a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8edc3162-b182-4f96-ae2f-6a7547a5b803",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d12614-e22f-427a-a526-8e22d90dc4cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df3cd190-7a4d-41f6-a621-8bb2d61b67d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f592f1a9-f65a-40f0-a830-33d4e6d2706c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a059975-b681-414e-9696-d41e060a557c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502a222c-0def-4423-a642-a5d79f68db8d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b336e395-48fc-479c-b53d-bfec29cb543c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3ede446-4762-4e55-9e8b-eb60257d1030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb52ba1f-f087-4588-9611-f75e69a87065",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08719dd2-6f03-4603-ab41-e89cc58f0a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6891a5-691b-4499-9fac-05983cf8b21b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657cdd29-b9d1-49f1-b322-93fd369c3369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae291867-17c8-4f7f-8986-0d4858238907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c256d0-0880-475b-8627-fe51a91c4a55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0981a62-e292-43df-af08-9f77c1bfade9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15854922-0fc1-420f-a004-9eac0e3d133a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b22039-1fd0-45c6-8a4f-9cbaee0a9f24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2df6a5b2-64ce-480d-9fe6-b0b964b47601"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e53c4c4-9b92-4f5c-b2fa-3f3f5b5e2fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59760f1d-266d-48c9-9c98-96ed3bcbd090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739884f0-ff59-4df6-a5f0-4ba13e217209",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc01b96-b25e-4faa-9790-0d02d4488672",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21797316-59f8-45d5-8539-c7a78fb823cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd71713-f22a-4cef-8408-754375f7ab03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab135476-0c05-4325-9a1c-b14bd2bee8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e472f5-c5cc-4fcf-887d-bac9995e5656",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eee336b-1e89-4dbc-af1c-787f84889a59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60cd92e9-d68d-49b5-9698-55d1e82f7232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1323e3-bef4-446a-bace-1bbb955c5dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c0804bc-5f82-4644-926a-a78e7fc4a4a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64fef8b6-66d1-4a45-9fdd-6bb085f447f4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499ea13f-ec89-4ed0-ba88-792fc0f91b5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a7039b5-8150-4a3f-9af6-9328b1837a31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed9d7b3-b617-4992-9396-4b510b0bdd61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c776dd84-cf53-48f0-96d1-4bef1df2a183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c94842-83e7-400a-8bfd-f56996f27a3f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c1a3f9-8194-4cb7-9de7-2b8dbe45b397",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "069ebd73-958d-4752-926f-fb18353fc770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3a4608-e192-4e0e-b4de-c7ad1ea731c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f3fd32-062c-4dc2-a063-9655087cdd81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70a2bfe-f7fb-4066-9241-733db0234f72",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e49f469-030b-4863-8d7b-37eba3e46378",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6556bf9f-8e28-4e39-b248-f31d00d58eab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f375db70-006c-4072-812e-97b723bf875d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cc011f5-e85f-41ca-8938-0a6f3ddf2015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265731f7-502f-4d76-860a-965689c01761",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803e5956-9e1c-4032-ae41-271447d7f54d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47a9a57e-7ea3-4288-8091-01693a6a931e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "066e8533-4a0d-4be0-b090-95d59fe98e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23c1463-de46-4ce2-bb8a-e51575e9d6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c0dfd3-eef4-44b8-b884-1284b4e1b353",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408836aa-e716-4794-962e-cecb24cb12fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15f91671-c18c-4a3f-886d-a696cbac0712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8bbcb0-ad6f-41c8-a7d0-06c18fd8a69d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d767c9c7-7e65-4fc0-b474-a330ef4044b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352a9c41-23fd-4315-931d-4ee8e25f5738",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e83b27-145b-4fe7-a2cf-e9ca6957b384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b97c0fb8-3d84-4265-b4c4-362ffc3fe1ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88dcb54-2c7d-4b94-9b09-a0964f0992d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d99ed9f5-c4cd-495a-8b55-f84d8685392b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afc26f1-023c-4591-9dab-c951cff94245",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e068fe-cb3d-4bcb-990c-e63716bca3ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b23808d-d8bd-475e-8527-ae76699492e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df922b4-6287-4d3d-aced-e8305c987218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8c3fce0-65cb-4c70-92ac-089f925e9ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fdfcd45-4178-4d9c-9832-4d0dde666e62",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6934f48d-1ba9-4e0e-9797-69c48680e70a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa2d852-48ac-4d04-a1b1-17e752aa06f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea048097-5a99-4753-a4d6-25fe130e69c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f393ae5d-37b3-4ecd-bbbc-353c14ebecf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1797ebb0-c113-4ef8-b64b-c173ab961099",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69209b5a-7bbc-4abe-bec0-f5899366a728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ee97ddc-2a83-4bb6-90bc-80f3f4ccaa34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13db1c91-64c1-498e-a9cc-9f0a69c61827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f672959-e70c-4966-9911-24a4855cb6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee21201-9bcf-4e94-9c82-3bf512909e89",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6710b20-06f5-4c0d-a9e9-f35e1f59b9f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ef0936-e484-466c-a56c-46c7c68e5b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74142d2-0cd9-42e6-a212-d88e1a6e2819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85dac75c-6b76-43d5-90c4-07265c34d2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed963706-9701-452f-8f52-54acd6c65b96",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c986dcbd-1fff-49b9-a00a-594d3f0a1b29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1bec9ae-1ba6-437e-b514-66f566de501a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ec2550-20a1-4c56-a748-2d8a96fc8949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1aa2d9e-5784-4620-87bd-9c466dfd862e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b03642e-5795-4650-9346-ae95c24283a0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853cfb16-674d-4374-bbb0-b1796a8774cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4870c5ca-772a-4cc0-9c8d-698dafbd938e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18bf7da-17ec-47b5-bb39-2994f6e0f36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "857bf18a-8b10-4738-8c8d-1f9fdfa12814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98eae914-7c2c-4c99-bc9f-338a93b09cd3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af2d5e3-cab3-4752-98e6-b9ca460dd651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37292ba0-4216-4aa0-92fd-7ceaf442f834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7714e8e9-e23a-4c4e-8d04-521b15046cb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74bb4ec8-0979-4384-9467-c2921cd1cead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d062699a-28d7-49b0-bee7-8f715326d044",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c395c1d-c309-4c94-8950-5eefc70166e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c93008-396b-4b0e-8a2b-2efc0de8a15c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb821fa-11e1-48c4-abd8-8172289e7812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bf7bfe0-6318-4446-a4c3-b51a418610b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e6df6a-595f-455d-bd6f-8392dcbbade0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff2fead-0958-4b43-a8f9-06a2dbc3c83f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f0dac40-0a0e-45d5-91c8-055fb3a28058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6f73be-12e5-4e88-a60b-39e8adff8df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce6b6577-aa2b-4595-b7e4-5361244409fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689ba184-8c11-454d-9bef-cec6bc3aa39f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8048f9a3-3958-4cad-938a-282d1f8efdd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ab8e4e-dfa9-46fe-bccd-74ee6f944711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb6e684-24e2-4929-ab59-aae9fd9acefb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "703571b2-cb24-44f4-bf17-ece66a794a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1602fb8-b38b-4cff-b431-63a8bf49fe77",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2687a96-90a0-43cc-9198-69260ba143fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db0894ac-89b1-4946-9a98-baf3dccb4d79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "067870cb-bb9e-49be-9149-99dbb7c6529c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aaacb2d-1e55-4761-8867-c70f8995a44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93de6443-5ff0-459c-aae6-8519373c0264",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a58d7a-7586-49cc-bbf8-6cb78d63debb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2009c9a9-3fef-4d26-9ade-eac206fab5e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d995aca-5611-4d15-8621-518d16fe4a93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b99f17-9c7b-40a3-aaf0-a1e931b6ae21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58176b00-67f5-44a9-b926-46409b9e9c58",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9255fd22-199f-4419-bcaa-4b78e52d44cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c21bb1-0ff5-4195-bde5-f87e38e811cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b68fa9c-768d-4ea3-a175-cee1efbcb4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2bb9d7d-9716-4bcd-99be-703814483256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b00141-0254-41ac-ac85-ac04e6721712",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d53619-f938-46b2-b9e5-e03f216a2e5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c30a495-0c78-4652-b0f3-6caa07e905bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ac5219-8015-4dc2-823c-ec987509924d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aebd356-9946-47e9-9159-21c0b535af4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecdeb94e-c772-42fd-9693-b08715e4f8f6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bad721e-e828-4ebb-925d-a24993078215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d191d081-4890-45c5-a89d-b7929a5cccf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c783b2f-48f3-4803-a13a-e4da387416d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da90d11f-ecb4-4187-b8a8-40243acffbd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac32900-6243-4a26-9df5-12c6c3848824",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8693e97-5be6-4920-85d2-09fb4bad84db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92875389-9396-47b8-a332-380a0826ca35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc50b5f-3062-4a34-b28b-73124620aa5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b86397-6773-4581-b633-62158239b09d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2558de50-c6c8-4f72-a06c-1ea6180f5efd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8df670a-c366-48df-80d8-07a6a9289322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9400aba4-6a9f-4b7c-a9bd-14178ab68ec3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9f8d79-637f-4e76-9768-370f379e0dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b07ceef-3da2-42f9-bb5e-be52c550825c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b31fa03-e9a9-4887-a01c-d1f91d2ce108",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8163244-4596-45a9-998e-36e7735c65e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5de44475-dfef-4cba-9431-5616fef3bac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d66c72cb-ba4e-4fc3-93d6-865a96a5ab8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f442dc-7673-4c52-b80c-350bc07fcca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4d3bb0-d8c7-4a7a-b2b7-bd69541dc8f7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d74b45-88a2-400f-81df-c9345594664e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "662cff56-6305-494f-bbe9-15341098d49d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d26a8e4-cb29-46e9-b143-2bce3eb75f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b249e8-5ac5-4935-a18a-45b3f5a96ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62523452-6137-4250-bab1-2a2732e1c001",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd70fa5e-0c6d-476d-b065-d5f17e0d7f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "681a3635-5deb-4196-884e-5fdab716108b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c966940-4c6a-4e39-915d-9bd0f06f8d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b469d7-6466-4baf-9486-db930945ddbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd552b37-3707-4e98-86ba-9e1dc0aaa2c3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60cb0c5-8d5a-43eb-a1ba-447beec04adb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c5c7a4c-1c96-4704-a889-4c4417227b28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41239625-3d98-495b-bb9e-f2315e67099c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88de46ec-b318-478a-aa41-c7684632cee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a751d7-299f-49a6-8091-8f5fa285cc11",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d08cb10-9b70-4d87-8c47-763526a27439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bdee35a-fde0-4cda-9a79-85539b4c1c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c947c5-8a3b-48f0-9fdd-5ea435d47f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b2613a0-86c3-4b6c-9f0f-0954ddcd362a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c5c2c6-6b6f-42f2-930a-1c0962431103",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34449ee-c436-49f2-ab6f-f85ede083201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784c0483-4599-43a0-b3e1-84c42ba3b738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd0d0ae-cfe0-4eb9-b346-b7a2b82c9201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28bf492d-c5c5-4708-b5b1-332a0f41497b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76b2cae-eb1e-4949-881f-b375587f78f1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7711c64-2e74-456a-97f4-a5490a507673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1763235b-edbd-4199-8911-039e46a20a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdc34c1-c93d-404b-afe7-060e2b237412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa55c956-e2e9-4b8b-aaf3-ebb1fb70f835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c339d092-1ea9-4e9d-9786-d335dafcf77d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5665a9-425c-4d4a-82da-c1a260396ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad00c83-2a0e-4ac4-8979-892673e36061"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc52a15b-c5de-419f-b8e9-d0ed697d56d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b22b432-4fef-40bf-955c-a832fa3ecbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74fab0d-62f4-4751-b5e2-dfba712b1268",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11053426-bfdc-4476-a765-e2482f5a2f00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40cd9207-6833-489d-bf05-00324384dd37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e044a2f-2101-4b46-9275-8b386650e66a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3142bd44-55c9-4cc7-9229-730f67d6f32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ce5bac-b4dd-4b23-ae7e-321b1d6b5dac",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e9c59f-be8e-4414-b211-44ed12f70b19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d51f822-8a96-4bd1-9e6b-cbc2bdce3879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb46e5e4-631a-4bc1-b20c-643392258cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46d7cb0a-3f7a-480d-8214-01dcae17cfe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c9f4b4-a30b-477a-9a7e-500aea97a738",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9face2af-220e-498b-a715-3d3344aaae81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77d7111d-703e-47bd-b934-e6c48c8846f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c227bf41-65f7-41b4-82df-b647e6a9670c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e499a28-e6c6-4dc9-82e7-9c71752171e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1fb486-9f52-4a26-b76b-2796320f3190",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b33d8c-1656-4e34-805f-b8ab4dc4de70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d0d2c74-047f-4e0b-9d87-152734f276d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4902ad77-22fb-4fa6-aab0-07b9578664fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32118cdc-574d-4149-86ee-a6433686a4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b34df2-e825-47d2-ba2a-9cd8a47a5cbd",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554ca0d3-c52a-4289-aec9-18e9270c0f80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e888f7b-77fd-4e13-8d02-e6554c92a1df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a94f0d-140a-4a7d-bd25-2dc5ddc8a14b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db88b47-c26b-463e-a1a1-30795606293a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef4636b-b6a5-4597-80a3-d23d5c68905e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b8bf79-bf2d-489d-b905-45d23bc5d026",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e20ae90-4250-444b-8619-9ccf4435916b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e666160a-833b-43ac-9cd1-47e34808f8e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0476d8b7-d08f-4cd2-ba1b-557b7530ebd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4601ed-ae4f-495f-86df-c40c6ed1e7ec",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec675fc-2e13-489e-97e1-0afc625b50aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfe7b431-2bd1-4216-9136-020af5f6c077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4205c5-3cde-42b7-932d-4e8b93d7a080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ecf575-ed30-4193-a193-952ccbfcb6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae7d953-5b41-48a0-a72f-f72b204d997e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da7a6c0-a0fe-4374-b2bf-a1c6f67c7c93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c055a4fa-9099-468f-b3cc-b78aa3d3d9db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "173e2cbf-ba40-43b5-869d-00f79488dc7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "699fbd86-e0ce-41a2-a506-ad3f723e2d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704f7247-5036-4fcb-b7f4-1e8bc878aab6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bbbe43b-8216-45fb-9f3c-9b0138c714a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a740c08f-f2d2-466d-b4a6-95cc96904e9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5db1ea1-c0a0-4c2a-b459-bc04b31f0643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f02cdc2c-60ef-4e5a-a92b-a6f2e67c8194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c627b23-77f8-4066-9535-b131e9cb5f04",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e44f4d7-0f8d-4d63-901d-82e2b5e11fec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e4d3054-5373-41df-a600-c3dd3d4dbe22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb30b437-87f9-4d16-a874-0f6058d856c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd6e762d-77c9-4858-b753-740acdbf77ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae48e0d7-a821-44b4-992e-a7520ba3d6a0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c688bf29-2271-4c48-a684-60c75352d8fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb1dc084-09a6-417f-b65f-b419af192cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04e9e7f-a838-4337-87f7-c43ec771a5c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1149ff60-9deb-4825-b322-dd295629c195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db8d194-6034-41a2-9d0b-49d142eeec9f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f9f92e-e578-4d7d-8c47-47964887cfc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "980e911d-0242-4108-917f-0ff9156e35cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e788a0-fab2-42cd-9dfc-deb48a798428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1d1f758-8ea2-4b15-b428-35dbd15d0c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72eaeb2-529f-48b1-9c48-e0561c588ce5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68230e3d-554f-436a-a74e-b24777506c74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "120a3e34-9ee7-4d7b-9e89-8feec7233dbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcfc1382-1836-4371-ac3b-d4865e340fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de917e4-e0f6-4fa4-9685-504e6b934926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ec30c2-182a-478b-8b7d-5128952f6134",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0018c33d-8757-43d9-8eae-2d2f2b986329",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce2e5277-f880-421c-81c4-b1a05fb916cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3110d964-8c26-4abd-aa53-8dc73810b2b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd98597-dd72-472a-9522-a9652dc7f64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7f3038-d2b5-4935-bf71-9d1b466cd18a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708e95e0-63ad-4e95-afdc-aa5224578c2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eabf0e6-c267-49c7-aebd-9d50d65090f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5bbd11-d292-4dbc-adc7-96af6e0f952b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c5bd4e6-77ee-4641-b67c-64e15ac802cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca9eedf-c847-444f-9141-a669157a38cc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89263d42-69b9-4f13-8685-b90b462e4ca4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3b3900c-9d39-40bb-9943-8cf17f36dbd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ed8b60-2b18-49e0-8deb-c96745693df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c5cc9e-a66f-497c-8273-d10729a8fcdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aaf6454-acd3-4877-b5a6-00f582374e0e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32492581-4312-43a6-995d-fdbe8783e075",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8c8fa02-6277-47e8-ba77-3b9e6cd9d3ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce54eec8-f4f0-4070-ba61-6236c8eabfd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c648f2-7d71-4160-b629-a09115c20424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0697d6f-6baa-49e1-8389-aabe4096fa8e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2ed8dd-cfdb-49b5-b82e-2ecef53d4126",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e14c62a-8177-4625-b3ee-a129c94488fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0251d110-b88d-4792-8a8f-aa88e4b806fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19b55482-6f3d-42b4-9b99-18f13127e0b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857ac2bc-e21e-4613-9f1b-4561b7c9cb5e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a56e5a-a314-4690-b25d-2333102f0651",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79e359d7-2da2-4307-8d46-d4251de81700"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd818e5-8f21-4834-ad62-27dc13ffaaf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6521ed6e-a351-4c99-9b9e-70c9a529c1b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db4b2ede-aba4-452d-9b1c-d09b20a93708",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103d9e5e-98f8-4799-8101-cd218ca17df8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f3b314d-b239-48a3-9ece-4a5f0f849fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b955f1-66dc-4426-a5ee-f9227e72b939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd051a90-6895-4e39-b9ab-11e57652e7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce78c423-7bae-4462-bd14-c88ca9c82a97",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74aa5b5d-9a38-48d3-88a3-ed154d20a6d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f096a1f1-0b76-4fcb-8bf7-13df23ae1cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "280cdd46-8e61-4dfa-9cfa-494542a53359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b081d20-7c73-4938-b9f9-8e84ee449d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee16064-6362-4d60-bbf6-89afff66e6e6",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322f0013-869a-4d40-ab09-c4aa69cefb19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4134a971-209a-470c-b0e4-714f49953bd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "701e2945-57f8-45b1-b261-1292dc0e89ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a4606f7-d67c-4949-aa90-48f4f0eba85d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e80a90-5d33-4f5c-8a6f-21a187a60214",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc34fc9-a7bf-4a91-a1a3-b463136bd9ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af1db1d9-477e-4624-a319-36021fa77c11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99146fd1-0252-4aa3-808c-78fc00663ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f7037d-87dc-45ec-b5cc-50307c368043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a781852-d1b2-4c2f-91dc-7917a96a4e39",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e597519b-028a-40de-ad40-6d03b1c8a5bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3db9de9-08d0-4cb1-bea8-649e0c2f90ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0baac9b1-2967-4967-b722-2c950be9f60e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca9c075-dc9b-41cf-943f-37a843eea22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae3f0d5-3254-44f1-b803-34a5227b4187",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf2278c-e509-4216-988d-007d36a80c79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a7e5348-455b-4d2e-968f-72aea65e2908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6031213a-8a58-469c-8eb5-3d6c0e141ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55e3fa92-89ae-40d3-9098-c3f8f17a27e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba5e63f-0dbf-400f-a411-3afd98a4d1f6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a120e05-d4b3-425f-94f7-076c00d1174b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef43a72e-08f7-4a44-b3f9-795bcd9e189d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b86dc6b-23e8-4b91-b7ec-66ff7b8f691e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73872e7d-2e4d-4791-84a1-9928953259b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b000fe-37df-4ef3-80ef-92fc815f6b72",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350e0098-935d-44e8-8dd3-600c929b4427",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "714dccd4-9f5b-43b9-b8a2-c024c39f976b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e698d3ef-63b9-4c76-93d1-59b5ce9e65a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ed7dac-fc03-4b44-8a80-6579ecd04381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434a0314-8d9b-4bbc-8482-0c7bf8220501",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319f6958-0df4-4ea8-87ca-a4ee44b4d82c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b12f3b1-8d17-457e-89f0-6488c9174399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f702818-573e-424b-b183-dcecddf7c03b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1022b74-1022-48a9-9d0f-61b1de33990c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2deee18-9dd4-4cda-bb51-579012b43f50",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665fd342-b93d-42a7-aceb-b7d75075d1d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1176a7be-03e6-4c22-98e2-063fef5b5258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25c1ef4-0beb-4823-8dfc-02a65b788e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b440db2-6269-4aba-a85e-3cfb9895f8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53eb9ea-28b7-49cf-b096-9389c07d7181",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ebfed9a-e3c5-4ce4-a9a1-7347470f6fdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c93e507e-299e-4f39-9df9-617d9f39c1c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd4a0c2-f7c2-4df6-80f6-c50176952c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b15a25d1-8112-42de-b9b8-3d9103b25961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0bf808-95da-4702-b2f2-aa846c11eedb",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba3114f-2473-4ed9-9acd-d1925a254e1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac67eda7-f5b3-4666-8a8b-5fb74f9a7118"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5efe443-b087-4d64-979e-1078a0fbf335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c50cd4-b87e-4705-8647-864005db1fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d49dc00-4da1-45fe-b4d3-20a0a0c4182b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfeb7d79-2732-484f-9ac1-5bafd794e095",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a94d8f4-8260-4722-a42f-ebcbf10882f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b743f59-2807-4844-a95f-ed1745260ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eebd1056-6d41-4a98-ae3e-66a0a06b94e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093bc085-a17f-44c6-be21-e27674316669",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f0eece2-b441-4273-bb6a-9b5188eab5aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb189134-30ad-493d-a11e-0c1ef553ddbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "766a7f34-0371-4d40-820c-3301adb22450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "409b1433-5ec6-4e78-8090-e63f9928600d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87574921-8a4c-447c-a4fd-fcdb6e7cd7fb",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff7b285-cd63-40bb-ba41-88a162cefb5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a2107c4-2331-41e6-a5b2-1193605e8558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c80469-009c-4bef-b27b-fbe921ac09fd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbbbe471-a69d-40ac-9d57-50f51d2db999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e6ac39-e296-41ef-8be0-02546064cbf3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28846a33-e4d2-488c-a2ac-e33dde93eeb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdb2b666-0b96-4dfe-8c86-a675fc2d219c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95246417-596a-4447-a392-e008cfa71b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4319e3a6-7985-4984-a608-cf21653599b0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4c67e23-49b2-4a22-a3c6-6d8bffbb8a88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c5974cd-a55a-4a29-936b-207293da66b0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb49a062-9921-482c-8450-ab1b1b6c2657",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fca12a32-25ae-4d5e-885c-fa75e6d2999a"
                    }
                  }
                ]
              },
              {
                "id": "c130ab36-e240-4c6c-a4da-f8fd55625376",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "33b51cfb-0bbf-41a6-94da-452f786bc539",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4158f3d8-867b-4613-86fc-85b58cf64a75",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8a428575-ce70-4f95-a079-7782f67467df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea21954-6493-43f9-ae98-f814f206a219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5dc4a56d-1ecb-43f4-ae6f-303d2b44e623"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ecdd264-effb-4a8a-afc9-a5e146d5a2f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "171cc33e-c0c9-4a7d-8b52-8e54047b109a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6bc44f0-b0e8-442d-81b3-9b0b1458d510",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14d97b25-47ab-48d9-be96-7392c3744c4f"
                    }
                  }
                ]
              },
              {
                "id": "3a5000e6-88c9-4254-854b-42d51663d09b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6aff920e-2c19-4cdf-8d57-30c53deffca7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f98f150-8c5e-43f0-8b93-40d0e4ddd8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "550e18ec-d283-49e4-8883-1f27f925f250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f77b85-0eb7-4f88-8093-f83c46b4e4cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e94fcb-50a0-4b04-aefe-61d418b5391e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a8a7c27f-72ed-4ae3-9fca-c162205373e7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e4383154-fd19-4461-beda-904b922ae0f5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0509848f-4d14-47cf-b6de-9f17b1207bdb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ffc368d8-6666-4ad8-a678-3d098bd31fee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c39be75-7ab1-4e94-8a9e-63ee90988a65",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4e51675-6c22-4b30-b5f0-fc2773f62155"
                    }
                  }
                ]
              },
              {
                "id": "a1257ff2-2f1f-4fa4-958f-a8d53b625f31",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62f7c169-9c16-4f3b-9538-5357d9313ca3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "48d5d2f0-afa8-43f6-bc30-091b466a16d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc153ed6-97db-40d6-9124-e62b14ac4b0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffd2f357-41d4-495c-a619-360137c8c58e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81cde9b6-19d9-4ab4-ba74-123fcf3f0a5b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "37b4142a-0dd1-4d99-a58c-9d2e0b3feb08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f3f24a6a-98e5-40a4-b87d-697f556c1508",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a51074c-ee60-4ed9-a662-a4102974841d"
            }
          }
        ]
      },
      {
        "id": "c4b573b3-1385-4a74-b4a5-471e9336a57e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9ddd4a71-ddbc-4c35-a6e3-3f1a7f2861a8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67b0984b-e315-42eb-9194-b2975575f45a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8e4f400d-55d1-4860-87c5-44ce1effd0d5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8013ce48-6488-4cef-a622-a3a07a7cf451",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "10416ea0-ec22-4d64-ad4d-831757c39ebc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b687f0-7617-48c3-91f5-bff4e3eed461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efc06176-3410-4f0b-81fb-c0aadf78ce7a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ce0a4e8-5f6a-4df9-8df4-500432e69a5c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0aaf3af1-4703-4129-b45e-f73bd3b140f4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3dd4e216-0bc3-45ef-a287-f50ad85a3772",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "019aee01-b724-44da-be2d-f7daf97625fc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d28974b-a389-4d67-a8a8-54f8aa265d83",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d3d2d712-d222-47f2-b31f-7e9b17212b04"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cbd7df58-62ec-4b2c-aa88-044560a0f916",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "11c4b07b-759d-4f99-bea6-d96f6b481af5"
            }
          }
        ]
      },
      {
        "id": "53fcb342-f8a7-44cf-8387-32cbb613bdd8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d2e9627f-1d9d-437c-add5-285524ffc59e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f03d994-c7e7-4716-ac88-d2ef3354e756",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e7d7a48-776f-4d8d-ae15-03a04a94748b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52399470-2332-4340-9b20-0eea3bc602e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5047565-c10b-4920-8d8e-1b3828ee383f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34609fb8-eb8d-44ac-b3ed-f7e2430c1c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21f14e71-473f-4247-9256-26f03d5a7477"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9b13200-849d-434d-8887-e0b3537e4151",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06b09616-bfd5-4df9-9316-e8da00379503"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5d48ca9-543f-4aff-bd34-5bc5659be45a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5b7d858-3708-4f54-aa3d-d3775db80faf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d886af03-bf26-4a1e-b37e-7d4174190708",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "79f28897-6458-4706-89af-a45c6666c8d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7255a1b-ae24-46e9-84b1-29298fdad7fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "35712cc8-eea2-4763-8273-bc41897965b5"
            }
          }
        ]
      },
      {
        "id": "7ba940c7-31c1-49ab-9d24-71292db1d4bd",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f6943769-fed4-423f-a921-9ebf46820055",
            "name": "Negative Testing",
            "item": [
              {
                "id": "341d80fe-89db-4538-aa75-279b5d08cf59",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2f933bd6-abb9-4e32-bc4d-bb0cf53c2a7e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc2d9be-239d-4564-b614-fd48e4067971",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c63590e-ec71-40fb-b40f-0f0454fd6e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfbe877d-6641-4239-b74b-46daf4d7405c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03be34de-397a-4a46-ba97-3e8332ca9f66"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be8d5d90-b374-451b-987f-1cfe4153d8d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e09eca08-a13f-4647-ade7-adeb729b0885"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5d6cf91-c20d-452f-8c3c-fc021aa4c7cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42fa13b7-c6e0-43a1-a29d-9fc7775b206d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "684628fe-f94b-4ae9-b1b6-650b1a820c55",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a78d2f8f-27bb-4f49-a0be-3ca336c24162"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04dc7ff1-afc0-4454-9a9c-b1827f614b3e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad1c1ebe-22be-42f1-b8af-eef7537b48f6"
            }
          }
        ]
      },
      {
        "id": "504f2ff5-32ed-413b-a041-67cc86a65846",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99b28de5-c142-4d97-bca7-ed855319870c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c51eefa-76e8-474f-aecf-9f1c39f45a17",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "64741c45-21cc-4cb9-aff3-0b83cc37ffc2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6deffda-cff3-438b-930d-bcbe5fa5d3f0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2dc5b77b-c8bc-422f-b76a-e42cd581ca23",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 262
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 64.88888888888894,
      "responseMin": 7,
      "responseMax": 359,
      "responseSd": 25.481933289337693,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1714610118839,
      "completed": 1714610143254
    },
    "executions": [
      {
        "id": "eb6b20ce-4298-4350-bfe2-f88d76dc5d81",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ef89cf80-d0b9-4e92-a375-0e22a62e14f8",
          "httpRequestId": "b4f8054d-d3f7-41cf-8a5e-38fd6d203d76"
        },
        "item": {
          "id": "eb6b20ce-4298-4350-bfe2-f88d76dc5d81",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "900ae881-f7b5-4a99-acc3-45e9d9afae0c",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 0
        }
      },
      {
        "id": "7ffce925-1ebc-4699-bb80-558c63f29665",
        "cursor": {
          "ref": "02aa7099-681e-41cb-91d7-b135ca5110f6",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "10f6fc88-acc6-42eb-aad6-cc340e43a0aa"
        },
        "item": {
          "id": "7ffce925-1ebc-4699-bb80-558c63f29665",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "705b5bb1-8b10-4483-92e6-3036e4b8de31",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "9d615c08-61a2-43dd-82ab-d9cee6a4f0da",
        "cursor": {
          "ref": "88d457c3-0d14-4e6d-ae2f-e610be521de9",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "149617fa-34ee-428e-b6d8-decf943b1b2d"
        },
        "item": {
          "id": "9d615c08-61a2-43dd-82ab-d9cee6a4f0da",
          "name": "did_json"
        },
        "response": {
          "id": "2435daac-3dbc-4249-aa7f-04d6a195880e",
          "status": "OK",
          "code": 200,
          "responseTime": 209,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bebe4d6-3253-4351-a859-f733efd6d7bd",
        "cursor": {
          "ref": "f3b5b4a2-009e-452c-9c69-1f52426c0589",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f8df0b90-3236-4f88-9a95-da3fa3237c7f"
        },
        "item": {
          "id": "5bebe4d6-3253-4351-a859-f733efd6d7bd",
          "name": "did:invalid"
        },
        "response": {
          "id": "ff7d9e06-8364-467b-a3fe-618e880e5c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bebe4d6-3253-4351-a859-f733efd6d7bd",
        "cursor": {
          "ref": "f3b5b4a2-009e-452c-9c69-1f52426c0589",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f8df0b90-3236-4f88-9a95-da3fa3237c7f"
        },
        "item": {
          "id": "5bebe4d6-3253-4351-a859-f733efd6d7bd",
          "name": "did:invalid"
        },
        "response": {
          "id": "ff7d9e06-8364-467b-a3fe-618e880e5c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aafb4d2c-3a1b-4f6b-ad8d-013436ef99ac",
        "cursor": {
          "ref": "f03e2373-6101-4b03-a261-9d05dd68fc79",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ed8a3c03-9c0d-41e7-aadd-19a9d73785ad"
        },
        "item": {
          "id": "aafb4d2c-3a1b-4f6b-ad8d-013436ef99ac",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "64c3bb40-fe8a-4af2-b6e3-834c2eafb459",
          "status": "Not Found",
          "code": 404,
          "responseTime": 121,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3380b67-2424-4ce4-8f86-e01eee185518",
        "cursor": {
          "ref": "b957b462-9eb7-47c3-9343-5b20ca4a7f09",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d8ddc138-a1ef-422b-ab06-486bfa339e5f"
        },
        "item": {
          "id": "e3380b67-2424-4ce4-8f86-e01eee185518",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c0478bcd-cb9e-4b20-8239-928b2742f299",
          "status": "Not Found",
          "code": 404,
          "responseTime": 61,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e8d404-303e-4772-b523-c29a86fc183d",
        "cursor": {
          "ref": "f5dbc7f7-7c30-44eb-a72d-02e568945b5c",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "671d3581-23c3-4337-ab56-6fae59688273"
        },
        "item": {
          "id": "64e8d404-303e-4772-b523-c29a86fc183d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f0fda0f7-7814-4284-ab9a-dfc5fb76cd6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e94df1d-8cda-4377-9d13-b6be9e67480f",
        "cursor": {
          "ref": "e2ddb41c-a4cf-4b4c-a3ae-eabb1cc6b665",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1eefa43a-c8df-49b9-aabe-259f7f99a98c"
        },
        "item": {
          "id": "3e94df1d-8cda-4377-9d13-b6be9e67480f",
          "name": "identifiers"
        },
        "response": {
          "id": "e8b89b8f-8a7a-4e53-8fa7-9540be3aac67",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb91abf-4f1f-499d-8a44-f2167cddccc0",
        "cursor": {
          "ref": "eb15f620-3d72-4719-adb6-2166ac31c06c",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "221693a4-2c5a-4a4b-bf43-58d1868a7347"
        },
        "item": {
          "id": "ffb91abf-4f1f-499d-8a44-f2167cddccc0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "68ff5b73-a230-40dc-8e75-cb85afffb1f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b243c24-4e7e-49dd-9619-bdfe86caf7ed",
        "cursor": {
          "ref": "83469e85-8875-4332-b6de-b9ad152de545",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bbcba8f7-ac2e-4f86-b523-b31cff3ce8d3"
        },
        "item": {
          "id": "9b243c24-4e7e-49dd-9619-bdfe86caf7ed",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5ee1e683-80eb-4728-a8e4-7f0fc70399a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ed6d7c-f74b-41dc-90f2-2c297525b1d0",
        "cursor": {
          "ref": "f2f2ba00-40ca-46a4-a891-4bb10909cc53",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4aa24f95-c192-4ae2-aeac-3b2f2ef7d28a"
        },
        "item": {
          "id": "19ed6d7c-f74b-41dc-90f2-2c297525b1d0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b9f1766c-da7d-4194-ad69-c0fe4bd04886",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d884597-e620-49f3-bad4-6c98126781cf",
        "cursor": {
          "ref": "f4e9b2fd-ebef-40d9-870f-60a6f4944471",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1ddb920e-02dc-4d08-8b52-ef9c229ab672"
        },
        "item": {
          "id": "1d884597-e620-49f3-bad4-6c98126781cf",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5cbe2b2b-8080-4363-9df8-23681fd62d39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55b5df1-9055-4eb1-9c97-b405021dfac7",
        "cursor": {
          "ref": "2329094e-1ca2-4d20-b3a9-ede171bc448a",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4f4d79fe-bc1a-4192-8973-dcdd3e1a1134"
        },
        "item": {
          "id": "b55b5df1-9055-4eb1-9c97-b405021dfac7",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bf663fc0-dc06-4cba-b04e-2e95def932c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71820211-b322-403c-89c5-5ee68c680fd9",
        "cursor": {
          "ref": "df9b8bee-0158-4833-a6de-427a8404f9d1",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "34c7fc45-73ff-48bd-9861-d3d5dc8e9f4d"
        },
        "item": {
          "id": "71820211-b322-403c-89c5-5ee68c680fd9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c776226e-1ff8-4d11-917d-ad51f27d2dca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2503863f-0c6d-49cb-a6ea-bd9f7c38e0e5",
        "cursor": {
          "ref": "757734aa-5738-4c0b-84e6-a95f078d2d04",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "505cb566-4a9c-4577-96db-5a216f02da6f"
        },
        "item": {
          "id": "2503863f-0c6d-49cb-a6ea-bd9f7c38e0e5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "64829593-ba0a-43a1-a5a2-55ceaafa0854",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815cc6ce-185f-406e-97e5-f5928ef4f89c",
        "cursor": {
          "ref": "cefb6337-756b-429a-a846-c5c2548cb652",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "15cf5056-dbea-4af7-9f60-edb6ad2b31b9"
        },
        "item": {
          "id": "815cc6ce-185f-406e-97e5-f5928ef4f89c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bc793ab9-9858-427d-8568-488ffc9d758c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9d1058-ee98-4caf-bc51-084eb79e5e27",
        "cursor": {
          "ref": "0cc3f8ee-3120-45d8-aec5-4161260267c2",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0e342268-869b-4e10-844b-761e8fb50272"
        },
        "item": {
          "id": "6c9d1058-ee98-4caf-bc51-084eb79e5e27",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f7213d12-5254-4a87-a202-51202ffe988b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc103227-9fc7-49fe-9915-f4205b88c225",
        "cursor": {
          "ref": "01fe77d0-6ef6-4887-90fa-0425c8ba21bc",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4aaf4644-d753-4beb-b731-ddd6dda38fd4"
        },
        "item": {
          "id": "cc103227-9fc7-49fe-9915-f4205b88c225",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "071a9aa5-2a8c-40ab-9784-4481138d1692",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea14b67-b020-4854-ad4e-e2d51609124c",
        "cursor": {
          "ref": "b2f17660-9dcf-4dc5-bfc8-08c3ba0d025f",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7078779f-db40-467e-82b5-21eba112c77c"
        },
        "item": {
          "id": "7ea14b67-b020-4854-ad4e-e2d51609124c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "88f9595e-c0db-422c-9ae5-cfa8e4d46aaf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5666709e-35cd-4088-849f-0155fc20c5b3",
        "cursor": {
          "ref": "cae0f50a-d5f8-463c-9195-f4ffa45cc338",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "27e3c7af-3221-4402-bdfe-d2a9f73c7577"
        },
        "item": {
          "id": "5666709e-35cd-4088-849f-0155fc20c5b3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0a0eb000-89ef-4983-9e0c-d8b5e9c54cd4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d3483c-97b0-455b-a546-fbd98938ed00",
        "cursor": {
          "ref": "ea0ed326-e607-4a4b-a6cc-06f0c6d4a400",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ea8375ec-03b2-4c66-81d8-6bfd64eaab7e"
        },
        "item": {
          "id": "03d3483c-97b0-455b-a546-fbd98938ed00",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "641c4fb4-6ecd-49f0-98f2-c2e9c2626132",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25cc7f74-9cb4-43ee-9a9d-76a73ee10b97",
        "cursor": {
          "ref": "48e844b3-bad0-4d8e-96b5-3a48dd9d70d1",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "496c2c1e-717f-461a-8ba7-93c6937cde40"
        },
        "item": {
          "id": "25cc7f74-9cb4-43ee-9a9d-76a73ee10b97",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2493d892-4446-4576-b267-87a03f11db11",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411baae6-0a2b-4879-9ce0-f09ff583c1f0",
        "cursor": {
          "ref": "121928f3-81e4-4208-827d-b16ed3c32410",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "de70980d-2455-4827-9db5-5e345e688b7f"
        },
        "item": {
          "id": "411baae6-0a2b-4879-9ce0-f09ff583c1f0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6af7bb6b-c1e8-445b-976f-62c575a6a7e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e648453-c835-4cdf-b445-1f548d7eedab",
        "cursor": {
          "ref": "6b53fd1a-ffe3-4873-bd43-97182a40b0ae",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "79f8a728-d561-430b-ab35-649fe36fc855"
        },
        "item": {
          "id": "1e648453-c835-4cdf-b445-1f548d7eedab",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "97356e8d-dc7d-4e17-98cb-f25f15e2b541",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa1b94c-14b7-4ff7-82a2-f4705950bdb4",
        "cursor": {
          "ref": "e6c4bb51-14f1-4dba-a4a6-e5988b764ae0",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "05501b5f-f433-46e7-a561-b8daa00c961f"
        },
        "item": {
          "id": "efa1b94c-14b7-4ff7-82a2-f4705950bdb4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0d8614b4-1bfd-4aca-a522-130fd12aed9b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57c0bbe-4f67-4550-a95d-fc135cdfd9c1",
        "cursor": {
          "ref": "b88cdb15-592d-48a1-83c6-0227e25362ea",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b4fa9542-7ebe-4c9f-be37-d9bca287de29"
        },
        "item": {
          "id": "c57c0bbe-4f67-4550-a95d-fc135cdfd9c1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "557934d2-7e42-4ee7-9058-20cfebd7ad96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a58e0e-be37-4591-ae2e-fcf68dd0a9a3",
        "cursor": {
          "ref": "20b67576-666c-4abc-ba49-1f71a65ef639",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4cecf23b-2112-4bbd-9157-4d9d2fbf5c29"
        },
        "item": {
          "id": "96a58e0e-be37-4591-ae2e-fcf68dd0a9a3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4834cb6d-ad26-473b-8597-e94e48a835b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897df7cc-dda6-4c73-9c06-7999490ac090",
        "cursor": {
          "ref": "24549673-7026-438e-90da-1a8bccb98021",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a2d76a46-0820-4493-9305-977b89942ceb"
        },
        "item": {
          "id": "897df7cc-dda6-4c73-9c06-7999490ac090",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c73495bf-8d8b-4245-994e-179a3eb34617",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db32fa5a-1023-4a2f-9b10-4c4b388b6e17",
        "cursor": {
          "ref": "07cdcaa0-54b6-411b-8598-52aeabb26d1e",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "57f223db-58c1-4be4-8e15-72c6125a55df"
        },
        "item": {
          "id": "db32fa5a-1023-4a2f-9b10-4c4b388b6e17",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0d5f8212-3f80-4cf6-8102-83ba17d07172",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d30b467-edd3-45f8-88ae-7f87a024ec52",
        "cursor": {
          "ref": "b18bea84-d64a-432b-b502-257f7412934f",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "721a2abc-6300-4288-8705-e410c8997030"
        },
        "item": {
          "id": "9d30b467-edd3-45f8-88ae-7f87a024ec52",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "af8d47a2-4d40-49ea-9da1-b53075275075",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9175eb78-5bf8-453c-8ddf-ead54f1baf89",
        "cursor": {
          "ref": "1192981d-9594-4e09-90f4-a7374b9aa0b3",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d83d868b-f7d9-4101-bac2-40ebd29ef937"
        },
        "item": {
          "id": "9175eb78-5bf8-453c-8ddf-ead54f1baf89",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b3104130-c829-4a7c-ab90-91b769ce5e75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "134f59a6-0683-43d9-baad-c5d9a5d8510a",
        "cursor": {
          "ref": "9f9706be-c675-45e1-a195-05ec1b3b9ced",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a08238bd-6572-47eb-8a75-4613972e60c4"
        },
        "item": {
          "id": "134f59a6-0683-43d9-baad-c5d9a5d8510a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "df7ddff6-11c3-4c06-9ba0-c72fed7493b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00283c94-bcab-4ab0-bc00-d3d51a02dcdc",
        "cursor": {
          "ref": "605e439b-9f9c-48d9-9c15-86d658bb2b2e",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d74a209b-f5e3-4606-8fdd-52cf6025fdf1"
        },
        "item": {
          "id": "00283c94-bcab-4ab0-bc00-d3d51a02dcdc",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "774d17ca-d1f7-4386-aa01-8e11c3cbcee8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07510ce1-7d08-4307-a7c0-05d8ed3d433a",
        "cursor": {
          "ref": "41fa5c32-f5e6-4d10-a626-9640ed7972f4",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a436b9ef-ea55-4201-a37a-08ee18789348"
        },
        "item": {
          "id": "07510ce1-7d08-4307-a7c0-05d8ed3d433a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "225157e3-a901-4ad9-a1b5-10201fd6c7ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fabe5bfe-8cc7-438d-8ce7-d45d49a61903",
        "cursor": {
          "ref": "7f2ec465-61ec-4cab-ab8c-eb64c847c54c",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d7fdb06d-0aa1-4468-88a8-9495e13dc3e1"
        },
        "item": {
          "id": "fabe5bfe-8cc7-438d-8ce7-d45d49a61903",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a3f6e268-9006-4e9f-8326-3149d5fa9207",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d34ce1-93f1-4ccc-84ea-c116f292eaff",
        "cursor": {
          "ref": "b04e6793-d36c-4389-8950-4a7a33da5819",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "03b0d15c-1a27-46b7-8bb9-8c7fd0c43e55"
        },
        "item": {
          "id": "09d34ce1-93f1-4ccc-84ea-c116f292eaff",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f9f23598-d8b7-4575-985d-4facc0bf23ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3745e78d-2ec2-49a2-a1f9-5ddf2fe86530",
        "cursor": {
          "ref": "30afda29-938e-414c-86c3-d3a4cf10a62b",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "86f5f344-a70b-4172-be69-c82cd6e2f158"
        },
        "item": {
          "id": "3745e78d-2ec2-49a2-a1f9-5ddf2fe86530",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2149e37d-8c3e-49a3-8fca-a5608e86f66a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ec3613-9611-48a8-bb34-1dc1290dec40",
        "cursor": {
          "ref": "7097cf6d-416f-4af6-ba80-04fccb7e491b",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "102e32e4-ae74-48e9-902c-0b3924cba5ff"
        },
        "item": {
          "id": "a2ec3613-9611-48a8-bb34-1dc1290dec40",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6e97fd89-2e32-4579-9b75-b3b5fa402c84",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af26f91-a469-47a6-92ff-d8c348e8a0b9",
        "cursor": {
          "ref": "a0236861-8aa8-40aa-a420-0f268c6f8048",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "32068c2d-9c57-401f-b613-328794c43d90"
        },
        "item": {
          "id": "2af26f91-a469-47a6-92ff-d8c348e8a0b9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a3b106b8-a301-4102-bf0d-dd233e203013",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04591c13-5556-4af3-af59-f50349d47205",
        "cursor": {
          "ref": "d9c8d561-c319-4a13-987a-9b5ec4b44688",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5ac2d115-0ced-44f5-b6a2-de1a1948f115"
        },
        "item": {
          "id": "04591c13-5556-4af3-af59-f50349d47205",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ecc40557-f562-4ad8-9308-97df09485283",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37b2cfb-eb67-483d-9351-e3fd14cef40c",
        "cursor": {
          "ref": "0b7e928c-d84c-4825-a24c-738b6fb4f9ff",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "eda81b6a-1665-4054-bcb3-e4638b6910bc"
        },
        "item": {
          "id": "f37b2cfb-eb67-483d-9351-e3fd14cef40c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "cd9067d7-80a6-4cd2-aeb5-388fa3d5eedc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de016a4-c030-41f7-89ba-3e0d91b69aeb",
        "cursor": {
          "ref": "d6407137-045b-4558-94cc-a1f0f1d40f08",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c2849d21-e34f-4cdc-84f5-508e1da90587"
        },
        "item": {
          "id": "5de016a4-c030-41f7-89ba-3e0d91b69aeb",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "361d9fdb-b236-4601-868d-18f5c4529bab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7df169-af4a-4006-acc2-3b10a7e97455",
        "cursor": {
          "ref": "4c402772-a16b-4ee1-bfaa-7fb9decc597b",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d7df9546-a69e-44bf-9aa6-99f4604173c5"
        },
        "item": {
          "id": "3a7df169-af4a-4006-acc2-3b10a7e97455",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "dc1b51c4-3970-40ed-b5d5-8686694602d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8cd5b6-874f-415d-83b7-346f746a07c0",
        "cursor": {
          "ref": "525f2f5d-3617-4643-84ef-2343970b996d",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bc8f455a-e52d-4518-9107-f9d8ab08fe1e"
        },
        "item": {
          "id": "eb8cd5b6-874f-415d-83b7-346f746a07c0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c8150fcc-e181-4575-ad3e-1f0bc7841bd5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba6df0b-a32e-4ce7-84e4-3f9a14eb3af4",
        "cursor": {
          "ref": "976e7b3c-492b-431d-aeb3-81af0235547d",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d6a4ced2-ecb6-477b-a702-f45f8978a0d9"
        },
        "item": {
          "id": "9ba6df0b-a32e-4ce7-84e4-3f9a14eb3af4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c3f74ff4-a254-428a-8af3-b0ed1e993a50",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc20fa0c-3b6d-436c-9943-937f9aa9890a",
        "cursor": {
          "ref": "b33d5613-ba3a-4360-8bf6-220805e6e75f",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7f27807c-da73-46b3-b5a1-92bcfda2a8f5"
        },
        "item": {
          "id": "bc20fa0c-3b6d-436c-9943-937f9aa9890a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "814f04a8-f64a-4772-b54f-2b5e7e506615",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79726de3-86d5-42a5-a761-76d7877ca2c6",
        "cursor": {
          "ref": "c9d1c155-3610-47ce-9528-84cb86adb4fb",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fc7ea524-761e-4883-8ee6-d864290a2845"
        },
        "item": {
          "id": "79726de3-86d5-42a5-a761-76d7877ca2c6",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0830dbf8-82dd-4564-bcc7-0d2aafd94205",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f775c71-76ca-42b3-9f62-0ba6cd81822b",
        "cursor": {
          "ref": "7b548a13-e8d7-4d49-8ee3-478359896888",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a91d1ece-2cb8-4438-b807-c739c1520916"
        },
        "item": {
          "id": "5f775c71-76ca-42b3-9f62-0ba6cd81822b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "696f97a1-dcbb-4b06-af34-1070498a6e03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "264d3896-3d61-4fc8-a5de-42ec0105f37b",
        "cursor": {
          "ref": "b96574f0-8482-4e54-a966-48ccf145bf64",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "bad1de1c-b451-40ec-93c2-9ac8cffbd281"
        },
        "item": {
          "id": "264d3896-3d61-4fc8-a5de-42ec0105f37b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6f72f48d-cec2-4648-9e15-235570b04c7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eaf034d-2e8e-4108-9b2c-8b0affc5bb42",
        "cursor": {
          "ref": "fa347c5e-84ad-4ce5-a03a-2d2a51779529",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "33e9d202-324c-41e0-8aaf-4d7f1965318b"
        },
        "item": {
          "id": "7eaf034d-2e8e-4108-9b2c-8b0affc5bb42",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8651041e-4d6d-42c2-a80e-e6491a249d08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a2cb4d-1e8f-4b17-b994-9641ca47731b",
        "cursor": {
          "ref": "8d4757ce-553e-4620-a169-d07b7d416461",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "94e63af8-b492-4929-9312-7faa0ac8c4ef"
        },
        "item": {
          "id": "87a2cb4d-1e8f-4b17-b994-9641ca47731b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f41a8eb8-abe4-4479-be69-6d5f9ae56dba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df64eb78-8d0e-4d19-a195-bc3d2612a104",
        "cursor": {
          "ref": "0c1fdbbc-3d93-4ad0-9a61-a0c2456b7b65",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5d603788-6855-4bb4-b007-a89a85db1942"
        },
        "item": {
          "id": "df64eb78-8d0e-4d19-a195-bc3d2612a104",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "493288e7-a8f9-48a7-b97f-a76c0db4dbc7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52481624-6480-4431-afe0-a9868925c6a1",
        "cursor": {
          "ref": "ec72a89b-f52e-4e1a-8efd-351221d125f3",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d6141d98-f0cd-4f06-9c0d-706d846cb9d2"
        },
        "item": {
          "id": "52481624-6480-4431-afe0-a9868925c6a1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "16d48936-0ee1-43d2-b25c-6a484a4f25d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885b3f3b-f644-42ff-81ea-8d2d2a76ae44",
        "cursor": {
          "ref": "7af99408-30b2-45e7-8101-bd5a824c77bb",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "defa31cf-26b7-43b2-9f31-e180151c39f8"
        },
        "item": {
          "id": "885b3f3b-f644-42ff-81ea-8d2d2a76ae44",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e6f94f7a-5153-4b59-9688-f7baa11ed324",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc3c832-0ccd-4d12-9ecc-0ea90a82ba5c",
        "cursor": {
          "ref": "36b20bc0-ef55-4a6d-ae20-1a0b4ec7f516",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0f851f3e-9df5-445d-b114-4eb4d4e5c984"
        },
        "item": {
          "id": "9cc3c832-0ccd-4d12-9ecc-0ea90a82ba5c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5b11bb61-5b89-4830-bfde-5c3cc652f7c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599b9e78-bef7-4a6f-b70c-53808b86e621",
        "cursor": {
          "ref": "0318bc75-ed9d-4573-91c8-3c40fe4b6293",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d0b4d0ba-acd5-41fc-a43e-6c90dc97b159"
        },
        "item": {
          "id": "599b9e78-bef7-4a6f-b70c-53808b86e621",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "93a5248c-c4dc-4165-9308-acad3f261f56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8126e56a-f78f-45ae-8104-e591c1cdec17",
        "cursor": {
          "ref": "bbd98da6-5552-40a7-80d1-6b5ffdfbbf50",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2e4aef15-d391-4c7c-9f83-d8aa8a51cc41"
        },
        "item": {
          "id": "8126e56a-f78f-45ae-8104-e591c1cdec17",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "32c9e6a9-e7cf-4c60-93d6-2ec992b01de5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5fd46b-8ed1-4b13-b85d-fdda8fe6d848",
        "cursor": {
          "ref": "987dfe59-afa0-4253-805f-e495247c4946",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a6a7728e-c06a-45fd-bfc2-1551432cbad3"
        },
        "item": {
          "id": "9e5fd46b-8ed1-4b13-b85d-fdda8fe6d848",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d2759fa9-c487-4a6d-9119-bd8056287c18",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da63828-e907-45f5-b426-360c168070fe",
        "cursor": {
          "ref": "4f47853c-3460-4aef-990c-b9d5e20afc4a",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "26f6b5b5-b9ec-4686-8094-261c5ba83365"
        },
        "item": {
          "id": "4da63828-e907-45f5-b426-360c168070fe",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "62853d30-1363-4864-8143-d2defe1450a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98e6d39c-7245-45f6-984e-13ea4c3121b5",
        "cursor": {
          "ref": "86a67801-e9cf-452f-9c07-399339cf26e1",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "caa87e5e-3839-4fa8-a6aa-0b83e316914b"
        },
        "item": {
          "id": "98e6d39c-7245-45f6-984e-13ea4c3121b5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "00f15c26-6742-49ba-a140-a53c1840a79a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119db7a9-885e-4e41-b3a2-5b3b0fd1e978",
        "cursor": {
          "ref": "8ab02aba-1272-491b-97ee-dcf9cb138e30",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "060fce54-97c3-453d-b2fe-8122c52d8910"
        },
        "item": {
          "id": "119db7a9-885e-4e41-b3a2-5b3b0fd1e978",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7b913221-49ec-4a61-8b54-b0c98bc88c0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65487306-f088-4abd-8fae-a89aa0a0a823",
        "cursor": {
          "ref": "77eba504-f00a-420e-a95a-7a53015a5321",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8bd1976d-b50b-4aa5-9126-0ff3262a213c"
        },
        "item": {
          "id": "65487306-f088-4abd-8fae-a89aa0a0a823",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "695275de-ccf3-4600-890b-a1e8bac10a11",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c835fe73-a741-4c1e-a59c-cf447ddab692",
        "cursor": {
          "ref": "44700be2-6d86-43bb-a2c7-2329c23a8f48",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2b6d02f9-cb23-4c57-9574-262b9989b018"
        },
        "item": {
          "id": "c835fe73-a741-4c1e-a59c-cf447ddab692",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9101eb2e-e4cc-42ee-bf8c-d97a33da4ba0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02672569-a431-4130-aae1-c637bc7e03aa",
        "cursor": {
          "ref": "ac07e711-096b-4c2a-b940-77ad9e9eda0d",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "999a11d2-adc3-4f77-a3f8-0e0a5b868e98"
        },
        "item": {
          "id": "02672569-a431-4130-aae1-c637bc7e03aa",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8f90e81a-713b-429b-a698-e54509ca9f60",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16099cf-c95e-414c-ab90-1e6b89c7c6e0",
        "cursor": {
          "ref": "41ea6c9c-d57a-411d-819b-099b8f91acea",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e332f9db-afe4-402c-96a5-51c04174e325"
        },
        "item": {
          "id": "c16099cf-c95e-414c-ab90-1e6b89c7c6e0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0244e289-72bc-496b-b7ce-c87c3c2f1a6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26e69df-cc65-4ccb-95cd-8db35560e80b",
        "cursor": {
          "ref": "8f90f167-8e49-4f8e-b8c5-d3362c298dd6",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b47e3db8-7c86-4998-b72c-ef04a1d7dde9"
        },
        "item": {
          "id": "a26e69df-cc65-4ccb-95cd-8db35560e80b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b8dff39e-b698-423e-861d-375936ed31c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a4a5e4-b49d-44ce-a6df-ce6b21f489ef",
        "cursor": {
          "ref": "91596fae-0926-477f-af09-475cb5002abc",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "91d905b1-2bdd-4a11-9830-b3b3911ef98a"
        },
        "item": {
          "id": "d4a4a5e4-b49d-44ce-a6df-ce6b21f489ef",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d862196d-e439-40bd-93d1-2fb485240947",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35949b1c-41e2-4632-80d4-bc711aebbf49",
        "cursor": {
          "ref": "4ad50c6f-8b01-459a-b210-da58f4cf4c4a",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9c06e89f-6120-44ec-b5b0-23ccd6808733"
        },
        "item": {
          "id": "35949b1c-41e2-4632-80d4-bc711aebbf49",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "70236eab-3c6e-4e5b-9282-662d8f8f2017",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daec578a-9b47-4246-9484-46fb51c632b6",
        "cursor": {
          "ref": "6b6f42a6-b8cf-45f4-b9eb-174e93449efd",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1b875eed-60d1-4371-842b-b4fe2345cdab"
        },
        "item": {
          "id": "daec578a-9b47-4246-9484-46fb51c632b6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "836d4478-1c8e-4eaf-8083-88cdd75df479",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f42039e-ee51-483a-8c03-270b4fe9457f",
        "cursor": {
          "ref": "d3ac2be9-fbf0-4a80-895f-ff473e354451",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0eba5646-06cf-48d4-8ce4-d5e5a3dab1ea"
        },
        "item": {
          "id": "0f42039e-ee51-483a-8c03-270b4fe9457f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "dc2aedb6-fb80-4e59-9824-b35aaa079dfe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b3b59e-ea26-40a4-8db5-90a59ba582a5",
        "cursor": {
          "ref": "dcaf361d-d26a-4157-926e-67cebe9c5ba0",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e48b8fa9-ffae-4996-8a56-4eed536165f8"
        },
        "item": {
          "id": "a4b3b59e-ea26-40a4-8db5-90a59ba582a5",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "94290f66-adc2-4264-9cdc-86398ced9e61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c076b6c-0027-4010-aa97-81f72bea265a",
        "cursor": {
          "ref": "0b087216-0b6d-4c06-a4f5-ee5e77671c90",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "47d398d2-0544-4497-bd6c-6242683ddf18"
        },
        "item": {
          "id": "3c076b6c-0027-4010-aa97-81f72bea265a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f40a12de-92cc-4cc6-8001-5846fc88f935",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d1e326-933a-4844-8054-c893fe54debd",
        "cursor": {
          "ref": "9fb83ec3-ade6-4039-9c97-b01d03344126",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5387be56-96d0-44e6-b2e8-5043c93e7be2"
        },
        "item": {
          "id": "62d1e326-933a-4844-8054-c893fe54debd",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "aa89c5a1-13c3-48cf-bb68-013cbfc4fa14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5b8552-66ef-47eb-8855-2c86a511d334",
        "cursor": {
          "ref": "2813245f-0255-4e0a-98fa-516312da8f53",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "33df1ea5-6c9c-4c15-86d8-89a5f246d0f1"
        },
        "item": {
          "id": "8b5b8552-66ef-47eb-8855-2c86a511d334",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "208da0f9-a8a2-4362-8cc7-b7fc5cfcb97b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce85380-0eff-41db-8ec3-7db88e4a934d",
        "cursor": {
          "ref": "56e7ab8d-9b33-404d-84cd-09c4c2e87632",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1f694897-07d5-4bf2-a6e4-2b735bdf3b8d"
        },
        "item": {
          "id": "0ce85380-0eff-41db-8ec3-7db88e4a934d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d734e307-8ccb-4c5b-9ac6-85eb546cfe68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad13fe7-4b2e-42f9-8c65-edf5e06e2abe",
        "cursor": {
          "ref": "48b8caa9-fc36-433b-8456-da91a7683528",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "362c8a2c-c13e-40b2-b96f-c6c7f3ae899c"
        },
        "item": {
          "id": "2ad13fe7-4b2e-42f9-8c65-edf5e06e2abe",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "69ed1c10-b261-4562-acea-eadfea486bfc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c5034d-7cf7-43c6-96d0-8f1526639a11",
        "cursor": {
          "ref": "89ee9ef9-8296-4992-aed6-14dc12298c15",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "01ea631b-9ba3-448b-8286-4ede64b65ccd"
        },
        "item": {
          "id": "f9c5034d-7cf7-43c6-96d0-8f1526639a11",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ceeb0707-f73a-4e5e-8357-0ce7c62ce3ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "127fc1cc-920a-4959-8c2f-2506b02c3ff8",
        "cursor": {
          "ref": "5e9c9cde-9f63-4105-875c-38f063d88abf",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "942f77c5-fd56-430e-aec1-c82149c3016c"
        },
        "item": {
          "id": "127fc1cc-920a-4959-8c2f-2506b02c3ff8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "29c84a13-4272-4bc9-8b06-561186364890",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173ac012-7e8a-4af8-8beb-a4cf9e1c7f59",
        "cursor": {
          "ref": "1968ec90-3104-4c99-914d-89ec3fabadd5",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a89c7994-1227-4550-8280-286c7db30ec2"
        },
        "item": {
          "id": "173ac012-7e8a-4af8-8beb-a4cf9e1c7f59",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f6dc02a7-18bd-44bf-9c59-bae67adc77c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eeff510-6ecd-41e7-8278-1295330fbf32",
        "cursor": {
          "ref": "c763ea55-5381-4b8a-9b85-fdf74fcd9c0d",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ab504b23-6942-4ff7-a3e3-44b8c4872e85"
        },
        "item": {
          "id": "4eeff510-6ecd-41e7-8278-1295330fbf32",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "87eb3c10-49c7-426f-91a2-c063c6a39349",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184af845-bf85-4fc8-b30e-cf95d95910de",
        "cursor": {
          "ref": "475a9784-2d8b-4ca7-ac07-436a108fef3e",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6a94f067-a529-4f16-9e51-803294d9622b"
        },
        "item": {
          "id": "184af845-bf85-4fc8-b30e-cf95d95910de",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c01c431c-6dd4-4931-bc8b-633d10afa415",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf0b212-02e8-4086-b476-b101cfcddd7e",
        "cursor": {
          "ref": "1ffe099c-dc7c-40dd-924d-3b4f77de3e22",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "dce4c9a7-0e8b-442b-a1cc-fcd602ff1d52"
        },
        "item": {
          "id": "6cf0b212-02e8-4086-b476-b101cfcddd7e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "100e3f23-0a4b-453e-a8e3-05ac0b191962",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7960d86a-b7a3-4542-900b-f7f96b88822a",
        "cursor": {
          "ref": "88522066-f24b-4509-9053-6b2cef9d3bac",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "28c7a573-4702-4e53-bffc-e444b5b57fbe"
        },
        "item": {
          "id": "7960d86a-b7a3-4542-900b-f7f96b88822a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "350edaa2-5c45-42c7-be26-1bd9050080f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6f5950-4dcb-40bb-81df-58d7e3a6dfd0",
        "cursor": {
          "ref": "6d2f0645-9e9e-459b-b8c1-4b724e6af8c8",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4d619572-bda2-4df8-922f-3dd1820fa784"
        },
        "item": {
          "id": "4a6f5950-4dcb-40bb-81df-58d7e3a6dfd0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "de1120bb-5940-4b93-a8ab-fe47e4ec3c52",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46e3b2d-02e9-4aa1-9479-41379a61a75e",
        "cursor": {
          "ref": "a3742c57-45c2-4de6-8e0d-479e224ef9ce",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "69843520-be09-4834-ab0a-5d3491be8ef9"
        },
        "item": {
          "id": "f46e3b2d-02e9-4aa1-9479-41379a61a75e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ca5b5c4d-39fa-4aa0-b83b-e304b4adbff9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2697a687-b6a4-4b5f-b881-0dec7c4cfd0f",
        "cursor": {
          "ref": "b1f0e7ac-b9c5-4a7a-9eb8-a25c6ecd5f44",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "77180842-4a27-4719-982d-0f9d9ae40f7d"
        },
        "item": {
          "id": "2697a687-b6a4-4b5f-b881-0dec7c4cfd0f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "db16a0d2-d7d9-40ff-a41f-18d39bb4a154",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5fad1a3-0139-4fa4-b215-eeecd608cbbc",
        "cursor": {
          "ref": "2deb7238-8cc0-4d09-a942-1e00e4e9b7cd",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "53277740-a30c-4507-9e59-c0a37d23fd7c"
        },
        "item": {
          "id": "e5fad1a3-0139-4fa4-b215-eeecd608cbbc",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e40a8b30-f5f8-4078-91ec-b3d71078d2c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75f0cdf-3ff7-4083-b253-3144a8736d36",
        "cursor": {
          "ref": "d7a0458a-76a7-48d9-816c-a4913dc1af51",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "015c022b-5ee5-485a-b175-afce6215e735"
        },
        "item": {
          "id": "d75f0cdf-3ff7-4083-b253-3144a8736d36",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1b60c6c2-d292-4c26-81cd-11b351af934e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73ea9ce-ec49-40e1-a33f-385823459baf",
        "cursor": {
          "ref": "847077bb-b619-4668-97c4-d2b45556af8a",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b693b507-6b6a-4fc4-bfed-9459542ccb0b"
        },
        "item": {
          "id": "a73ea9ce-ec49-40e1-a33f-385823459baf",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4a4c43ac-34fe-46c2-bee8-71a896298fc6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81363467-3c4f-4419-ac51-4ee8f8fb0778",
        "cursor": {
          "ref": "6fb1e678-b313-4106-bd37-13d62fe36312",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4362eeca-9565-447f-9c4a-6d145eb907cd"
        },
        "item": {
          "id": "81363467-3c4f-4419-ac51-4ee8f8fb0778",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "78978c12-5e07-4127-96db-b3b9cbe83378",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7f93b1-e882-46ce-b9b1-b3b183060c22",
        "cursor": {
          "ref": "3f906f7f-a10f-4f23-99eb-4c27dca39849",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "11ac30c4-79b7-469d-ab8a-da13d878af3b"
        },
        "item": {
          "id": "9d7f93b1-e882-46ce-b9b1-b3b183060c22",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0d99ec1a-3dca-4a7e-873e-f4aba7b10a61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d370f8a0-3912-4e0f-b5e7-6a6db8f1db07",
        "cursor": {
          "ref": "c29ea7e8-bf73-4baa-9f51-7d89e1f0ead4",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5bb43e03-a143-406d-99f8-793aca42c28b"
        },
        "item": {
          "id": "d370f8a0-3912-4e0f-b5e7-6a6db8f1db07",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d62bc1c4-fb39-4c1e-b8b3-40e85179c63b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9858c7f2-8730-4c9e-bbec-1fc0c95cedaf",
        "cursor": {
          "ref": "ef4a59f9-738c-446c-b83c-3498487a3801",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "37598cb9-8ffc-449e-949c-25aaf5abb172"
        },
        "item": {
          "id": "9858c7f2-8730-4c9e-bbec-1fc0c95cedaf",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "16c1ccd8-7ae2-4112-b37b-6fbe22b339ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c673ace-1e1e-4457-9904-fcc4187820a2",
        "cursor": {
          "ref": "355ee9d0-2b9c-44c5-8267-770b71acb4ae",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ffe274cb-b284-497e-9410-928f273d03af"
        },
        "item": {
          "id": "9c673ace-1e1e-4457-9904-fcc4187820a2",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d5f318cf-e423-4c18-b7f5-9ec21de0b8f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d9a9124-0192-4feb-89e3-30b8c640b06b",
        "cursor": {
          "ref": "d46cb441-ef6d-4971-ad25-747c218ed549",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "99b30403-3984-41b4-993e-4486878715b4"
        },
        "item": {
          "id": "5d9a9124-0192-4feb-89e3-30b8c640b06b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ee6239f8-f23a-4346-83e5-56d5586a7253",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7473627c-baa6-4f1d-a324-5ee176177a77",
        "cursor": {
          "ref": "d49bc271-d4e9-495e-a573-81f6b6a690bd",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2cbc3e1c-0479-4f62-ad5c-0be956f18e5c"
        },
        "item": {
          "id": "7473627c-baa6-4f1d-a324-5ee176177a77",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "67994010-38e8-4d3b-935b-79bb3e1cf164",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19bebac-595f-41b6-95c4-35cabf5526bb",
        "cursor": {
          "ref": "c6e8dcc6-9750-467f-93cb-d12cd1ed0283",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "403e69ec-ae42-42db-82db-eeff71b07736"
        },
        "item": {
          "id": "b19bebac-595f-41b6-95c4-35cabf5526bb",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "42746f74-a5aa-457d-b5b2-3ce13ac80a19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa9e974a-0733-47c4-8285-8385b71139f7",
        "cursor": {
          "ref": "0e33b91c-debe-449c-a6a9-04f97609ec74",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "542029c3-d285-4434-92be-d28046fc4498"
        },
        "item": {
          "id": "aa9e974a-0733-47c4-8285-8385b71139f7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "91c8a794-bc6c-41c9-9145-0919df8db99a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193813e7-b40b-43b9-9a80-cb14aff6bf5b",
        "cursor": {
          "ref": "8a25b5cc-c317-417d-be97-192c75dc40a2",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1fc6424a-b5b8-4c67-a59f-8e0d250762c7"
        },
        "item": {
          "id": "193813e7-b40b-43b9-9a80-cb14aff6bf5b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e4aa2a70-9e85-4652-9162-b08260844131",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f034211-abca-4fd8-92be-c39bfc18c300",
        "cursor": {
          "ref": "90f3846d-7233-48bc-b010-2e61f27ceb4c",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0ea0fcd0-f897-4272-b907-696460aa614d"
        },
        "item": {
          "id": "0f034211-abca-4fd8-92be-c39bfc18c300",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3677726f-1600-4cdc-ac4e-b67a267d143c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25aed820-9cbb-4391-ab2c-702a4ccb3b34",
        "cursor": {
          "ref": "be3b540e-fab0-45a2-8713-b6087393cf1c",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f22f9efc-354d-4c75-a5b8-c5b412dd4f69"
        },
        "item": {
          "id": "25aed820-9cbb-4391-ab2c-702a4ccb3b34",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "17278580-9eb8-488d-856a-47a420df096f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f6bdf2-660a-4223-ae04-e35f6aca1fed",
        "cursor": {
          "ref": "f5bd0cf3-4448-4211-92b0-72bc6f3c50ec",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e8e6361f-be5f-448e-b303-f09c83bdf633"
        },
        "item": {
          "id": "90f6bdf2-660a-4223-ae04-e35f6aca1fed",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "2f159887-1ae6-4329-8e41-469d4f1464aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "cb24bd1d-1215-4808-8586-929d31b41434",
        "cursor": {
          "ref": "6b19156b-2b72-4e96-b0cf-70e14acc0d4a",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0fc6f3d6-6c17-428e-8070-2c9cf0664f19"
        },
        "item": {
          "id": "cb24bd1d-1215-4808-8586-929d31b41434",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1e575325-b9ee-45d3-9866-9091d558fdb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 359,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "da20b558-6ca5-4b6b-86fd-3e062ef7d823",
        "cursor": {
          "ref": "d11b83e9-bfdb-44e5-a8e1-1800e5d11411",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "aedfbb04-558d-4baa-8846-127080dcc589"
        },
        "item": {
          "id": "da20b558-6ca5-4b6b-86fd-3e062ef7d823",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7ecbe586-793c-4477-9a1d-b1ddb5b7b01c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "eb31d4b5-e31f-4b30-9e72-e75ec65e960f",
        "cursor": {
          "ref": "3c766ebd-832a-4c8f-80fa-dc9905a7032a",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "cf5c43d2-7d76-4aa9-b557-126507269099"
        },
        "item": {
          "id": "eb31d4b5-e31f-4b30-9e72-e75ec65e960f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9ed52c97-f3fb-4f6b-a7a8-831921a31c6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "9554764e-868b-43c6-ac4e-929311fd5874",
        "cursor": {
          "ref": "bb87a192-9f8b-40a3-8110-0bff5d3aaa5b",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4ecf52df-7b98-4c17-8a38-a4f36b1e61e8"
        },
        "item": {
          "id": "9554764e-868b-43c6-ac4e-929311fd5874",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ee69cd51-95a4-4edf-ac9a-020c5481cc1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "df44e044-ae48-4a07-882f-b9bc630aee8f",
        "cursor": {
          "ref": "2ff46289-ead6-42e5-ac82-e62434570b28",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c3f3bc8e-a649-48e9-b6cb-399c888fabae"
        },
        "item": {
          "id": "df44e044-ae48-4a07-882f-b9bc630aee8f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2cf768f2-5f5d-4145-8607-012cad9425f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9f3779b9-8bd9-4e71-aa13-ff2bc76d8a1a",
        "cursor": {
          "ref": "1cb9bd1b-0c8a-4ba1-89c4-458df4164c7e",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4506c2c6-d0e7-43d4-8297-a41ab5ca6382"
        },
        "item": {
          "id": "9f3779b9-8bd9-4e71-aa13-ff2bc76d8a1a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c636180b-beba-405a-9aae-8ad4601964e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "000bc919-dc1c-4089-aaff-bb8828c717e7",
        "cursor": {
          "ref": "fc744362-368c-49cc-a4df-ebf2feba8690",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8f7ba320-86f4-4ebc-b9b2-f2ca6251fc80"
        },
        "item": {
          "id": "000bc919-dc1c-4089-aaff-bb8828c717e7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8e133fc9-afbf-4437-954d-537156196fe0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c264ca-885e-42da-a5d5-384004db28fa",
        "cursor": {
          "ref": "d54adfe0-9441-4d37-abcd-9d6783c30330",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d990ecd6-de8d-4904-ba0b-74a44f100fea"
        },
        "item": {
          "id": "69c264ca-885e-42da-a5d5-384004db28fa",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d0f03116-7180-464d-bfe3-b108cd8149bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bcfe44a-4dad-4a55-a864-839eadcb7124",
        "cursor": {
          "ref": "ef22a687-75ca-4460-a942-3c1e1bbe3ebb",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "17ebe81b-9b11-4158-a8d0-8ce2380fec59"
        },
        "item": {
          "id": "6bcfe44a-4dad-4a55-a864-839eadcb7124",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "210e7f63-c7e9-420f-985b-a6731a492fd6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad4bb567-ece2-4c52-9c60-8aa199f11447",
        "cursor": {
          "ref": "86d50bf6-c1d4-4d0c-9f3b-e8c4f7bc99a0",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "69008b26-c64a-49b5-8908-e03fea119011"
        },
        "item": {
          "id": "ad4bb567-ece2-4c52-9c60-8aa199f11447",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c48b671c-60f4-443b-a60e-a6c6eaffcd51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e1c550-24b6-4f62-b699-da9131de571b",
        "cursor": {
          "ref": "616a4959-f304-4156-98da-8fe8e70da3e2",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2e609233-ec3c-4a40-9db6-7efdb1624161"
        },
        "item": {
          "id": "c5e1c550-24b6-4f62-b699-da9131de571b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "25196674-9aee-45ab-96a5-c484d1824192",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924112d6-cb4a-48a7-bffe-2b2f45c5f67d",
        "cursor": {
          "ref": "03a47e11-c87e-458c-ac79-2f5ca13bb273",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "49b322be-4907-4410-9746-e14a7b307937"
        },
        "item": {
          "id": "924112d6-cb4a-48a7-bffe-2b2f45c5f67d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bd727c6e-dd05-4d11-a148-f845e2a17d46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc229647-208b-47cf-9811-62a51e2c7044",
        "cursor": {
          "ref": "de31dd60-c097-41c0-a9d9-42be09ccc6c5",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d1d29fa8-cdff-4102-ac6b-362513a24e1c"
        },
        "item": {
          "id": "bc229647-208b-47cf-9811-62a51e2c7044",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b3cf813c-6d9f-4512-92ac-426969fbf033",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef64491-3bd3-4ffe-aedc-ffa7a1939a4b",
        "cursor": {
          "ref": "c1cdee1c-e7f8-414e-a6f6-2766d048afba",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c4090cb2-5019-4f60-96c4-1a1bae6c3c30"
        },
        "item": {
          "id": "bef64491-3bd3-4ffe-aedc-ffa7a1939a4b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "74f313ae-5255-41a9-ae4f-d03ae6c8e98c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f5f237-055b-4e3a-85bb-dc922949db29",
        "cursor": {
          "ref": "ad789e32-c90d-4ee3-b3f2-ca868832f5df",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3458930e-4fee-42b5-948b-21bf1e030758"
        },
        "item": {
          "id": "b0f5f237-055b-4e3a-85bb-dc922949db29",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "53a6e6c0-7495-408b-aec9-76217413c794",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d05ba2-6450-4e0e-927b-1ee45c2ff07f",
        "cursor": {
          "ref": "c21d427d-0f61-4801-8ad5-f4702c998f64",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3a78fcb0-62ec-43dd-b96d-924780324b6a"
        },
        "item": {
          "id": "f8d05ba2-6450-4e0e-927b-1ee45c2ff07f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "eb28e174-bf16-45c6-8dae-48bee9712586",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "423cf059-e169-4ba9-90ee-a6af2754c594",
        "cursor": {
          "ref": "7ef7b902-1813-40da-b120-0a90d3cd3c28",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9d0ad385-c853-4da1-adbc-b6baf5fd540a"
        },
        "item": {
          "id": "423cf059-e169-4ba9-90ee-a6af2754c594",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0f1386f5-1e55-4a03-b993-b5e70d43ac02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd81478-d515-4d73-b8d6-f7c027aa32b2",
        "cursor": {
          "ref": "2f6426fe-2e6b-49ba-8713-3aa168fb151f",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3fa3cc4b-9a35-4ef3-a570-68fe138c6729"
        },
        "item": {
          "id": "0fd81478-d515-4d73-b8d6-f7c027aa32b2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "15c2afd4-82a5-41b8-bf51-eb6e6271cd7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c35b77-0b96-41ae-be8f-2fed0c0d1157",
        "cursor": {
          "ref": "aa13f5fb-43ba-4ff2-8e50-36b98d14c81e",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "490af00d-56ca-4020-87c7-2de0ac0dd122"
        },
        "item": {
          "id": "25c35b77-0b96-41ae-be8f-2fed0c0d1157",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e1d6c602-68b9-412a-8638-0626b42bd204",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cdf590b-eb10-4a78-9ba9-80161ac3c631",
        "cursor": {
          "ref": "09e1cfa0-5025-4e8f-9bdf-05fc50c0854b",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6854dd01-b1db-4ba8-bf1a-9c19d3beddff"
        },
        "item": {
          "id": "4cdf590b-eb10-4a78-9ba9-80161ac3c631",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "08590b29-6895-4c34-9096-65798932686d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0865cb-ba6e-4942-95e6-d4d1f729aa91",
        "cursor": {
          "ref": "e42f9791-fe86-4bc5-b2c0-8b0929d67536",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "35b9653b-a8c7-4a6d-b0eb-aaf0eef433d3"
        },
        "item": {
          "id": "8f0865cb-ba6e-4942-95e6-d4d1f729aa91",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7f5264d8-e90d-4c53-b7b6-ba63ebcc504f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51510c8c-48e3-4361-a6ae-ba71d559b9fe",
        "cursor": {
          "ref": "3b0ea7d5-a311-4f9d-ac55-7510ad651ef3",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6949261b-540c-4c8d-8dee-e3148c0f6e18"
        },
        "item": {
          "id": "51510c8c-48e3-4361-a6ae-ba71d559b9fe",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2360e6b2-46ba-4590-91ba-5c3e50216940",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e02860a-d952-44a6-9d84-db5735d6a248",
        "cursor": {
          "ref": "d0e0f054-85b3-4b98-b878-a62c4739ace8",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "016d0518-7b35-4cad-8222-3619dd81ccd5"
        },
        "item": {
          "id": "4e02860a-d952-44a6-9d84-db5735d6a248",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bbc4a645-0c5d-45d8-b137-4e18613aee59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5594b030-cb03-4071-9b20-498de7c2c39f",
        "cursor": {
          "ref": "9d01e6fd-1832-4154-a75c-fe6f7923dd3d",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c311d409-3488-46de-80bc-aaf28e762c12"
        },
        "item": {
          "id": "5594b030-cb03-4071-9b20-498de7c2c39f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "90c9ef5e-f223-4ec5-96bd-cb55e386b463",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679edc2b-ea0e-4f40-a2c8-09e885470205",
        "cursor": {
          "ref": "4f304a53-4e19-43f7-a2be-0b179df1ae94",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4bdb9a18-014d-4c7e-bdf1-a9e43b8c89e6"
        },
        "item": {
          "id": "679edc2b-ea0e-4f40-a2c8-09e885470205",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5060cc53-3dde-4a54-913f-e9aab60e3a27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0648f120-167b-4cc4-b8a9-eded03586692",
        "cursor": {
          "ref": "c56d4bf0-b4da-4912-b111-6f2f28727ed3",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f31fbd4e-73b2-48e8-8a92-a7cf14678d79"
        },
        "item": {
          "id": "0648f120-167b-4cc4-b8a9-eded03586692",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1ed34d0b-7469-4eef-9d9d-b478d16409d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ca7ac6-9937-485e-9126-be5f5393d985",
        "cursor": {
          "ref": "4bba9c2e-5541-4846-9d33-8ceb2cf49987",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1c8d89ab-8436-45bd-8c51-30320af002ca"
        },
        "item": {
          "id": "34ca7ac6-9937-485e-9126-be5f5393d985",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a25050fc-a37d-476c-ba70-29335b2a5760",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5635eba-483f-4bbb-a068-66fcaf2c09a3",
        "cursor": {
          "ref": "90c2df31-994c-4f9f-afcb-26dcb64a0e98",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "763746d8-e7ca-49b9-afb0-684b2364a0d0"
        },
        "item": {
          "id": "c5635eba-483f-4bbb-a068-66fcaf2c09a3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7edd6b89-8131-458b-872e-c0471e71cc41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60621c44-e33f-4868-adfd-97b2954c17c4",
        "cursor": {
          "ref": "13339351-26fc-4b64-9ea4-7035fc2d4358",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6f8d6c41-0def-4907-a54b-16f7e544a643"
        },
        "item": {
          "id": "60621c44-e33f-4868-adfd-97b2954c17c4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3ffb6886-7649-407e-9eaf-4d168fb007ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf43b778-75c7-4b88-85e5-092afbf74955",
        "cursor": {
          "ref": "845d1189-0f58-4dd9-aeee-b5f92f0f2746",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "19618c46-3924-4c60-98cf-c87b329fba93"
        },
        "item": {
          "id": "bf43b778-75c7-4b88-85e5-092afbf74955",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a1b88ba5-735e-488a-8372-b5673d610737",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2764a5d-197b-4059-8ffe-95400dd98378",
        "cursor": {
          "ref": "effe9cb5-e9ea-4e71-9ef4-b033847f6837",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1ffaa0d9-2f0a-4c8e-9cea-7a67f77623a6"
        },
        "item": {
          "id": "d2764a5d-197b-4059-8ffe-95400dd98378",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "eb2f0b1d-35be-4a7b-bae7-14fd97fe942f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45334c0c-711c-4581-9942-5760a0b45aa8",
        "cursor": {
          "ref": "06087bdc-66e0-4612-bf7f-fc5c186e34e6",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "207c3df5-c110-4d32-bd7a-b0affe3c0c1f"
        },
        "item": {
          "id": "45334c0c-711c-4581-9942-5760a0b45aa8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0aa74365-06fe-4548-92c0-209cca4e59ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cef0fb6-c9d4-4ce5-a9d9-4d8fcd374adc",
        "cursor": {
          "ref": "ff688eb8-ce14-42a9-9865-31042654559b",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5e7d6868-1e25-43ae-8ab7-6bb5556867ea"
        },
        "item": {
          "id": "6cef0fb6-c9d4-4ce5-a9d9-4d8fcd374adc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "25509518-19a7-4341-b089-ab484ad8116d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb21a469-4779-4e7b-b2ab-2a719f72b35f",
        "cursor": {
          "ref": "fd5401d4-067b-4834-b7df-24db7fcdf7b5",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4278fb5b-9b4f-4814-99ce-2bff4d031943"
        },
        "item": {
          "id": "eb21a469-4779-4e7b-b2ab-2a719f72b35f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "53b5664b-48be-4437-a275-5584456a840b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679d8ded-e90c-490c-bdf6-55e3ddf075f3",
        "cursor": {
          "ref": "34ed75f6-4feb-499c-80bc-db3907070239",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9ce2b5a5-e09b-4bca-97da-d96fa1fe9bec"
        },
        "item": {
          "id": "679d8ded-e90c-490c-bdf6-55e3ddf075f3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3ca2a120-3e1f-4e99-bd6c-c5a473ef50e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ef6642-433d-4d18-845e-81dbfd1cd3c0",
        "cursor": {
          "ref": "96008b20-ecc3-4d75-bddc-cbf6b84614ae",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "dbc20e25-b434-42e2-a74a-c57d900a7e04"
        },
        "item": {
          "id": "81ef6642-433d-4d18-845e-81dbfd1cd3c0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "946648a3-6ee7-4c1e-9d39-dec84eff60f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89540485-eb34-47f2-b728-42e0721e44fe",
        "cursor": {
          "ref": "c1e2f943-69dd-44a1-bfd8-e8e112138a9d",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3cb26c48-8d64-4a40-a08c-c948376bdb70"
        },
        "item": {
          "id": "89540485-eb34-47f2-b728-42e0721e44fe",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "931729ed-51f8-4539-9e0e-bd885d1eb64a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1996d38b-8cc4-4120-9166-0076bc5b216a",
        "cursor": {
          "ref": "1035df36-8ad3-4675-a6ef-fa5d9d541864",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "62c7537c-3fa4-41d6-9a43-d3113a5297a3"
        },
        "item": {
          "id": "1996d38b-8cc4-4120-9166-0076bc5b216a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "04e38139-1b3c-48e3-9d79-218516e4a8ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ef8ebf-aabe-4238-92ce-282f57ba17c2",
        "cursor": {
          "ref": "eeeb49e1-9df7-4f8f-8ef7-a6f12862cb1f",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e59376cb-9a24-4422-a891-0d041c63fa17"
        },
        "item": {
          "id": "62ef8ebf-aabe-4238-92ce-282f57ba17c2",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "cec93f24-a8f2-49da-b1ad-01c05ba19e04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb47dd40-1daf-4a8e-995a-cf3316375c93",
        "cursor": {
          "ref": "4ff676e1-a6dc-4cee-ac12-3290d327d7ab",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ad7db3fe-684b-4414-be09-62fc25106335"
        },
        "item": {
          "id": "fb47dd40-1daf-4a8e-995a-cf3316375c93",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "7d496e16-0591-47f0-8870-1d3d0a4defc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2cd212-a96b-468e-afc7-1c7d5f2f574c",
        "cursor": {
          "ref": "7f03ddfe-03d9-4e55-830d-7ed156077d5d",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6d2f7ea9-33bc-4e7e-a51d-a2b2c3309bcc"
        },
        "item": {
          "id": "fc2cd212-a96b-468e-afc7-1c7d5f2f574c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "264c8d2f-5203-449f-8575-b863bacdfdcd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e8d0cf-82c6-4ab1-b6d3-847c9e7cbada",
        "cursor": {
          "ref": "d82bebf9-50be-4589-ad31-9ff25557db67",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9b08286c-2274-408a-ad34-f84778d0ddab"
        },
        "item": {
          "id": "66e8d0cf-82c6-4ab1-b6d3-847c9e7cbada",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "1321e9fe-aef9-42f7-ac5c-f9ba86782e61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67907f61-12af-482e-81dc-763edef80a0b",
        "cursor": {
          "ref": "8f4e47f1-5290-4849-8937-83de3e70baae",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6cb70185-d96d-4451-9397-566e7cf7fdae"
        },
        "item": {
          "id": "67907f61-12af-482e-81dc-763edef80a0b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "5779d8cc-b1fe-4535-88a5-cef90c8bed15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8bed06-b86a-4c50-8d9e-642ede81dfa4",
        "cursor": {
          "ref": "750c41af-8ce7-4aec-ba1d-422d3495c4df",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "07acc352-dd0e-4ee7-8666-5d9f476af6e3"
        },
        "item": {
          "id": "ec8bed06-b86a-4c50-8d9e-642ede81dfa4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "25574c45-a6eb-43f2-b7bb-a74d68064807",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e93d62-41d1-4975-ba29-1ff5695c4342",
        "cursor": {
          "ref": "a536e4f7-7cae-4f11-8c11-68823efa8a0c",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "30a6801c-664a-4d72-aa41-b2822aba6f03"
        },
        "item": {
          "id": "69e93d62-41d1-4975-ba29-1ff5695c4342",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5bab7ccb-3008-48f8-b8d5-9645c121fe45",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8e65f7-3b19-4227-bf34-d68607146bc3",
        "cursor": {
          "ref": "6310ff8f-20e1-4cba-8ad4-392bab1f12da",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d0f6cc0f-f4bc-4714-9b31-378c8d7872ce"
        },
        "item": {
          "id": "7f8e65f7-3b19-4227-bf34-d68607146bc3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d2428075-daa9-4707-8d64-fc32eafd514d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd81cb5-d122-4103-b591-94d42f6fbb84",
        "cursor": {
          "ref": "f3078312-0735-4b36-bdb2-31634d89012b",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bbc18674-a023-4144-b7de-e511349f182e"
        },
        "item": {
          "id": "ebd81cb5-d122-4103-b591-94d42f6fbb84",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0157aafb-8622-4355-a3f7-f4df4a3ad57c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ab9b3c-f4cd-4f8a-be66-8470e6fcd7bc",
        "cursor": {
          "ref": "e1a2618e-714f-4bbf-b93d-5154b5a50bb7",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7f794b2e-1e99-44fb-a43c-04158107849d"
        },
        "item": {
          "id": "e4ab9b3c-f4cd-4f8a-be66-8470e6fcd7bc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bd654c58-1801-463b-bda7-be35bd51b1ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6617f9a3-d53c-4062-b864-c55802c92ffe",
        "cursor": {
          "ref": "49a42ba7-d1ec-48fb-b802-006e4c527f1d",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d968a466-47d4-491e-9da2-d4230e8c67a3"
        },
        "item": {
          "id": "6617f9a3-d53c-4062-b864-c55802c92ffe",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ff3e2782-a93c-4b57-815a-cafca8f66170",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76cfca67-f5fb-45ad-bfef-738f47bc839a",
        "cursor": {
          "ref": "22f054fe-a3c5-4abf-bf4d-df2377fd7db2",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "98e23d4d-79ad-46d6-bc68-ad84b490b395"
        },
        "item": {
          "id": "76cfca67-f5fb-45ad-bfef-738f47bc839a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4d65a403-4abd-41ba-bf50-3467d5aa304e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a603a774-729b-4afe-8d39-d832d2001ed2",
        "cursor": {
          "ref": "885e8b44-f1e0-4b8f-9367-0191e793fcf8",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c6c9be2d-20c9-4088-8000-91f0973e94c5"
        },
        "item": {
          "id": "a603a774-729b-4afe-8d39-d832d2001ed2",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8dc1bbe2-c4f3-466c-a9a5-c92375d5d7d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b5c0eb-9a03-48a3-a8ab-8891b4f5b5a4",
        "cursor": {
          "ref": "16739e7e-4a78-4e71-ac51-b3e46840b3ad",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "001ebb56-3ac9-43e2-b31f-b19079f2b843"
        },
        "item": {
          "id": "51b5c0eb-9a03-48a3-a8ab-8891b4f5b5a4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "13717c69-a595-496f-a5e3-5646724c2236",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2881fdc-96bf-4163-b77f-a6d3f2a3a479",
        "cursor": {
          "ref": "a1c33f20-8d27-491a-bd85-d6b90d0b9b8b",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ffc21c0a-e350-4ed9-9f82-17770e54cb2f"
        },
        "item": {
          "id": "d2881fdc-96bf-4163-b77f-a6d3f2a3a479",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6cc83533-28d0-425c-b73c-e828545729ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4b363c-735d-4763-8cd0-6257643d9990",
        "cursor": {
          "ref": "dd04eb18-33ea-4526-8d8f-ae1bab75d5e5",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "514466f2-b9af-4be0-a075-57585f12fa1c"
        },
        "item": {
          "id": "be4b363c-735d-4763-8cd0-6257643d9990",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "12a24ee4-0a84-45fb-aa25-9a92c70ef8bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d609bf-45b2-446e-8a0e-7664a7e25e09",
        "cursor": {
          "ref": "c984f3a6-e1fc-47f4-95a6-bae04026e6ef",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a733b8ca-b94f-45d3-8992-a95b199b7bc5"
        },
        "item": {
          "id": "f7d609bf-45b2-446e-8a0e-7664a7e25e09",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7f7a6e14-b723-428d-851c-6b582e396912",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23cd640c-da7d-4347-a8b4-7c1d4526c929",
        "cursor": {
          "ref": "0587e55e-6993-413e-a198-269f172f303d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "683b25cd-1e8d-4a2c-84fa-0e362e4b13f3"
        },
        "item": {
          "id": "23cd640c-da7d-4347-a8b4-7c1d4526c929",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2ec4bf1e-ae49-47ed-994d-087b9aa501fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39f890b-c695-4ef5-92af-9bc6e4920fa9",
        "cursor": {
          "ref": "bb2e91c4-d40a-478c-8c71-1c2aafbaea35",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4771d419-e0f3-48ae-ae03-bc267de105e2"
        },
        "item": {
          "id": "d39f890b-c695-4ef5-92af-9bc6e4920fa9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f2135050-9538-489a-868f-b88e90da2f1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696c5fb7-1052-4765-8954-b0ab0a9c57b9",
        "cursor": {
          "ref": "bee64bec-9be0-4167-9dc6-0bfb50ece664",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1ec6e79f-f15b-4385-b253-cfe252a7e71e"
        },
        "item": {
          "id": "696c5fb7-1052-4765-8954-b0ab0a9c57b9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bd45a27d-0fee-43af-bfd8-ea9faa2cb3a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d39e71b-9553-4fec-abd1-9cafeb2da2ba",
        "cursor": {
          "ref": "4186c57b-3217-4dba-bee2-9588474ca868",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "cc6c94b8-47cb-447c-8bc7-4a0195586d09"
        },
        "item": {
          "id": "0d39e71b-9553-4fec-abd1-9cafeb2da2ba",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "51b3c150-ca1a-496f-9b5f-b0ea248a0918",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c30697-b88d-4542-8349-9b2f5072aaea",
        "cursor": {
          "ref": "308b1bf1-9fd2-48b9-8318-23bc237b3d40",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "56d523a4-7dec-4ce1-a406-fc4f16f0dd4d"
        },
        "item": {
          "id": "75c30697-b88d-4542-8349-9b2f5072aaea",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0ebe9194-7f8b-4d42-86e9-6acbd91cfec9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52fe09b2-d671-434e-9e63-650643bd69c7",
        "cursor": {
          "ref": "4a1c91bd-8e49-47ab-ab59-fb08cda323e7",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2d540e62-3c04-440f-9803-d2a49de02044"
        },
        "item": {
          "id": "52fe09b2-d671-434e-9e63-650643bd69c7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c34b5725-7e65-4dd8-9a63-ff23cd33f11d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860586ab-c4f4-466a-a3eb-f87930e213a6",
        "cursor": {
          "ref": "4fbe02d2-c903-45fc-a749-a9f7e20959ff",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b9be71f2-7bc2-4bfe-a65b-90a12307a510"
        },
        "item": {
          "id": "860586ab-c4f4-466a-a3eb-f87930e213a6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "529d2f81-2a55-442e-8234-445760bdad3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb02bb0-1358-4d66-bf2d-342963073b76",
        "cursor": {
          "ref": "10a53c9f-d5b6-4013-a810-389bbd7bb700",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "edad33f1-d201-47ed-9f0d-ea60f4aeaa1b"
        },
        "item": {
          "id": "0fb02bb0-1358-4d66-bf2d-342963073b76",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3aef40e2-8c0f-46d7-b299-045bbc5a7135",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebdf5353-2267-4243-900f-331a7da05a9c",
        "cursor": {
          "ref": "22e1b521-482e-4938-ae97-c3ee167973b3",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9a5d26b5-70b2-4e7c-97d3-54a0065503d0"
        },
        "item": {
          "id": "ebdf5353-2267-4243-900f-331a7da05a9c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d800964a-82bc-44e3-9235-a2102b467014",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a218f39a-a69c-4d1c-8efc-e5dbcf2318a4",
        "cursor": {
          "ref": "b14bfe3c-abae-4ff3-b8c2-8d85f64011d7",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a070b1bd-9e82-4a7d-b146-ad0ee4a03365"
        },
        "item": {
          "id": "a218f39a-a69c-4d1c-8efc-e5dbcf2318a4",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b641f7e4-5d99-485e-a522-9715ed5cf285",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "557f097e-59b6-424f-bad6-000c26195876",
        "cursor": {
          "ref": "9823a7d7-1a72-4ca9-a3bc-4c1e32129904",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c49460df-94ca-4cd5-90ba-bf27ee4e7d03"
        },
        "item": {
          "id": "557f097e-59b6-424f-bad6-000c26195876",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0643c021-a436-4e76-8d7e-070390e1ab14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39362e63-3586-4126-8e35-451c1e27905c",
        "cursor": {
          "ref": "a30c620d-457a-4339-91cd-1b809447884d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c9f45335-85fc-4b3e-b762-a281e42445cb"
        },
        "item": {
          "id": "39362e63-3586-4126-8e35-451c1e27905c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3c763b39-ba66-471d-b6e9-2f86efe1b89b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba2bb1d-1f68-4d94-9abb-d439d1bc7241",
        "cursor": {
          "ref": "aead50b9-3097-4229-9709-6913497577c0",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8a8bfac5-4584-4e0c-874d-fc7d642a95be"
        },
        "item": {
          "id": "dba2bb1d-1f68-4d94-9abb-d439d1bc7241",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5fddaf08-e2cb-4706-bce5-0961fb7b1f01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5865380-25c2-4a00-83e7-6829d938a7c6",
        "cursor": {
          "ref": "a3fbefd5-5882-4870-ac18-fa483464ba49",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e442e4be-1c41-4195-b139-b29eb736f0a8"
        },
        "item": {
          "id": "b5865380-25c2-4a00-83e7-6829d938a7c6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f7f00021-8a24-49b8-bade-8f145440d3e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8edc3162-b182-4f96-ae2f-6a7547a5b803",
        "cursor": {
          "ref": "6848a708-093c-4043-be81-b34b48bfc0b0",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9c8c5c66-1c3c-41f2-8c83-d1334097321b"
        },
        "item": {
          "id": "8edc3162-b182-4f96-ae2f-6a7547a5b803",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "74139f81-7028-4b58-bd85-be89febd3101",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "502a222c-0def-4423-a642-a5d79f68db8d",
        "cursor": {
          "ref": "1979f7b1-e6d8-4b93-b7c1-92ebf53944dd",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2a48299b-d37b-45ed-8dc0-3f6d3f71b994"
        },
        "item": {
          "id": "502a222c-0def-4423-a642-a5d79f68db8d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9efece08-ea6d-4d21-8349-8ff18ab88360",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6891a5-691b-4499-9fac-05983cf8b21b",
        "cursor": {
          "ref": "f3fc3b32-897a-4c29-9569-31e267b4ad19",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a316df5e-3ef4-4de9-83c9-b9c1969859cb"
        },
        "item": {
          "id": "bd6891a5-691b-4499-9fac-05983cf8b21b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "16e4ee28-40ac-4412-92d5-fa7ce52f0dd5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15854922-0fc1-420f-a004-9eac0e3d133a",
        "cursor": {
          "ref": "0befc78a-714e-4e1a-9108-b7cccd373c2f",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3fc92fd8-28d4-4a19-88b3-2c2a81d9dc42"
        },
        "item": {
          "id": "15854922-0fc1-420f-a004-9eac0e3d133a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "204aec64-97b5-4a1e-8691-29f213a6622f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739884f0-ff59-4df6-a5f0-4ba13e217209",
        "cursor": {
          "ref": "b47fb5a5-3f00-45bd-a1aa-4659510384f7",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2a31b1ed-2571-4bde-8546-90f22ba4ee9b"
        },
        "item": {
          "id": "739884f0-ff59-4df6-a5f0-4ba13e217209",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a4ae2645-2f09-46d6-89c6-acda60bbd3cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e472f5-c5cc-4fcf-887d-bac9995e5656",
        "cursor": {
          "ref": "023f5d8d-f784-42ed-9898-c4ab75fa1ec7",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c9b46449-00c6-4ed4-8f1c-bd78e64faf38"
        },
        "item": {
          "id": "31e472f5-c5cc-4fcf-887d-bac9995e5656",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e79e0ef9-8541-4bfa-9539-fe38a8e83d61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64fef8b6-66d1-4a45-9fdd-6bb085f447f4",
        "cursor": {
          "ref": "ca3b1f9c-e3f1-4593-8f23-240f9a9dd00f",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "297d1634-4297-4a79-9025-971e91610e13"
        },
        "item": {
          "id": "64fef8b6-66d1-4a45-9fdd-6bb085f447f4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "fb6bac94-7ae1-45de-b452-25269ba62d6b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c94842-83e7-400a-8bfd-f56996f27a3f",
        "cursor": {
          "ref": "a8bced11-8bf5-4c74-9d1e-4ea0ac723e54",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f096d60b-3333-4664-9a72-64ee0a64f665"
        },
        "item": {
          "id": "b4c94842-83e7-400a-8bfd-f56996f27a3f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "cd883642-057b-457a-977c-52aa51252dae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70a2bfe-f7fb-4066-9241-733db0234f72",
        "cursor": {
          "ref": "9a5b1692-bcb1-4893-ab0e-d8d14b5695b6",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "153481c0-a2f2-4378-9a7c-5d8d5eb9529c"
        },
        "item": {
          "id": "d70a2bfe-f7fb-4066-9241-733db0234f72",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9e8a7407-0cd8-4844-9702-a6c201135792",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265731f7-502f-4d76-860a-965689c01761",
        "cursor": {
          "ref": "962d96ce-a52c-4f50-a483-facc29cb63ca",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b02701ce-f1cf-4380-b329-53f32f379e09"
        },
        "item": {
          "id": "265731f7-502f-4d76-860a-965689c01761",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "27716817-d2d6-4889-8510-cb589e242f42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c0dfd3-eef4-44b8-b884-1284b4e1b353",
        "cursor": {
          "ref": "3096647a-2720-4753-a657-1bae08e49039",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "bdb609a9-8354-45ce-98d9-0328db81232d"
        },
        "item": {
          "id": "74c0dfd3-eef4-44b8-b884-1284b4e1b353",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "87000d51-682b-424c-9332-5e44d389b8ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352a9c41-23fd-4315-931d-4ee8e25f5738",
        "cursor": {
          "ref": "03becac9-6d64-4e30-89d6-3baa918d08b1",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d6b556a5-01fe-4adb-9ff1-543c5fa33042"
        },
        "item": {
          "id": "352a9c41-23fd-4315-931d-4ee8e25f5738",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "26e7e472-bb57-4213-bbb4-100df1cb7367",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afc26f1-023c-4591-9dab-c951cff94245",
        "cursor": {
          "ref": "756992ea-214d-4085-9652-70e3608b3c79",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d342b755-7edd-44e7-b8ca-19d3ffe5badc"
        },
        "item": {
          "id": "9afc26f1-023c-4591-9dab-c951cff94245",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "06220e5e-2c50-48a4-9d81-3d22bd5bbdc8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fdfcd45-4178-4d9c-9832-4d0dde666e62",
        "cursor": {
          "ref": "63bfa0a7-7800-4732-8d6f-11a74e5e3e6f",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "135e83eb-565d-4268-9c34-9f22a3d9108c"
        },
        "item": {
          "id": "4fdfcd45-4178-4d9c-9832-4d0dde666e62",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "48833dfe-f27e-4f04-b5b7-9d36cd073c42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1797ebb0-c113-4ef8-b64b-c173ab961099",
        "cursor": {
          "ref": "a7dbd3fb-7a40-4428-be7e-050ed01491d4",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "09060b09-4c40-4f82-b771-844662662e30"
        },
        "item": {
          "id": "1797ebb0-c113-4ef8-b64b-c173ab961099",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "867d8444-6eb3-4360-a4a3-a3b3b571ca7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee21201-9bcf-4e94-9c82-3bf512909e89",
        "cursor": {
          "ref": "4d099f5f-640c-487c-be02-3469d9fcf085",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "24d47f1f-aeb0-422a-b319-f22ad350328a"
        },
        "item": {
          "id": "6ee21201-9bcf-4e94-9c82-3bf512909e89",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d4c3bb04-dd18-47a6-9051-4e7cde057b04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed963706-9701-452f-8f52-54acd6c65b96",
        "cursor": {
          "ref": "b71fe661-83e5-44e6-9dae-bd1ea6700951",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8d838535-72cd-4f29-847c-9256d14ff3f7"
        },
        "item": {
          "id": "ed963706-9701-452f-8f52-54acd6c65b96",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "492a21f6-019a-4937-8482-6344c6b1cc66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b03642e-5795-4650-9346-ae95c24283a0",
        "cursor": {
          "ref": "7fb3ba3c-267f-4ebc-beb2-b9b44f74b103",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "99d97b59-de01-4613-b4e2-c13530da82ab"
        },
        "item": {
          "id": "4b03642e-5795-4650-9346-ae95c24283a0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b7fd3e2c-484a-4376-95ca-6aef333284ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98eae914-7c2c-4c99-bc9f-338a93b09cd3",
        "cursor": {
          "ref": "2325f75c-b0c7-4ae5-865c-93d0dacd2f04",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "57a51c90-de35-4e8f-8bf3-82858d9c6034"
        },
        "item": {
          "id": "98eae914-7c2c-4c99-bc9f-338a93b09cd3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f5695478-8d02-406c-9733-69b3e950b5da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d062699a-28d7-49b0-bee7-8f715326d044",
        "cursor": {
          "ref": "38122ed4-fd64-47e0-b644-00a4186d3847",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5090c5f8-86db-4c3d-8e95-eb0abbb86cd2"
        },
        "item": {
          "id": "d062699a-28d7-49b0-bee7-8f715326d044",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7dbf4345-d396-4bbd-960e-05c40d9ad8ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e6df6a-595f-455d-bd6f-8392dcbbade0",
        "cursor": {
          "ref": "f1b5094e-8209-423b-abb5-a0b52be5f101",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2b61c187-0e61-4282-a9e1-e84991089935"
        },
        "item": {
          "id": "55e6df6a-595f-455d-bd6f-8392dcbbade0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1d4b4785-e837-4609-b0c9-628e85e5e54b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689ba184-8c11-454d-9bef-cec6bc3aa39f",
        "cursor": {
          "ref": "aef2219c-2c25-4287-87cc-0b37808eab83",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "47ccb286-07b1-4c3d-9562-8128f92cb4c3"
        },
        "item": {
          "id": "689ba184-8c11-454d-9bef-cec6bc3aa39f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a0389abe-ea04-4264-a98f-225fb4b0a84b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1602fb8-b38b-4cff-b431-63a8bf49fe77",
        "cursor": {
          "ref": "70693a8b-084b-4d18-8aa5-bac4a1405ef8",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7f7edbfe-068a-493d-897e-d5c63efa2b54"
        },
        "item": {
          "id": "d1602fb8-b38b-4cff-b431-63a8bf49fe77",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "51cb83af-abf2-452a-b934-a5ba469a8746",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93de6443-5ff0-459c-aae6-8519373c0264",
        "cursor": {
          "ref": "e6cb9a71-5740-4201-b15b-00bb9e4ec567",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2705b425-54f0-4d38-870b-ea60b3b47536"
        },
        "item": {
          "id": "93de6443-5ff0-459c-aae6-8519373c0264",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "76a93772-d285-43d6-b475-aa9d5ceda7cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58176b00-67f5-44a9-b926-46409b9e9c58",
        "cursor": {
          "ref": "70411ce2-9c75-4595-906e-3b5b2e1dce2b",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d42922b2-7d8d-454c-9986-fc54d759187d"
        },
        "item": {
          "id": "58176b00-67f5-44a9-b926-46409b9e9c58",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "cf5c8f94-d6ee-4641-8940-981159bc1247",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b00141-0254-41ac-ac85-ac04e6721712",
        "cursor": {
          "ref": "7aafbcd5-0bac-46c1-9884-015fa022d993",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b76fa329-70d6-4e45-916d-9ab72986dca3"
        },
        "item": {
          "id": "74b00141-0254-41ac-ac85-ac04e6721712",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e71c74ef-0df7-4264-bb22-142796414081",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecdeb94e-c772-42fd-9693-b08715e4f8f6",
        "cursor": {
          "ref": "a330b62e-6b3e-45c8-9e34-ec59eb41458b",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f90bbc15-f2cf-4119-9620-73bec4d37c23"
        },
        "item": {
          "id": "ecdeb94e-c772-42fd-9693-b08715e4f8f6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "901d8c60-3efe-4160-aba6-24155d5a469b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac32900-6243-4a26-9df5-12c6c3848824",
        "cursor": {
          "ref": "9d5ea89b-6d8c-4fbb-8eaa-51f167f5ad98",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ec3c1547-fbbd-4b23-990e-19840557ed3c"
        },
        "item": {
          "id": "5ac32900-6243-4a26-9df5-12c6c3848824",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "249fcf54-59fb-4aef-a2c5-75f45f65b702",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2558de50-c6c8-4f72-a06c-1ea6180f5efd",
        "cursor": {
          "ref": "6dfe5ceb-2646-47d2-b876-b2cafd79e590",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0c3e748e-e881-4457-8040-20fe8c1f3e7d"
        },
        "item": {
          "id": "2558de50-c6c8-4f72-a06c-1ea6180f5efd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3f7cbc77-bd3f-4811-93e1-0fea46757380",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b31fa03-e9a9-4887-a01c-d1f91d2ce108",
        "cursor": {
          "ref": "92dd8699-60b5-4ec5-a3d8-8bda9791de53",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e4f142fc-66f5-4452-a007-b68a1e78080a"
        },
        "item": {
          "id": "1b31fa03-e9a9-4887-a01c-d1f91d2ce108",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ad41b313-3990-4cc2-bbb1-ce43eb176da2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4d3bb0-d8c7-4a7a-b2b7-bd69541dc8f7",
        "cursor": {
          "ref": "3d574443-998c-4065-90d1-936db777b264",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "83d85c58-26dd-4934-844d-0d007dedea63"
        },
        "item": {
          "id": "fd4d3bb0-d8c7-4a7a-b2b7-bd69541dc8f7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9b9e2bb9-34f1-4c3e-9559-62767cf7ce9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62523452-6137-4250-bab1-2a2732e1c001",
        "cursor": {
          "ref": "630de151-caa4-4441-aa7b-dcdf27bb7e58",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a8824dcb-614b-44f1-9e04-96c1e8bced33"
        },
        "item": {
          "id": "62523452-6137-4250-bab1-2a2732e1c001",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9309d6a0-a6ec-4355-9941-31a2b4b80def",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 200,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd552b37-3707-4e98-86ba-9e1dc0aaa2c3",
        "cursor": {
          "ref": "6491ac3e-b2e5-416d-b4e6-1cf70b24de69",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "593c1ee4-81d4-4ca1-95aa-dfaa217ee36d"
        },
        "item": {
          "id": "dd552b37-3707-4e98-86ba-9e1dc0aaa2c3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a305b56a-3c47-4863-8b81-c06b379c88cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a751d7-299f-49a6-8091-8f5fa285cc11",
        "cursor": {
          "ref": "9504beaf-7b7c-45c3-a3d5-2255abcfd2fb",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "08f93aef-739f-49a0-8f1c-8a4c1789e5c2"
        },
        "item": {
          "id": "44a751d7-299f-49a6-8091-8f5fa285cc11",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a98ea70f-3f49-4b42-aff5-e5ec4f658401",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c5c2c6-6b6f-42f2-930a-1c0962431103",
        "cursor": {
          "ref": "efd8107f-fafe-451b-b446-bb0d3917dc5a",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "33debdc9-daad-4b7a-8add-8e7c1ae5cdac"
        },
        "item": {
          "id": "e6c5c2c6-6b6f-42f2-930a-1c0962431103",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "56624a49-2db7-4072-bb34-56cc75c480d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b76b2cae-eb1e-4949-881f-b375587f78f1",
        "cursor": {
          "ref": "513dbd3c-bc17-441e-8e34-1019ec304898",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7493dbd5-6db9-4236-8ab9-daec9eeef196"
        },
        "item": {
          "id": "b76b2cae-eb1e-4949-881f-b375587f78f1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "05334517-5c67-4986-a06f-a9bde8270b7d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c339d092-1ea9-4e9d-9786-d335dafcf77d",
        "cursor": {
          "ref": "2f793086-b98a-4d70-ab27-5822dab9c567",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5c376c9a-1708-43fd-80d3-58d2215b1df7"
        },
        "item": {
          "id": "c339d092-1ea9-4e9d-9786-d335dafcf77d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6171e11d-cb3f-4313-bda5-3bf1df7209ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74fab0d-62f4-4751-b5e2-dfba712b1268",
        "cursor": {
          "ref": "fef0e821-a1a7-40f0-8bdb-2f31a08eeba2",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f65c57cf-67f7-461e-99cd-e532b758355d"
        },
        "item": {
          "id": "d74fab0d-62f4-4751-b5e2-dfba712b1268",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e684a1f8-143b-4a69-b0a8-6da36fe5bc16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ce5bac-b4dd-4b23-ae7e-321b1d6b5dac",
        "cursor": {
          "ref": "ea38118d-6f5d-449c-807d-3b90ebf62ccd",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3685f651-6fda-419e-91cb-ddbdec33cd66"
        },
        "item": {
          "id": "86ce5bac-b4dd-4b23-ae7e-321b1d6b5dac",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2415690a-eff8-4be9-8370-8a39a224cae9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c9f4b4-a30b-477a-9a7e-500aea97a738",
        "cursor": {
          "ref": "de6cf4bb-c833-4213-ba6a-ff73d0de5c7c",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a0fe7458-7067-4548-a490-2fddccf22adc"
        },
        "item": {
          "id": "e9c9f4b4-a30b-477a-9a7e-500aea97a738",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9cffe01a-332c-40c0-beff-4a19c797842b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1fb486-9f52-4a26-b76b-2796320f3190",
        "cursor": {
          "ref": "fd12aa9e-6129-4890-a5f2-e36fc723287f",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f90ff282-2b5c-46c3-a3cd-47356d1ac5c7"
        },
        "item": {
          "id": "dd1fb486-9f52-4a26-b76b-2796320f3190",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2d530d54-9205-4553-8bbc-6b3fa7bd64a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b34df2-e825-47d2-ba2a-9cd8a47a5cbd",
        "cursor": {
          "ref": "4d34a6f8-9f7e-4b27-bc65-40c8649a3993",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "31f4269e-2e84-4055-88c7-0874cc0ead1b"
        },
        "item": {
          "id": "f6b34df2-e825-47d2-ba2a-9cd8a47a5cbd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6d56e687-6476-4b17-80ca-9533874f1aa9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef4636b-b6a5-4597-80a3-d23d5c68905e",
        "cursor": {
          "ref": "afc6d9e4-c036-4c60-926b-3759181e3119",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "435a0fec-a9f6-4ec6-9635-a54f1ac171a6"
        },
        "item": {
          "id": "2ef4636b-b6a5-4597-80a3-d23d5c68905e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "68e1c099-ae6c-4064-8a88-dc42599e9d3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a4601ed-ae4f-495f-86df-c40c6ed1e7ec",
        "cursor": {
          "ref": "b518d64f-0317-431d-bcfa-1d57a260741b",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "105be92e-62b5-43c6-a4ae-045afba2cdb9"
        },
        "item": {
          "id": "2a4601ed-ae4f-495f-86df-c40c6ed1e7ec",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f304dd8c-60af-449c-a5d9-7a916d5363de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae7d953-5b41-48a0-a72f-f72b204d997e",
        "cursor": {
          "ref": "63a88334-98b3-447a-8343-2b3a48acd39d",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "391feeb5-4ac0-4672-ae10-8c60642e670b"
        },
        "item": {
          "id": "cae7d953-5b41-48a0-a72f-f72b204d997e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f586949f-5b25-4bec-a237-9b38280efd40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704f7247-5036-4fcb-b7f4-1e8bc878aab6",
        "cursor": {
          "ref": "bafef8f5-dd55-49c1-be5f-8ac9aa3cc124",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0a88c246-4e9f-401c-995e-31c9db4ee4d1"
        },
        "item": {
          "id": "704f7247-5036-4fcb-b7f4-1e8bc878aab6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "20d1defb-9b53-4f19-a370-60982492fa66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c627b23-77f8-4066-9535-b131e9cb5f04",
        "cursor": {
          "ref": "91afc56c-209b-4f58-9004-c9b46180bbe8",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "67b1cdf7-16fc-4758-bc0d-a603f41d25e4"
        },
        "item": {
          "id": "6c627b23-77f8-4066-9535-b131e9cb5f04",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "afe96456-96dd-4f9a-a7cd-63b6acfd794f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae48e0d7-a821-44b4-992e-a7520ba3d6a0",
        "cursor": {
          "ref": "9374f36f-8a28-405e-85fb-963745afa6c6",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "419cc427-f1b3-412f-9ea9-3385a3db609c"
        },
        "item": {
          "id": "ae48e0d7-a821-44b4-992e-a7520ba3d6a0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8500144e-d131-418b-91a6-1d8683582528",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db8d194-6034-41a2-9d0b-49d142eeec9f",
        "cursor": {
          "ref": "e9973cbe-8749-4cc2-95e5-f0dc76a678cf",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "256fce2c-b7ba-4034-a92b-508d1f1aec70"
        },
        "item": {
          "id": "3db8d194-6034-41a2-9d0b-49d142eeec9f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d4da147f-e57e-45b7-bcbf-64b51749e00e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72eaeb2-529f-48b1-9c48-e0561c588ce5",
        "cursor": {
          "ref": "798753c7-3206-404e-ad3b-8397cea9a746",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "bfafe0e8-ceb3-41e8-ae00-2a34d6bbda5f"
        },
        "item": {
          "id": "a72eaeb2-529f-48b1-9c48-e0561c588ce5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f34a2968-c0d4-486b-abfd-8cf5c3af9144",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ec30c2-182a-478b-8b7d-5128952f6134",
        "cursor": {
          "ref": "26a10156-b76d-40f9-9616-50054a76417f",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6344ed33-866a-400e-9d16-95310bce0f87"
        },
        "item": {
          "id": "59ec30c2-182a-478b-8b7d-5128952f6134",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "89570e84-b5ef-408a-baf3-68724ea31a54",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7f3038-d2b5-4935-bf71-9d1b466cd18a",
        "cursor": {
          "ref": "ce458f9a-5477-474a-8d80-6ae3b4603ced",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "fa76d16e-92f8-41ee-8270-f4682a77fa24"
        },
        "item": {
          "id": "1b7f3038-d2b5-4935-bf71-9d1b466cd18a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "791ad635-ea84-42a4-a326-96f1294027a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca9eedf-c847-444f-9141-a669157a38cc",
        "cursor": {
          "ref": "6823a6cf-4e3b-406e-9515-8ebab6e3a579",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "40f480df-9d71-4498-bd95-1c654a4c4ec8"
        },
        "item": {
          "id": "1ca9eedf-c847-444f-9141-a669157a38cc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "45de9117-8d44-496e-9604-07e31931aef7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aaf6454-acd3-4877-b5a6-00f582374e0e",
        "cursor": {
          "ref": "e6f05686-c645-450f-8e5d-27cc3b3ca121",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ae94ea5a-8443-48e4-8102-ca772f565d5a"
        },
        "item": {
          "id": "9aaf6454-acd3-4877-b5a6-00f582374e0e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "11632f40-002b-4a80-b18c-ef8e604f0e26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0697d6f-6baa-49e1-8389-aabe4096fa8e",
        "cursor": {
          "ref": "8a5a3343-339f-4956-839d-8fc5f8e97d4c",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3c6f21a3-0db4-4183-ab8d-5ed8cda19aa2"
        },
        "item": {
          "id": "a0697d6f-6baa-49e1-8389-aabe4096fa8e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "79eddf40-bc57-4f7a-9e74-0954a430a572",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "857ac2bc-e21e-4613-9f1b-4561b7c9cb5e",
        "cursor": {
          "ref": "21c980af-c74e-4408-8c37-dd9ee67c9f81",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d0445702-8ce8-4066-8004-268392db020d"
        },
        "item": {
          "id": "857ac2bc-e21e-4613-9f1b-4561b7c9cb5e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e98ce39d-c1b1-4b36-9204-6aaae4f2ec66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db4b2ede-aba4-452d-9b1c-d09b20a93708",
        "cursor": {
          "ref": "067411b9-8385-4cb3-ab1e-eb11a7e44188",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c9629001-f08c-4d65-ae85-d9feb16bb4e2"
        },
        "item": {
          "id": "db4b2ede-aba4-452d-9b1c-d09b20a93708",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "90df2f86-38e2-4274-a91d-f1cf13b8afde",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce78c423-7bae-4462-bd14-c88ca9c82a97",
        "cursor": {
          "ref": "3adff8ec-4b05-4838-9c9e-0f1a8983cabb",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8d3ba5df-6473-4c56-8205-976ed6a28cbf"
        },
        "item": {
          "id": "ce78c423-7bae-4462-bd14-c88ca9c82a97",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "12d15d14-83e7-44e1-83ca-7bbbda24e77c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee16064-6362-4d60-bbf6-89afff66e6e6",
        "cursor": {
          "ref": "bcb7f069-a06a-4ba8-95ed-4742a41f2dda",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "18abb06d-7332-458b-9581-0726116ebbb2"
        },
        "item": {
          "id": "8ee16064-6362-4d60-bbf6-89afff66e6e6",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8887df1e-53a9-4416-ad83-4ee652924a5d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e80a90-5d33-4f5c-8a6f-21a187a60214",
        "cursor": {
          "ref": "22a641ed-8d76-4134-b633-539509a042b8",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "380a01fa-d59d-4bb5-a965-a29497200085"
        },
        "item": {
          "id": "09e80a90-5d33-4f5c-8a6f-21a187a60214",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "cb5c2a66-5f46-4226-b553-c9b0baccc3f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a781852-d1b2-4c2f-91dc-7917a96a4e39",
        "cursor": {
          "ref": "b1430d17-1f22-4277-b909-cabc3b243a93",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e0006df5-a998-42c7-828e-8c235a672654"
        },
        "item": {
          "id": "9a781852-d1b2-4c2f-91dc-7917a96a4e39",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a0e4925b-dfd2-49c8-86ad-7a3d9e546975",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae3f0d5-3254-44f1-b803-34a5227b4187",
        "cursor": {
          "ref": "d4cf23f4-ab9f-4642-9fce-fdb6deecb11d",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "81b42fdc-c90d-4e10-8231-818064d2491a"
        },
        "item": {
          "id": "9ae3f0d5-3254-44f1-b803-34a5227b4187",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "265b26af-2fe0-4b79-a5b6-6a4a45b1a416",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba5e63f-0dbf-400f-a411-3afd98a4d1f6",
        "cursor": {
          "ref": "91c42675-74cf-4896-b995-0daf391e2a81",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8ff47b4d-2c33-4d92-abce-e29ca277b5ba"
        },
        "item": {
          "id": "3ba5e63f-0dbf-400f-a411-3afd98a4d1f6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a494cb5e-ca7a-4c18-887a-fb46cc369e6b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b000fe-37df-4ef3-80ef-92fc815f6b72",
        "cursor": {
          "ref": "f151709e-1bcf-4c7f-940b-6fcafcc5572f",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "346b6b26-641c-468b-b7e6-6c83f654a454"
        },
        "item": {
          "id": "b1b000fe-37df-4ef3-80ef-92fc815f6b72",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8f2a402e-d2c3-4977-8746-6a72371abc49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434a0314-8d9b-4bbc-8482-0c7bf8220501",
        "cursor": {
          "ref": "2cbc23e0-4666-4d49-9994-ab1f7e29e85f",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "bc00fb78-f033-4128-9d5c-fa57f86eeba9"
        },
        "item": {
          "id": "434a0314-8d9b-4bbc-8482-0c7bf8220501",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "aeec3edc-4ea8-48e1-a8c6-6dedd1c25a37",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2deee18-9dd4-4cda-bb51-579012b43f50",
        "cursor": {
          "ref": "9fa86e78-c547-4eab-b146-7632587fd77a",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "28c3c2f7-547f-4823-88e7-ba145ff825c6"
        },
        "item": {
          "id": "c2deee18-9dd4-4cda-bb51-579012b43f50",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4be6a8f7-5435-4f66-95f3-7c4b32f0348d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53eb9ea-28b7-49cf-b096-9389c07d7181",
        "cursor": {
          "ref": "65c9968e-b549-4647-a1f0-f93b053b4068",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "355340f1-9198-4379-8b87-39ad0c660248"
        },
        "item": {
          "id": "b53eb9ea-28b7-49cf-b096-9389c07d7181",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "68c46a6d-c289-4295-98e5-341bdbf6f6a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0bf808-95da-4702-b2f2-aa846c11eedb",
        "cursor": {
          "ref": "671376ad-4e37-4c0c-82dd-b01b661ba041",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "09a66600-c002-482c-8382-3b42a344cd61"
        },
        "item": {
          "id": "2d0bf808-95da-4702-b2f2-aa846c11eedb",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "26920e3d-b58d-4879-a158-9ab82ae53443",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d49dc00-4da1-45fe-b4d3-20a0a0c4182b",
        "cursor": {
          "ref": "b2c5e050-8f6d-4790-b57d-ccbb1a220042",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d7ae668b-9df4-4b6b-b6d0-09a79e2f1a78"
        },
        "item": {
          "id": "9d49dc00-4da1-45fe-b4d3-20a0a0c4182b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7274111f-c88d-496b-92cb-3a1d278d1080",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "093bc085-a17f-44c6-be21-e27674316669",
        "cursor": {
          "ref": "bc6093e9-a814-49f0-87db-15a8d49368ec",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "72337722-cbcb-4712-9ab1-9f5fdd79321e"
        },
        "item": {
          "id": "093bc085-a17f-44c6-be21-e27674316669",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ea5e9b8d-1e91-44d5-afec-36d030898ecd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87574921-8a4c-447c-a4fd-fcdb6e7cd7fb",
        "cursor": {
          "ref": "662647b5-054b-4221-8e51-418107b72a24",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "eff12888-2152-43f9-bc74-0da89cd07f5a"
        },
        "item": {
          "id": "87574921-8a4c-447c-a4fd-fcdb6e7cd7fb",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a993adab-9938-41f4-a58d-3c7c83441603",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e6ac39-e296-41ef-8be0-02546064cbf3",
        "cursor": {
          "ref": "11124a69-a10a-4569-80c3-787a301b9094",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "60d04be2-3636-4304-982a-2bfbabf72625"
        },
        "item": {
          "id": "25e6ac39-e296-41ef-8be0-02546064cbf3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1bb14cd0-5b86-453b-a365-efb94e342961",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b51cfb-0bbf-41a6-94da-452f786bc539",
        "cursor": {
          "ref": "887b0715-af7e-4752-b12f-12f40a9fcb68",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5bd12214-fc55-45ea-a38d-2b060beb4595"
        },
        "item": {
          "id": "33b51cfb-0bbf-41a6-94da-452f786bc539",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "22b35740-38d3-4058-af2b-0a84c1d79245",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aff920e-2c19-4cdf-8d57-30c53deffca7",
        "cursor": {
          "ref": "6a698528-d586-4478-a32e-0e156d1dac6a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7e059226-5e7b-4552-aeb0-395fecae8be9"
        },
        "item": {
          "id": "6aff920e-2c19-4cdf-8d57-30c53deffca7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2e85f29c-c605-4901-8248-ae4f979b80a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "e4383154-fd19-4461-beda-904b922ae0f5",
        "cursor": {
          "ref": "38c46168-f5b4-4207-b077-43b19e1df952",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c357ac27-926d-491c-afbe-34b75d37ae2e"
        },
        "item": {
          "id": "e4383154-fd19-4461-beda-904b922ae0f5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3afed9ea-20e2-4d9c-bd7c-478ea78ca314",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "a1257ff2-2f1f-4fa4-958f-a8d53b625f31",
        "cursor": {
          "ref": "171efde6-50fb-4769-a173-7c9023ebddb5",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7cd61219-f2e8-45d5-92ae-b5a51ac747ad"
        },
        "item": {
          "id": "a1257ff2-2f1f-4fa4-958f-a8d53b625f31",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d3222512-5071-40ba-a5c0-44f647985e15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "8e4f400d-55d1-4860-87c5-44ce1effd0d5",
        "cursor": {
          "ref": "0137a179-7b9e-4494-8f49-7280fb76d11f",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4b9e5ed5-f64a-42bb-bf1d-2e45416b106d"
        },
        "item": {
          "id": "8e4f400d-55d1-4860-87c5-44ce1effd0d5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fa6e0fd7-97da-4f78-9fb2-2ecba5de71da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4f400d-55d1-4860-87c5-44ce1effd0d5",
        "cursor": {
          "ref": "0137a179-7b9e-4494-8f49-7280fb76d11f",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4b9e5ed5-f64a-42bb-bf1d-2e45416b106d"
        },
        "item": {
          "id": "8e4f400d-55d1-4860-87c5-44ce1effd0d5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fa6e0fd7-97da-4f78-9fb2-2ecba5de71da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7d7a48-776f-4d8d-ae15-03a04a94748b",
        "cursor": {
          "ref": "6b339e1f-ac6c-4631-8aa4-bb5710e590bc",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d3b9b931-7f3a-42db-9012-e30427533326"
        },
        "item": {
          "id": "5e7d7a48-776f-4d8d-ae15-03a04a94748b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e5ab4bc7-4550-4465-b832-7e3ab69c8118",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f933bd6-abb9-4e32-bc4d-bb0cf53c2a7e",
        "cursor": {
          "ref": "f1daa228-6642-42e8-9643-3f9494a5eb55",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c954963f-74d3-4468-986b-959849183a14"
        },
        "item": {
          "id": "2f933bd6-abb9-4e32-bc4d-bb0cf53c2a7e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b644b08d-6ea4-45fc-9a5b-1a313bbbaeb6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}