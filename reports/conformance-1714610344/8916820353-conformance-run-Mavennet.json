{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6f97683c-a447-4c01-bb99-b5588db68d99",
        "name": "Clear Cache",
        "item": [
          {
            "id": "89f2521e-e295-4a97-a248-43b523622c63",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3765ccda-81e9-4779-9dd0-e5d20e75fa9a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f6b85fa6-ba64-44a2-8a1e-53820f2b16c6"
                }
              }
            ]
          },
          {
            "id": "0c49c886-57b6-4ad2-99dc-d7c79b863b32",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8abffbdb-ca56-46a5-8497-2bcdb8a81e21",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d730eba2-856d-434a-a79b-16539f1f2b38"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0aea3dcc-7214-40ae-bf8f-150ac6bc86e8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c1afc35c-a63c-4314-bd53-b496ca8670dc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cca60503-9072-4c2f-9aee-ba7e145a7696",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1b0b824-ffa1-4959-a88f-4cc92a06c023",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8fc118a6-bc82-4503-a674-11b45d5cfd6c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "115fab60-4303-4855-843e-81a4395e73c7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d53b1761-2436-436c-a44e-3a41e5d05280"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fd5309e9-747c-4608-9988-2125dec3606e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6ddeb7e8-55cd-4dee-a4ff-744270853fe3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce9e78e2-04c5-4f49-a7ed-47e84370a515",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "09211e09-7c09-4bd1-8fb8-36b511525a9a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac5a11b7-0e0b-43b6-a54f-0899b97dd2ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0eeff8bf-86c1-499b-bdd9-25564553820a"
            }
          }
        ]
      },
      {
        "id": "5a8aca68-32b6-478c-8090-4fa57ad33af4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e7a4f9e7-0161-4ee7-9e36-78640fc9a14a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "41461375-87a8-4ebe-a275-5dd775ce994a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3bd0b8d8-8ff0-45b5-bf65-c35dadbd464f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a35627-d1bc-4068-95ff-076699b6d24a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd59db67-a3cc-4b93-877b-834665feea31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76442b9d-71fc-4c00-a69e-dd19bd46a952",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8ab946-eacf-46cc-88e1-9b514ae26bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8bdc1c7d-4080-4b1b-889c-2ec606223afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f0ed29-afbe-456a-a721-4c4a86b93bbb",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "512bc625-2906-4bf3-8b30-1755940b5c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dcfcb9d1-3777-4c78-9ca9-ae2f17b4beae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "77759a0f-1f07-4625-8924-14c3efb5c59d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a16f2447-d5b5-4494-ad7a-5059a78a6326",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0545ba43-4f03-46be-bfea-629e494aef72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23e4c788-f471-4063-a10d-463ce07e6f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6b8a7e-0655-4c2b-974a-0ea39a842a3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "666756bd-ee75-4ad9-9989-448f51c2a556"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1840e409-584c-4081-a097-399be8344e69",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bf3057ba-9f45-4d23-9687-2e2a25192c2a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93d28b31-8ce6-4312-b73a-8f1011f50d05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4009100e-2638-43ba-bb3d-a173cb82be2d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4e460e2-5d4d-42bc-b119-fde31105a210",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "fd089a03-d9ba-419a-a989-f7315d52d0cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8665620-e420-4e09-a8d4-46543c944616",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "35a5cc08-cd6f-4d8b-83e7-cf8b107e55df"
            }
          }
        ]
      },
      {
        "id": "aff1f7b3-4afd-4754-b7a2-dcd3edc55a87",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ce436b0e-8b90-4269-a2a7-da1972aac14f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "349b8984-1c30-4e45-89d5-3171f1f3c80e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5c18f2e7-9bc2-4573-9597-bdff97f2a2f0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96de2ad-d3db-4a2a-ac8c-1bd1cd3379d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e3283ca-025d-4da2-8fe1-67b8aa4a4782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f93dbe-fab4-49d1-a90f-0808aa5246bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b892f281-2090-4c23-85c6-cc7a82b1d821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd49d9aa-74f4-4870-9dd2-925e2eb83cab",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21bdac9a-f66d-4d12-88cb-2cbe4f0ced4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27306523-df0d-4e9e-9444-c959a66e474f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55edd597-1390-436c-ab01-a2abec520909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0bdeea4a-66a7-45fa-8273-e511b0c2e8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8b18fc-b4d8-4676-9bc0-398cab868cd5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d822abb5-0332-4b93-a4b9-ba4a5fdf0e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a4794aa-8a81-4ca4-badb-becb736a06c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250b974c-ff40-48fc-9678-52003ca1db30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8422403-4906-4761-b1c6-54d2b98d38fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50794d5d-9061-47b1-9d1f-a3802a34ec17",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b54335f-b100-40c1-857c-0e422bd85866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ef5b67d-db94-45a8-99da-240f33d38a0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6232b0e7-2916-47ee-8437-181a50002e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e61e6634-6376-43e7-ad7d-4a818c890765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f778e5a7-81ea-4683-996c-95f1d7312c2c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7285e1fb-1cbe-4685-9e1b-8285b3c9fc3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16a60400-401a-4014-af0e-4e288a206d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8caefe2e-d830-4da6-9a28-a13357ea8d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b700f9fa-5bb3-46b3-817a-9a64518025c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3f7131-29b6-442f-908c-19c640551465",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "defe2fae-4ef5-49de-a7cd-1231e72ad567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92db65ff-da24-4bb5-ad7e-76a8ac819051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e06fe2f-910b-4aa3-ad27-bd1a91db9e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f6ec4d4-0203-4c55-b046-435b6d4f4b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44e03c4-5665-4b92-8ce2-b7fe32232ec4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "221441c1-575c-4982-98f4-e8bba7def552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d9a451-a081-4dc8-a2c3-4f76af9c8606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc11f87e-6eea-46e7-bbeb-068e647b66d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "522948ad-0091-4c0d-a043-f4babc7b3340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8b6f2a-3850-44c1-97d9-7aff3335bbe5",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e624bd-ff43-4d98-9753-e54d8161b573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "277985c9-ba5a-4d80-b176-63fc59858ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d14cfe-1375-4bce-b870-caaf4fb7f108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89804777-e556-4460-87d1-56f96cab55cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56dec5d-38ad-4bca-81b6-6ce7cb8ac8b6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6dd63a6-e8c7-4601-9395-aad2bd8ff0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "640ff1f4-5621-4fb0-bc54-4bb7da1e73e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6126dd6-f3bb-4b04-9bc6-ada881fa9ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c192eb4-110e-4c46-bd2b-8adeb8a38826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2c2c91-1572-4ba2-ac91-a37f04a8cd6c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a5c4cf-1c77-4bac-b5f0-c7f074031eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23572492-ef70-442f-9495-9ad7822db12f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78df6a80-f8c0-4bf5-8e90-82a8079c45f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "474eb9ce-def1-4df6-87b2-d40ce9c22e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd1d97a-cad8-43dc-9e27-0a2aae658177",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea2b5f90-651b-43ff-9547-ec39862e8723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b4a7820-7b0d-4b01-b517-f8f12bba32e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ec03f1-f761-4aca-8b3c-609d659faa94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "587eb148-245e-4530-ac4b-e39f0492cf28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38535d59-2c9c-4046-8ec2-abd15ca3d628",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c830af3-fa87-4838-a407-42a050e6d6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfcad5aa-20ff-433a-9796-d4cb2dae1634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c2a81e-72ae-45a6-87be-c8c2cd49890c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "753df3c7-4125-43a7-b379-9924e3a1a9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fa2b54-d856-4e82-9465-aa01b292ecc7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b7d928-f94a-44b4-8654-08fbc49f0155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e09c49a4-42d3-4982-90a5-72b1fdc9eeef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa756619-ebb1-46a8-bcf6-ef33462ea4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "798a9ddf-46cb-45d8-9be2-8992f3b11f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd38ce1-e052-4da5-a87f-865ae0f7dfb1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bccd5976-9588-464e-b631-9b6c9c3e3ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c52e1ff2-6bb1-4876-8b63-c6374ba9b26c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b256664-8303-4d9d-ae35-9b91fdd733d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b45f9a8b-1458-4543-a364-fae357d402cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f0af94-df98-4e9b-8fbf-0539628322a8",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9268a571-cddc-48c7-b01a-c1baf93522a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "695da8ab-2464-4f85-aaaa-315ea8e93b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b66c94e-91d2-4326-9c17-630a5bb6d4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ae837fa-327e-4933-9031-2add7ec29b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7b03c3-cf46-4488-8fc5-cc1e14401f9b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac28ef73-9b96-462d-a81a-65b50c649cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15ae23e5-27d6-4739-a273-a308a7f57a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a903e63-3289-478d-a407-c18dc424a45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "849da317-b1c8-48f4-9cf6-ccb8024f324d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61f0ac4-192d-4439-9aca-5e0dace7f598",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44d4ea9-f5e3-41c8-be34-924a1a97f387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8001cf7-5fcd-424b-b286-e15a88a487c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a5dba9-f964-4292-a1de-4ba28e8c1751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93eb0e20-e922-4ddc-8ba7-55288066eede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e0837d-7d94-4804-9de2-f8a447cbf2c4",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8295317d-0d39-4a15-876b-f861172136ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f415386-73d7-4807-acaa-934f60e98067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bc392a-864b-404b-aa5d-07e723c3aafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0432f46c-6bca-440d-9df9-0a7dc5cd171c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27cca227-1247-41cb-b651-c0b45490cbb5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7c19c7-0494-417b-bb11-2e2be5cf75ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "590fcc65-b24b-4058-8861-db38439c54f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a770f2d-c00c-4d33-8fbf-18901fc5b1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "26344f53-c569-4e66-8aa9-bcfa43541429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7367f2-fe6f-4f04-be14-9ac985ad9124",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0fbab58-06d4-44bf-97e2-85549d69b7a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cfb40ba-e7da-4e90-be7d-a343b84b00d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f03caf-eabb-40d3-b4ae-4707923ec285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1edcad7b-28ec-4310-8b72-402452929c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c50c001-e3d7-4045-8733-178f5797ab63",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb1c278-bea9-4f62-bd1e-86e55564928c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ef5b7c-0ee4-42b7-aaab-827a292a48e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29322e3-6ca4-4c1a-a01b-44a1aa6d5df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c3d083d-180c-4663-9ee5-5f4db9416d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a048d309-5511-4c01-977f-ddc84d43f361",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a03655-4c02-42c3-a505-f1938c15db53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe78654-bce6-405a-8a99-5ba137f63c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444817c2-4d22-41d9-ab76-80b598f8e0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a0159d4-419b-48ef-8156-27edbd29e5f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a0573e0-143a-4d64-9e9b-de3723a66006",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c7af7c-89e6-46b0-945c-61f137230a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73ed0ff2-ea65-47c8-9f95-8117f6e8f348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b8ce60-d008-4eed-b590-c08797461b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b622ef-bfe0-4b11-92ff-414ce9dac1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e9d825-e231-48d0-b74a-51b7b6a376fd",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f17057-bed9-4d65-8805-834c5ef29f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "903c6d18-7726-4347-bd4d-cf0ba96a42d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a49dd0c-d334-4281-9609-125cee37dadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "39f8c9ba-166d-4f22-a5a7-ec22c7a2ce01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce521df3-1acc-42e1-ad9b-ddb9985260ee",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c338449-f705-41f0-882a-384b1714675c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e343ba60-bbfa-4f71-8c9f-f473d601c6c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980b1370-54dd-4075-ba3a-4d943a1cd4bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4746169-08e5-4951-bc39-ae99bc194a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5035111-f1e2-4349-a4f8-07604561e05b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211e6291-cf93-4a9e-9b88-6af15c81fa2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "759a6d7e-069a-4f53-a1eb-10bd08dbdddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e333924c-2dc8-4650-b8f5-a0c19ed0924d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d39da151-15bc-45bd-99d0-0d3e409feddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7156eb8e-fbc3-47fc-9c53-b2ef6e9541c5",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8a4fc0-b826-4492-ad00-9179f1cefdd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e85b4342-6ccc-4c26-9a9c-91ffd2ff862c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32c32d7-ebc3-4932-b6f7-0bfb8a2963ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2326d70-57de-4d51-91a5-de2f24bb1f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b6b3b6-ee06-4aac-ae27-19c66cf529db",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d16751-64ca-461c-8e9e-99b0d083fb57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442ec583-f02a-41b4-af36-64dfdd328a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a82ccc5-c9bb-4448-88f0-91cd50f9ccc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c166c04-c616-4bd2-9781-c8d68590f128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b47e3e-9aa7-48ef-86ac-4e19dc1e871c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae16027-0d6c-4eda-956a-b78be02fce07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a8a930c-9dd9-40a6-a715-d56b833a9e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00efe4b-7fba-4acf-bf2b-c747d9faaffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf8d56c-f751-413f-86c2-f6f052546c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce49a28-7e31-41f8-b451-cf76016505a6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d4ce39-35e3-4b5a-a7c2-9646bdfed31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d1d4176-c360-4f5f-9b07-c4f9efbf3836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ffd0d2-a0a5-4b6a-a8b5-adfbea65f5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "dca4ac53-6abf-49d1-8d11-ed78f4f1474d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f5ec44-36a5-4a89-b827-5f6aadb00bf3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51f3e0b-3c4b-4b7c-8ca3-06bb7cba6545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "473a105a-2c84-4687-be6a-4260aa1e5dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c7afc0-59fb-44a9-b8f1-ada7537d619b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2847974f-95f3-4f1a-b8aa-b6442d9f084c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86524972-3f2c-4084-84fb-9fd432657a9f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b1de7b-427d-4aee-9465-46070923c35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6dca9fd-565b-4fe8-aad4-fcefc1a93b25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b53832ab-867e-444e-9a19-63ad2f0c98a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86594aff-f8d8-4c4d-bffd-395e232f9ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c328333-e4a5-4392-b928-09b42c13e937",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c490ce07-7869-4ae6-9699-4da889cb98b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9267b4e0-1541-4d22-a6be-5753004ac3db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3707b408-2131-457b-939e-6918f5c92cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92e9b1da-a317-482c-983e-9b480e275fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798df766-1332-4103-8da3-b45022255dad",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00cbbabc-b345-49b5-b150-c357afed4644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1334e95e-204f-4d2f-8ade-8c5761f4a286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ea465a-501a-41c6-a8d6-0362583cc6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61688325-2181-4d07-9ba5-eb4018b6440c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2779a895-d822-4a7f-9ad0-239aaf9d5595",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4efe7f-20a8-4506-98e4-5173b990bc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cad10c0f-e923-4077-be4a-30eb37906276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04a3127-b7e0-4922-a9c5-6203503368f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cdcbeda8-8b3b-42cc-a148-ddbc335f5f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3905563-7c95-44e7-9647-53e9ec6cd218",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b8fd46-e9c2-4881-a690-25ba170ddacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0520bb3-fa01-437c-a4f8-370e70ae9b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76415866-4f09-4a37-9641-a6b48070874d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e9d3473-ed8e-4892-83a9-565d3c48d1fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d917c060-e4c2-4858-af66-186b89d70156",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33938f0-9ad7-43ff-93bf-fb3e5cb07a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f62d5648-8b1e-4d1d-9e48-cba36470cc2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09fa3404-f969-4217-a4a2-ad1ae6447ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf7e341-687e-41cb-92e5-65750543a57e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4c5d4a-98e6-42b2-afe1-f9fa4cabe207",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0e6283-7dab-40d9-bab5-94d717030d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15cf9336-60ee-4be3-acb2-5e631386c0c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90cd8347-d239-4992-beca-cedbd6a9af5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b552b6bb-2883-483d-a3f9-a7738d765f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46036734-947e-41a7-b3f6-9ee41cd8f69a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e2ea4e-c847-465c-b3cc-cb8a094a5520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "197bc8ed-3d2d-420b-bb11-1b08aed71e3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15e045f-6c29-45c9-9d8a-5dd98468be02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8637d770-a093-4049-9202-c530f9062fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07931729-4091-4766-933c-53b25c6eaed9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ebcfc0-0bfc-403f-9dd5-46f667e47e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc03732-6ef0-4ce2-9020-293b972c80ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69569a6-5adb-4d6b-a5ce-6eb90e45a04c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fbdf0e9-9ac9-490d-977b-105eceba5a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c40605-0aac-4724-b233-e26d0552de06",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b6f021c-1967-435e-80dc-7110c97fd2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22a8c39c-5ad0-40aa-8b73-3e3d76d34e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34cb2f47-f5ba-400a-9cf0-4ade731de066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c59d646-9184-4932-8550-0851c6cf3b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab22d9e0-0085-4131-820f-1373ec1bb634",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43131ee-aacb-4ffb-84e3-05bc2bd2d391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e19d57e2-3f0a-49e9-ab10-e682aef2256d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b153ed28-50ca-4e64-83c3-54f20d2e0a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "964445e2-e946-425d-946e-aaf373d117cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09930a38-dce0-44d7-ba79-9b590689be63",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d6569b-59cb-474e-afd8-5e55b7cbe7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c91a15b7-d908-4f6c-9755-f67771e95f5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93641e68-ddc5-48b3-b033-3e3be2227b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "00f48f7b-d024-4759-9ec0-fccef1c3cd31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9a791d-a12f-43b8-8328-d664605c82bc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c738a7d9-409e-4c4c-9822-b1e113c68e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d6a2464-ff82-4ec5-a446-8b0b6ed81b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4123efd5-777e-403c-8b0e-d31830a712fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "54f8e17b-3d60-4458-875a-4872d396043a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ab11fc-5c9d-4527-ade0-03e50892ae55",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00db1da0-dd1f-418e-8d4f-e6ea5a77a115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c811f9ba-467b-498c-a53e-225caa4963d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d47dcee-7b30-41da-8a61-3dac160fd40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a166886-b50f-4d8d-a66a-04f303c89000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3530223-65ce-434d-a38a-1faaf3ead5bf",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c6b9de-cea6-4ade-8d38-bc955d67a389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d99d2e4a-5d71-475a-90ae-c632484a42c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd3d530-ecdf-453e-bf1a-d72e5566481b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "efbbc20b-02ad-43b2-9ea8-c2661a4a62fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d073881-b425-4e94-b24f-507496e3000d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49ae77d-5e4f-4677-ad52-1ab63e28ed60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0daf9a1c-c816-4e03-bead-b6a50142d43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905fc5b5-f395-40bc-8886-83a3ad2db36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b68a4a8-29fb-4ea9-b91c-fbca215da723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0309768a-59d9-4978-9c6a-49510c96c144",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab3289e-afdb-4f01-9eaa-7f1f39a00b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b61a2c-2cf8-4edd-8464-839610338b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4cbd81-4677-4820-b930-c8afcc517fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1a422f-ad76-49e1-92a4-092599473ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50735889-fb4e-42fa-a1eb-32e5c3eb52d3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b97296-3001-4d09-a984-66067ce616e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce7b666-070e-4ca2-a408-adafcd36b585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c6da5a-1755-4c71-9f3f-8d0841cd508e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9df0b15-e5f9-4f5f-8c50-6bb1e99277b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8380dc14-1432-47ff-8952-2954599c5938",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fb5a94-a5f6-4977-b0b2-f07b18d12784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045fb417-be45-4f82-b5fd-f4f785a51d77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e623d9c-e5b8-4906-b328-4c628820669d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e79cb8be-a644-41ab-8c21-41469d2c5784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef0eee3-2b79-4c97-8089-6469c5c6ae9f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4fea10-eab5-4e26-905e-1964bb9cf69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed03651-9bbf-48cc-8ed9-52f22f52b8e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c572d9b0-a419-468a-b6f6-ce8eb304d610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "58a7933f-d244-4aee-bccc-70e08cb8227d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9b0bd3b-0907-4b68-8728-1ddd9e9eb376",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641f609a-3a3e-4992-8d58-95fab5ee3e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "157ab9b4-335f-408a-a620-06057ed1807a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4948831d-b863-44b1-9aa4-5cb7e7019a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2de2f5d-192c-4e54-b379-62849563ae10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494146ac-8671-44de-9e6d-f85b518bea7f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb478476-3488-44bc-b672-48af118f2ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "124bccf2-d3b0-466d-ace7-54270dfdfa55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bfe2ae3-e175-40f2-ab60-334620588c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c31e561b-73d7-4f54-a19e-930433ee1c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083756fd-0f1b-400a-91a9-3abac08625df",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65167b70-c18d-4cd2-b97c-0c33536d3b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aabb2ef-f579-44e9-996e-821a9d348820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd374fe-d5a1-44aa-9303-0a21f201dda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e56f09eb-320a-4de5-8d6c-20815be8ab62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f280122-6ed4-444f-bc6d-98f0e368a7f4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f5de66-fb9a-4648-a06c-51f906e75c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6fddec-8fc7-42b1-9ae7-59f0c44a17ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09d5255-5957-4ddc-9098-24d1eb41e8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f78dd56a-1c04-4d7e-835e-fb4916533803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c635baba-e9da-4d9b-9a22-6debdd22f7a2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc53a893-c140-47ae-a909-83da26a94953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab27973-f5c9-42f6-87a4-2e75421c9f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36fc23c5-bfe5-4ebf-9928-b8c628146a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c3c88333-f72c-4b7f-baa1-c51b7bc50d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f1898c-8c70-4d59-8c29-02d694906524",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64dd02d4-6caa-4d25-a729-86a6a1916bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5aa8b3b-dee1-4581-abb7-1bc4eae852d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ad043a-d7ac-4ee4-8517-0943b8b0fc28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "937331c3-1a4f-4f13-8836-72f06050d1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fccfc023-17b8-47c9-8d64-76177bd8b4be",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7dd79d0-9664-45f3-b72f-3854190a8a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e872f965-298c-4c82-aa3b-6ae5199bfba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b195c65a-b46a-4d1d-bc5f-367ff02ee2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "48459ac9-2f95-4b96-a248-96f408540fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570242c8-bca1-4e5d-8116-d1f0e1a4751e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c807ea61-f3de-4fab-a375-c97857775311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a6f452-37c3-4990-b030-0f2f081c8bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2afbf873-ccd6-421e-9f34-d8a92fb5720d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9223ee6c-8bce-442d-b8c4-5e349d695fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4004143d-c81e-4c06-b811-c7527628323f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c4f53a-c2dd-4621-a64e-910fea64c477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c84c655-32af-483b-bbcf-ec69569e14c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1accc61-5d9c-43cb-8cb3-1f9f89aa9226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fb5b677-1882-47f9-86b7-cddbd1f1af56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b8a2ea-5708-43c6-8a48-fa3ab7d2bda0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90634c4-c229-4d83-b6a1-9d297537246b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8deeab07-b5b5-4bf9-b7a0-dfde5cd4b160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b20821-b271-409b-9aa6-43e4672adf61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "031713ae-18b0-45e5-9dd5-d3833a8971e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27652c4-25c7-4b9d-9813-fe8ac8b1f334",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2765de4d-b301-45a4-a0b8-5d664de3becb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ab22b7-a3c8-474d-9d05-25356ca74e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc302be8-6ffd-4a61-82af-4dc926b7d7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab5c7411-12a9-466a-bece-872b9e1d536e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b8c305-1fe7-4236-a707-a982e19990ec",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb827320-a409-4695-8347-c39a4f967679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6029b34-7933-4e4e-9886-ca9ad183db37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeebc1de-0cfe-42b8-b984-905603a54cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "742078fd-aa6e-47e0-ac55-17a235f39ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128a3a71-8323-45e0-8041-58d6fe34baff",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7132a624-915d-4792-bcf0-ef70f3bbe06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e890b6f2-e136-4974-84ad-69a60137ec37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0497a0a2-cbfc-41a2-a837-1958f32aadf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "490532b3-5243-40cb-bbd1-0e64a3adf3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200408b7-c96e-4a21-aa50-8b13de332b5b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9d6ed3-9763-4c30-a9cc-d9071871b58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6734ef9-e3b0-4671-b63b-656300083e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c2fe24-1e79-4752-b9c0-b546aadab746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a996cb0-c236-4859-afef-e244c194240c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392ad70e-1a58-47fe-9ad5-436eedefa0f0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ba2906-e093-4796-998a-f983428127ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da324d8b-5ab4-4780-acaa-577c3294f05e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3136f4f-d49f-435a-9ca2-e7b4162aa8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96929b81-6389-453e-be57-7a1673fbd9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0fd23ce-1290-4c0d-9881-6f8308b67180",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a93d29-52f9-42ac-af95-2531266e4aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c52f881d-0158-4ad2-844d-618aa6351582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882c2b74-88c9-4613-a069-3e35026f5cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4be99baa-8762-486f-acac-485ac964e834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5260b83b-9895-461b-9663-b8815e8be30c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b84d7b-4d27-4b96-8ff2-d44b4d67ccbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a1e48d-a6c4-4a72-bc1a-a920d49a9972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1508193a-f908-4c19-b65b-acbbeb960ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "151cf061-200f-4d41-a7ef-43c5b3241e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdca27f-99b4-4596-9257-22abe0391d45",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d42fab-fba2-4d42-b4b5-17fa78712b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbea4d52-41ee-4fe1-9895-5ada8dc460a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736861e4-a7c5-4f99-bfaf-dfe0dcb0d1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a71cfa04-4662-45fa-a745-819f7bb5a34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b3350e-cd73-47bb-b8cb-8ec5e2aca65c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a8a482-d840-41b1-93e2-985bd2fcc24a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67818221-1457-4936-bf98-b4782ff5b8b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b188ff9-e83b-4ce0-9cc2-4b0e258a9701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd82f96-6e90-403f-ab17-63155752ea53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1acc962-e667-4a4c-9a4b-dedb5ec3f6e1",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c09312-cad1-4804-8908-0a3f7a9d24c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a344fcc-ac2b-47d6-b8b5-de229f93a4b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90bb79af-f6ef-4c9a-b200-2602772f8e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c10e2405-5439-4adc-a7f4-aa870a76e5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3a65fd-0363-4943-9694-b12382614554",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7db86f2-22ea-4d0b-a3f7-3ca6afa6213b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc8b30a-a1e5-4980-ba2c-48f7bd52d684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4e2bac-795a-4f5c-b197-db91c22c8055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5be6df4-6975-4f6c-a78f-824599a040d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02bfa33e-14c6-4039-96d6-c09663439a34",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47067771-6cc1-4c58-9901-7992af29eaf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa62a243-34e3-486c-98f1-e74ab139ed98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d0cd04-774e-470b-8447-91a29100e89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4eb326f-3212-474b-b608-ffebc1efcedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f780d3b-b8fa-4c53-9769-b93b0c0cf51c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae869db7-948f-491d-89a2-80f714443ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "745ba8a9-9f0f-4016-bb7d-73ffb86f113d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3016ca8-0228-4a08-b3a5-52660ea0dfd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "703402c7-c75c-47cb-9878-257d2a31130f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331e1a5e-5581-41ad-84d5-905c9b56f793",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b20d17-8dc5-45a8-9bb4-f5758c65133e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6822f86c-a0f3-4a49-9379-d6eb994705b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e61e75-a9a5-4ddd-8f31-36789c04e6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dcbe712-b9e0-426a-955f-b01d2e001359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2f9322-6117-49f4-90f6-1e6d6fc11300",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14dfff25-4ddb-4b5e-bd7c-b6ceee933822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57728435-9c4f-4225-aaef-3d5a7ff4a5ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3fadd5-f7e4-4124-a4c1-fc830dd82adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a723f6a9-5a5d-40b5-9cc3-c2ce924d2d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78f4013-996b-4c5b-b285-71b13d34d1df",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f58c259-6ea6-49d5-a5e0-f8fe6448500c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44947191-5061-4401-bf1e-b22b5a9a7ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e7e1d2-0e9f-4c4a-afa4-16166e2ddb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ba872a-9cf1-4139-8ba3-f2fba2a4cb0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2117cb4b-c6f4-405a-a3c4-4c089047d494",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ea8f22-5115-4fe6-8ce1-bb390318fc65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb538673-c7c1-4789-8dd7-6c2d40d81a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9225e9a-19c4-486d-8b7f-000d1e0dde35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ab8adc8-57da-40ab-a862-863e1cf448f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91e7979-7116-43f4-a3f9-5a3cf70c1935",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0119c80-07c6-4f47-9deb-835228ad46ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab8bfcb3-43b0-4d59-a155-1ca23874902d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9420af1-0f29-499a-96b2-1463dca4cbdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1972650c-706e-4ced-94bc-1a7f95270f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e8a2ba-6b42-4416-9bbe-e83ffd906617",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a2cc96-5a26-4787-804d-0e326047e49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f619926d-b9e8-4525-8fb8-7b2aa527374d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108d7a8f-5782-4e9b-99fe-f6967006f55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb37e24-45f7-4a51-b213-b8cf5db898ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c042beda-ec25-4cef-bb51-300f940ebb0e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc27ac3b-2028-44f1-97ad-ad26d58cd7a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c987451-6248-44c0-9483-f311fc946ea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a8c8ce-0145-43b1-ad17-c2a3bcea9f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7931367f-bdd8-4f6d-9f1d-5abbd0d130fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4837493-cd0c-4b0d-8ed9-93931a454bf1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bfec5c6-0a4a-46a3-9ad7-8608ba1dfa26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "073a41c6-5163-4b92-8fa8-992cf5fe5cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6fb081-85e9-4f98-a099-a28dbec4aa8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5507fd-3a08-4a85-a501-1c34c358af20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d215dc1-0ce4-41b3-8e81-96eeb99143b1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b0c374-33ca-422c-a791-10117967707e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de6b8b9f-9afd-4716-89b4-755650dbb054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe4d7f3-ea45-40e3-807c-dd78602e96d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "284b4f6a-e8c6-4bc0-9f68-c575bdaf455a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53bb062d-d691-4e35-813c-6e346a70cb83",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8519c10d-6f5f-48e0-a004-28803fe80292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f09107bc-5f06-4c7d-a261-afd3325c3d3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a829426-f694-47b1-a29c-f22e1544c10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a8a0ec5-1c31-4e37-af9c-654a26395ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920f96f7-6e73-45fa-b21b-4213753a75ca",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6418e76-030c-429d-9b7f-58f41dc86552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee5a26fe-4b00-46ed-aa51-9e65644ff9c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580a3423-f8e4-4991-9c0d-165db1df0627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f45262a-ef76-4a9f-88bf-ee6c2ca5b6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc182fc8-8b77-44ed-8d08-2f12ca1fa8a2",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ee4ad0-e2fe-45ee-b876-d1d152c8b502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6719cb71-b9e4-46c3-83de-2cf9757a3b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcac9b79-7a36-43f3-85f8-3b37bc9c0780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ed30049-7d67-429f-85a3-f48a4cd9a057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f090f13-0b4d-4397-b4c8-aa5caf11fd3b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30dfa0f2-59b2-4bd1-bec7-b8623a01b3ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b198e3-2966-40b3-b5d3-35112366c6ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56e249c-bb4a-4673-8205-9b13984e40ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3315a69d-ba37-4cd3-82d9-aafab6f4b290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9166ba2-f0fa-4436-90f4-09a704c3692f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c063aa6-0109-4762-829d-d3144d10e129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3df60b92-07dc-4116-99c0-6cb1f9e72123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60974319-59f4-4929-a34a-60ac6652294f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c6b39d8-a468-4130-affc-2f8c1215cd9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f939354-b026-4882-bf9e-b8e4bf8e4cc7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4e77f5-6490-49b5-bd31-134da6b44a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d94539cb-6972-4a25-8632-cbf56527c79d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce84fa1-ea4b-4ddc-a66e-0bc85dc3c61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "41eade41-7e64-4b8c-894f-96ed0f5268ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e27fbdd-4e87-4aa3-8836-0d754ec3ffc6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6578aa77-3475-4268-a558-d9a787238006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c03ebeb5-00f0-4bc6-8188-a7f13f1c0dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce395a0e-216d-4859-aa65-ff3a6af39256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b5225d-1136-411f-9ef4-f3f00cccfd08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b9b17e-adcc-4c85-b6fd-1b357ba1075c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd291dd6-fc5c-4b55-959d-3e954c40c8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c58ac5-6512-4abb-afed-602719d83ce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13bcb19c-c6b2-4746-aa89-22653a903e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca027fbf-9864-4aee-a56d-f154c0c25d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b110df5-da86-4447-b9ab-fc0e322972e5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4a63a7-bc9d-485b-894d-945a68b44a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6a9c9d86-36e6-4c2c-af72-d4f0aa767655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf37d18-cc15-4e47-af3f-3e79454840fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "30e77fd8-a20d-4108-aa7d-88ace3c6b9a0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "08e24943-8686-4cf1-84f7-c1ff46f2ad22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3577608d-59d9-49b1-b5ec-ad42bdd9270b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "799b7462-d014-46f7-bc4a-bc535ea1da67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78292f25-cb6c-4f54-b1e9-f7b61cc6c95d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9e2bcf-fdf7-4b5d-8601-375896240e30",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3ef7e71-6a11-4be8-b86a-a2aa084648b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbc166b1-9bda-48a1-ba11-797e052e961b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f95a0b5c-0495-44cb-a945-aef93036296f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bca63318-2da2-463b-b8ed-5dda4ad3de4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "381baad3-4bef-41e2-b536-8400ce9cb580"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "19ad5324-31a5-4da3-87dc-5860568c12ef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ff1f98c9-8041-4865-b723-63608260251d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b40e1583-78a3-4c18-a572-d9d6da2cc90c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9726601d-324d-44c7-8ed6-027976d834e7"
                }
              }
            ]
          },
          {
            "id": "3ea5bc0c-abd2-4b18-bea8-4d41447ecfd5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ea924756-3c68-4d4f-ab2f-9bc1d2878b1d",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "4f718238-c081-47cf-8462-b8abc883ba2c",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "844144ff-cb8f-4c6f-ab10-aeb5232b4269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3272f789-2ab9-492e-b8be-014616ac6f5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b7e546-0b72-4022-8f97-615aab0846f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddbf31dd-514b-4d79-9504-535be0b7ebb9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7ad16c1e-55ba-4d08-a7cd-7629b7ddb47d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4442f41d-72ce-49bc-acb3-f70694112309",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f7815c7-ebf5-450e-a127-5dda0d319be9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10922f63-1740-4431-9c2a-7eee3d6b2d92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "41491b89-ff0a-4beb-b978-95a5f2b2256f"
                    }
                  }
                ]
              },
              {
                "id": "4e02a675-e03e-44fe-9e8a-669063b66abb",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d31cd5d-fbbb-42f5-9528-fe539ac24af4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0650d613-655e-4c01-b2ee-b39ce964f6dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e84d9315-877a-4a39-a9a1-1176360c857e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e32ae348-4b9e-465e-9987-d3b9dd8758cf"
                    }
                  }
                ]
              },
              {
                "id": "37dd4ba6-ef1a-4a4b-8de8-a35cbb33bfcd",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a242d532-f261-4fb8-8543-9e7ed67bfa6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "33c99836-4f8a-45fd-9d28-afd1d333bc2f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc90f660-9286-44bd-b6c7-02ee5772b2bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d333556c-24b3-43ec-813b-efa73ab70cec"
                    }
                  }
                ]
              },
              {
                "id": "e07c980c-4c2b-47f5-bdf6-0c022d6e9d7e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d02e9d7-3786-451c-88d7-30ba44b92361",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5b60aca-0853-4827-8cff-542624e3ce0e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a9f0f5d-d5ad-4b61-a05c-d49344e744b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d19e73cc-65d3-4721-ac81-010fe42270a7"
                    }
                  }
                ]
              },
              {
                "id": "fb3a46a3-25ca-4081-935b-144c06b62063",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d3002b4-ea83-4b78-8269-1c776ccfc8b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a8ab64c-3e9c-4f5a-84cf-6a12c7bfc711"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92218f6e-752e-4a76-87e8-f3ec3a2f90b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "77daec7e-a704-492c-ad6e-bb527ce82ad0"
                    }
                  }
                ]
              },
              {
                "id": "6b12c9e6-8292-4343-86b3-d09b3fe6999e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fbaa6ea-6402-445d-b584-c0190653de34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ba396f92-813e-4567-9521-501b43b352bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c6fc4ae-93c8-4467-bb67-4f2eada7e36b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "58347759-2eb4-4066-bfd6-dc86b3685eec"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4dd6f757-4431-4295-9b50-0c0fcc36f757",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b5666ca8-c952-47dd-ad40-18e567bffccd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a803ff1e-406d-46d7-8b59-02e6053f0c7a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8c371138-cdaf-4591-a2e4-3f025c92672c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a2592b6-455f-417d-bb12-af9e17eb57c9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5c073f40-4f2c-4846-bf9e-910f564b35eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cabd5fae-3b56-4119-9f01-f2b6dadeaf1a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8aa1ef05-3426-47ef-be56-4762229ab794"
            }
          }
        ]
      },
      {
        "id": "a224b9dc-5d43-4594-86c5-a35e4e84a0c1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a531435f-aafc-4719-a93c-306c6ed7aba0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a800d4ef-ac65-4348-8cd2-8bc3d0397d4a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c0ecd453-4997-4023-b270-d25c67c52192",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3c3820-adea-4b00-9817-1b6611f8ecdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8322882-093a-46f6-9a3d-3b480b900b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb3410d-4324-4601-9564-56966926b950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "94c0d581-bf99-43a8-bdb0-bec96fce490d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa598273-f14b-445d-b2c9-0b3e2b30e68f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d972d38b-adcb-4abf-a2bd-403cd7f257ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b887d642-6729-42ea-aba1-bc3c944e8eee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be2cc63-bfad-4e4e-be10-fda7fb4daaaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "67d642cf-09bf-4646-b102-8df8a88ffd03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465cb6d7-3630-4a1e-8d34-f3f13b7d1887",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc62023-3b5b-418e-b7ff-949f0050e8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca228b1c-8fc2-4eaf-9cec-34124b097a1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f0f38e-8f87-4bc6-a4ac-35d32cb21588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d00f3daf-11b5-42de-86a8-74e19a9139d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa18a144-8e01-4567-912d-7f20a7377380",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "139a7e1f-0fa6-4ba5-8c43-2c01e7c448ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e8548b4-1006-48ee-97f2-0347a254f07d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f546d3a-b015-48b8-873f-9383c3353d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e20982cc-50df-4f13-bafe-4b9ddb98460f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a602d70e-932b-4640-b6bd-1de9e217af03",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0ac89e-e881-4edf-bf0f-6af55ae84fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f17138-5841-4b9e-be54-adb39983c000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc67ae2-8893-48bb-838e-856aac2e88e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02b08f4b-0723-4b28-a79e-f268439754d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2b8ca1-a478-4b97-9777-06782799c142",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3e57a9-5af0-44b0-9f06-f0db19b9c2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "822edbda-8600-489e-b895-5b3551285ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359268b1-6c44-4ab0-b314-5ef8c952d325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b0d670b-65bf-4e47-a651-3be25d6e0ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224d48f9-a721-4979-aa1f-c2b27f182def",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "712f590a-249f-4019-8a5f-a359f10a038d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a83b393d-dac8-4112-921f-750b81f86bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ceade4-b512-4c57-8c8b-abab330d58ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e61201cf-3046-451b-9291-630afea0ffd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55cd2ca9-65b9-42b6-8cfe-8c6b1e3e50d8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "984d28ca-935f-4b19-9a46-0f02c0f4d77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c826b953-b89d-4a0c-8c22-3b6a7ff5dac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91409267-2388-40b6-90fa-8670c4cb3f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "472b19dc-2a0f-48b0-858c-3ad9df4615da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee72f76-cf48-4ebe-ac22-91adbb07d4c9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3271da8-b83f-41f0-8fb6-d53c29f13e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9780992-e3ea-4d9c-8c31-d33034b2cace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9170744c-be79-4dbf-ba96-a436dcdf1295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83f1f651-211a-49b7-b7bf-fe3395197e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10fb29b5-06cf-450e-afa6-252183600b30",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35cd58f-cce1-4ee0-be43-9066c946d3fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b95992e-024e-448f-8542-d9a2bd74f11e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f4ca9e-d7e7-4fba-9b1b-59a2ac92b918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e1258fc-3a3c-4a46-8176-5bd79f5caee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b610b4-08e6-4e9e-808a-3eae23953498",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b9326a-298d-427b-8968-30644d67effe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "218eeaf9-7425-46ec-8ba2-bd5d299118dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793ee930-4fcd-4b74-803e-68220ce55e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6c1588dc-c342-40d4-bdc1-9a13328f08dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56183c55-c3c8-418f-a81b-d22467740ab5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "416db988-dd24-4f0d-97cb-8b7f54e91b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28344b1-b7c0-4fff-98b7-318f65ee19b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a5d4d2-7457-4ae9-88d7-2b31051a162c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea86df5-f18d-4a3d-8f09-ee824e28f006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7658a6-635e-48fc-abce-130fa26dde61",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b58311c3-c333-4409-bcd8-58a1be0a0e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7fde261-bc56-4882-9854-0c5e0b959b86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457a2deb-a1bd-4967-958f-a31af6102dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16bb1527-96b7-403b-b74a-ef42537e47f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f561d6-ef36-4da2-a604-28db6359ee8d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ba57cc-dc35-45b0-876d-c9f16e3a0c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c558cd5-8aaa-4591-ac1a-e1aa1824de61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c3f470-edd3-4426-9ac8-bcc4d19cc1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "50cd9fba-e547-4c81-bfd3-a65c837bfc65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4af5ac-dbae-49b1-9a9c-62de870322b1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb5be42-3cea-4d72-ab41-95740065ed79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272630be-934a-4852-89d9-186312cf9676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3775e46-3d01-4580-859d-db94a6fa9080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f2f030a-31d1-464d-b522-a88bfb80d52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf12ff3-4f47-41f8-af73-11e5c5a584e1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b70565-50b0-4425-9e10-bb32406beb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72107f6-d425-4726-9127-12a566eb1240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9ce705-bdc3-4ecd-a766-a5f2101fd36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "792685ff-ea34-49b9-9960-6f325bcdb604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660e4188-170e-4a1b-8db1-575f35b05306",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd281f1-286a-4002-9607-7af164b6371b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c572b83-3bf8-445d-86e4-ef19b5edcc73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23593b2d-505a-48c3-9c8b-fdc191df88e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "12f2cff3-c65c-4aa5-8fa4-e1136bb04878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b1acb8-c78b-4c9b-8b43-4a600b4856ab",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa25c58-f4f5-472d-8f77-fd40ab3a195d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b09fa3a-a0a6-4dfb-b18d-4386d49aece6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af718ac-92e1-4bfe-9616-4bc71e8176c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "789c4e62-c1e1-4121-9801-95caf21a22b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4644bf7a-f44f-41f3-b7b7-ae88991e5f13",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c7fac2-ab54-42ff-9b10-6112bf3e92c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb6e3843-d81c-4b63-9d6c-6deae52bdb50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7cf4f6a-a143-431e-b62c-5dad0eda3c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdfb4b88-2f0f-4aba-849f-cd15d8ace5bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad32aff2-5fd8-4417-b905-4fe899d6b345",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0050e53-cad2-4aae-a320-883ecd8f7a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a125824d-2d9c-4776-8b69-81532f924afa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af028bb1-e62d-40c3-b142-7ec0ed8d7bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33dfc39c-eeaf-40d8-b19e-3b78689171a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913d2918-7bf8-4539-8513-67139d331976",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d599c0-5615-4793-8ca5-98ae9f7a5d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f1b7f2-c87d-4bcc-b467-c107594860dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a53125d-7ec0-4ad5-87ca-14cbafa6560a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d97a1c8-a95e-494b-9291-da69d302cd20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fb2469-fd34-4ee8-bbb4-be556cc330ba",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e2a46b8-8f9a-4259-b3d1-ab9f67341b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9fe1b9c-9434-4234-b480-4b639bc63121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fdc6bb-eac2-49c8-9882-2fe2df6ea747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d677f41-5fb6-42d4-a2c5-f592fb28e84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e106b8-ba5f-41ff-af94-aed2139ddbc3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e8d2a3-02b7-4381-9116-3919da675c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2966628-f1a1-4f91-8cb6-0012450c2f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af91e05-25d5-4bbf-a831-c8c299a9a8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c28f6025-2d40-4bfe-aee0-e7f62d9e2efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052c2734-32a2-4f37-aa6f-ddfe44ffd477",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec13b4e-1b26-430f-b7cc-97e8a512fff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d658f104-eee7-435d-9388-e33f278bafd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d19ac47-fbf9-44b4-9a22-41ddf046b6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44930668-8f49-4bbf-a768-a11cbc623b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e245317-6a7a-4963-85bc-05e50af39d9c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e7bb21-a6ac-4875-a9c4-8a60f3af096b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0398bef3-8773-4e2d-9dde-8ccdde38ce65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9657d874-72ba-4b88-be1c-635014576044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf7e1e8c-d9f4-4862-9bc5-8ddaadb6c4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a29a7c-d310-4234-b61b-06823431eb4e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3864686-d393-4f7d-81b0-b559cc88cdb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c558571f-4e42-4197-a744-9561d062a215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972cab72-a0c8-445c-ac0b-71fa7183cad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0a21da8-bfb6-4efc-9767-676aab54ff8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b597b559-4a40-4427-a8b5-251fde356335",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c04326-1458-474f-8432-4ff562e25e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd4439c-c1f9-421a-b0d9-11ddedb0f013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016dc9e2-ad04-465a-a646-9e71d42e3cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a50c4514-8530-4867-9cab-fa33ed253180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6467e508-4de5-4b22-844b-072c8b195c4c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "903c7292-cd5f-47bf-8461-5e6314e29d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc9b229-d13e-490e-b0fe-6c3ee3b66b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6c3902-3744-463a-914f-5842d4691f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d979219b-fe9d-471b-84b4-868c96d5d1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e845fbec-5f3b-4bab-84d9-bffda5b782a0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d717b4-8e3f-4bc6-97bf-1cc0dbf9f46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaaebb20-24c4-4e83-99fa-2ac4e59b0b80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6509cc3b-af7f-42fe-9742-3ce1a57fc0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f059032-f17e-4797-9cda-cc3c8a3c03ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdc9a99-25f2-4f62-bfa2-e2972bd546a9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf9e7d2-2649-40e3-a98a-d590cef34a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "137a7278-0883-456d-b4ef-4d4656b4570a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca8cfcc-bf7a-473f-a02a-669e027816fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cff1ae3e-11c8-4f60-8b93-cc805450bda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccf655a-96a3-4f75-80a0-d95fd9f0617c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a6033b-fea6-4e48-bb75-26b5ef6bd476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f293e7c3-9dd3-4840-a148-baedde463351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3884860-7081-4302-800b-807e069e3979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0485da0-1753-4ab0-93c4-64260464a160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb23566-2b6f-4a3e-978f-729479206458",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881d06f2-a8e2-47db-98bc-deffe4bac6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c15462ac-c587-4297-b0c1-9ce28a72981c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f4e772-b0b3-40c1-9626-6de9398a2da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bafd072e-ea03-4a0d-875f-25527f66ff87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd25255-f7d5-492c-b155-5c7c9d1f872f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49b33d5-4ffa-488c-9c13-54731c204ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5257dfe6-0ff1-46c3-8b93-4a2b5150b3b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc5bc8d-fc43-4eb6-ab09-a3fa6ebd3b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b4458c7-3e37-4b4d-b873-a6b147218b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4d8ac4-2125-4e17-b586-0a0751662c7e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98c1ba8-ed32-4387-aaf2-0a79bb365b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "425fab9f-ebd1-47a3-8bd6-25057426d3a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fde170-a002-4e64-af74-fe6aeb449975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42936f2e-b156-4e3a-88e6-4d346a268308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc58c04-e85c-4a8f-b25f-d848bdb88068",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a65b5c-f6bd-46a1-875b-981b6edbfccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9bbb11-ef81-4745-bcd2-9fe8ffb820ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3f8c95-0c68-4afd-a235-f21a6f896f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41aab2a9-d658-466e-84d3-ade1d5b9434c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67af142-2001-42d7-986f-3699596090e9",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5a6b15-a16b-4ab5-b759-c49ec5c4d14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d03396da-0b5c-4e24-9117-9bff06b6aac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f20d1f-20c7-4e35-be94-723791f41d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "661cb68e-2606-4505-8394-e372b2cc1498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3dd77f-7869-4252-ab91-42eddcaebae9",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b908aae0-5072-48ad-8c7a-f620cc822d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "782a13b4-d0ee-4dc5-9580-e8c6c8696b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81dc82c5-9d24-4f9d-9ec3-47f5ced9751e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "687ffca4-dd51-4962-a603-f5ecba447392"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "23294080-34e0-4554-847c-8ad47120764c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7c8c78b8-33c8-4d8d-b7f3-8f4503e5d90e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38615f2-5b0e-4069-85a8-b60e616111e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "abfdca91-f546-4f1f-b432-84e97be1f487"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9fcd5cc-5eb4-4caa-9121-130a42d685f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4630500b-5bbd-442d-a061-aae76e91873d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5de6f5c0-ab1f-468e-a837-310e047617df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "002fe0f4-43b6-43b6-bee2-f681b131257c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "670aa237-20f9-483f-a867-0259ff4e8216",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2951a70-df1d-427b-a398-d80365475a79"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "feac753c-6871-4473-b3f1-c3d769c51d50",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "aaaa52ee-3561-45ee-95cb-6918389bdc39"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b36f2e1e-8059-4b0d-97b8-e6b3f2ede01a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd3fcb79-7555-484c-a1fb-7d6e9ff55d06"
            }
          }
        ]
      },
      {
        "id": "91dfef6d-3f9d-4a55-aae9-22e488ec7b50",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "825d4b9c-9a2a-46a9-8f05-794750119c28",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb73bc2c-1a5e-4961-8186-36e771d80fdc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "510e6b9a-aba0-4d12-a2f8-2055e0771831",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5134c6b-1d10-422b-99c1-c9dda59793e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92252696-b09e-4480-9464-b11d17c012f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe010e8d-b6d4-4a5a-bc1b-cc0bcc42d472",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077fa26c-4b49-4fb4-bab5-62036b6c77c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4445e0fd-21a7-4596-ada6-c7d3cef92a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769d20c8-95db-4043-83c8-46c761785b65",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc133d6c-391a-43ce-9290-d4814b8c602d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "929a65cf-2b3d-495f-b5d3-d2f16f661a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5462488-e5f4-496a-9143-c2cdee901cfa",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ff9af5-0e67-415f-83ec-31edf549682f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a80d78fc-5bb3-4bad-b759-abb7df38d8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a31b518-6a58-47a5-8212-d739ec006c6e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a7205b6-b677-463b-96e0-03d54e167352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2c75ee-85ca-4cb0-9496-c0bc7d6d15a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd85c3e-30a2-419e-adac-cc1697a80031",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3bf5e3-676b-4d39-b602-920582371943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47e8a347-d602-4d2e-8727-2600605f8580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f7182c-2f21-4992-944e-7a7aad038e64",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f800527-6bd7-4daf-801c-b71ff5e983e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f765f5c5-1c4d-4823-8511-620bc4965e09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e5bbe9-3d5f-465b-9d3b-590e0c4bd751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "508b9b75-d7f4-4c52-b70d-9f679843a896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db32d382-090c-4c6d-b206-4354831d18e3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e95774-7ea0-4e38-bb48-cb0dd6ecc66b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5451ccb8-f072-4bd0-baf4-44a084c38536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a941ae4b-5cc3-4367-97c1-fb79f4a41eed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a2143b-4771-4369-9f8c-dc262737634c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca4e19a-a719-44c7-b0aa-6f15c3f59ff8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f01f55-e8c1-4fd5-b7b0-916bc90bf406",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdcc4943-883a-407c-aae0-f692a38cfb82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f294bfd-7037-46ce-9bfd-3c1e82718e22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23beb2e6-180d-4114-860d-c02dde3daee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eed3757-590d-449b-b160-032e760236ad",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a951c7-b6e9-45e1-bf6b-4999c254dae8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e1e3425-8309-41e0-8b72-f3c60003312e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef590b8a-c8b7-46a8-94b0-f6edd9c7e117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "659f1425-ac40-4250-bdf2-ded8ad70155e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d129a5-fc4b-40a3-ba6a-575d6afd7545",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e93e15-6caa-4924-872b-a097de715b1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd81f0d-4afa-469b-a1d4-c5558406ef1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1206cbca-eacd-4c03-8c8e-3ec5067b6f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4811e652-03d7-402c-81e5-3dae00b03a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35838533-c113-446a-b182-fbc83ee7e3ca",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9db0bae-d03c-4137-9f15-5aacde33e260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87eef6e2-26bb-427e-87ee-a34c738b826a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "451ad7b2-2c82-4d6c-8ad6-3d41d5789fd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30607a32-b97d-4538-9f05-22bdd8dc4b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5418ab1f-9768-42ec-a14b-cc9d3dd82da0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9a4260-f8ec-4300-a831-2c29d48301ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ba529e3-f326-4742-9dd4-d83d7859b46f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "165142b3-c772-4a29-9992-7e269fa0a7e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "367cd429-2b77-4f65-a8ab-22c3509079ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8513339-6838-4c3b-b89e-6396a7063087",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fd1b7d-8de5-495e-ae53-091af3046e05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "644de2c4-8907-4879-bf6d-20c088ebd566"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29edd09d-3d16-42a0-840e-af6647412b75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef9c011-a41c-46cc-9780-01f791c21beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a767e351-404e-438a-ade1-201426fcc220",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cacda94a-3eae-4ede-81a0-91b58d2aa0ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58b39b2c-a33d-4b25-a7c6-2928a3368f84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc4f23b-a6e9-4dc2-a942-45151d6a5069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77ff65c9-af43-49cc-8cae-a08000f69ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348bedbd-c013-4207-b273-f0e5272f2761",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b606ec0c-a67c-45f6-8824-04f7e59f22b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8d6f0f7-dea3-4ac7-92d0-1a499c5e8b96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91774f95-c148-463a-8832-93df72371c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c42c0c1-a20a-44d0-893a-198e51e997c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9633f3-7a28-42a5-a15a-4f9ccea62274",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1cdd665-3a68-473f-b589-4e4068557bf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01e7c405-f538-48ef-9d1a-35db20958eff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf99e33-f9d7-48ec-9b2d-b3a1aadf6494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5b2a0f3-f121-40d5-9814-b97978513e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3525bddc-20ad-4f46-bab5-ac66b625392b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d7285a-7c4d-4cd8-8f29-5c4f05c63b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72077e5a-4d84-4417-baa4-3a897e08c4e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2d1bd9-496a-4499-964b-90708ee68090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccfbbb30-f33b-409c-ae39-4247a8ff981a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd9e57e-8cac-45b5-b15f-0f0fe0a1eb8e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62510a78-0d51-481f-8c4e-b2973f1fd009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66710023-342d-469e-acef-4f719c50b57c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd00357-86b3-4a37-84c8-a7729d3f208e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e39db395-b368-4a77-9570-b72a37d84693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778684a3-7d37-4d0d-8927-c9fb9725d45a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "375a4909-2334-4ce8-9ea3-e6bfc006699a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eecb094f-8dca-4154-a8a2-bdbf32ebeadc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca4e885-a453-491d-a037-ce39cb8c2653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcac9253-da07-4245-94e1-f609ba47ad51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5a0b6c-9148-414c-a31b-5bcd989cd387",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810d5201-9d37-4314-af2b-c97ad113a79f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b59b808-4eb1-4b79-a3f9-2d18bbde55b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14915bd2-b651-4bfc-8002-387ee865a88f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "602c062a-237f-405f-8d96-34ca8d022180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed29706-e22e-4cb9-93a2-2593ba360fdd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b19bd34-459c-4145-a307-14a1de1c52a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1716554d-556f-4578-9b29-1c168f173e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f353240-eb96-4e95-a60b-e5133003f56a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182106ba-8498-4fa9-8e3a-396344d2b867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753149d1-cc2b-4c92-b144-eb3195411081",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf907af-8d90-46c0-9843-448f30c1ad9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b2e18ed-1402-4447-894f-8f03a9f8181e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd84eeef-0ebe-4e0c-b1d5-75ac4d9896a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f843a34-8a79-4c5d-ba8a-ef79e37c0523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69655885-d7f5-4ac1-9716-a0f743ae3196",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3035088-15b1-4a40-b6ed-fd682efef464",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ccf90da-0c9d-43dd-8225-298211ece6b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "452163a0-f3b8-40ca-aca4-62fddb61834a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea310a7-cfb3-4d75-a2fb-2ee4b253da87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1386b604-450b-4bfa-8adf-1ef9d502f0bd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0504203-76d1-4290-af23-5413fc29f2f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7ded08a-c9a1-4555-a1a2-e05ee7ca09dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca09ff53-fbbf-4942-9ea1-6494d376a665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c00621d8-e174-4107-884c-1a03677cb57f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfbc7c05-f4ea-40aa-adcf-bb47023a986b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c317a01b-2533-48f5-8746-26cb120c9196",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51cd4486-23be-4f9b-846b-e2841b6cb295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4609399-0648-4d4f-966c-c5578658a047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ecf95fb-e00d-49d0-8baf-16e60fcc20df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93454c1f-7f02-4e9e-89fa-76eb66685e80",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d84ee5-b23d-401b-a3f4-24e7a4c3b2b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e0a51a3-d4aa-4556-b36e-2e2ba9951266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "484f7586-8abd-4343-8362-801f7f9ba360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd2b8fd0-7947-46c0-ac27-0933228a3f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a10b1879-764d-4a6e-97d3-c57ef57c4fbb",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873ef525-094b-4e34-a6d6-b1d71a5635a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "547605fe-e992-4664-ab03-a69ca8c91e00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99aaf79a-9f14-403f-958d-607e1cd7f4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e5cd40-824f-46ce-b224-4d7e679792f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc39356-1738-4e79-b79a-780f2e75c8bc",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e27e73-29f8-413d-ad21-f406cd34d8c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c19e879-757c-4e09-9b6f-b5ec84fe0faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c54a41-f324-4278-87e9-a562df4df72c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fcd5350-3654-470c-ad79-cda90f060c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1d8446-0115-4dfe-85ff-85c6056a10a0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c3a0c7-36e9-4d49-a40f-afb3cd56ea64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4522474-a2f0-4c04-84fd-bfd84baf68ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63cdaa48-09b1-4fca-8204-a9a1716d4fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65b975e2-3e33-4c1c-89d3-5446c75e45ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6562a2-6a9b-4840-b442-fc24f43aad71",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab1e4d5-b6c1-40aa-893a-500187ec472d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7015a1a9-d042-4370-b863-ef8dcb9e252d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d96e4d8-17fe-4423-add2-7215ea62fa1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56869de3-2867-4df2-9268-9c09be975d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf102d3-5e8c-4c5d-bc25-c0c49f7ee305",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8960d950-8c56-46eb-a16f-6bdd07c9c0ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9423b522-71d3-4ba4-a031-42e9a168264c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b979361-9a58-469f-823a-5ea339d912b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "865ef78e-6261-416c-a6fa-bd09118ee11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d3225a-81cc-4f8f-a426-4a35d40e11aa",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce415bfd-b701-4e8c-b54c-ff003d0d7aca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c4241f0-38f5-434d-bc34-8f40aee8b7a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f3e551-65ca-47c8-a2b2-03f1769987ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76979c32-3215-4ea6-b0da-f8ea2e24b7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247b5e9c-fe06-4a1d-a7c9-e19fd9ebaf69",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677ea8c5-a2d4-45a2-afcb-c3bc170d7e20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6f01884-fddc-41ff-a6e6-6737c0027949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcd207a-faa8-4eb4-b53c-a9ca33fceafe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0aef541-aaa8-4b80-9e1f-d61ff0c30668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1897f6-cd55-4399-ac77-0e4753bc7635",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10aa5e80-f4f2-4534-ad5e-98f28f112da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e7def0-6dca-42c1-ae1e-f19a66fe59d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6b600b-4366-45b4-bf3b-4da1b0510926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a6e008f-70d5-48a7-8d67-8815f9f1fbb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc136b6-9124-452a-85bf-d968b43d2fd0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942d7062-0c71-44b9-8964-a08f6a0e9575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "678374c8-295f-4bd1-846a-9e6165eb9a9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1c1d00-8bb5-49df-8702-e21c2c4c06d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c33667-a32c-499d-b11c-0fbb5c197a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb359cd3-c2d7-44ca-8fd3-cbc303f7c779",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16807289-a2ec-4f61-b7a9-9da204dd94ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f657854e-6757-4631-86fb-039737cb3b7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e153270-e4ee-4022-a048-58ec0ef29a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c835e897-4242-4a1b-8a1b-240a554e2e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62bfa610-f8bb-4ec0-91c1-a46389af7e80",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c17157f5-97b2-4235-9d41-58cdd808d7b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ff7532-daf0-4b07-b19d-5afc6e0f6b7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22092450-49ed-476c-9607-98fe02ef2cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a06200-3846-4853-b8b1-3ec9ec38fa38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab76fefb-a707-4baf-a305-4ff3b0f0c084",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc322c7-c944-4dca-b896-cda29727e9b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24419a80-bc8d-44d0-a70c-9f91bc4ab161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7a18fc-e90f-4658-b033-0b3d27a01329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "620c7c5f-c0b8-4476-aee9-4942ebd254b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c899c772-40cb-4b70-9970-7a32de47c746",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c10e94-ab7f-49d1-bcb3-4d5c30c55542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23c0410a-3d45-4d2d-95d8-27a400725cde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d1014e3-077b-47c1-aeac-ca631bebc835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddf77e37-3f6b-47f2-8179-52fd208e7cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee9d6fe-8a82-494b-b99a-64828f85abdd",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "638afda1-16e3-4909-b0cd-f3de8fd35adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb426a99-ea65-4da5-a418-334f833880fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4cd8d1-a0e8-4e31-a16b-2ca25e4a308b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef024a6-d663-4946-8226-5880c084916f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770655e0-aacc-45ac-b155-26971cb203e1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3011f1f3-9faf-443d-97ed-f20897a2cbe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef45c584-ef37-43d2-8bb8-f337e7057587"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49156e7-ebea-4bf7-8a9b-4c4d91da6152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb24092-557a-427c-acb5-20e0281668aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec69959-345d-4ff3-9dfc-037dbaf30783",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ff7f71-42aa-4e50-b1ad-2f892e1130d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea4cf555-435f-4be5-8cea-635f923dd8e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a26feb-3fc4-4fbf-be1b-ecfee5639a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecf97854-eb07-4f92-8c29-c8b204137ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30fd68fd-c7e5-407c-9197-a4c8f66d9f1b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef416874-0cf0-44ba-bf39-df8d1ccc76f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b067edc9-dc55-46c3-a4c4-15ff9be14770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f5949e-4ee5-48da-afaa-0f91b8c01523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b31158b2-5a18-43d7-8847-ca69a75b9bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c1a086-ab2e-4bb8-9ace-1cdb9d9b5403",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8264ea85-c1ac-4c56-883a-6e70bae00249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "269ea1ce-2351-4f23-a0c3-ec6bf3c14354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ed4e46-acfa-4065-a834-1bcc306e5078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde213c6-c12c-430e-9274-470e10a3d45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee15633-5008-4c2d-ac83-8b079d8f409a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611f94e4-fbef-4b37-bea2-287f4b7b038a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93efa330-8686-4dd0-9d07-29eb02a98689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcab0334-0432-42e0-a304-4e35796856b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec7c30ad-92ce-47a2-9a6f-4b6890a5f5b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6350b33-900d-4f2d-b882-c5c57b098f6b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca41cd81-e105-420b-b1c7-dc3e1f928935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a6cf9f0-3380-4b72-90d5-a79e6702f15e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1055b1-a411-414b-b363-6af45b94838e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9838509-1a58-4235-9fb5-11cae6a12437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2ec4de-4076-4015-8c84-eb076756d27b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d924be9a-e15b-4b14-b9b7-b70fa4b334e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a35c2a7-146b-4c7c-9865-6d018f1b3964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d94d727-bfa5-43c9-95c5-3ed4c5d26cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db988cac-57db-4f77-8b60-b4ee1817a496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e87a9d-69b6-4f83-8acc-c9acaedc8a00",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e366c31-85f6-4193-8d81-dd27845baedd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b009bdc0-26f2-428f-9459-25f04ebb239a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "967a1de6-c5e7-46cb-90a7-d08b9389158c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f6c2b6d-1220-456c-af10-b3d1f095c9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a7fa0d-033f-4d84-a13b-ef9892312f34",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc54af96-cc32-4275-9134-91dd6ff1b7ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f4d29bc-2b66-4091-a967-d0ab09324b98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d7ffdd-2cee-4f5c-b9aa-128e14822d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "253eb17b-a006-4e9e-8158-eee4085186c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2f2769-e325-4616-9568-47e842c58b98",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "790d062a-b696-4c88-a0bc-04ba1f3f0dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae9207e-42ce-4751-b0bf-4466b3d35162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af85be02-aa5f-426e-9a2b-98a3c0068980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bebcc51-adb5-4922-b216-42974ddd772e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad6f408-1015-442d-8e59-77dc2f8d6f55",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae26e1c-f0a9-4a8a-b693-64518f1f439b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef756e28-9aba-4a6e-a8d1-ff3e43017bb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1ab88c-d2d9-4242-b616-22af60f1de65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa6bb257-c850-4266-a2c8-e2c1d8d7b0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24d7841-1f61-48c9-afab-bc477ca1b3e3",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e3bbc0-ce0b-4e70-8f30-8b991f4857ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f907ec-45ab-4a6f-9fa1-c44f851a96b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef4d852-41a9-4986-b073-0e481b23ff70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c795809-bdf9-4679-82ba-8d4ff4d7d261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02027cf0-9758-4244-a0c8-6047c0c2416b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb32beb-b050-4d04-ac04-ed7780a80cfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b40b6b5-eb39-4004-a812-5449865539b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a077eb-e795-4808-9eb9-dc007cc0c00b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76335ab6-f54c-4119-b303-90deab09966d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8717fd-9279-428f-8fe8-acf23a212c06",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "870e895d-877b-4e63-abd5-dc69a069f910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a8b323b-5fdb-4f78-ad19-c1f2d2f2d45d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a07ebfe-2b57-402c-99a3-dc23550d7419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f66663f-daac-490e-9d88-7d1aae4a4617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01949fbe-b016-4e9d-bd2e-4666e1989a13",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a02f1f2d-72d7-43f2-93b9-8c347e799539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74fe49f4-ca33-4964-9562-52d248ba10ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3c5c6a-ecfb-4f07-9f73-7677dba3c326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63bb3173-0817-4519-a6de-fe30d18fae16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2582bb1d-4b23-4fb5-a86f-a72f62a22b06",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6a8a54-0f34-4fb1-98c3-38badb7595e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f803ccea-1ec2-4573-8037-259c0a3b32bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33140e8e-a124-4bc4-9837-6f3ab03d2d0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f101475d-6820-4fb9-9ece-f1f64a8e13dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905565fc-8d87-4a6d-8971-290c24f69554",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee6ec33-7aae-400b-9687-bbf05298be6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f31334-d7d2-4476-bc57-3d62e580e011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad515c9-e67e-49f2-96c2-4df475d047cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930973f8-9029-45d6-b780-25ade53ba742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeaea292-50c1-49ad-94bc-68acccacecf6",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d49f0a-ef84-4578-81f5-edf8fbf3315b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0607a07d-a565-499b-a185-e09af96c9c85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "477c3370-4696-4164-8be1-fcf59f20569c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13977122-28b7-46b1-b2e5-8ab2cb64b0d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31cae93-1bbf-41b0-9739-5e7ea6f0012a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2342ab0d-dd13-4b39-8845-12a2986b2840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "005aeb23-e62b-4003-93c9-9e3d9fb088a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c9f97c-3d32-48ae-9516-cf4d5fd0d1fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b200a4e2-cb01-4bc4-a2b3-3a2061996709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085cd9ac-b45f-4b95-b6a4-ce90bbb73889",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159069c9-d1fc-43f8-b3d6-26e9b2dc2f00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0438f5b4-8d17-4b95-ae49-a6ec4e27bda1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "176a5f74-0e0f-46e5-9be3-0fc577ae3399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b602c23-7959-497d-8c24-fd8590a3e9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000b741c-d92e-4da9-bc33-14031d12d941",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110e9071-88f4-436a-a457-a03f893bc63d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ccf4a8-5351-477f-bd8b-d37d7cf210ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51be9259-dbf1-42bf-b71a-4f2309a9a5dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54016a30-d940-4890-85a6-950c393dfd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f78e755-e98a-4d93-ba88-e55f22bbd1a5",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20e854a-ae95-4a82-afbf-041f16c8bb05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "082a5470-0064-459f-8a73-2a881eeee205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29571377-2f58-4536-8c3d-8b22e9cc7f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8cd6b6e-0015-4246-a69c-9e1057ac88fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80075e8e-9380-4d3b-b5c8-30d05e6d0050",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56782736-baff-436d-be28-40b147a0137a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aa57fea-0c04-4aad-9c81-3e94dbf62b37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db638ba-09e5-45c5-b4fe-2f92850b49ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a81125c6-22ef-4ec9-9c8d-ba30d67bd757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d50b74-7e24-4a62-8781-efe7de525e57",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa48833-64b2-4da9-abab-f6b27bdc4092",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c735c8df-f2ba-4645-bd7f-5aa2eb0dd2d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86bcab6b-0661-4349-8d3e-acf9b36e95a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65b32317-892b-421a-94aa-27eae599a6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d669e6-94c0-4c7c-b5ba-ca8f7cddb7f3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb4e1ae-4d61-4b6a-9ad4-f966494bdd22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89c7fdc3-6076-47a9-a76c-71e0e8f09988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ba1413-eb69-43ff-9b70-6cefdf5f3336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1baeab67-f9b4-42cd-ab1c-1f14ed1cc28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e72536e-4daa-435a-825d-dad932215a63",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54401016-be54-4326-bf7a-6e4aac88bce0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "270d146d-0547-4fc0-ae02-ad3d94a738e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9802e6-8f97-4c0e-8156-8a6702589d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f82bac-bcb0-49ad-815c-84aa0470a69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754f7509-9534-4247-b138-29c541501011",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e391aa2-6b1e-4946-9141-c39b66934219",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57bbc313-47a5-48f5-ab43-f537e580ea0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c91dc97-c30b-46c2-bdce-4b3fa832e284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a698ca0-531f-4cd2-87a6-769916ebc94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fd7b54-814a-4638-98b6-9d6af46cbd22",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc524d86-882f-4998-a742-cc70ff952c24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b90cede-f79a-41b6-b1db-a5418d8fd82e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "672a9d76-b631-45c5-b68c-7b7bf57af9e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be1d1a12-ee3d-448b-afdb-ca9df9a0b15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b9388e-51ee-446a-88f4-086bff239fb2",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad7cf44-6549-4d71-8652-c5a9f8fc5227",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "982c4ada-0f02-4488-8693-a9b19235093f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89bc5ff9-37b6-4012-a4a3-a72946515bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74bedaa4-d957-41fe-a11f-97d7e3e39a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddfb2b82-23f7-43f7-8442-414558d1fc0a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a84a4b-ab08-463a-9168-9ee2a033de99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68d20bd6-5d57-488a-a728-aafe04b72cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3a81cf-d4c6-4f2f-9fbe-a0a2cc798407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be91111-9e60-4ecd-933c-214b71932694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95afcb2d-0939-48fd-91a4-0cbdc5f6f443",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530de3d5-820e-47da-9656-6eb8f905ccae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7270e66f-15bd-4a83-bffc-282bae701cc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "747aa482-5dd8-48c8-9360-97df40c7f324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d5997c6-5497-4da8-a408-0523b6e4c394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0667c9-e2d0-4179-8276-52dfe5fea24a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584b6bcf-707f-4fa1-b3ed-5acca1ba76fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2113b63-23c5-477d-b960-d4b14ef8bc72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf40ac6-995e-47ef-a273-85c3d2262db6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8722f8c5-7cd2-4967-88b9-a65483385ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a97978-94df-45b3-b89b-4d2fff94a63b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67fc6bba-cfbe-4312-b302-1051e96c5bbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "323184c6-e9bd-4a67-ac24-bac7e8911dfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd684f7d-1820-4cbd-b568-ffb6d80b32f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73a44c5e-1f13-4a5c-945b-4063252161a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d32dff-e706-4e1f-b844-b2b2f58e1229",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26502eae-8f60-4fc1-be2c-6aeb916a72eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a03df038-b26f-4d88-b05f-08029bb1604d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fda6580-8111-441c-bc0e-01aa37d49ae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b4ef29-5c3c-4ab7-9933-aee4cc68c556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ba77f3-5f0b-4f87-9757-0121b32ad940",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcab9899-4cd1-4e4a-8fa8-8a56bab2e59c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "770c9de8-fd77-470f-a201-39f76695e70a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbe18f7-12d6-4881-a050-e9f283d367cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca16036-9098-4caf-99e9-79eee6bc1264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5892f5cb-61cf-44cd-8795-d9d3af89e768",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d113f1-3889-4c94-9005-ca17bf4c45b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "370ff679-a2fd-4984-9bcc-45e23409e02d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc29ab25-7fed-47da-a40a-2862976306d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cd17b5d-aef4-4a16-a0cd-bcbd120210cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2bbe67-69c8-4aa3-8728-09f32ad29d1b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9d9eab-551a-4bb1-970d-8f4b11b7fc77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80043356-2121-43de-82f8-66331030b030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88776c3-6c7a-4351-9b5a-477eaffbc38c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea4ea098-f247-4ae9-91d8-0164e989c03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938eb48a-5f1d-4750-aed0-fecccc8e7b4c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310af1f9-67af-45c3-b380-eb99d202562e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f00791c-8e57-4e9b-bd8a-24c8cd28e9bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a9b4e8-67e5-4091-be00-2869d0d640b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39fd929d-5949-4d6e-993d-513d8fa0f946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d361b1-1968-4af0-a03e-fac3cb803ba5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a18a82e-5bb3-4326-92da-7bdafb7572b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce63fb4d-1686-4c7b-abdf-5c5fe9daff33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed0d36e-adf9-414b-9fc1-55a07eb2b5da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "011a0bcc-aa03-4767-a38c-02a3db618b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7662d223-e499-46b0-83a2-33c6899574c0",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d16241e-e0cb-48fd-9084-4b2c2f00ed1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7d13ccd-e268-4122-ae49-6050d3e3ced7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "193ae6ef-59e4-4d7b-a8c5-bd18ec224215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af9f20a-a945-4707-a12c-2e8a94f877bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835f1e75-2742-417a-85d4-1bd0b298f57d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4373a6-258f-4d67-a388-9d4a779e709b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d264d1c-f6a3-45b3-aa0f-dd04004cbfae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3191964c-d902-41ee-af17-4a4243d76652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f427267-82c1-4858-a708-bdd30b604a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84cebdab-740a-419b-8b92-84f8ca8ae755",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67cc473c-fe65-4e6b-9195-43dfe9347262",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e6082c5-44d4-4057-b233-8376919c871b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32d78ac-6caf-43f3-b108-35df2cb21f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e00330fc-47a4-4d70-a24e-7795779b34bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc99d89-4110-43c2-af91-47add0e96706",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e60099d-8f6a-4054-8d01-0daca980627c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cacc8c1-937a-4db2-8e8c-efde5526bfaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a78b6b-f0fc-4fde-ace7-b13d0c5409b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9640411-bbf8-43de-973a-ad8921b7ecdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f456ef-5530-4529-9176-e372b20f7eae",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa06e071-f569-48c3-9d9a-bb41b41de424",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fef21768-8a38-4a8f-bc42-485ffdd8d0ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22dc208c-2d52-4957-a9ae-4f63fb9d4b0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a910f6b0-226c-4dc6-807d-d4cb42745b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2425065a-ec78-4fb5-9be0-1b50b3fad2b6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78d9303-e949-4822-bea6-a5ffee528a3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a63b0a15-66d6-4a58-ae7d-d7f9cf385328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac44235-50c6-4dd4-af61-7c694949c1c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b73d9af-fc37-4233-b447-cbfcb1ffc197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4bf4e9-fb1c-4aa2-9c1e-8c58627ce41e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028f4536-fa22-418a-a7eb-9fac6cbba1f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af997918-26a3-4495-b03b-70ed8d8f1e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "392391b9-80c7-420c-8dec-fff0fce0850b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d44f43-0a1d-4d3a-999f-beb341f616eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4def6a87-50e0-4b72-98da-d97da1567430",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a2e29b-08c6-4171-a1d6-6fa0e31cf693",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e769a177-a99a-47c7-a619-707eb854c879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d0d1e8-9225-48e7-b224-a3ccf29cfe3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc61f2b-bae3-4652-aa41-d52a69cfc72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af80aeb9-de50-4dd9-9021-a7f7db227216",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6314c085-4c76-447b-9f67-63d7f0640eb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c590b500-33a5-4090-b380-26d7f57ffeee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc99441-a519-415c-b53e-86116a389fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22cdd40e-5f30-4ea1-91df-f1308aac2839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9b130c9-f0f7-43e0-89d0-3c277f93c520",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e5d259-55fd-4f37-9cb7-00320097a59b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aff8bf2c-8959-4456-9db2-a05da4f3dbd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6b36c9-699b-4736-aaf5-f72aaa89a4e5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31378d15-bc90-41e8-a2da-44f991d5b33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877f61a4-0cdb-4c77-8419-a7d4c64ec50a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f772facc-4174-4121-8e36-fa358711f21f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b28dde0-cc92-4694-9459-0eb7aa90b187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0661bf-cbc3-4cf4-a69b-42041d7127ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa894eb-44dd-4c4a-9435-45a3b4e55d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a820c003-25dc-402d-8a07-aa45c76c479d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ded999-a3a1-4e72-be17-5eebd607d675",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "535da9c5-e977-4251-b0f5-b47066f47ab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3cc2d4-bb43-4fc5-892b-b97a04f0dbc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a716db2d-26d9-433c-b016-645c1b1eee11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189eabc2-5e89-483f-ae33-8fd3c3733354",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431f42bd-c557-489e-9d35-1f75ce5c42c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92acaf2a-be7a-4b1f-9fcd-fff2ef287462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49152ef4-5882-4068-a228-6e2a24a13354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f27f07-59bd-42bc-a757-c4d5a57051a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026c1e00-7fcc-4270-95a1-2006dff73acb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7ecfed-a91c-4768-bfc2-a429da2c50bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2949ac87-50ff-4765-954c-c6a68db2abd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e53fcf-7d7b-4050-8d28-cbbce2bc2ab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e845ae94-7baa-45ba-b59c-f1b1f10c3aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0ab683-f913-4327-b410-1cca3d0cac5c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5582441-dce3-44d8-83ce-da9a7e4db63a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "549a8e85-fd37-4547-ac34-04b417c1becf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c65a40fd-008e-464b-8e7c-dc68f5af80d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "591f2e9a-8181-4324-95fd-e0d4ed1e2bc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b6d8b7-d451-4e37-8f89-a88d246bb0f2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76878dff-2459-49b4-b317-882e936ef01a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89241649-dca1-41c3-ba56-3e41e532bde8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d862b04-8467-471a-8df6-9ae764b609cb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9243841f-d0f1-4bf2-bd53-7f506cbf269e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7af5cec-dcf5-447d-863e-657c5c5907f5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc81d70-aa75-4579-bafa-81e799f4ac2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbda605c-5355-4e7d-abc8-52e06cf9307f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b682d338-d84c-4d74-a6bd-7011c5144a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4461f3d-f75a-4bf9-bc1a-bad97711061e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18a4637d-5e68-4035-9629-b0d7b6602be0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "982882a8-1f1e-4f3c-a431-bf85eb5d098e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8e7b439-3c8f-4ecd-b46f-45e795285b1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f8db500-963b-41fa-8f96-61b009ceae37"
                    }
                  }
                ]
              },
              {
                "id": "70ecb863-8ae1-42ec-9849-6f8b0045faf8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "17b08371-ab65-4818-943f-dcef0a5a8b8e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2b9cc4-fa23-42a0-b878-19309f9d3fa4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c6fb9413-dfd1-4451-b81d-64e88c513399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd9c949-3968-4837-848c-85271d4186cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8a0b8fd-0f59-4ab3-b732-36ab577f13a5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf6cdcb0-30f3-4fd4-a0e1-3a0870cf683b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fddfac56-a576-4d6e-8bc9-cacfb125b336"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2a99a6b-b40b-46af-abaf-7daf7e451129",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79c4bd86-ba5e-4d84-a09e-b4ea56dcece5"
                    }
                  }
                ]
              },
              {
                "id": "395be498-e82d-454f-90bc-9f82948c719a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ba3e0d57-e68f-4bf6-8f96-20053fcf8ff6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e0a601-5053-42fb-a2ee-fe416e614f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "bd08abda-68ae-4da7-9f29-f9141d797b7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccd06f8-a415-4704-a487-ecdacf8604bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33647542-de41-45ed-be4b-13d0c0069c6a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "407e8139-d721-4036-abeb-1ae42874e0b2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0b3e53f1-cfa1-420b-8076-24418c1658fc",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9035d86a-2679-4b1d-8557-eaff68942245",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a5ecb62d-7800-4060-80b8-99d45d1a01a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "588e7ebd-6fbc-4de2-8737-1090f74a3c74",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7370ed24-bc2e-4d84-a280-fbdc69197850"
                    }
                  }
                ]
              },
              {
                "id": "54205cdd-b21c-41fe-8acf-5c6614587da3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddea8398-e27a-4c52-a185-aa3ca243c87d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f506f0fb-f6e5-4fda-8ecd-0764cfe00b5e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "559ba0c4-c9f9-4748-86a5-361381790ad8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a4b7b94-80bb-413f-8620-6063adca80d1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91e8bee4-cfe4-459e-bb7e-b8a5aab8280b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "439bf463-04c9-499c-8b42-20aec0f23a96"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f704b3bf-24a4-4347-905d-4f7290bdc6df",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0da93fd6-5a38-4942-9980-922875057048"
            }
          }
        ]
      },
      {
        "id": "47bf833e-4b2f-4000-ad61-34f629e56d8b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "06146c24-b2c4-478c-b946-ebdc941ae4f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8be32194-4c78-48fb-8926-94e71831b092",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d20d9e5-c93f-4219-a186-22e1bea646b5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84afec8a-ff66-4c89-8593-418b6d92922c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bb82b022-7872-4bd7-a8fd-7279e647b7b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d80cc9-4c46-4190-a9ca-afe5f0ac6695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "075415ad-a1bb-44a9-a24a-dfccfd186d2f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70e54a7c-987b-40c7-a221-441b19759da4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed79bf64-e88a-44ab-8e64-bb00bcc0b93a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c25c3695-7073-469e-8f50-d8cf11524894",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "772351a0-1b61-45c9-8199-ac84344d2e47"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40b160d5-b8ad-4cb3-a8e5-227fe44c5fbe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dc867fd2-ee7a-430a-a685-81c5e6c96458"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8bcdf8d5-bf81-4531-a0e5-ea8ee485921f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ed1903b-08e2-414d-8257-70d68dae9956"
            }
          }
        ]
      },
      {
        "id": "58230c0f-e944-4a35-94ec-51f8fa4bd98b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1877e3ad-2a57-420e-929c-8072b415dc4b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0cf51233-a08d-4b87-8adf-ec4934ef2c28",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "95d06c65-9a2e-4fdc-8bbf-d6ded0bf12ff",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad57ce5d-f29e-42b9-be1e-499cc411d7ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd58deb6-d850-4fbd-82f2-d04f8d47cfa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1aa6401-8eb4-4c55-ad76-674ded21718d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d30ea3e2-cc15-4482-8052-2c74ee22f894"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40e8d7b0-e9dd-4213-9128-3f2017f73f8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1235935a-37e0-48cf-be30-d4bc64df7b8c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "00d1c3d0-48b7-46cb-b8a7-925934117767",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ef59652-ba03-4616-a7cf-55925658f31f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "331f27e4-7193-44a9-9cdc-2cfdb00ecf4a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "85a1c0a1-6249-4207-bc3f-f4abee10058d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d3d2869-cd84-407c-9129-febcba8159fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e9d117d-6e9a-4816-937f-b82e6343fb0c"
            }
          }
        ]
      },
      {
        "id": "e15f1b76-56eb-4c18-b943-c33df3a2db28",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "30a020c6-18a3-4a0c-822a-d6f122a8af5e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2fb0b886-ed21-4afd-b193-fc88d6f02e97",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aa5109ae-5503-4ca7-9586-f624e4622060",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba03268-fc09-4464-a659-bcc43b81cf54",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1aa5d89-a580-4a03-945d-5b7084af9365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad081b4-140a-45db-82d1-386d8e8ec827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee281aaa-6542-4171-b344-29367554f3e5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f91f325e-a29f-48e5-a97b-2ee8eb35c386",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81d42b13-2dc1-4ba1-a7b2-3828c7f5268b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "828046e9-f81e-4da5-877a-9cdabbc3c09c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6417d16-758f-4cbe-b71c-5fc47515e786"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f5d6d55-221a-4f05-998c-76b982edd820",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f1f788bb-078c-4037-80cd-6f0a492f35dd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "27bae927-2669-4223-b99f-d49affc94722",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc1766b9-f932-473e-a387-6551048130ee"
            }
          }
        ]
      },
      {
        "id": "5ae9b7b3-c5d5-4237-9ba2-fdc6fa658d9d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d34b51c-e5e4-49a0-94ca-dbbf86715f87",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "991ba8f7-99e3-4f33-833c-b7e247a87e7e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "cc7efd81-8efa-4b20-9589-ff1f61d97ed1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e67071e4-3461-430b-9a47-2df374a03478",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3306dfe-dd82-4e35-85ed-993ce9391163",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 75.78174603174604,
      "responseMin": 6,
      "responseMax": 639,
      "responseSd": 78.747713396678,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1714610123365,
      "completed": 1714610150766
    },
    "executions": [
      {
        "id": "89f2521e-e295-4a97-a248-43b523622c63",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6c9d2ebe-eadb-4ceb-ac13-94c6f1a43dfd",
          "httpRequestId": "f2c3dff3-fd2e-44f9-8528-18937fa5229d"
        },
        "item": {
          "id": "89f2521e-e295-4a97-a248-43b523622c63",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8eb517d8-43c5-49fc-bccd-5b675552f362",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 0
        }
      },
      {
        "id": "0c49c886-57b6-4ad2-99dc-d7c79b863b32",
        "cursor": {
          "ref": "0407a539-9ceb-4bf2-b7ca-6126e31c55ae",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7612947b-9172-4f63-8734-9c10bb342e6a"
        },
        "item": {
          "id": "0c49c886-57b6-4ad2-99dc-d7c79b863b32",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "90ff8320-1c98-43f7-872f-a8f8baddc282",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "cca60503-9072-4c2f-9aee-ba7e145a7696",
        "cursor": {
          "ref": "08c40511-a18e-4c5e-b5ca-d47adc0a9e12",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1f7289f6-775b-486a-a283-38cafc7d6284"
        },
        "item": {
          "id": "cca60503-9072-4c2f-9aee-ba7e145a7696",
          "name": "did_json"
        },
        "response": {
          "id": "3efa0414-1554-46a6-837f-e572ac9c9b58",
          "status": "OK",
          "code": 200,
          "responseTime": 196,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd0b8d8-8ff0-45b5-bf65-c35dadbd464f",
        "cursor": {
          "ref": "499d5fd2-39a3-4794-b974-270e8fa70126",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "769e13d8-1bbf-44f3-8a43-8074777007bf"
        },
        "item": {
          "id": "3bd0b8d8-8ff0-45b5-bf65-c35dadbd464f",
          "name": "did:invalid"
        },
        "response": {
          "id": "33123840-4d62-4feb-ba20-f27dae981938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd0b8d8-8ff0-45b5-bf65-c35dadbd464f",
        "cursor": {
          "ref": "499d5fd2-39a3-4794-b974-270e8fa70126",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "769e13d8-1bbf-44f3-8a43-8074777007bf"
        },
        "item": {
          "id": "3bd0b8d8-8ff0-45b5-bf65-c35dadbd464f",
          "name": "did:invalid"
        },
        "response": {
          "id": "33123840-4d62-4feb-ba20-f27dae981938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76442b9d-71fc-4c00-a69e-dd19bd46a952",
        "cursor": {
          "ref": "0fd5809b-0383-4491-a13a-95d060f7841f",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f2eb7c81-1372-476f-93ad-80c4eca828ad"
        },
        "item": {
          "id": "76442b9d-71fc-4c00-a69e-dd19bd46a952",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "023067b3-6ca1-45ae-9c23-45c20e758381",
          "status": "Not Found",
          "code": 404,
          "responseTime": 100,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f0ed29-afbe-456a-a721-4c4a86b93bbb",
        "cursor": {
          "ref": "26902942-5636-44c6-a829-5f0b7e574e90",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "86d8fbe1-b763-4901-bf21-edecc71be05b"
        },
        "item": {
          "id": "90f0ed29-afbe-456a-a721-4c4a86b93bbb",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f2ba2c02-c7d6-4a9d-acb3-bab76ab8e02b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16f2447-d5b5-4494-ad7a-5059a78a6326",
        "cursor": {
          "ref": "ae72dc73-25f0-4d8c-a9c0-7dc4fdbdd70c",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "24997b52-d750-475a-99d6-f39cec46263a"
        },
        "item": {
          "id": "a16f2447-d5b5-4494-ad7a-5059a78a6326",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "caa21944-319a-47d8-9507-a99ff8b71b03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3057ba-9f45-4d23-9687-2e2a25192c2a",
        "cursor": {
          "ref": "c93baf0c-6542-4b91-92d9-9dd15d799fbe",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f1b54058-9afa-443b-9e58-b74b886df54a"
        },
        "item": {
          "id": "bf3057ba-9f45-4d23-9687-2e2a25192c2a",
          "name": "identifiers"
        },
        "response": {
          "id": "83587556-a91b-442b-a2b9-5eced33b86a2",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c18f2e7-9bc2-4573-9597-bdff97f2a2f0",
        "cursor": {
          "ref": "f9a95222-71d8-4bcd-81c5-f6442e6b15fa",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "76c03b67-79d2-4197-8779-cdc084a0b927"
        },
        "item": {
          "id": "5c18f2e7-9bc2-4573-9597-bdff97f2a2f0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "78fe62b4-2043-4e11-867f-eac4ecbf170d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd49d9aa-74f4-4870-9dd2-925e2eb83cab",
        "cursor": {
          "ref": "dab2344c-1895-40b9-bcca-7bef5dd50b3c",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7aefcb9a-8e98-4e4e-9d3d-be695d477492"
        },
        "item": {
          "id": "bd49d9aa-74f4-4870-9dd2-925e2eb83cab",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a66a0faa-ac7f-42e2-8f8c-7abc8b94d4a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8b18fc-b4d8-4676-9bc0-398cab868cd5",
        "cursor": {
          "ref": "8d309f70-9a4a-4832-8802-6909bb468deb",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ca0cb3b3-458c-484f-91b2-933d27da15eb"
        },
        "item": {
          "id": "cc8b18fc-b4d8-4676-9bc0-398cab868cd5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f57be7e7-a58b-4e59-bee8-c0ab08d9fc91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50794d5d-9061-47b1-9d1f-a3802a34ec17",
        "cursor": {
          "ref": "b2511382-3bb8-418e-9cd0-d2c61d93e938",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "402d6c48-630e-455b-a274-6463e3c11b06"
        },
        "item": {
          "id": "50794d5d-9061-47b1-9d1f-a3802a34ec17",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "174c8197-0113-45d4-865d-ef9e55359c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f778e5a7-81ea-4683-996c-95f1d7312c2c",
        "cursor": {
          "ref": "49cb1eb4-23ef-4c01-b7bf-3780e651fa61",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9637fd12-f4f0-4955-a8a0-e983110f7d8c"
        },
        "item": {
          "id": "f778e5a7-81ea-4683-996c-95f1d7312c2c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "cc0348c1-3409-4b6e-b438-97f6c7c8000a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3f7131-29b6-442f-908c-19c640551465",
        "cursor": {
          "ref": "0a710fc3-38f1-47d6-9852-b1b4c9e3b49c",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "90711cd6-ed71-4c2f-b6b3-72bfe90bf5b8"
        },
        "item": {
          "id": "9a3f7131-29b6-442f-908c-19c640551465",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "73d3dd16-e9c1-49a0-822a-712d0e5d9315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44e03c4-5665-4b92-8ce2-b7fe32232ec4",
        "cursor": {
          "ref": "e0b69bae-d3bc-4ba5-8aca-d2c30d124ecd",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ccfb5ce8-4684-4a65-8ff6-5a495af627b4"
        },
        "item": {
          "id": "a44e03c4-5665-4b92-8ce2-b7fe32232ec4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2f66258e-32c9-45ff-8d50-b031c3a2735c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8b6f2a-3850-44c1-97d9-7aff3335bbe5",
        "cursor": {
          "ref": "926af736-b45d-4807-ae54-4eb203af2c0f",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c15d7d44-9263-48e0-bae9-ef5ebd22faf3"
        },
        "item": {
          "id": "5e8b6f2a-3850-44c1-97d9-7aff3335bbe5",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ad59f271-9366-404d-a16d-216580340594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a56dec5d-38ad-4bca-81b6-6ce7cb8ac8b6",
        "cursor": {
          "ref": "87949e83-44e0-4a3b-b40e-9e8120e85f55",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0bbeac85-1f8f-416d-9431-23a6da70fc7f"
        },
        "item": {
          "id": "a56dec5d-38ad-4bca-81b6-6ce7cb8ac8b6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "77866d5c-5f20-46e6-b314-49109c614a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b2c2c91-1572-4ba2-ac91-a37f04a8cd6c",
        "cursor": {
          "ref": "0aa6e173-4acc-4798-ad86-cac5f7952e80",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "04b07d69-d4b5-408b-a6b3-ffca5ccf0697"
        },
        "item": {
          "id": "9b2c2c91-1572-4ba2-ac91-a37f04a8cd6c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8b247618-9db1-4474-b4dd-359889d11aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd1d97a-cad8-43dc-9e27-0a2aae658177",
        "cursor": {
          "ref": "e740f0e1-1ed0-4899-81a3-e690d268895f",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "940100ef-aa31-4e10-bf8b-f63357936465"
        },
        "item": {
          "id": "6bd1d97a-cad8-43dc-9e27-0a2aae658177",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8d7c5a46-1201-4ba0-b8e0-e754a99f35df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38535d59-2c9c-4046-8ec2-abd15ca3d628",
        "cursor": {
          "ref": "a392e609-41d9-4ad9-95e5-275a93e5d4d0",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "94993d87-82c4-422d-ae70-cc9694155751"
        },
        "item": {
          "id": "38535d59-2c9c-4046-8ec2-abd15ca3d628",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "79700952-f671-491b-a5c5-018ca3c414d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fa2b54-d856-4e82-9465-aa01b292ecc7",
        "cursor": {
          "ref": "2263b05f-8d8b-45c9-a700-072114ff253b",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "92447f4f-b2a7-4db8-9507-5ba5efa596b8"
        },
        "item": {
          "id": "38fa2b54-d856-4e82-9465-aa01b292ecc7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "95a52ed3-78df-45c0-9fd6-743e0c28709c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd38ce1-e052-4da5-a87f-865ae0f7dfb1",
        "cursor": {
          "ref": "09c164d3-7faa-453e-b085-b1bcc00a6b7b",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e884cc3c-f370-47a2-a30d-7c8e0b8881c8"
        },
        "item": {
          "id": "5cd38ce1-e052-4da5-a87f-865ae0f7dfb1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "bb72121a-1509-4721-8c5e-a37d7c68ec96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f0af94-df98-4e9b-8fbf-0539628322a8",
        "cursor": {
          "ref": "4a0da494-cf44-437c-97d3-9efd19c7d1df",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "55297a00-1bbf-466f-9c5c-4604af8f99b2"
        },
        "item": {
          "id": "30f0af94-df98-4e9b-8fbf-0539628322a8",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c2879b79-a9da-4d4e-9fad-f3ed9e97916c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7b03c3-cf46-4488-8fc5-cc1e14401f9b",
        "cursor": {
          "ref": "4974f6a1-e7b6-406d-abb1-a3caf756225a",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "390a978d-43d2-4f14-93c3-8497f3250daa"
        },
        "item": {
          "id": "5a7b03c3-cf46-4488-8fc5-cc1e14401f9b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "83af6a46-3a77-4d61-9cdb-7f16ba78c252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61f0ac4-192d-4439-9aca-5e0dace7f598",
        "cursor": {
          "ref": "13b09c05-43d1-4953-afa3-47e0c956a812",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5f340e2a-331b-44a2-85cf-da4e86bdc1db"
        },
        "item": {
          "id": "f61f0ac4-192d-4439-9aca-5e0dace7f598",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9d1ff605-6c56-417a-bfb2-f228920b67f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e0837d-7d94-4804-9de2-f8a447cbf2c4",
        "cursor": {
          "ref": "05ed02d0-95e6-4f0f-8402-938bd2c5fe91",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3918d297-ee08-48a4-9a4a-83496864ff26"
        },
        "item": {
          "id": "a5e0837d-7d94-4804-9de2-f8a447cbf2c4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b68bd69e-5e23-4743-ac0a-09c962e74205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27cca227-1247-41cb-b651-c0b45490cbb5",
        "cursor": {
          "ref": "1825f811-8ad3-4425-a254-04591442b5d8",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6356238e-fd10-48b5-a077-c12e83aac01a"
        },
        "item": {
          "id": "27cca227-1247-41cb-b651-c0b45490cbb5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4402c076-5643-4221-ace1-8c3dd552ade9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7367f2-fe6f-4f04-be14-9ac985ad9124",
        "cursor": {
          "ref": "4fd9134d-d423-43f0-9f8d-94c0fefbd7a5",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "565b1fb9-1bcf-4d0b-95b0-2af24d83e4d4"
        },
        "item": {
          "id": "7b7367f2-fe6f-4f04-be14-9ac985ad9124",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5da28ee2-c19f-49b4-80dd-32e18a104b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c50c001-e3d7-4045-8733-178f5797ab63",
        "cursor": {
          "ref": "2b4f5d23-641b-45ff-aba4-dcc5d1b8f653",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "bbc463bd-71df-4637-9461-2cae02e61418"
        },
        "item": {
          "id": "9c50c001-e3d7-4045-8733-178f5797ab63",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8ba24896-ce6f-47cf-b961-0551dc497d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a048d309-5511-4c01-977f-ddc84d43f361",
        "cursor": {
          "ref": "7a0e99ef-8beb-4ea7-97a1-4314e6c62861",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "cc6fe8ac-78f3-49d6-84ad-89745c79cb05"
        },
        "item": {
          "id": "a048d309-5511-4c01-977f-ddc84d43f361",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f1e93070-04c8-4451-ac03-ce769249786e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a0573e0-143a-4d64-9e9b-de3723a66006",
        "cursor": {
          "ref": "96d94fe5-effe-4102-b393-80a05c85d761",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c64a0e0e-3d97-4d62-b47e-cb96c9b9cbd2"
        },
        "item": {
          "id": "0a0573e0-143a-4d64-9e9b-de3723a66006",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9ef75f45-4755-47f4-a59a-8a73055492e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e9d825-e231-48d0-b74a-51b7b6a376fd",
        "cursor": {
          "ref": "0dea2efd-523a-4c12-ac22-c178e509eb87",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2b8082d0-e0a6-480e-9110-7793a5576a73"
        },
        "item": {
          "id": "e8e9d825-e231-48d0-b74a-51b7b6a376fd",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "10f79e67-6888-4659-91e4-e9ddf437b998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce521df3-1acc-42e1-ad9b-ddb9985260ee",
        "cursor": {
          "ref": "bd36ba36-fd16-4627-b4b0-93639dfc8141",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d8e9d49f-977c-42cd-8649-d5ceffba8f4d"
        },
        "item": {
          "id": "ce521df3-1acc-42e1-ad9b-ddb9985260ee",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "33f3a873-cb8b-4f46-86f8-c5c88a0f8e41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5035111-f1e2-4349-a4f8-07604561e05b",
        "cursor": {
          "ref": "f8c3e237-09c7-4ed7-a824-73cb72965cae",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "77801c21-de87-472d-b1ea-d54876c3a019"
        },
        "item": {
          "id": "c5035111-f1e2-4349-a4f8-07604561e05b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "08c2c70f-3b93-4151-9f6d-949974bab2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7156eb8e-fbc3-47fc-9c53-b2ef6e9541c5",
        "cursor": {
          "ref": "c56bc6d9-1856-4b43-a2b5-e86bd08e6b54",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "10c9b03d-ad70-4359-b80f-daaab301cf84"
        },
        "item": {
          "id": "7156eb8e-fbc3-47fc-9c53-b2ef6e9541c5",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ef40867f-0c03-4cab-930a-d40dc666cb6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b6b3b6-ee06-4aac-ae27-19c66cf529db",
        "cursor": {
          "ref": "a2811e42-697a-403d-8f80-54e96f5df541",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9cd68f1a-b423-4020-81b4-53ef265d3157"
        },
        "item": {
          "id": "42b6b3b6-ee06-4aac-ae27-19c66cf529db",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b150f06e-d210-41a8-bb73-f08663265f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b47e3e-9aa7-48ef-86ac-4e19dc1e871c",
        "cursor": {
          "ref": "892a7498-10f9-49ea-b4c2-d7ac2938e811",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "63eee8eb-b2e8-4fa6-a203-71d461df8943"
        },
        "item": {
          "id": "35b47e3e-9aa7-48ef-86ac-4e19dc1e871c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0277dbc2-81ac-4bf4-b679-24f83b968686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce49a28-7e31-41f8-b451-cf76016505a6",
        "cursor": {
          "ref": "ff39954c-081a-4cf7-852e-7a49a4f8a116",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "76459b4b-5c03-411c-adb9-bdd300aab9a4"
        },
        "item": {
          "id": "7ce49a28-7e31-41f8-b451-cf76016505a6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "58811414-3aae-490e-94ac-45b64e70d70b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f5ec44-36a5-4a89-b827-5f6aadb00bf3",
        "cursor": {
          "ref": "40a0dc9b-cd98-4d31-815f-9082b7bc7d26",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c8093350-28fc-40ad-bacb-3bbe3b25795b"
        },
        "item": {
          "id": "06f5ec44-36a5-4a89-b827-5f6aadb00bf3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e17a4095-bea1-4bb7-82e2-2deb19787137",
          "status": "Created",
          "code": 201,
          "responseTime": 639,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "86524972-3f2c-4084-84fb-9fd432657a9f",
        "cursor": {
          "ref": "788102c3-2c04-43bb-9285-6a7ac0740028",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "fe8b32f1-0ee9-45e5-8bea-d1b14ca3106e"
        },
        "item": {
          "id": "86524972-3f2c-4084-84fb-9fd432657a9f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "570237b1-217c-459e-83fd-7a002498e66f",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7c328333-e4a5-4392-b928-09b42c13e937",
        "cursor": {
          "ref": "e4d2031c-1419-401c-bd17-af1c1b9c854c",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "42b10d29-ce8c-4e76-ba8a-978dcd97e418"
        },
        "item": {
          "id": "7c328333-e4a5-4392-b928-09b42c13e937",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "272d85c3-0f47-41ea-b014-077f1055d798",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "798df766-1332-4103-8da3-b45022255dad",
        "cursor": {
          "ref": "8bb9cd51-2727-47d8-989b-b5a3bbbd04a7",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b1ba61c8-0d5d-4c83-9f83-f67bdb4dc404"
        },
        "item": {
          "id": "798df766-1332-4103-8da3-b45022255dad",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1c677022-b336-42d1-957a-3ae47dce134c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2779a895-d822-4a7f-9ad0-239aaf9d5595",
        "cursor": {
          "ref": "04fd2a40-5dd4-40a0-a24f-0d5deace6538",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "345e6951-ec08-4184-8d79-7c450b9b6f7c"
        },
        "item": {
          "id": "2779a895-d822-4a7f-9ad0-239aaf9d5595",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2b535537-e4d7-4f85-a6bd-064c884c3181",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f3905563-7c95-44e7-9647-53e9ec6cd218",
        "cursor": {
          "ref": "4a52b098-69ac-4347-89c5-91c9acee3213",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "22368c27-1a2c-4b44-8e2f-b8d6109ee697"
        },
        "item": {
          "id": "f3905563-7c95-44e7-9647-53e9ec6cd218",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ce60944e-2c26-4315-b1ee-18e7cd1ad2a4",
          "status": "Created",
          "code": 201,
          "responseTime": 357,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d917c060-e4c2-4858-af66-186b89d70156",
        "cursor": {
          "ref": "90617c2a-8b3d-4c70-ad20-aaecccce01f6",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ab40b72e-d378-46c4-a67f-5d394b84143d"
        },
        "item": {
          "id": "d917c060-e4c2-4858-af66-186b89d70156",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1ac2dff1-3f9a-46e2-a1d9-1225fb09e8dd",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0d4c5d4a-98e6-42b2-afe1-f9fa4cabe207",
        "cursor": {
          "ref": "601abc78-0b1f-4e13-9284-4831aa38382e",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a7fa919e-011c-450f-a9af-98f103516e72"
        },
        "item": {
          "id": "0d4c5d4a-98e6-42b2-afe1-f9fa4cabe207",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ee9e55a5-08e2-4c30-b5fa-4f426610fd61",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "46036734-947e-41a7-b3f6-9ee41cd8f69a",
        "cursor": {
          "ref": "59fe98b4-8c9f-4702-848b-eb12b7cd8255",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b44c0ab1-2f4e-4975-bbed-162db520a2c9"
        },
        "item": {
          "id": "46036734-947e-41a7-b3f6-9ee41cd8f69a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "24228cbc-a5c8-4045-a5bf-d74a733e8d4b",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "07931729-4091-4766-933c-53b25c6eaed9",
        "cursor": {
          "ref": "e7ce76e0-81a7-4781-beb9-115cee9c5056",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b3418107-d6af-4f0a-923e-74a979236188"
        },
        "item": {
          "id": "07931729-4091-4766-933c-53b25c6eaed9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "eb5eeaf3-1798-41b6-87c0-4ce458beb5a1",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e1c40605-0aac-4724-b233-e26d0552de06",
        "cursor": {
          "ref": "a653a2c7-c743-4dc4-88e9-419ae435e11f",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d18493c6-1843-4c88-aff3-423efe8073a8"
        },
        "item": {
          "id": "e1c40605-0aac-4724-b233-e26d0552de06",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "5a928781-5f25-4fbe-81cc-8ed6aad820e1",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ab22d9e0-0085-4131-820f-1373ec1bb634",
        "cursor": {
          "ref": "cef78b8b-8fce-4777-8c48-d2c13acefd7d",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0496544a-576d-4b6e-a820-e31720217984"
        },
        "item": {
          "id": "ab22d9e0-0085-4131-820f-1373ec1bb634",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c2e35ff0-5304-4636-be2a-eabf203535ec",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "09930a38-dce0-44d7-ba79-9b590689be63",
        "cursor": {
          "ref": "8fb4ecc8-d5d2-4b1a-87ba-1f2182dde845",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fd731528-af9b-4c52-90bb-0c7e8493fe5b"
        },
        "item": {
          "id": "09930a38-dce0-44d7-ba79-9b590689be63",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3808ef0b-f863-4f94-9dcd-4d9ec266e6a4",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "de9a791d-a12f-43b8-8328-d664605c82bc",
        "cursor": {
          "ref": "c612804c-54ab-4fa3-99d8-9186e1f59bf1",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "910cc85c-f543-48a7-8a8d-de6993463500"
        },
        "item": {
          "id": "de9a791d-a12f-43b8-8328-d664605c82bc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8a50fdc2-82b6-48d0-afd4-1fbfebf7c345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ab11fc-5c9d-4527-ade0-03e50892ae55",
        "cursor": {
          "ref": "cd1bd02b-1ded-46d6-b93d-216f4bc405dd",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b70c1a23-8140-4be4-b581-7291a1b15b65"
        },
        "item": {
          "id": "54ab11fc-5c9d-4527-ade0-03e50892ae55",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f9844034-24c0-4547-9247-fe3f5687de3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3530223-65ce-434d-a38a-1faaf3ead5bf",
        "cursor": {
          "ref": "b0f5510b-dd1a-4ad7-a838-e28e96678037",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d279c4d0-6626-46bb-8449-47274c6bc345"
        },
        "item": {
          "id": "d3530223-65ce-434d-a38a-1faaf3ead5bf",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fd14311b-8b98-496d-96c4-d611e27775f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d073881-b425-4e94-b24f-507496e3000d",
        "cursor": {
          "ref": "b0a4557c-3d4d-4107-baf7-e2a4e71923fe",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a52fa7c2-31d3-4a64-9910-980f6308de82"
        },
        "item": {
          "id": "5d073881-b425-4e94-b24f-507496e3000d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "583895d0-1625-4557-8fe1-b2b1d583964c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0309768a-59d9-4978-9c6a-49510c96c144",
        "cursor": {
          "ref": "cdd34707-3ea4-4b9c-8c95-1ba1e61e28c5",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "962a8245-f371-484b-9b44-cb5938f4e49d"
        },
        "item": {
          "id": "0309768a-59d9-4978-9c6a-49510c96c144",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b443253a-bfd9-4f33-a6e7-d87c53400976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50735889-fb4e-42fa-a1eb-32e5c3eb52d3",
        "cursor": {
          "ref": "12234a5b-8459-482c-8c73-c753d08254dd",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3ba6df42-3a3d-46b3-aa02-3072c5cdc393"
        },
        "item": {
          "id": "50735889-fb4e-42fa-a1eb-32e5c3eb52d3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "13f82e96-66ff-4285-bc58-fee3416824ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8380dc14-1432-47ff-8952-2954599c5938",
        "cursor": {
          "ref": "083c8b32-170d-4adf-85e0-3ce5a7a8ed7e",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0013b29d-272f-4475-9067-c99aa8436067"
        },
        "item": {
          "id": "8380dc14-1432-47ff-8952-2954599c5938",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4c260a0d-1977-4068-8cd6-0fbac95c2b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef0eee3-2b79-4c97-8089-6469c5c6ae9f",
        "cursor": {
          "ref": "2371a69b-a76c-4adc-a2b8-2b58324fd515",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1818ce2d-20e7-4b90-a073-dc724a7ab4f1"
        },
        "item": {
          "id": "2ef0eee3-2b79-4c97-8089-6469c5c6ae9f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c6a19fd2-9db6-4e08-904d-f6dd2bab32a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9b0bd3b-0907-4b68-8728-1ddd9e9eb376",
        "cursor": {
          "ref": "ccb503a6-4299-41ab-8d24-a7635b3b150e",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "90f71596-7238-474a-b919-41b0ae2a7102"
        },
        "item": {
          "id": "c9b0bd3b-0907-4b68-8728-1ddd9e9eb376",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ec354c3d-ed90-413c-8ea3-489437e4030f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494146ac-8671-44de-9e6d-f85b518bea7f",
        "cursor": {
          "ref": "0cee7396-328a-485a-8961-08be30adab60",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f92bd28f-3084-4f43-8a49-74b7b5ff06e8"
        },
        "item": {
          "id": "494146ac-8671-44de-9e6d-f85b518bea7f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "de5bc6a5-ed1c-40d3-b492-ac9581dbb87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083756fd-0f1b-400a-91a9-3abac08625df",
        "cursor": {
          "ref": "93bc8e2a-a254-48b9-921f-705849dabd7a",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5858496c-0dd3-4843-9f34-ca62a7a76090"
        },
        "item": {
          "id": "083756fd-0f1b-400a-91a9-3abac08625df",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0ea0c31a-eb14-40b1-a9db-13b69639e254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f280122-6ed4-444f-bc6d-98f0e368a7f4",
        "cursor": {
          "ref": "fa807af3-5c52-49e6-aa8d-dcb83a60ad74",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a0441647-6765-4345-876e-357eb9188d0b"
        },
        "item": {
          "id": "6f280122-6ed4-444f-bc6d-98f0e368a7f4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "475da51b-fa6d-4aa8-ac72-f8399c4af452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c635baba-e9da-4d9b-9a22-6debdd22f7a2",
        "cursor": {
          "ref": "a58ef536-8704-44a3-9ec4-f9671e0e14ee",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "69b0d18e-e6b3-446c-b651-4045822dc4bb"
        },
        "item": {
          "id": "c635baba-e9da-4d9b-9a22-6debdd22f7a2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "933b8696-fa5d-4b22-8f24-60903b462e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f1898c-8c70-4d59-8c29-02d694906524",
        "cursor": {
          "ref": "7a45bea8-d48f-4190-8a35-28983d9137a7",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1edf6cc4-5db7-403a-a997-cf7e96ad9193"
        },
        "item": {
          "id": "c5f1898c-8c70-4d59-8c29-02d694906524",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "54ce50d8-6287-4a95-81c7-b4752b51f64c",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "fccfc023-17b8-47c9-8d64-76177bd8b4be",
        "cursor": {
          "ref": "4c3401a5-8ac6-43a2-8c77-eaa41d7e5c83",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bc4c9290-b1a6-4865-9332-e5b93ca0941d"
        },
        "item": {
          "id": "fccfc023-17b8-47c9-8d64-76177bd8b4be",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e148905d-38b9-4c8c-ab21-6ea8bed4f960",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "570242c8-bca1-4e5d-8116-d1f0e1a4751e",
        "cursor": {
          "ref": "2adaf61c-5507-406a-b3c5-076559f16ac8",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d27bf8dd-dd98-48fc-9c9d-370371428e79"
        },
        "item": {
          "id": "570242c8-bca1-4e5d-8116-d1f0e1a4751e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5438df8f-64c3-4671-94c6-7fc8f4d4c048",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "4004143d-c81e-4c06-b811-c7527628323f",
        "cursor": {
          "ref": "323737f0-7c3f-485f-848a-45709fe823bc",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "afd58287-4ef1-4a77-ac6f-da179db27cf9"
        },
        "item": {
          "id": "4004143d-c81e-4c06-b811-c7527628323f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5187a5c2-064b-42dd-9111-3554d8bb2144",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b6b8a2ea-5708-43c6-8a48-fa3ab7d2bda0",
        "cursor": {
          "ref": "40152506-a01c-45ce-a89a-f8b563e0297d",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "381df684-d3c7-4114-8b18-38148bdd955d"
        },
        "item": {
          "id": "b6b8a2ea-5708-43c6-8a48-fa3ab7d2bda0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e424bc5e-6061-431d-9c49-d8761bfbf19c",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b27652c4-25c7-4b9d-9813-fe8ac8b1f334",
        "cursor": {
          "ref": "57697c6f-5ee0-4d0c-88a8-8f9dc4caba54",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "507f3c54-58f7-4cb8-bed9-7f18b2c4e49f"
        },
        "item": {
          "id": "b27652c4-25c7-4b9d-9813-fe8ac8b1f334",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "284802f1-5f9f-4a7a-b12b-27e82f1bf759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b8c305-1fe7-4236-a707-a982e19990ec",
        "cursor": {
          "ref": "52a2886a-1992-4faf-873d-9ae29a0c8084",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "98965427-3e70-4e77-a15d-7393a93d06ed"
        },
        "item": {
          "id": "66b8c305-1fe7-4236-a707-a982e19990ec",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9917f76e-d73c-4866-8733-97053d26d317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128a3a71-8323-45e0-8041-58d6fe34baff",
        "cursor": {
          "ref": "ee319eb2-df94-45dd-b54b-f2eb49e9313a",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e8fa2038-dec1-445c-914d-a6d284430330"
        },
        "item": {
          "id": "128a3a71-8323-45e0-8041-58d6fe34baff",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a2d4da60-a503-4c10-9700-11cd4e729a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200408b7-c96e-4a21-aa50-8b13de332b5b",
        "cursor": {
          "ref": "5c474469-e503-4107-ac9b-f22b5bc6264e",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5740ef74-28fb-478d-ab12-5abb6a06e63d"
        },
        "item": {
          "id": "200408b7-c96e-4a21-aa50-8b13de332b5b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "213f1993-eb26-424f-b396-4b2b51dd9925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "392ad70e-1a58-47fe-9ad5-436eedefa0f0",
        "cursor": {
          "ref": "c79c8c3a-80a0-4a3d-aa10-d7550bddb64c",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "89cf929d-8ff9-4eea-8dd5-d1c2ef63ac38"
        },
        "item": {
          "id": "392ad70e-1a58-47fe-9ad5-436eedefa0f0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b220e328-b1c5-4286-8822-837a83b9c260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0fd23ce-1290-4c0d-9881-6f8308b67180",
        "cursor": {
          "ref": "a5edd3de-688e-4821-8d00-1fb03f0e4f45",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b6624ef7-2414-4079-99d7-1fc21a7e8e0e"
        },
        "item": {
          "id": "d0fd23ce-1290-4c0d-9881-6f8308b67180",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "244ddfd1-5b91-4502-9415-a04e867a3ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5260b83b-9895-461b-9663-b8815e8be30c",
        "cursor": {
          "ref": "3e374a73-09dc-4efb-b12d-a17f6d9a301a",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ed345a44-b7b1-433e-9a9d-718431b12e8b"
        },
        "item": {
          "id": "5260b83b-9895-461b-9663-b8815e8be30c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "831c4fb8-31b6-4b26-b0e0-b1644b434ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cdca27f-99b4-4596-9257-22abe0391d45",
        "cursor": {
          "ref": "26603f46-7bf6-4b8b-b6a2-a9bb51925157",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "493a864a-7b0d-48ff-b3b0-ba71ab3f20ed"
        },
        "item": {
          "id": "7cdca27f-99b4-4596-9257-22abe0391d45",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "72b7e091-2721-4bd5-a921-505ed59b6790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b3350e-cd73-47bb-b8cb-8ec5e2aca65c",
        "cursor": {
          "ref": "ac6f97d0-38e5-432c-8e53-227cc555156e",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "60693922-bc82-4b81-993b-5b4c4bb9efb3"
        },
        "item": {
          "id": "e6b3350e-cd73-47bb-b8cb-8ec5e2aca65c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3c287363-fb8a-47ee-8674-fa889afa8207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1acc962-e667-4a4c-9a4b-dedb5ec3f6e1",
        "cursor": {
          "ref": "d3015b56-9457-4790-be04-ee809f68b823",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "35330160-5565-4ca7-b5f9-b690cc234064"
        },
        "item": {
          "id": "d1acc962-e667-4a4c-9a4b-dedb5ec3f6e1",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "088bf38a-6b19-413b-86a0-208413e1d5be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d3a65fd-0363-4943-9694-b12382614554",
        "cursor": {
          "ref": "affe95e2-e79f-477f-81f9-f86d558fb5ed",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "27932f2f-9a7c-4a00-8c3f-6d641c6ab152"
        },
        "item": {
          "id": "0d3a65fd-0363-4943-9694-b12382614554",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c5d51395-c43a-4d10-8b7e-d6990fbb908c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02bfa33e-14c6-4039-96d6-c09663439a34",
        "cursor": {
          "ref": "661de7f6-4839-48cf-8ecf-069b7070e027",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "64af6824-cc93-4a28-812d-b9345e00ff8a"
        },
        "item": {
          "id": "02bfa33e-14c6-4039-96d6-c09663439a34",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "56c18518-f369-41e9-9989-b610216b58cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f780d3b-b8fa-4c53-9769-b93b0c0cf51c",
        "cursor": {
          "ref": "0d7df4df-167e-4192-9d9f-fec2d6b488c5",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "865378b8-af4b-449c-be96-bf6d07bb33fc"
        },
        "item": {
          "id": "2f780d3b-b8fa-4c53-9769-b93b0c0cf51c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "fba24903-06d6-4aeb-ad28-c820cd090691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331e1a5e-5581-41ad-84d5-905c9b56f793",
        "cursor": {
          "ref": "6efe63db-95fb-4da0-a30b-1c4ac4bf4c05",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "304b737a-904c-4341-9e04-c3a290318760"
        },
        "item": {
          "id": "331e1a5e-5581-41ad-84d5-905c9b56f793",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8817fb41-54f0-40d6-b79c-fec2ee565b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2f9322-6117-49f4-90f6-1e6d6fc11300",
        "cursor": {
          "ref": "ace508ef-6b2a-4d26-bf76-0cfde92bd068",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "91f20158-b7aa-476c-a46e-79abd2c6cf47"
        },
        "item": {
          "id": "fe2f9322-6117-49f4-90f6-1e6d6fc11300",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "23f4992e-c92c-4639-94ea-4ed54c555257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78f4013-996b-4c5b-b285-71b13d34d1df",
        "cursor": {
          "ref": "7cd67a54-ec8a-43b9-acb1-37ba82d56082",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b54649fa-cccb-4905-bf88-2ca192714e06"
        },
        "item": {
          "id": "b78f4013-996b-4c5b-b285-71b13d34d1df",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4a89dc8a-556f-42d3-820f-e6d9d3c19458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2117cb4b-c6f4-405a-a3c4-4c089047d494",
        "cursor": {
          "ref": "95b2fb92-ccb8-4fea-a1c3-1e8748683552",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8f3003a3-12b2-4cdf-ac43-1abb239c3ee0"
        },
        "item": {
          "id": "2117cb4b-c6f4-405a-a3c4-4c089047d494",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a3ffe091-5065-4005-8293-aa5d38c6db0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91e7979-7116-43f4-a3f9-5a3cf70c1935",
        "cursor": {
          "ref": "8f9e1f43-3494-475a-a748-178075590c66",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "de18b18a-74bb-4a7d-b1c4-aca1fcf23980"
        },
        "item": {
          "id": "e91e7979-7116-43f4-a3f9-5a3cf70c1935",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8370fd64-d449-4b9d-a64b-5f1b69e3e05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e8a2ba-6b42-4416-9bbe-e83ffd906617",
        "cursor": {
          "ref": "d91268c5-0e69-4aa3-8d5f-27256b68effc",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f2583f09-3dbd-4dc7-8a00-6aa22d6e2e3e"
        },
        "item": {
          "id": "a1e8a2ba-6b42-4416-9bbe-e83ffd906617",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "638d82b2-20cd-4249-a249-da644e53cc26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c042beda-ec25-4cef-bb51-300f940ebb0e",
        "cursor": {
          "ref": "87af6a2e-5f4b-47ad-b232-cf60fc5f6449",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "449362e1-218e-4ecf-84c4-f59995800c92"
        },
        "item": {
          "id": "c042beda-ec25-4cef-bb51-300f940ebb0e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c8ea187e-b29a-4b53-8306-f938dfcf1d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4837493-cd0c-4b0d-8ed9-93931a454bf1",
        "cursor": {
          "ref": "3f5066e5-c548-41f2-aed7-682fcb5fa1a3",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "dda0f349-420e-4295-948e-cc8aec11c4f2"
        },
        "item": {
          "id": "b4837493-cd0c-4b0d-8ed9-93931a454bf1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6f10e4e5-5651-4f3c-bd05-2fcd068e94f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d215dc1-0ce4-41b3-8e81-96eeb99143b1",
        "cursor": {
          "ref": "86856694-f5e3-4005-85d7-e54ab3afa736",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "dbacf459-af4b-4f8e-a999-7ef16e5fc0ba"
        },
        "item": {
          "id": "4d215dc1-0ce4-41b3-8e81-96eeb99143b1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "95a3d4cd-96b9-4568-8d0b-5bab733e0332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53bb062d-d691-4e35-813c-6e346a70cb83",
        "cursor": {
          "ref": "bf9ffdad-28c3-4c01-a025-8f85bcf01a3e",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "06d650b2-3b76-4f04-8732-784953afd3c4"
        },
        "item": {
          "id": "53bb062d-d691-4e35-813c-6e346a70cb83",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "adfe13f8-8225-40ba-9feb-398d7055f89a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920f96f7-6e73-45fa-b21b-4213753a75ca",
        "cursor": {
          "ref": "0aef4e97-7c46-4801-a663-a7cc829368f9",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3b872ab4-f416-43e2-aa9b-acbaff566acd"
        },
        "item": {
          "id": "920f96f7-6e73-45fa-b21b-4213753a75ca",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "cf5ed061-2092-44f7-b474-28cddaf13a4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc182fc8-8b77-44ed-8d08-2f12ca1fa8a2",
        "cursor": {
          "ref": "a69c2789-b26e-4cda-b7a1-ed18255c2357",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "057d094b-28bb-4890-82a1-b6c3236d178b"
        },
        "item": {
          "id": "dc182fc8-8b77-44ed-8d08-2f12ca1fa8a2",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a06dfc6a-2510-4061-ad86-1c73f4d301c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f090f13-0b4d-4397-b4c8-aa5caf11fd3b",
        "cursor": {
          "ref": "156c1d79-817e-420f-a277-816267010ef5",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "480008e2-e81f-479d-bce4-a7f9a3d9db32"
        },
        "item": {
          "id": "6f090f13-0b4d-4397-b4c8-aa5caf11fd3b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "fe13d23f-5dc9-4cee-93be-b1c45e4279c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9166ba2-f0fa-4436-90f4-09a704c3692f",
        "cursor": {
          "ref": "aadf77ba-00a5-4dab-869f-6566005e7541",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a0e2d90a-4521-4c45-8851-62464938f700"
        },
        "item": {
          "id": "e9166ba2-f0fa-4436-90f4-09a704c3692f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d846cf33-f5e2-4bea-824f-dcb9f05a77d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f939354-b026-4882-bf9e-b8e4bf8e4cc7",
        "cursor": {
          "ref": "7f165d19-9ead-4caa-8b75-7146ae0b923f",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "cc697513-6f1e-4888-afb8-4253e68a3e47"
        },
        "item": {
          "id": "0f939354-b026-4882-bf9e-b8e4bf8e4cc7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b97f64b6-db37-4b77-a5fa-5dbcaa950b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e27fbdd-4e87-4aa3-8836-0d754ec3ffc6",
        "cursor": {
          "ref": "46331d9e-87c2-4ce1-acd9-2e4b74c55011",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "13eb5010-394a-4a7b-857e-e1fe3a36a78b"
        },
        "item": {
          "id": "4e27fbdd-4e87-4aa3-8836-0d754ec3ffc6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2d217863-dd9f-4aeb-9446-ad4fef31d728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b9b17e-adcc-4c85-b6fd-1b357ba1075c",
        "cursor": {
          "ref": "08c95494-4503-45ce-a66d-69811d8b26af",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "08bcb61c-5797-469a-8e25-b8e37e9c84f9"
        },
        "item": {
          "id": "c5b9b17e-adcc-4c85-b6fd-1b357ba1075c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d80c0c03-3ebc-4bbe-8004-dabc0ba89f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b110df5-da86-4447-b9ab-fc0e322972e5",
        "cursor": {
          "ref": "9dbe8e2c-9b80-4010-a801-3f4bb130438c",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "cef812aa-e719-42a0-93c7-e8683ecd5550"
        },
        "item": {
          "id": "1b110df5-da86-4447-b9ab-fc0e322972e5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "45e85cd8-a90b-4d19-a78e-aa58ce797f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3577608d-59d9-49b1-b5ec-ad42bdd9270b",
        "cursor": {
          "ref": "27e5d7af-8ebf-4590-bb2b-767400e1f9f2",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9bc9bb1b-51d0-46a8-941c-abe0a374a2dc"
        },
        "item": {
          "id": "3577608d-59d9-49b1-b5ec-ad42bdd9270b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0fd30417-e024-487a-ad10-3f3f014fcf61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f718238-c081-47cf-8462-b8abc883ba2c",
        "cursor": {
          "ref": "0ae34d67-d7fb-4195-b7b2-9c9087ce764d",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "32930c80-c1d5-4f4c-b951-d070651500f2"
        },
        "item": {
          "id": "4f718238-c081-47cf-8462-b8abc883ba2c",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c269c49b-bbee-429b-995d-f83a70bcb570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "7ad16c1e-55ba-4d08-a7cd-7629b7ddb47d",
        "cursor": {
          "ref": "62e66215-9b61-41b3-acca-c700d9b78fd4",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "842fdb6f-3ed8-469b-bb49-b7fd491bc899"
        },
        "item": {
          "id": "7ad16c1e-55ba-4d08-a7cd-7629b7ddb47d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e89e2fce-162c-405c-a420-3e783b6e9693",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e02a675-e03e-44fe-9e8a-669063b66abb",
        "cursor": {
          "ref": "966806b8-1fe6-4273-81ae-c1814924061f",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2b080992-8af5-43c4-99fd-4f2d9f7a4b04"
        },
        "item": {
          "id": "4e02a675-e03e-44fe-9e8a-669063b66abb",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "250f41cc-3a57-4b3d-887a-a947f2d36ce3",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "37dd4ba6-ef1a-4a4b-8de8-a35cbb33bfcd",
        "cursor": {
          "ref": "bd8fbadd-62c5-4a77-a600-048f1b53d164",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5911d437-e928-4458-bd70-409b793853a3"
        },
        "item": {
          "id": "37dd4ba6-ef1a-4a4b-8de8-a35cbb33bfcd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "88509f4f-8c7f-4e2b-9c1c-f87e95db855b",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07c980c-4c2b-47f5-bdf6-0c022d6e9d7e",
        "cursor": {
          "ref": "9ef386a5-f420-461a-b288-8802db1f6562",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4103071f-d3c7-4f82-b82e-a984112160b0"
        },
        "item": {
          "id": "e07c980c-4c2b-47f5-bdf6-0c022d6e9d7e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0da16d11-0e04-4085-aa70-f3a3aec5ce3f",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3a46a3-25ca-4081-935b-144c06b62063",
        "cursor": {
          "ref": "2775b209-e8d4-4684-be0c-4bb95c7a671b",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "61933390-d6e4-4192-80eb-fcea1b108573"
        },
        "item": {
          "id": "fb3a46a3-25ca-4081-935b-144c06b62063",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c62eb950-6521-4117-b816-6af5d26e1587",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-02T00:35:38.152Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-02T00:35:38.152Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "6b12c9e6-8292-4343-86b3-d09b3fe6999e",
        "cursor": {
          "ref": "806309a3-2fc5-4bac-82c7-421f40ca629a",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "59258dc9-0e5a-464d-bd12-12cab5afc4a9"
        },
        "item": {
          "id": "6b12c9e6-8292-4343-86b3-d09b3fe6999e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "62bcf0ec-c09a-42e5-a008-1f6abd0ff21f",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ecd453-4997-4023-b270-d25c67c52192",
        "cursor": {
          "ref": "5e9d42b0-18fd-46e4-acb0-c5b7ff50744f",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7ab2b7d4-fd03-40aa-9bd6-4f774624ce02"
        },
        "item": {
          "id": "c0ecd453-4997-4023-b270-d25c67c52192",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a844c8d1-30c0-4c93-89de-e02c5bece809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa598273-f14b-445d-b2c9-0b3e2b30e68f",
        "cursor": {
          "ref": "59f5b9c3-d753-4dc1-be18-65448db43f81",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6324d28d-3a5a-4309-9860-079b1eca6bc8"
        },
        "item": {
          "id": "fa598273-f14b-445d-b2c9-0b3e2b30e68f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e0d7dcd2-aaee-4ab9-87b7-31c5ceb5e942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465cb6d7-3630-4a1e-8d34-f3f13b7d1887",
        "cursor": {
          "ref": "fe8e8178-0244-472f-9344-7e1eb6c74281",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "40fcc6fa-91a8-421b-9d64-678695929ed5"
        },
        "item": {
          "id": "465cb6d7-3630-4a1e-8d34-f3f13b7d1887",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "36dd2775-e9b3-4bb6-8ce9-a2d5c22282a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa18a144-8e01-4567-912d-7f20a7377380",
        "cursor": {
          "ref": "d144bef8-77b2-4f64-a791-121586e7f8c0",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "398af116-9422-432a-bb5d-15bd331839ab"
        },
        "item": {
          "id": "aa18a144-8e01-4567-912d-7f20a7377380",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "fb0e2dca-fa59-4232-bcfd-ec65a81b1101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a602d70e-932b-4640-b6bd-1de9e217af03",
        "cursor": {
          "ref": "c790b0f4-db26-40b3-b273-b9cd301baa47",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "68bebe83-c14f-4a87-b04a-d431e4817242"
        },
        "item": {
          "id": "a602d70e-932b-4640-b6bd-1de9e217af03",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "97d1b140-65bc-40bd-90a4-c1fa8239b199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d2b8ca1-a478-4b97-9777-06782799c142",
        "cursor": {
          "ref": "519df963-011a-4404-af3a-9cf5f4f32bbb",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6f78ca21-c1ef-4ff7-82c3-a0769e1e417b"
        },
        "item": {
          "id": "9d2b8ca1-a478-4b97-9777-06782799c142",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "eec3c3f0-e1b8-4b6c-a37e-4828d48fd195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224d48f9-a721-4979-aa1f-c2b27f182def",
        "cursor": {
          "ref": "b6750557-5307-4b6d-a760-aed6ae04606f",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "cf492cc8-f919-4099-8b30-f7cee71d298c"
        },
        "item": {
          "id": "224d48f9-a721-4979-aa1f-c2b27f182def",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d7cb179d-0864-4f59-9169-476b4385a7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55cd2ca9-65b9-42b6-8cfe-8c6b1e3e50d8",
        "cursor": {
          "ref": "0827dd94-9cef-4ba8-b514-a2250eb81117",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "07215d4b-e410-4d44-9c65-f0406aa1d513"
        },
        "item": {
          "id": "55cd2ca9-65b9-42b6-8cfe-8c6b1e3e50d8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "31ee5ead-2e38-4f3d-9396-7a419f220727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee72f76-cf48-4ebe-ac22-91adbb07d4c9",
        "cursor": {
          "ref": "a463dc85-a974-4abd-8ef1-f05568f63147",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "62f4fdc3-c0c7-42aa-9aef-c23f3d7853d4"
        },
        "item": {
          "id": "dee72f76-cf48-4ebe-ac22-91adbb07d4c9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4a2bc330-7560-4906-8749-37b54b9c778a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fb29b5-06cf-450e-afa6-252183600b30",
        "cursor": {
          "ref": "8548b3d2-4a22-4c11-b4fb-9535c75e074d",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9ca1f0cd-2b4f-446a-8d2a-d56d7c388639"
        },
        "item": {
          "id": "10fb29b5-06cf-450e-afa6-252183600b30",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c2fd810e-9781-421f-b3d5-14d753f50630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b610b4-08e6-4e9e-808a-3eae23953498",
        "cursor": {
          "ref": "31d13911-e553-4bad-af5a-195296200fff",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a2e657ff-ab45-4755-b4b6-ad222f32d48c"
        },
        "item": {
          "id": "c1b610b4-08e6-4e9e-808a-3eae23953498",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7c0495d0-9953-4824-8e8f-c937692b2326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56183c55-c3c8-418f-a81b-d22467740ab5",
        "cursor": {
          "ref": "a42f6edb-ab7b-4aa7-91b3-c08620e50b3d",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "657e3762-d043-46fe-a954-d0e318812e7b"
        },
        "item": {
          "id": "56183c55-c3c8-418f-a81b-d22467740ab5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f88886c2-6173-4e20-a913-0f5a5b6854b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7658a6-635e-48fc-abce-130fa26dde61",
        "cursor": {
          "ref": "4958a444-9b3e-4d3e-83f8-942c93436b84",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f608fc21-49a4-4918-9b54-be759de51528"
        },
        "item": {
          "id": "0b7658a6-635e-48fc-abce-130fa26dde61",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e9bfc8c2-4c34-483b-9ee7-40a744a42b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f561d6-ef36-4da2-a604-28db6359ee8d",
        "cursor": {
          "ref": "18155c2f-2286-4925-84e8-aa49d3e1205d",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "47686ef0-2418-410f-b4d9-9bfc5a8a2754"
        },
        "item": {
          "id": "c5f561d6-ef36-4da2-a604-28db6359ee8d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b905ee79-0317-42c7-9e80-30ed06571a18",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2e4af5ac-dbae-49b1-9a9c-62de870322b1",
        "cursor": {
          "ref": "d212018d-3b40-46e1-bb33-541d556a87a1",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d3df40e3-6db2-4b01-959d-21f6fa840167"
        },
        "item": {
          "id": "2e4af5ac-dbae-49b1-9a9c-62de870322b1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9c681a53-4217-4102-9cef-fcfca32fbe95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf12ff3-4f47-41f8-af73-11e5c5a584e1",
        "cursor": {
          "ref": "ac10d49a-3671-4f2b-963a-c808cd9ed46e",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "07afcb9a-e687-44cc-a67d-cefd5803c9cc"
        },
        "item": {
          "id": "ebf12ff3-4f47-41f8-af73-11e5c5a584e1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "511f93ff-36c8-4d25-82e2-98734415a09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660e4188-170e-4a1b-8db1-575f35b05306",
        "cursor": {
          "ref": "d864dd91-0c34-4b33-a5d4-f582d8cd3c38",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7c13f4c3-2106-46fc-ade2-ed756f7beb59"
        },
        "item": {
          "id": "660e4188-170e-4a1b-8db1-575f35b05306",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1fc698f2-e602-4144-b15d-edf87fc49c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b1acb8-c78b-4c9b-8b43-4a600b4856ab",
        "cursor": {
          "ref": "d4dbd222-86a6-42c8-8ba1-b68443a1b023",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "034869d5-e1a0-4f92-8fca-a32c00edfec3"
        },
        "item": {
          "id": "f2b1acb8-c78b-4c9b-8b43-4a600b4856ab",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d1298517-db61-481d-bcb8-69139d1519be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4644bf7a-f44f-41f3-b7b7-ae88991e5f13",
        "cursor": {
          "ref": "de75a614-4238-4f2e-9357-19e37494c3ab",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f5cf675c-0a31-49d2-bc23-5cebdfee7a5c"
        },
        "item": {
          "id": "4644bf7a-f44f-41f3-b7b7-ae88991e5f13",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c83818c5-dd55-4d12-b81a-41e00e2bbddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad32aff2-5fd8-4417-b905-4fe899d6b345",
        "cursor": {
          "ref": "ef726079-8e81-4916-bf76-8e08890fb41d",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "fc0821b0-c57c-4a08-8473-811148b1f787"
        },
        "item": {
          "id": "ad32aff2-5fd8-4417-b905-4fe899d6b345",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e034957d-91bd-48e6-b84f-53993482c827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913d2918-7bf8-4539-8513-67139d331976",
        "cursor": {
          "ref": "249c0fde-c784-41f4-91df-f1bc616a7e90",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6b667785-49a1-41fb-8a55-d458baad5e45"
        },
        "item": {
          "id": "913d2918-7bf8-4539-8513-67139d331976",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "984ab290-9b52-48b5-81d8-2c2de2cf32cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fb2469-fd34-4ee8-bbb4-be556cc330ba",
        "cursor": {
          "ref": "99ecced0-bccf-49bd-88d4-24d6c4f0e726",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bf0931c4-50a7-4348-a14b-5f840173077b"
        },
        "item": {
          "id": "42fb2469-fd34-4ee8-bbb4-be556cc330ba",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "393022e2-73f2-4420-8339-1e2b8415db3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e106b8-ba5f-41ff-af94-aed2139ddbc3",
        "cursor": {
          "ref": "04979684-9e29-4955-b1e7-f70860fb5222",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5837209a-1542-4d00-b238-b6e9087341e1"
        },
        "item": {
          "id": "83e106b8-ba5f-41ff-af94-aed2139ddbc3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "96200aa8-e0d8-4a0e-a8f3-54f2cecbb821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "052c2734-32a2-4f37-aa6f-ddfe44ffd477",
        "cursor": {
          "ref": "9348727d-1139-43b8-b7d9-b0e3baada5ab",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "711d4040-1816-48f8-a96c-49e9cf2645b2"
        },
        "item": {
          "id": "052c2734-32a2-4f37-aa6f-ddfe44ffd477",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b8cd6a3c-2c6a-4ab8-8381-1fba507f9889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e245317-6a7a-4963-85bc-05e50af39d9c",
        "cursor": {
          "ref": "4f29aa76-319b-47ea-896a-67fd3783d810",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4f22423a-c2bf-4e90-9be5-3ebd9936b413"
        },
        "item": {
          "id": "6e245317-6a7a-4963-85bc-05e50af39d9c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9d1a0c20-93f4-437b-ac91-0fad3dc9f1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a29a7c-d310-4234-b61b-06823431eb4e",
        "cursor": {
          "ref": "c3a2ce40-1a46-4a97-a9f3-bb1fc92f2406",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "db2d7e37-9db8-482f-8b17-8b0b4db7d15b"
        },
        "item": {
          "id": "d3a29a7c-d310-4234-b61b-06823431eb4e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6b885736-8cf3-4bcd-ac50-196a67670b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b597b559-4a40-4427-a8b5-251fde356335",
        "cursor": {
          "ref": "48a2a0cf-6e95-406f-b30b-dd0fe88cade1",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d3e523a9-7eac-4ee9-bd7f-db4ecb43e124"
        },
        "item": {
          "id": "b597b559-4a40-4427-a8b5-251fde356335",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c83b35c8-5f7f-40d8-915d-79ee276008cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6467e508-4de5-4b22-844b-072c8b195c4c",
        "cursor": {
          "ref": "df757cc3-6f87-4d16-92b6-63bedd6e6c8b",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9b1f96c2-1f23-4901-8357-c12aa1c051c7"
        },
        "item": {
          "id": "6467e508-4de5-4b22-844b-072c8b195c4c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6ac04e06-05d9-47a8-b30b-8bde08e4b49e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e845fbec-5f3b-4bab-84d9-bffda5b782a0",
        "cursor": {
          "ref": "7a3c3329-da8c-4aa7-91eb-e70fa7ab0c79",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "366d213d-c350-4dda-9066-661957e3ab89"
        },
        "item": {
          "id": "e845fbec-5f3b-4bab-84d9-bffda5b782a0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b062a790-f659-40bf-a016-c3d7d21424f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cdc9a99-25f2-4f62-bfa2-e2972bd546a9",
        "cursor": {
          "ref": "5ae6ff12-bfdc-480f-b1d6-984a1ff45de0",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e0a7461f-286c-4a30-96de-7218c53b5e9d"
        },
        "item": {
          "id": "7cdc9a99-25f2-4f62-bfa2-e2972bd546a9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "79bd02fb-d68f-4f05-8c8a-c7995e43c111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccf655a-96a3-4f75-80a0-d95fd9f0617c",
        "cursor": {
          "ref": "e0028e99-7d85-4cb1-a57f-3709985f73f1",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "538daebb-08b8-4a26-8a7a-735bb822517e"
        },
        "item": {
          "id": "eccf655a-96a3-4f75-80a0-d95fd9f0617c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f78b9d01-96c6-4c7c-97ee-b3d4934b7818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb23566-2b6f-4a3e-978f-729479206458",
        "cursor": {
          "ref": "09137b69-6786-4617-b80e-2d7ec649e69b",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "76ce3fea-d3ba-4149-88c0-48310b370319"
        },
        "item": {
          "id": "4bb23566-2b6f-4a3e-978f-729479206458",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "b9050ca7-e28c-4afb-876c-391db74607a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd25255-f7d5-492c-b155-5c7c9d1f872f",
        "cursor": {
          "ref": "b69225e8-c001-4c4e-8f18-ceae6aa9ddcf",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0a36b023-2181-409b-93c2-a1466018d038"
        },
        "item": {
          "id": "9cd25255-f7d5-492c-b155-5c7c9d1f872f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1e994041-62bd-44a3-98ad-c003d242aebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4d8ac4-2125-4e17-b586-0a0751662c7e",
        "cursor": {
          "ref": "51538687-f5fd-4ef2-8feb-a39b448a286b",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b689670d-1b2c-49a9-96ae-8ff7f2a3b9db"
        },
        "item": {
          "id": "eb4d8ac4-2125-4e17-b586-0a0751662c7e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d7313e70-972d-4d73-b886-8c7a8fd98f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc58c04-e85c-4a8f-b25f-d848bdb88068",
        "cursor": {
          "ref": "5f4b12e8-5813-40ba-a78f-1f135a468425",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ec6f6001-5683-40b7-950c-b2b2bc5c5814"
        },
        "item": {
          "id": "fbc58c04-e85c-4a8f-b25f-d848bdb88068",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "34c2fde0-eaf9-422c-acf2-3fc974d9f293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67af142-2001-42d7-986f-3699596090e9",
        "cursor": {
          "ref": "aff766e6-fb28-4787-88d9-034bd867b685",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ae0f0f56-1e46-46f7-b111-44a16324e71f"
        },
        "item": {
          "id": "e67af142-2001-42d7-986f-3699596090e9",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "25c97944-89bd-4eef-b4db-f7760b26016a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3dd77f-7869-4252-ab91-42eddcaebae9",
        "cursor": {
          "ref": "25562343-dcbc-4a60-bac2-84b664370619",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "086d0cea-665e-45ce-a489-52daf2fd6107"
        },
        "item": {
          "id": "3c3dd77f-7869-4252-ab91-42eddcaebae9",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "e7d73b1c-b26b-4eb9-94f9-a6bf6cc59447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8c78b8-33c8-4d8d-b7f3-8f4503e5d90e",
        "cursor": {
          "ref": "f26b326c-e690-4f1a-97b3-b60786cf6884",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "07254f0c-d129-49cf-a1e8-ab15abfaa0aa"
        },
        "item": {
          "id": "7c8c78b8-33c8-4d8d-b7f3-8f4503e5d90e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "88e85d2d-b5a8-4d71-84a9-31da1bf84abf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510e6b9a-aba0-4d12-a2f8-2055e0771831",
        "cursor": {
          "ref": "373dd889-0a02-4587-9e2d-4f956af6dc40",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "bc7eccb9-f886-4c6d-9981-fc403316ba60"
        },
        "item": {
          "id": "510e6b9a-aba0-4d12-a2f8-2055e0771831",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a4dcba57-4715-4d32-b2d1-7417edfbe462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe010e8d-b6d4-4a5a-bc1b-cc0bcc42d472",
        "cursor": {
          "ref": "050a857b-7f21-4423-871d-e4ae89408d39",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "feea4120-7c59-454a-a964-870256f3542b"
        },
        "item": {
          "id": "fe010e8d-b6d4-4a5a-bc1b-cc0bcc42d472",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0839bc02-b514-447e-bc1b-6523ab356d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769d20c8-95db-4043-83c8-46c761785b65",
        "cursor": {
          "ref": "8aa01cbf-6d0d-44f5-9ace-efb36e6c22f3",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d998fee2-a744-4861-80ad-0518ec926dd2"
        },
        "item": {
          "id": "769d20c8-95db-4043-83c8-46c761785b65",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9a1f71f1-a70b-440d-9d27-0d0642fcad87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5462488-e5f4-496a-9143-c2cdee901cfa",
        "cursor": {
          "ref": "33324c8d-dd7c-4661-ab48-84a30ceb7be9",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "036259a7-cfea-4340-aeca-c569e7d0d9a5"
        },
        "item": {
          "id": "d5462488-e5f4-496a-9143-c2cdee901cfa",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ff076288-a4f8-4dcc-91fa-95685836fab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a31b518-6a58-47a5-8212-d739ec006c6e",
        "cursor": {
          "ref": "56312867-fedd-473f-9853-168d569f164e",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c745afdc-02b9-4e85-b3ec-d8445fea2c9a"
        },
        "item": {
          "id": "0a31b518-6a58-47a5-8212-d739ec006c6e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f5a7a106-ecec-4e5c-bdea-fe38fa47595a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd85c3e-30a2-419e-adac-cc1697a80031",
        "cursor": {
          "ref": "cbcf8e40-6f0a-4e85-aa41-7fd05076a0e9",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8c98fbc8-da01-4a07-ad49-4876785b4554"
        },
        "item": {
          "id": "1fd85c3e-30a2-419e-adac-cc1697a80031",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cdcfa962-cebc-4814-9a2c-a3073740a3e8",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "66f7182c-2f21-4992-944e-7a7aad038e64",
        "cursor": {
          "ref": "b79c8f74-27ea-4541-a095-a6b3b456a3e0",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "3fc678fd-bc33-4568-ae28-6145fce0008e"
        },
        "item": {
          "id": "66f7182c-2f21-4992-944e-7a7aad038e64",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2308e36b-ba10-4602-b553-b1ff51f0b0e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db32d382-090c-4c6d-b206-4354831d18e3",
        "cursor": {
          "ref": "2bd639e5-4065-46f7-a374-a9c50df241ce",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "69656ba9-41aa-49e5-8d85-82d6e76a1827"
        },
        "item": {
          "id": "db32d382-090c-4c6d-b206-4354831d18e3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "27564964-69f1-4027-90ef-940218be3005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca4e19a-a719-44c7-b0aa-6f15c3f59ff8",
        "cursor": {
          "ref": "25b1c4ef-3175-4b0c-bd25-9a735103772c",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "32fa8e53-a256-43a5-a428-e74794ac2162"
        },
        "item": {
          "id": "4ca4e19a-a719-44c7-b0aa-6f15c3f59ff8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "bd75088b-3d01-4d17-84cc-50d60edefaf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eed3757-590d-449b-b160-032e760236ad",
        "cursor": {
          "ref": "ffb382af-c1e4-484e-b91e-f43f6d13d7e4",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8517c583-ea3d-4e1e-852d-254cceeba8ff"
        },
        "item": {
          "id": "8eed3757-590d-449b-b160-032e760236ad",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1f45ee7f-03cc-4166-8765-436e92b7d274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d129a5-fc4b-40a3-ba6a-575d6afd7545",
        "cursor": {
          "ref": "4520d879-16d6-4862-8d86-3be253ed1eba",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e15d9038-4dc4-498b-9d6a-e6abe5e78862"
        },
        "item": {
          "id": "f0d129a5-fc4b-40a3-ba6a-575d6afd7545",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "450d567d-0a52-443b-b647-697632f573be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35838533-c113-446a-b182-fbc83ee7e3ca",
        "cursor": {
          "ref": "0d31053f-0dae-457b-bcde-7316b3d7071d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "fdbd72b1-b313-459c-a90f-0a47caed3329"
        },
        "item": {
          "id": "35838533-c113-446a-b182-fbc83ee7e3ca",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "245dbc1e-0025-433b-b602-3dd16058640f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5418ab1f-9768-42ec-a14b-cc9d3dd82da0",
        "cursor": {
          "ref": "ccc9b5c1-e731-4244-8439-8343f49ed96c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1f9a64fa-b422-4eb4-a671-149b9d8cdc1c"
        },
        "item": {
          "id": "5418ab1f-9768-42ec-a14b-cc9d3dd82da0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "507c34e0-4c52-425e-8dc1-fb023ae64b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8513339-6838-4c3b-b89e-6396a7063087",
        "cursor": {
          "ref": "3560a2ea-53f8-48c1-bb41-6f7ff2e1bc2d",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c2d2abd2-cb65-48dc-b41f-027aee2b26aa"
        },
        "item": {
          "id": "c8513339-6838-4c3b-b89e-6396a7063087",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c4d58368-b5d0-42b3-9b17-c2609fc840ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a767e351-404e-438a-ade1-201426fcc220",
        "cursor": {
          "ref": "a4e87302-8dc2-4289-ae25-fadaa5cf467f",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3af8a434-2729-4156-8f2f-f43ef19047f3"
        },
        "item": {
          "id": "a767e351-404e-438a-ade1-201426fcc220",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ed966656-e2fc-4f8f-878e-6fd702052e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348bedbd-c013-4207-b273-f0e5272f2761",
        "cursor": {
          "ref": "32e8042f-7de4-497e-bc06-7aa7b9b30926",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8869bfda-f65e-4d67-b675-0aa1925e963e"
        },
        "item": {
          "id": "348bedbd-c013-4207-b273-f0e5272f2761",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7edb7ea4-2d73-4985-ae23-5e3cca8822b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9633f3-7a28-42a5-a15a-4f9ccea62274",
        "cursor": {
          "ref": "e077aef1-0a04-4744-ba61-13d196fa9a67",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0d597910-6c58-4bcb-b6ac-cda2dad80358"
        },
        "item": {
          "id": "3a9633f3-7a28-42a5-a15a-4f9ccea62274",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e5f33ad6-4814-4340-ad50-9559c274be2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3525bddc-20ad-4f46-bab5-ac66b625392b",
        "cursor": {
          "ref": "293de91e-4d64-4a1e-90e6-4fe31c5fef63",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d8a3cfc8-fe27-4e0a-b56c-8605b06a81b5"
        },
        "item": {
          "id": "3525bddc-20ad-4f46-bab5-ac66b625392b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8579c258-0a42-4fe3-93a3-e030b3d0557c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd9e57e-8cac-45b5-b15f-0f0fe0a1eb8e",
        "cursor": {
          "ref": "9d3a3d89-c97e-4c22-8113-1329c9053667",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "510ed2ba-c242-4d1c-a5f3-9f121844a248"
        },
        "item": {
          "id": "ebd9e57e-8cac-45b5-b15f-0f0fe0a1eb8e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "76df10b4-7454-4d35-927d-221d7766d16e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "778684a3-7d37-4d0d-8927-c9fb9725d45a",
        "cursor": {
          "ref": "d457ae3f-a1a8-4956-9cfc-10b68b5db14a",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "362a808c-aa3e-4160-912e-469fbb5f4620"
        },
        "item": {
          "id": "778684a3-7d37-4d0d-8927-c9fb9725d45a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "73f5b5be-e1a0-4dca-a72f-b7e994e9435e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5a0b6c-9148-414c-a31b-5bcd989cd387",
        "cursor": {
          "ref": "b49a7380-fb2e-4218-b9f4-88c1c2eab235",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "288caf45-f4c9-4ba0-a133-3c89a46bb4a5"
        },
        "item": {
          "id": "fb5a0b6c-9148-414c-a31b-5bcd989cd387",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "851fd688-7e9b-4908-8515-b040477a252e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed29706-e22e-4cb9-93a2-2593ba360fdd",
        "cursor": {
          "ref": "a5646cd7-2eb0-49f4-b059-fade9414ed27",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "24f4f71a-6a16-4904-aa9c-8b92dbac9584"
        },
        "item": {
          "id": "8ed29706-e22e-4cb9-93a2-2593ba360fdd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "25258038-781b-45bb-a51d-85524a68a3f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "753149d1-cc2b-4c92-b144-eb3195411081",
        "cursor": {
          "ref": "a64a6cde-2cd3-4c7e-9747-ecf056b7878d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "24792fdf-d921-4636-ab24-1d7de86955e3"
        },
        "item": {
          "id": "753149d1-cc2b-4c92-b144-eb3195411081",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ad08e083-8534-4f90-85ae-36eccccfe4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69655885-d7f5-4ac1-9716-a0f743ae3196",
        "cursor": {
          "ref": "543b321f-d0c6-4f71-9e35-d87b380f9fb2",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1597c088-6e5f-4d1c-85c0-2409e74ca208"
        },
        "item": {
          "id": "69655885-d7f5-4ac1-9716-a0f743ae3196",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d68cafd6-cc0b-49fc-a717-da45b15ea2ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1386b604-450b-4bfa-8adf-1ef9d502f0bd",
        "cursor": {
          "ref": "11c9aafc-9d0c-43df-85e3-683d0381fffa",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f444bc48-e186-4426-9049-e0e898d69f64"
        },
        "item": {
          "id": "1386b604-450b-4bfa-8adf-1ef9d502f0bd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8b870eeb-a438-4a44-b60b-62bf079bcdfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfbc7c05-f4ea-40aa-adcf-bb47023a986b",
        "cursor": {
          "ref": "404d47c9-ebb6-479b-ad7b-7c21aa11ae4c",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "935e0795-efe7-46c7-b0a6-762d176945a4"
        },
        "item": {
          "id": "bfbc7c05-f4ea-40aa-adcf-bb47023a986b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "37db6b3b-7098-4fb0-b7f9-25fe7f674323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93454c1f-7f02-4e9e-89fa-76eb66685e80",
        "cursor": {
          "ref": "05fc06f9-336d-41ab-9030-28899af8ae93",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8246a196-dae2-4e2d-939c-4921654433b0"
        },
        "item": {
          "id": "93454c1f-7f02-4e9e-89fa-76eb66685e80",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0f7910e9-07ba-4e87-92a0-9cf640fd51f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a10b1879-764d-4a6e-97d3-c57ef57c4fbb",
        "cursor": {
          "ref": "cce227f0-d652-4c14-91e9-f7da1936f7a8",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "bf48a07f-8f34-4049-a661-973e725e4cc4"
        },
        "item": {
          "id": "a10b1879-764d-4a6e-97d3-c57ef57c4fbb",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d8474606-c559-4184-9c1f-2c72c9dabedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc39356-1738-4e79-b79a-780f2e75c8bc",
        "cursor": {
          "ref": "a68a6b88-e503-4a3f-baa1-fdc881be8570",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "954c23fb-87d9-4df9-be1b-af149f4d2199"
        },
        "item": {
          "id": "6bc39356-1738-4e79-b79a-780f2e75c8bc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f50bcc7d-a5d7-4c61-aaec-1fb2ab761ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1d8446-0115-4dfe-85ff-85c6056a10a0",
        "cursor": {
          "ref": "324f0076-3a3c-4742-b336-2870da364b25",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5522f324-69ae-4ccc-b659-55329f71fe45"
        },
        "item": {
          "id": "7a1d8446-0115-4dfe-85ff-85c6056a10a0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d39e1c7b-2612-4143-8e8b-df42772fc337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6562a2-6a9b-4840-b442-fc24f43aad71",
        "cursor": {
          "ref": "15ebbd47-013f-4246-b971-ee21ebc58f6a",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3982b08d-de85-4efa-a219-cdb84390e137"
        },
        "item": {
          "id": "ef6562a2-6a9b-4840-b442-fc24f43aad71",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a6b88869-f84e-46b1-a7e7-c795c41d8154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf102d3-5e8c-4c5d-bc25-c0c49f7ee305",
        "cursor": {
          "ref": "58a8bbae-e1a3-40e0-97d0-84cb58285145",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "87705884-1532-4535-a874-eaf7faf3bfe8"
        },
        "item": {
          "id": "bbf102d3-5e8c-4c5d-bc25-c0c49f7ee305",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a4371815-de4b-4557-8ef9-cabd346a923e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d3225a-81cc-4f8f-a426-4a35d40e11aa",
        "cursor": {
          "ref": "6a707504-f5b0-4557-a466-846fc4575d9f",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4e9c8ec7-dc24-47e8-b7d5-3b84d4bcfcf9"
        },
        "item": {
          "id": "20d3225a-81cc-4f8f-a426-4a35d40e11aa",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "0f69bc40-c977-4118-a838-cb476e74036e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247b5e9c-fe06-4a1d-a7c9-e19fd9ebaf69",
        "cursor": {
          "ref": "b982d2c7-6c06-4d81-bfdd-443fde6b00f4",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b7daef6a-02e9-45c6-891d-b9fc3f324b06"
        },
        "item": {
          "id": "247b5e9c-fe06-4a1d-a7c9-e19fd9ebaf69",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c499c1cd-efcd-4bc8-b4a8-89be88c3e389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1897f6-cd55-4399-ac77-0e4753bc7635",
        "cursor": {
          "ref": "653387d0-a6d1-4ed4-accf-6bb623230ee5",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e797ae17-67b1-4a17-8372-4801ca471922"
        },
        "item": {
          "id": "cb1897f6-cd55-4399-ac77-0e4753bc7635",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e661aac7-8a62-4158-87ee-965c60261ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc136b6-9124-452a-85bf-d968b43d2fd0",
        "cursor": {
          "ref": "4c448bec-2fae-45fb-8f11-fe2aef411543",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "245a1af5-6fb8-49d2-9ac1-9abfd777680a"
        },
        "item": {
          "id": "9fc136b6-9124-452a-85bf-d968b43d2fd0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e1f9999a-c63b-4c2e-89ed-d8e54bce1ffb",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "eb359cd3-c2d7-44ca-8fd3-cbc303f7c779",
        "cursor": {
          "ref": "a0788ccd-1566-4ac5-8188-30419ccbde8a",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d6b5075f-d0f3-41d5-8007-37431f86eb57"
        },
        "item": {
          "id": "eb359cd3-c2d7-44ca-8fd3-cbc303f7c779",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5b598e00-8e83-43e2-8986-44e23bf7f058",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "62bfa610-f8bb-4ec0-91c1-a46389af7e80",
        "cursor": {
          "ref": "de2618fa-d875-4041-9520-6c06ae2e02b7",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4de7eb6b-81d4-4a4a-b35c-cb66423f9518"
        },
        "item": {
          "id": "62bfa610-f8bb-4ec0-91c1-a46389af7e80",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5288e2b8-d875-43cb-a954-711b5d1223f7",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "ab76fefb-a707-4baf-a305-4ff3b0f0c084",
        "cursor": {
          "ref": "d2d61e11-c671-4068-aa16-9f4ba418ce91",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c84d16ad-9278-4459-8e04-c2eb47a0072c"
        },
        "item": {
          "id": "ab76fefb-a707-4baf-a305-4ff3b0f0c084",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f18235b4-b702-4e44-a166-01a139d69acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c899c772-40cb-4b70-9970-7a32de47c746",
        "cursor": {
          "ref": "41eae71a-e199-4c5f-b80a-b7d83097aaa9",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "87bd4984-28fb-4036-8458-a58f98381ee9"
        },
        "item": {
          "id": "c899c772-40cb-4b70-9970-7a32de47c746",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8d70f9e6-c4c8-42f9-bc2c-19dcb57a661d",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "7ee9d6fe-8a82-494b-b99a-64828f85abdd",
        "cursor": {
          "ref": "1a54db06-9026-4f8d-a7f8-eb63d4df463f",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5b51a48f-ee4e-47e7-9f3c-7eeaa1eb49ff"
        },
        "item": {
          "id": "7ee9d6fe-8a82-494b-b99a-64828f85abdd",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "24ee414f-953c-42ed-80a3-3702a6891f53",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "770655e0-aacc-45ac-b155-26971cb203e1",
        "cursor": {
          "ref": "f8691de6-0eba-46d5-a518-9e35a252b983",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7e78f2d1-0b78-4075-afa7-54b7fb8b385f"
        },
        "item": {
          "id": "770655e0-aacc-45ac-b155-26971cb203e1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4701bbe5-5270-4474-9a34-458e4a0d0aab",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "5ec69959-345d-4ff3-9dfc-037dbaf30783",
        "cursor": {
          "ref": "d2ee0058-21ab-4360-90a8-a32b92399082",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "04667fc8-725c-489d-92b4-a7c5020ee02a"
        },
        "item": {
          "id": "5ec69959-345d-4ff3-9dfc-037dbaf30783",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "32621373-56de-4fc5-b2ac-6a3e06bdef5f",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "30fd68fd-c7e5-407c-9197-a4c8f66d9f1b",
        "cursor": {
          "ref": "d0162c30-4109-4455-b584-6ad505ae1b71",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7629d1ea-29c4-4e6a-b045-d571913fb02d"
        },
        "item": {
          "id": "30fd68fd-c7e5-407c-9197-a4c8f66d9f1b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a9ae024b-9b38-442e-a4a7-6397258d2e20",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "e5c1a086-ab2e-4bb8-9ace-1cdb9d9b5403",
        "cursor": {
          "ref": "b83b40cf-9d07-4d11-b6dd-551973929eff",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4494bd99-9a91-48c5-8e95-c5281b23bd5b"
        },
        "item": {
          "id": "e5c1a086-ab2e-4bb8-9ace-1cdb9d9b5403",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c3183ef6-8f6d-4fd1-9241-8e8a7122e346",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "4ee15633-5008-4c2d-ac83-8b079d8f409a",
        "cursor": {
          "ref": "6425da0c-3c89-4d9f-bca0-90e0a7b80205",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "52b3a10b-cd3c-4ccf-98ef-e4e10395ee9c"
        },
        "item": {
          "id": "4ee15633-5008-4c2d-ac83-8b079d8f409a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "416c8a2d-ae87-4f8c-a79f-9ea9da6bcdae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6350b33-900d-4f2d-b882-c5c57b098f6b",
        "cursor": {
          "ref": "aa32c380-45c4-46f9-9ce7-799d05e52d7c",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b478bf15-5708-40de-a2aa-ef38df72bec4"
        },
        "item": {
          "id": "f6350b33-900d-4f2d-b882-c5c57b098f6b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e9fcc07d-77c0-4c74-a6c7-27593adb3820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2ec4de-4076-4015-8c84-eb076756d27b",
        "cursor": {
          "ref": "5672c9ae-4ae2-4fd0-acbc-7520128d2593",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c9008f43-2bd9-4941-b261-4a2484210d6b"
        },
        "item": {
          "id": "bf2ec4de-4076-4015-8c84-eb076756d27b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b9ebd28a-3a2a-4f4f-9d2f-90f553ef8eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e87a9d-69b6-4f83-8acc-c9acaedc8a00",
        "cursor": {
          "ref": "2fef4216-a6c7-4b3c-9ead-d5277844b7ff",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "607a5a53-6981-4158-b7d3-db22b6e62b26"
        },
        "item": {
          "id": "83e87a9d-69b6-4f83-8acc-c9acaedc8a00",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "716363da-509d-400b-b6c8-82e3f7a851c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a7fa0d-033f-4d84-a13b-ef9892312f34",
        "cursor": {
          "ref": "b80ce5b9-6e30-4ced-84c6-975986e113b8",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "00679b25-30a7-4584-8e26-ded5dfe39008"
        },
        "item": {
          "id": "e5a7fa0d-033f-4d84-a13b-ef9892312f34",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "eec89bfb-942f-4fda-ad23-c53be907402a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2f2769-e325-4616-9568-47e842c58b98",
        "cursor": {
          "ref": "2d526688-6001-4a70-8cd0-f5c0d38381d2",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3dde4ee7-448a-46ec-b645-40975bb3f9e5"
        },
        "item": {
          "id": "ca2f2769-e325-4616-9568-47e842c58b98",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6c221679-200a-4db4-a258-b0cd93564f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ad6f408-1015-442d-8e59-77dc2f8d6f55",
        "cursor": {
          "ref": "419a1735-12da-45ab-9f95-e87bb43b387d",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "62646d8d-36c5-4e56-aea6-7023d1ef43d6"
        },
        "item": {
          "id": "3ad6f408-1015-442d-8e59-77dc2f8d6f55",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "47f50bee-0207-45b4-9b9c-a0f065634032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24d7841-1f61-48c9-afab-bc477ca1b3e3",
        "cursor": {
          "ref": "8a7f41b4-ee86-4238-9187-3d824c831ea7",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8cafb6fb-497d-41fd-b157-7e931ee9ce4a"
        },
        "item": {
          "id": "f24d7841-1f61-48c9-afab-bc477ca1b3e3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f3cce2e5-63a3-4ab9-acf9-c6a23eabb1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02027cf0-9758-4244-a0c8-6047c0c2416b",
        "cursor": {
          "ref": "c15f9968-c6b9-4cd8-b814-7cea13668ad9",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9870bca7-5e06-4c1d-97b7-c4cdbb3759bb"
        },
        "item": {
          "id": "02027cf0-9758-4244-a0c8-6047c0c2416b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1649aa68-05be-42f9-bf40-a7940832006d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c8717fd-9279-428f-8fe8-acf23a212c06",
        "cursor": {
          "ref": "c146618b-fe26-4bc1-befc-23a648936150",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d710b51f-555c-46bc-81f3-b91d8659ff48"
        },
        "item": {
          "id": "1c8717fd-9279-428f-8fe8-acf23a212c06",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7c4c9bc2-3121-47da-bf49-cc95978d7aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01949fbe-b016-4e9d-bd2e-4666e1989a13",
        "cursor": {
          "ref": "235b21ea-cbe8-46f9-8d0c-9efac1da8c78",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ece46e87-8571-4c06-a77d-23b5947812b6"
        },
        "item": {
          "id": "01949fbe-b016-4e9d-bd2e-4666e1989a13",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0709f4a6-6049-4aa4-8a55-fdb43e584aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2582bb1d-4b23-4fb5-a86f-a72f62a22b06",
        "cursor": {
          "ref": "6af2bf32-5def-4266-8393-45ef371be82c",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f2782f5a-310d-49aa-aa20-13b020da8e55"
        },
        "item": {
          "id": "2582bb1d-4b23-4fb5-a86f-a72f62a22b06",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f94d9faa-54eb-41ad-bdc7-ce5952235adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905565fc-8d87-4a6d-8971-290c24f69554",
        "cursor": {
          "ref": "04ba4ad4-a3ed-4098-8cc7-58e2378bc5ca",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c13f41a1-bbbe-48c1-8e82-3359eee5b49b"
        },
        "item": {
          "id": "905565fc-8d87-4a6d-8971-290c24f69554",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f24e29f5-3e17-4142-af29-9c6f09795d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeaea292-50c1-49ad-94bc-68acccacecf6",
        "cursor": {
          "ref": "a777f12a-d963-46e7-9e64-3adb08cb09ff",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7284e477-5180-4115-8785-ffcd3e0b7358"
        },
        "item": {
          "id": "aeaea292-50c1-49ad-94bc-68acccacecf6",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7c01b689-cdf0-402e-bf7e-adc59cd71580",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "a31cae93-1bbf-41b0-9739-5e7ea6f0012a",
        "cursor": {
          "ref": "946809d0-7d4a-4193-9e9e-d4adfd4f5b88",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b0140afb-52eb-4e96-84c2-e226fc37b9a3"
        },
        "item": {
          "id": "a31cae93-1bbf-41b0-9739-5e7ea6f0012a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2fb2e17b-c32d-4151-9d49-bff26e467193",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "085cd9ac-b45f-4b95-b6a4-ce90bbb73889",
        "cursor": {
          "ref": "3eac0f1b-8110-4a1b-9c8c-44ebf27d798c",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4c53343e-0ccd-4711-8ff3-e625b25f5eb3"
        },
        "item": {
          "id": "085cd9ac-b45f-4b95-b6a4-ce90bbb73889",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "90222791-8019-4ed2-a679-d1e84808f591",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "000b741c-d92e-4da9-bc33-14031d12d941",
        "cursor": {
          "ref": "e5d1efbf-e0df-43ff-a857-b1fac34e432f",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7dcadcff-d212-4be5-a6f5-0dfd22344c19"
        },
        "item": {
          "id": "000b741c-d92e-4da9-bc33-14031d12d941",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "eff20914-7c46-48bc-9688-276f6fb07910",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "9f78e755-e98a-4d93-ba88-e55f22bbd1a5",
        "cursor": {
          "ref": "5033069e-6b2c-4cd6-b2aa-14557bb325c1",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8e5b2fb7-fd58-4eb1-8771-055d95e4f0d3"
        },
        "item": {
          "id": "9f78e755-e98a-4d93-ba88-e55f22bbd1a5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "91e2045a-fc46-49c5-83fe-6e144cd7cadc",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "80075e8e-9380-4d3b-b5c8-30d05e6d0050",
        "cursor": {
          "ref": "9fc76cd8-4b14-467a-b52b-fad0a3a18a7f",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "49479043-f0d4-4d20-af73-88d32d76e01a"
        },
        "item": {
          "id": "80075e8e-9380-4d3b-b5c8-30d05e6d0050",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "555eb6a2-6118-4026-aa95-ba932cb7739c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d50b74-7e24-4a62-8781-efe7de525e57",
        "cursor": {
          "ref": "878d43ee-48bc-4220-b74e-73375d32bca3",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "571ae012-c39e-4cca-a9b1-559a8bc4aadc"
        },
        "item": {
          "id": "58d50b74-7e24-4a62-8781-efe7de525e57",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8147308f-5926-4bf1-9f68-2e94ad38da4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d669e6-94c0-4c7c-b5ba-ca8f7cddb7f3",
        "cursor": {
          "ref": "d5c25a44-ba33-46f5-b95a-591086cc457c",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9415deb4-d95e-4401-b3c1-3dafb811984e"
        },
        "item": {
          "id": "81d669e6-94c0-4c7c-b5ba-ca8f7cddb7f3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1a3f15b9-9170-4c54-9f45-14e37e17ddc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e72536e-4daa-435a-825d-dad932215a63",
        "cursor": {
          "ref": "56fd9498-819d-403a-9750-63c684078cc4",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fa33f9ed-b6d9-45e1-9ca6-0d7c1d103fc2"
        },
        "item": {
          "id": "2e72536e-4daa-435a-825d-dad932215a63",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "2c5ef47f-f5be-4ff4-9db9-9ce2f109f060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754f7509-9534-4247-b138-29c541501011",
        "cursor": {
          "ref": "c3d13d75-e933-4146-9196-adc87b02abd5",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "bf002b3f-ad22-4e54-990b-23d4b2acd293"
        },
        "item": {
          "id": "754f7509-9534-4247-b138-29c541501011",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a4793e80-02f7-40b1-8e17-eb7e8bd96082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08fd7b54-814a-4638-98b6-9d6af46cbd22",
        "cursor": {
          "ref": "de6283db-0399-427f-8ba8-15773c2e5a64",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "023c0744-0f56-4580-a7e4-cf29eb92ffeb"
        },
        "item": {
          "id": "08fd7b54-814a-4638-98b6-9d6af46cbd22",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5e99f290-077c-4fbc-b5b3-ed64c09098d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b9388e-51ee-446a-88f4-086bff239fb2",
        "cursor": {
          "ref": "4c6025fd-dea5-4cff-b51c-be0844f1c914",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a1dcfe87-5315-4acb-bdbe-5c7dd0720bf4"
        },
        "item": {
          "id": "39b9388e-51ee-446a-88f4-086bff239fb2",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8704e6f1-c72a-49f1-b14d-1276a9bd03d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddfb2b82-23f7-43f7-8442-414558d1fc0a",
        "cursor": {
          "ref": "8281f20e-475d-4bb3-8469-60cd9a60c6dc",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "48fc6c78-b33e-4e12-abe5-9edc463c9bce"
        },
        "item": {
          "id": "ddfb2b82-23f7-43f7-8442-414558d1fc0a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "319adc09-22f9-419b-922a-3f40ca1edff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95afcb2d-0939-48fd-91a4-0cbdc5f6f443",
        "cursor": {
          "ref": "a322b3f0-6b59-4f9b-aa34-10207da66f52",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "40525622-0854-424c-990e-bf5eca68b0c1"
        },
        "item": {
          "id": "95afcb2d-0939-48fd-91a4-0cbdc5f6f443",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "405fbd03-773b-4583-ab22-54cca784a723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0667c9-e2d0-4179-8276-52dfe5fea24a",
        "cursor": {
          "ref": "42243e23-bbe5-49c2-a4a2-61befb6aff01",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d573f84a-aabd-4ad5-978b-0fec6dc5afa6"
        },
        "item": {
          "id": "6c0667c9-e2d0-4179-8276-52dfe5fea24a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e58dbdab-eb41-45a4-8493-fd196c7c9f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a97978-94df-45b3-b89b-4d2fff94a63b",
        "cursor": {
          "ref": "f729fb8e-fb80-4e23-92ff-9a25e54c58df",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "93100035-4bff-4ad4-b249-0de56e307a57"
        },
        "item": {
          "id": "70a97978-94df-45b3-b89b-4d2fff94a63b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "dd9945cc-7773-4b29-8cba-922e2f023421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d32dff-e706-4e1f-b844-b2b2f58e1229",
        "cursor": {
          "ref": "80feed96-4677-4754-b1b8-7802cb7eda8c",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4bfa19f3-06ed-42cc-bdb5-b5b025805a80"
        },
        "item": {
          "id": "91d32dff-e706-4e1f-b844-b2b2f58e1229",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5736d564-bf07-4e84-bbaf-a8130abb2552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ba77f3-5f0b-4f87-9757-0121b32ad940",
        "cursor": {
          "ref": "47d5ed92-8098-4040-acd2-bc0518b4c9e0",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1ad0dc57-8ec2-408d-a515-c457f4b37560"
        },
        "item": {
          "id": "86ba77f3-5f0b-4f87-9757-0121b32ad940",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "afbef247-fb46-426c-b842-10e77bd985cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5892f5cb-61cf-44cd-8795-d9d3af89e768",
        "cursor": {
          "ref": "9d3b81c8-00a0-40ba-95b1-078e9b885fe7",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ea7600cf-5db9-4466-a1e7-326507018cc7"
        },
        "item": {
          "id": "5892f5cb-61cf-44cd-8795-d9d3af89e768",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1a5c4891-90c5-4fd4-9691-4da97f4a9a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2bbe67-69c8-4aa3-8728-09f32ad29d1b",
        "cursor": {
          "ref": "78f097dd-6bee-4ca3-992b-b1379f46eb00",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7a5f2dc9-d10b-4f3b-b6e5-db2972347ef0"
        },
        "item": {
          "id": "5a2bbe67-69c8-4aa3-8728-09f32ad29d1b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ef91af7d-9032-4097-a83c-6a7cd725bde5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "938eb48a-5f1d-4750-aed0-fecccc8e7b4c",
        "cursor": {
          "ref": "f5d7f0c6-dcc9-4fb2-8aa4-3649f734bf92",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5e5dccdc-1720-4f44-8ae2-916cf3b51faa"
        },
        "item": {
          "id": "938eb48a-5f1d-4750-aed0-fecccc8e7b4c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8e2eb4f3-f503-4035-bb34-c6726573554e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d361b1-1968-4af0-a03e-fac3cb803ba5",
        "cursor": {
          "ref": "12f60a51-e65f-427b-85c1-358630aa090e",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "da70fce8-952c-4f9a-b697-10c54257e347"
        },
        "item": {
          "id": "85d361b1-1968-4af0-a03e-fac3cb803ba5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "406d7ba2-cefb-4693-a687-1355316b7034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7662d223-e499-46b0-83a2-33c6899574c0",
        "cursor": {
          "ref": "fce3c59d-b61b-4c5a-9c78-411813acbee7",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2b58b786-4c17-4147-913c-f0d7cae60afa"
        },
        "item": {
          "id": "7662d223-e499-46b0-83a2-33c6899574c0",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "30e348fe-1142-4003-9b11-855ced59a0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835f1e75-2742-417a-85d4-1bd0b298f57d",
        "cursor": {
          "ref": "4d772e1e-afba-4acf-9d15-5bc62225e28a",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "852df9c9-147f-46d7-a399-a0ae0da786cb"
        },
        "item": {
          "id": "835f1e75-2742-417a-85d4-1bd0b298f57d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b752a828-67a9-4e32-a8a1-1c4f46c2cabb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84cebdab-740a-419b-8b92-84f8ca8ae755",
        "cursor": {
          "ref": "a07b0788-c144-4b51-b3d0-f80ace9b5ceb",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "12dce25c-f57c-4a21-8bbb-7a400c7619a3"
        },
        "item": {
          "id": "84cebdab-740a-419b-8b92-84f8ca8ae755",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "647a9787-3afb-43c2-8612-ea7e73ab7f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc99d89-4110-43c2-af91-47add0e96706",
        "cursor": {
          "ref": "64af6cac-8c86-41bd-8ca7-e65fafc58cbe",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "583092dc-c1d7-46c6-a228-ce6ce0e4b750"
        },
        "item": {
          "id": "7fc99d89-4110-43c2-af91-47add0e96706",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1a7310a9-443c-47e0-adc4-0714e21250b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f456ef-5530-4529-9176-e372b20f7eae",
        "cursor": {
          "ref": "c543c7c5-f23a-4826-9a2d-0dca5a76efbc",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8e21a458-1188-451d-b6df-86ff05935851"
        },
        "item": {
          "id": "65f456ef-5530-4529-9176-e372b20f7eae",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a17fc314-f862-4858-b7b5-fe8afc78cb3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2425065a-ec78-4fb5-9be0-1b50b3fad2b6",
        "cursor": {
          "ref": "fa4d4de6-feb4-46cc-b2f8-f6cb62032909",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f172eb07-d458-4f9c-b4db-3d8ee6b58632"
        },
        "item": {
          "id": "2425065a-ec78-4fb5-9be0-1b50b3fad2b6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5bcc0f49-da38-402e-b257-6ba9e6ebea68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4bf4e9-fb1c-4aa2-9c1e-8c58627ce41e",
        "cursor": {
          "ref": "ae0a8a54-04ab-4e27-8dd5-95f886b7a81b",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "46282283-dba1-4dc5-b9f6-2a8ee0432c0a"
        },
        "item": {
          "id": "1e4bf4e9-fb1c-4aa2-9c1e-8c58627ce41e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "dea31e1b-7839-40ec-9aad-307165a99421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4def6a87-50e0-4b72-98da-d97da1567430",
        "cursor": {
          "ref": "7ba2d6d2-6df4-4066-9f06-32f9e13dede1",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9625f0c8-e280-4082-abbd-526b2d64abfe"
        },
        "item": {
          "id": "4def6a87-50e0-4b72-98da-d97da1567430",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "45bb562f-af86-4fe9-bdfd-0fedccbb1b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af80aeb9-de50-4dd9-9021-a7f7db227216",
        "cursor": {
          "ref": "2d4e4a8d-b2b2-4f72-a8bb-df3f7c2d2407",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "513b18d6-0357-4211-b80f-5cea29326d8a"
        },
        "item": {
          "id": "af80aeb9-de50-4dd9-9021-a7f7db227216",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "80dc95cf-e755-4604-b4ca-1f56a3c01178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9b130c9-f0f7-43e0-89d0-3c277f93c520",
        "cursor": {
          "ref": "6a395753-7459-48f2-ab18-c2324f8feebc",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e965fe95-69f0-4fcc-aa6a-5d8507eb62c6"
        },
        "item": {
          "id": "c9b130c9-f0f7-43e0-89d0-3c277f93c520",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4cc871c9-12b4-42b2-97ce-4c61e106b7cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877f61a4-0cdb-4c77-8419-a7d4c64ec50a",
        "cursor": {
          "ref": "3f8adb24-8900-4657-a003-493b3e60a918",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e7084227-1d18-4d7c-98be-49883b1cbb52"
        },
        "item": {
          "id": "877f61a4-0cdb-4c77-8419-a7d4c64ec50a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8280a3d5-9fc7-4d2c-a42b-8e8300103716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a820c003-25dc-402d-8a07-aa45c76c479d",
        "cursor": {
          "ref": "36fce51d-7706-4464-ba1d-e7f9d78a6a1a",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5091350b-a74f-4606-ace6-8641faba54ae"
        },
        "item": {
          "id": "a820c003-25dc-402d-8a07-aa45c76c479d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "89fa5afe-c91a-4a58-994c-f45600b14c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "189eabc2-5e89-483f-ae33-8fd3c3733354",
        "cursor": {
          "ref": "ec629f7a-8649-43fc-9b90-602cf9e5ecdd",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2df914cf-416b-4052-abd4-869bdf0adac9"
        },
        "item": {
          "id": "189eabc2-5e89-483f-ae33-8fd3c3733354",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "08316db7-562a-4f4f-9417-e761a7960e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026c1e00-7fcc-4270-95a1-2006dff73acb",
        "cursor": {
          "ref": "03a2860f-8a56-4deb-ac05-6a4241a827eb",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "25aa2def-2851-421c-85f2-0e1e0a42c4b2"
        },
        "item": {
          "id": "026c1e00-7fcc-4270-95a1-2006dff73acb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "49b29903-e5dc-4fdd-9bb7-72c8cc84f8f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0ab683-f913-4327-b410-1cca3d0cac5c",
        "cursor": {
          "ref": "b8897759-e4d7-46b1-b6fb-593e5b9d8a81",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3fb27fb6-f483-4776-99c1-6367c22b4517"
        },
        "item": {
          "id": "6e0ab683-f913-4327-b410-1cca3d0cac5c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ca95eb6b-e750-4adb-a56c-3648b1df006b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b6d8b7-d451-4e37-8f89-a88d246bb0f2",
        "cursor": {
          "ref": "02961bcf-8489-4c7a-b79a-51c05dbf31c1",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7667c418-0e46-4c55-977a-1f9676bd0fab"
        },
        "item": {
          "id": "64b6d8b7-d451-4e37-8f89-a88d246bb0f2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3f7297c0-14b0-4b0d-8888-17a9a2a7af98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7af5cec-dcf5-447d-863e-657c5c5907f5",
        "cursor": {
          "ref": "57011d06-41ad-45a5-b28a-43e5fb96fb38",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f5577be9-16a5-45b5-ba13-d659993cc6c6"
        },
        "item": {
          "id": "f7af5cec-dcf5-447d-863e-657c5c5907f5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fe43007a-2de5-409a-85ab-cb0634c554df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b08371-ab65-4818-943f-dcef0a5a8b8e",
        "cursor": {
          "ref": "2178b3ae-e07f-4307-bd24-f9720ff0dcb0",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "df3c3730-2b0f-4e74-b7e8-54cc7341a0d3"
        },
        "item": {
          "id": "17b08371-ab65-4818-943f-dcef0a5a8b8e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "25933ed0-c27e-4b02-8513-a035384392ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3e0d57-e68f-4bf6-8f96-20053fcf8ff6",
        "cursor": {
          "ref": "a441d380-2f77-4d48-b5fb-acdc107c6844",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "43c260b8-233e-4db6-94c0-ea95509bfc82"
        },
        "item": {
          "id": "ba3e0d57-e68f-4bf6-8f96-20053fcf8ff6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5326716c-a3f6-4a43-be27-e40a41162b0f",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "0b3e53f1-cfa1-420b-8076-24418c1658fc",
        "cursor": {
          "ref": "437ddf64-47b8-4690-b6b0-809f86fbb79f",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "404c2b3a-a879-4b6d-87fc-98688766a882"
        },
        "item": {
          "id": "0b3e53f1-cfa1-420b-8076-24418c1658fc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d3f15195-4cb4-4542-8da9-52ddf1fde891",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "54205cdd-b21c-41fe-8acf-5c6614587da3",
        "cursor": {
          "ref": "e248d767-5cf4-4719-b48e-f653cc75245a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "84e5b487-5c8e-4827-82fe-3cec61df796f"
        },
        "item": {
          "id": "54205cdd-b21c-41fe-8acf-5c6614587da3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7e48c56c-c0bb-4e52-a2b5-422836206586",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d20d9e5-c93f-4219-a186-22e1bea646b5",
        "cursor": {
          "ref": "2a50ed50-3951-409c-9c33-af49d1517bc8",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4ad2f56d-9b1a-420d-af82-805f039d66d4"
        },
        "item": {
          "id": "9d20d9e5-c93f-4219-a186-22e1bea646b5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e2853d69-52ea-4371-92fe-3fc3d924d76e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d20d9e5-c93f-4219-a186-22e1bea646b5",
        "cursor": {
          "ref": "2a50ed50-3951-409c-9c33-af49d1517bc8",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4ad2f56d-9b1a-420d-af82-805f039d66d4"
        },
        "item": {
          "id": "9d20d9e5-c93f-4219-a186-22e1bea646b5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e2853d69-52ea-4371-92fe-3fc3d924d76e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d06c65-9a2e-4fdc-8bbf-d6ded0bf12ff",
        "cursor": {
          "ref": "fab737c0-7753-489b-ad3d-551415ab3134",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "541f87cc-a3a5-41bd-84b2-2da4a4f96b49"
        },
        "item": {
          "id": "95d06c65-9a2e-4fdc-8bbf-d6ded0bf12ff",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8923ddc8-34d2-4902-a3e7-f0c2ce9e8082",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5109ae-5503-4ca7-9586-f624e4622060",
        "cursor": {
          "ref": "742ae04d-f931-4d34-aae6-2bb6645a035b",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "129e5134-15e0-49e0-9b6a-2f7e0a8598a9"
        },
        "item": {
          "id": "aa5109ae-5503-4ca7-9586-f624e4622060",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "059e139a-e552-4909-b1a4-a634bed6039c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}