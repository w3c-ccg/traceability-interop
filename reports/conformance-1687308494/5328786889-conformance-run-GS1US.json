{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "960e133c-fa58-4a1f-b941-14a7bad429b7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "99f14ead-aae0-439d-a90c-54c759210cde",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6b0d2e2f-822d-47c3-94de-32fcae917f2b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6b820ca3-3ce8-434d-aede-7657f42ea49c"
                }
              }
            ]
          },
          {
            "id": "b9ce8436-6235-4687-9c82-ae8aeae1e1a6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7794160c-9077-486f-ab20-9b34b4b331f5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "44ae9074-f6aa-4571-9727-e3b65f738048"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "80ba2c87-50b8-4f60-99c7-2654f2f53a63",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "66d4f2b2-3841-4f7a-8a53-cac0a1e180eb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eb97aee5-affe-4753-b98a-2b758d1988ce",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "000dc5c5-5dfd-4fdb-b4e1-7d8ed428dc4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b4070aac-dc6e-46c4-bdfd-d1c3b0025cab"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ccf098e0-ef3b-4c28-9f7c-8f1eb4a44b5b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "93edd19a-da6b-481c-b225-8cb9ed338657"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "362eca3c-d8ca-4dfd-9d6e-555877ce6d65",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cdc0c5aa-695d-4a71-8692-6918d0c68d8f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1bb748b5-1de2-493e-93d3-93a79262e90e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "740f9519-fd0f-47d1-be0a-e9f64d571f25"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "25b742b1-b359-4cf0-a252-b75a360f533b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5a0674fb-126b-4002-9168-9039d810cae5"
            }
          }
        ]
      },
      {
        "id": "ff87a613-9988-4df6-a1a1-2796cb9c3d8f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c5571882-57d2-4d8c-8891-014706617772",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8bb3952b-5b97-435d-89da-293b7fb2afcc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "829c87e9-6fd9-4ece-88b6-716d7712d059",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8fef55-1c22-471f-b0be-4d937e9f0094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b105176d-879a-4aad-bba4-d4ed7247bc95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1472d4b8-f07e-4efe-8fdd-2554632d1227",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f254bf-942d-4ad6-876c-7401e6763644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b163b3f7-3aee-40f9-aa45-e740f9b6bb2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38c6a57-e3c5-45d2-a4af-41ae068384a1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9557c6ab-3a60-4161-a596-c496a65a9e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ce96698-60b3-4c36-a8aa-55526e1ddafd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5859444d-5e62-4930-b6bc-8c91c4e941a9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6dce0afd-a5f8-487e-a8e5-9e7cc8f79e98",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94815938-c27b-4a27-9f9a-d72318384c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b76f6fe9-4670-4b8e-84e6-59b65a3ea0f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7f111f-2bfe-4176-9dab-9d3eab4d547f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e89a5da-6b4e-4b71-a935-99d0e4baa8bf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "21208aad-aec2-456e-8454-f47ce3711577",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2da8d4bd-0223-4128-b027-2fb7976373d9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ace1fc80-f28f-4ad2-bf2c-53ae5a731246",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "019fd42b-2ef8-4818-8369-c1f50c22b589"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6026ed8-4518-499b-a38b-e630779a9bc4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "66b45e10-2270-4eba-9dd2-1a956a49b521"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e5c887d-67b1-4076-a08a-b48c05ad5559",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6f6d39f-f76b-4905-8a6a-ad9ea69e404b"
            }
          }
        ]
      },
      {
        "id": "59d78e09-6c67-4452-ba85-0c9e1eae864b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ad8b1886-6fb2-4b37-ac64-ea0a70cae66e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e5f7d325-00fd-4a13-b5d1-25c6716138cf",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6896a917-8162-4841-8d7f-e3dc38a2c80b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94519afb-42e0-4541-8c7f-7674a5031194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c677ba7-4936-4677-9ca2-d949058bac1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f6429e-4f78-422f-b559-8075d53c92eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b30e1986-50c4-47cb-9678-ea43bd1ddb39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14507258-eafc-4796-9faa-99bb7c0502d5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf52266e-2ffa-4126-b019-28e252b7b4d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670e2b8d-ea4b-4ae9-9255-777816f00e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fb8ff8-dbbe-4ef9-8df9-8db7aed21f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ca07c25-292a-4cde-b454-d4b215c1b83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79bedb0d-513c-4960-8744-047b89c3a3f4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5f54ca-c9dd-460d-b362-37054fa4815e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e57fb7cb-4f56-4516-aec3-b4a68a684c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd796dd-b42c-426e-93a5-395990998233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b184a76-e9a2-424f-b0a5-55c3cf82e48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1898def8-5515-4f74-8886-cf5c0b3e97a5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31035d33-5109-41fd-91b1-6a6a6065f970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecba368-1483-4383-8771-a319e45f22b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed08f6f-15f8-48f5-8aba-60c95dc4ea37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9642f240-6c6e-4b74-ad00-aeaa7a24e156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217382bf-8f30-4cdd-9942-5c767a3335aa",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab62f120-c436-4fd9-8696-8763e7a7b2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "385b1539-e905-47e7-a58c-d75546b91f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f53412-2dc6-4459-b93e-150cfaddc8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcb6bdb4-b266-4570-9935-efa65fab9d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9030fa-3799-4c3c-8822-2cfdfd8832e4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36650378-4485-414b-bcef-5649629f1a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "737df914-96a6-45a5-9307-a10811fc4190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83326342-1283-4c4d-935f-72c653a89b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae57984f-8f68-4be2-b3e9-8a986b3f0a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a13d85e-9073-48c7-81e6-655ede0eafc7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e05a8d-6865-4734-9aaa-7b5f59e86b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c3c340-61c2-4d89-a4e8-272bc07aad86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd20971c-425a-40c0-8574-f229d539b282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f90b1415-bdb3-4cf4-b59b-76b798a70d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be6652d-0d90-475e-bd93-e1315c09f770",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "944bca21-e5c0-40ac-b819-ed1f44ca9d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa2c2ad-cf4c-4a8e-95dd-6e2f294f5bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e652d3a1-dc70-4395-80f4-20ce4d54d018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e594449b-a9f3-4f5c-9e0b-6bbb89ccc198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9751fe-2ee6-4f29-a19f-5ba744ee911b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1357c3-fdbe-4574-bf73-6410d829d7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc478a3-268f-4846-b062-f3b973b2001d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac42f24-42ce-4452-bff8-486a4542ef19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ed9b280-4bd5-4c2a-9719-3406b5f50b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7773b6f9-b26b-4ee7-aff3-ef739ff877e1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19ef1dc-9338-4776-a0ae-d266c63634c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "589a4164-49d2-4124-ab64-975591bcaaad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a30658-b1aa-49d2-9736-68d131616556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd0547b8-218c-4f95-883d-eea1d77434a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7c9f55-6151-4f91-a0cd-dee8cccf01fb",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0258cd04-691e-4bee-b1ca-d67c17a7698e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "347d3749-7a70-45a9-890b-0d696f26c552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac529e23-829a-498a-b4a3-5011962d53b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d03f7913-308d-4e66-8be0-3bdcd454c15d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc1593f-7fc0-416f-be13-4877fdd1e9b0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6eb55b-31cf-4528-933e-55a2c8fcf4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3207e720-c9ac-4361-bc3c-c52efd6b0fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1815962-4972-45b2-ae46-bec1745917fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f91b1ec8-1a9e-47cd-a6e4-98119b1cdbfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b595d237-95af-4d3f-8ce1-f9562a703bb4",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4bca0b-6939-48cd-9525-63544dfefaa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4dcaccd-54ae-4be9-be55-4d059517e1c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c750d872-622d-4516-8e87-cfc29dce9fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4eab9ed-de70-4765-9fec-8fd87df88c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01081bf9-3bc3-4193-adbc-e0f573d5f3af",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6928bbfc-78f5-4a4e-bc4e-d56b46247f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ed4932-7acc-4bb2-a57e-59db313ac098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1caab744-8eb5-43f3-a73f-ae8c56bf8755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5226102f-e45b-4fd3-9f0f-d4d4d6d94add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1807600-1b76-42c1-8919-acb2c4e745c3",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "603367c5-7208-451e-81cb-4f6a710b62cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "279ddf64-99bc-4a16-9650-e3c14c889cd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a13bdad-4399-475f-860d-9f1eddc843e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35b493b3-e606-441e-a9bc-2bcdf22c9bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594808de-b91b-4e8a-984e-9df39c0725cb",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce1b403-2303-43e0-9492-917a651b5059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d6a38a-1f14-4e53-a08f-538ce50a511c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a89ec27-171d-44cb-adc1-622fe9ddd3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94a11b34-e590-4573-9e70-16f29ea8e18f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da637f9b-5256-47f8-a1fa-0dc79a5f07bd",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9682070d-bc96-4b09-85ba-8ce9d136006e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0257cfbf-6568-4021-a07e-b74572a88143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33febaa0-444c-4e89-9555-35044792fb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6af36a1-c287-48b6-9412-9a34a13fe17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bedd6aa0-aae8-4897-9fea-297635c638af",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ece264-06fc-4de2-a0c8-00b606b20a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64f96a53-cfaa-4acb-ae1a-44d6150a4b86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c5828c-5179-42cf-a771-5a3184177bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeee0407-c656-46a6-b474-78b098c1385a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7737b39a-bc8f-4e6d-932d-4073dad96fd0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b973526-e2db-40b0-85aa-e9c3261b313f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cbfc1c6-9a26-41a7-8330-2d45f746780d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0884d3-d107-4055-a42e-c4714ede7367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3fed9f2-b0e6-467d-a395-a5ae2a1a2162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98eee9d-7b66-44a5-ad6a-0330525682ff",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d417f3-f1cb-41c0-aca6-5e4de597ed9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ced310-6510-4610-ba97-d899390d270e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfa348a-f2b9-4879-85a6-293a430d6a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32a60e93-54da-4045-86e5-b5309c227881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0c8607-9c0c-4e9f-a22c-7e779394b926",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b53c2a-4015-468c-a771-b025a24769c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f21cac83-0167-4f04-b82e-44eb94f115a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113dc66a-413c-457f-8def-b4e47987dbca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d45a10d8-7fe5-4a41-815a-89a8b1c79f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77111f9-a212-42a5-9195-2ae1e8f548d2",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8738e7d-ffbe-4e5b-9842-c6719ba9364b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7897e9b-35ae-474e-8818-05b587db5b8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca53a88a-24a1-4a9b-9f42-f646fb3d99b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed944e18-d46f-4130-8190-9eb86d79e963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169568e1-8cf9-4553-a8cc-e1acf4aabda5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6e9657-447f-4497-ac83-afc8883c73c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4de62ee-e1af-42b2-994f-4219806d0099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce00b10-8871-4121-8f8d-05541b0648e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f903a0b1-7a53-4948-ba1b-39f3ade9d93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891f7227-066d-4736-b6dc-11809c169325",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d61f929-96c4-4775-b338-aa0ac1fb9b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cffdd83b-7c43-4949-882a-62386b9a3696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1028f2bb-f54a-4f96-883f-e7bed21804e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c9adcf9-94e2-45f8-971b-76070ff9e19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d3eca3-f191-461a-8d79-e0fb9744c6f0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "014297d2-9a53-417c-8780-2370840df963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d79095a2-ed2b-4bf8-80d5-e7d8aef92204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6417868-dfd6-4076-b36c-9300df30963c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "88428bdb-654a-4ef0-ab88-cff0fc32e134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a78d3b-07ed-44ea-9512-61e7beb996eb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d14f01-f343-49d3-989a-29f11d57c1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8485b64b-2da5-41ed-9671-4c42557951eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247709d5-45cf-41e4-908c-7a79f482f2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "66dc0749-a1a1-442e-bb23-f90d86fc21b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b11f59d-3cbb-4b15-9cc3-3f8b1abf77d9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49064ba7-765a-4b5b-a71d-64d134254c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05f14547-418c-4c31-b7be-588fba5cf046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd38e08c-774b-49c7-af23-886e719a3781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac65e262-3ad3-4fa3-9dd4-75954889dde7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aeccd8a-3a43-4e23-8df6-04f6a9eb543c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a7da2c-5466-46e4-b20c-b10c0c9b8d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d6c85e-5bac-4115-a733-5bf8f57f68ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2bc35d0-5cc0-4411-aebb-02797b32859f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7556460c-7313-4fbf-9800-40c09cd873c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3d7d15-e592-4fda-9778-40b37f93c182",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7958052c-8619-4596-aebb-96b8e09bde1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "511c52e3-e2e7-4fab-89bd-1ce609a64c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7b130c-d541-4236-8a9a-1df4800dfe69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5204dee4-2f3a-4d4a-9b0b-f9d65f2f9c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f4dc19-3708-42a3-bf17-b7ecdf6c2ce4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78025b1-fb99-4bde-8254-445f3757aa34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7d551c-d997-436a-a9fb-f801c0b8bae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee27573-5814-4106-8162-2b029b5228c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e95cb271-c991-4df3-ad3d-c4ad3147b756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03681a69-6097-4560-bc82-c961fe08fab4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b735c424-21ba-4ff6-b667-8fd5060ab67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d8974f4-7987-4bcc-ad51-db43f8455a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e602eb-45ad-4b80-9bb1-f6df10a12fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3af747f0-3522-42dd-8763-cca74a3ec2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719cd207-9ee1-48a2-9a98-d75e4925fe67",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70443a60-88a8-4007-a31c-cc21cd1ba7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9959320-fa7f-4a0d-95f4-88096398f8f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0583dca7-95b3-48b1-a23c-84a98d167a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "00e30b8c-3a3e-4fac-8132-81ea2a03b9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1ac742-89d5-4e5c-bf47-215aca336b8e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12642e27-169d-4b77-89ac-9387b489a391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49ae6418-7906-4988-9808-ebee479fbdd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c98ad3-30c5-4be2-ae3b-67d9355641f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "12c22eb1-cd75-4798-893e-2b8c0f81cc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b51c8a-b314-48ca-9f32-1c4499ffaf85",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9da657-8c47-4882-b5c5-befb67a36488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7914ad0a-0fa1-4154-a885-f4f30dca27c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ace29db-a316-4011-80db-7e690f246bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9486ce6f-0d02-4366-b01a-b06e51e64de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc50204-3677-4580-a75f-e743138e7c54",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384604ff-e5ae-44a8-b78f-b3840cd46dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea871f94-440c-417a-96e4-34c61ff68b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4fd08e-ca48-41b2-8f36-2b6398a3d6a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0314448d-0fcd-4491-accc-cbebd5fc3adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816001de-8318-4da9-addb-1e58a1dd729f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bff2ded-95ac-4187-afab-db4bd3d23579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9be73baf-6016-4add-9c79-7ab0a778ccbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c2992c-8dab-4fe4-9b11-69ee936b44cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98620af8-9aa1-4119-9354-18d796afefe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d900c6b9-b105-4292-a80d-115176118415",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "602804ea-bf75-48d7-8140-b93c220d60a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c3e63c-d751-41fb-bfb0-48c4a5beaf59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f822f17-c9eb-470a-b16a-11727c52cf1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "058a9dec-7149-4e65-82e5-503132b05596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158eb99c-b119-403d-bc34-677c03cda1b5",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c0dc40-565e-4229-bd42-b9b408210b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4681673e-a2f1-43d9-9f7c-f78ef602f29f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb459d9-e6c8-43c0-a355-2e277a4c643c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b657953b-b2b3-4df9-8100-c1daf176ca87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ed62e4-ad11-482f-8567-6b8a0f2d7f24",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2544d56-0769-424c-93db-5e39e0cc1f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c3896fd-3960-4a77-908f-406f07e3fc99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466b1e20-b48e-4fe5-af7c-99886480e81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c9f0508-752c-4ecb-a46b-8a1ff6dde018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ed35d5-f4ea-4813-be8f-d348ae083557",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f144461-9f5b-4469-8f13-19b3db509c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48f6d910-3e53-4a1a-a5f2-11eef14dee25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b6cc72-5d00-4e18-9bc0-6317b85af1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2840a3d0-b532-42c4-b902-2b949f40c0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08806fa7-69b4-4dcf-8550-fd18ee2f7466",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edeb9769-cb24-4f26-b159-c7f6e3a95b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab1e9f56-1825-45ea-8262-c3e25af22171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfc746e-f800-4d30-987c-c0d29540a9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7374f87-4f3a-41fd-b00f-dc25f39f3290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a06a8e-aad9-44b9-b30e-c3e15e02a5f1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f75e36-bb67-48d1-8350-dd1c188bb6ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d4c835-f860-47ab-bd12-2f8a055bcafc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf96d4a6-b98a-4506-a6ba-c6533aefaff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "35c596e8-c3ea-421c-9f5e-9a83a1d5197a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96760b1-f938-47b3-b39c-1b0cdba85963",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67db7c86-ff5a-42a4-ad70-8363728a6eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2d735f-662e-45f8-b4f3-edb9fbe42d2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86419ba5-3055-4b58-bffb-bbe6d99117c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e074da8c-4e11-47e8-b5c6-154e046593a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8c075e-696c-4d87-a6d3-e666f3cceee7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2714bb-8095-4e9e-af46-33533828548c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "661ee6fb-5331-4e39-a888-3d1a428df98a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52637b5-0267-48a8-a1ac-ee20409a2486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae45096b-8989-4e17-a9dc-145090a461ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5311a735-2722-4770-83f8-68487224451a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c2b66d-50a4-4334-b82e-e25de820cdf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1f9010-0b5e-44f5-b6e8-d5d2f3c99b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d55be3e-f92c-4612-aaae-f9b367e7c074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "83800799-143e-4a08-b868-b5ae4dbac952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb3c4a5d-ef7f-4620-b3ad-63369370b073",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b704c85f-5f9d-45a6-a7ed-b4238b7a4697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e44b875-b983-4c0e-ac94-5a9178f7219c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc268594-0444-4ca7-9bc8-44aae0435cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7aec422-0b64-4e20-8395-9a8ee92c0e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c90e035-3b75-4e20-9339-effd8e12d494",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20db45d8-5fe8-4ad0-91f0-a5270595e1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b0c0c45-0013-424c-869b-36dea96d38aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129d7cdf-5e94-4901-bdc0-32a37cf92a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4de5d42-a31b-4dee-bb0b-b8047bdfc8fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e202a3be-c3fe-4b5c-9480-3eb7024008db",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b24de18-faad-44cc-9ff2-f1604eb5e8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "007d6bed-158f-465b-b7d7-88789d1a36db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc80a3c-d61c-41d6-b086-f8e6af9dfc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4a8455a-c78e-4d8a-afe0-5528d43e9ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7cdb1c7-6af3-44c0-911c-af0e657b40ce",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a040739-4d44-4fef-89cf-6f90268b1cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3624f664-dd45-4016-a69b-4f7e55f61701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bd68ff-2984-4889-bfc8-34d43169bc5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "368aac5e-2e70-48eb-911a-6ccdc3a99c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af836147-2ed9-42c2-915a-4a7dd457194c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b497676d-4c43-4a75-a6aa-5f51acfc00a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d3fcd41-15a7-416e-9121-f800753475e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5b152e-7a92-4689-b9ca-fff1b5022a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c5bfa7e3-4a0b-4542-80ef-8e8d32228b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f244477-c473-4f75-ae30-e119135f4d0b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04375933-93d5-44d2-9725-f92e1087e89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13958afd-7ee7-46e5-957a-d2ed4e2099b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d4d92d-e3d8-4aeb-b6da-8f25cbdfca4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfbd4d92-5f52-4a63-b31e-569a320142f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a113713e-80a1-4f8e-bcad-212972d58ca9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d201eea7-4e85-4d70-9c2b-a1e7e20be111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d54d52-857f-4fe2-8dd4-2f2c06758901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635fc358-a2d0-4fe3-906b-6c53dd384e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1dff5ab-dff5-4a70-a66b-9345e725a878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28de2bca-e6b9-45d7-ab4b-b72ee5e73ec8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74182aaa-732c-4e0f-a6e8-c044a04f694d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8d1b20c-1b23-4fb6-b40b-790ef99ec3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f643cab-2bac-4c38-ab42-e2bf9fcfb271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "606f2ff6-cccb-463c-a184-f03b466764c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c22017-3a85-4388-8216-d3c06bbb16a1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64e1616-162f-407f-9d17-b08bfdd46617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c99033e-95f6-4884-bb8e-6d12bbde7424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c02cb56-5d5b-41a0-83ae-96ebd3c5b967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "46a1ffd5-0ad0-4869-bc54-4103221b7fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9e74af-a3e4-4857-b0a3-beac3ee64025",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e56cd9-7144-4456-8c3e-7127ad081fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "703af775-e2d1-416b-b5ff-9e431aed7543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547ec552-afff-41cb-8a73-2fca5a49a987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "703e5b53-bd0e-404e-9b1d-cdb79472fe43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87053065-f4fa-4bca-9ae1-14dd8ee6c9b6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26403b7-9cc6-4269-8006-c0ed1bf787a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa46fe8-0e46-494c-a465-51f35353a5e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4bf6483-57f0-4500-86d4-98502bca7433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1308f758-64c2-4487-8623-be90e858067a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba155836-f429-43cc-add6-871699361557",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9e46e3-271b-49bb-ac98-edd72de57fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44bf2ae5-1b12-4485-ae30-2cbd95f27f15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d852844b-17b5-468a-b5d5-ee3e947c6c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7edfbc0a-2e33-4380-8963-9a7103eb6c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b9e263-46d7-433d-aef4-b59e37b48e79",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac23c578-1ab9-4f57-8a8f-d17d970cd415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "129b4b15-6ab8-4694-b010-189629775dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3527a1e-2474-4a1c-9b27-53c10df9d838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "79b3020f-0c33-42bd-ac7f-50ca3400dd79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335f5420-68f0-462a-85fa-f7d5512b1c9e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62732b42-0827-42fe-9bc7-eed9ebac46cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41a7d20-a2c2-4390-8caa-a96a7b5dc769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212b34fd-a069-492d-83d5-f97091d290e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "55f0d603-61d2-454d-b5cc-e2451b348cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee26ee4-65da-4971-be90-26eb39b01590",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d629cf-f685-4ea8-8fa8-84935073243a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a87278-dbcd-42db-86d2-668e7accaf33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03df213-139d-40e0-baa2-b6c7a435d2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "00d829b3-58ae-482b-9803-3d3f0ba9e5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6633574a-7b2d-4478-9ca4-8fbfb8eb27d6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "367970f5-8b7e-4280-aabb-0b741b2867ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03da8c2b-8c24-45c4-8a53-760595744288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf269fdb-c4cb-451f-92ce-aa5fa1922e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5c744d-ec40-47ce-9c30-87235a5e563c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76a0cc0-49db-4a0c-bd11-adfe98e28e98",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52e5690-d001-4e12-ad8f-8908c07059e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4351a4aa-2ea0-467b-a27d-7fc3ce7b78ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2afd48-6e29-498b-85ba-a3872d1088bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c5baf13-dcf3-49c3-b452-95c37c3c5398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc2edaa-94d3-459f-96fe-169a3e2d8389",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2697537-f18c-41e1-bf96-708ff809d918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7605dd5-c00b-4cc2-8d4f-5fa7b244ce11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de1dd5a-7e0d-4757-9598-f21b3b36f3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d44f374-af41-4dd8-8d0a-70982ac55423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25b044b-4da1-4283-8680-fb2c35c6c99a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47692f6f-7ac6-4e2b-b9cf-ae7c59bf3c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6caecce5-c78f-4d78-8661-fb4a58bbdfa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0921e115-1af4-4ccb-b324-dfcfd344fe6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f94024b-19af-484a-8bf7-baf3b8ffe9d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a58d80a-7865-4f3c-a624-f39b34e3fe75",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77135302-bf8e-4477-b86f-fd19b82444e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad452d96-6510-4bca-b08d-7a3fc6f521e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7b541c-7fe2-445d-9ff4-3fba6d9ed3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e767a2fd-0426-4eb7-80c9-b30638b20755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce5701e-b3c9-4154-819e-bd216b4810b6",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d831ddb2-ee11-451c-8f7e-5139ce99b4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf74fd9-dcdc-4d39-a181-22993a6ec73f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68646f9-87f2-4fcd-b0c3-7c82672cb822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae46080f-c07b-47cb-82b6-fd0dca863a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac43c57-1e9f-41c7-8636-c352661d46c2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8411cfd-9dd7-41de-90b3-0bb01c20f197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0028e0-bf9c-4862-b2c1-a618ca7c0940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e3706a-1e71-43ab-bbed-306f644cf168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6a5d971a-17d1-4bd5-8648-8cdeaed3745c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12c4a84-43e3-40df-a275-3199dc8cdb0b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb752b67-bedb-4378-8be4-411e96573b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ab32668-c580-49a2-8098-2c746623b0ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8791d18-cc93-49b9-9e69-7e627a7a87c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c30932c-0325-4d7d-b070-88859207e5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83365da-5d95-4141-a96f-60133c9d8c38",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e3270a-4397-4a52-8bc4-f2f2b5af3035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe5a616e-2fc6-4b7e-87e7-a3f620343e60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b5a00f-c90e-48ca-8ad5-6edf7369ee14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2222bc6-8630-41af-9d36-b4d4c5154f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99476ba-3109-4fc1-b4b2-3b8103fa56b7",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9dc2625-7503-44a6-9d35-f23b51f839f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9120bf0-0834-455f-acbb-ea6f75c0559e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dea9bab-02b6-449f-9f78-f5f4bb84ae33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "07c0e98b-eada-4e9e-9b21-1122b5fa00a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67eb65d7-e9d6-483c-8f65-9d66f35d8f11",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9cd4a0-6b98-4967-b146-a665b6a70baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f50ed519-4872-4256-b3d9-a99c9915faf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabe3337-3f29-4a79-953a-f2ae3407f9de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "60a5f167-91f0-4aa1-a46a-13811a7ba92c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9fdeca4-77b6-4fc0-ac6d-2dc52e7f316a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cd2085-0eb6-4507-ab0f-13a7ad8073d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9097b8-46bf-4008-b3b5-b2d5664a23f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7003be1-4c55-4a2e-aeae-60ca1be489af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2d7fd1f-8d81-4a7e-8b4c-b0d762a2e37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4136e58-33f5-420c-b07a-af37da05dd2c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8697c686-5a7f-4c3a-9a44-73dee5fd53c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44cff3fe-7a6f-41cd-8ac7-2606d1893336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662caa1b-932f-47ad-8176-caf5d1bf5bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "da330688-7197-4f71-975a-9025f4d7137a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e07201-932f-41f8-af8f-c92f1cfdb29b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2fae2c6-0ebc-4946-81ec-bf3d554e7bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72870205-75f9-494c-8182-956e59bd231d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38480327-a9ad-43bf-9a70-4f82c661a7ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a6144800-d827-430c-a3a7-adb06798a742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a4d0db-bb51-4ce2-9dd2-426b71d9eda0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bea2c9-280d-434e-b788-cfbd3b1de443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad6de13a-7689-4ecc-9a31-8f8edd82ea87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e320bc-8383-4385-be36-57513471c063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b8f673-466e-4241-940e-5b2065ddd1a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae6a8f93-64e7-44ec-b486-a130c9ad9665",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73800dfd-564c-458b-9cd4-6303bacc8b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fbfc3f4-9969-4cd0-bbe1-0067f5576ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332e7cef-2ddd-4e6c-9d3b-32d30a82a798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3673ac16-ddbe-4356-9362-233f6fd50cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7ad61a-1cd6-4434-a4ae-5b6238c534f1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2e8579-5b27-4149-8ef4-b93d03744fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f246b0f0-1afd-477e-82e2-7d64bb4f89ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a49344e-6f44-4237-a0c4-c3924f23c2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c179cb72-422c-4dd0-8e56-119da0f338bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17965d4b-055a-4ac6-b0a0-69cf99b1dc23",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03faeb98-5643-4ad5-815e-36958136f858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "730edc07-7b58-4065-97de-f76035c2ef10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b3cd8e-4f0c-4cae-95b4-c3441bca4179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5d573ef-132c-47e7-b4c1-8604290f2430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0144936-c91f-437e-ab26-153780e3b49f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "876c55f3-cfd9-4a29-bca8-67b5713cde42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65ccfbd0-b6b4-4fa7-9d6e-b2b4bf3b0691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21912fc7-ce7d-4561-b746-64f03ad83d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "66177a93-0a0a-4d6d-a1c8-1154280c8bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5808d1d1-d0cc-428a-bd53-c0f944d701b9",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2cb7d8-14fd-4d58-bd99-4b2b9e7ae91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d94a0eff-ef21-465d-aa49-bc7c527f03da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91940f7d-b3ef-484f-b417-260d04fceca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e1ce4376-1ab8-46f7-bb5a-35352119c964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d6154f-1d65-43dc-9759-562c975180f6",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfabe71c-4ae2-4e28-8565-f173f5da5648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f38f4f58-ff61-4e14-9495-578cd46a6a53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65866378-91f5-4504-8f83-705ee4fc6346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8e27b41-c9b2-4f8a-ad8f-34428f838631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2daa1a9e-ad44-4808-b553-5f52d93b4730",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4c3c17-0f13-499e-bf14-2acbdbc1c7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81ba3710-973f-4a28-821c-31be483bbf45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb0bce5-9bfd-4801-899a-e52c4e923f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6727ce13-020f-4958-8f55-ae08fc18c555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e2080d-9b69-4891-8365-a6b912a59fe6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77168be0-5bc0-4dd0-8d67-6f3ec249eb15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "319fabca-ec1a-491b-b04c-c0688be81a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94810e1-e760-4d3c-a376-e207a0c76166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d81c11f3-c574-4ea9-ab72-c2a83e555bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000fb8a4-9841-4aa7-8b9c-2cad39182cf3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c585e9a-15f3-4512-a25e-7d37be8469b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c13c5483-7f04-4a95-905a-cb315755624e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf86a37-cd8a-4233-b0a7-66d9ce4fb983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93579a62-0b3e-4f0b-8732-3c7e50539fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a1d913-3b9e-498a-a8fc-7859f7418ad6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6221d7-dc8b-4e74-8f0d-c210bb7cdf1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d9ae1f-410a-446b-bd01-e0423a6afcdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05989370-e242-49c4-94f3-abfc844d95df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d80bf18b-a559-4e63-bcec-13d7e960fb14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4a719a-ce00-491f-9cc7-c48ad016cc47",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b831e84f-234f-415a-b83f-6297525ea221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18217612-872a-4cc4-b21f-6f821ed2348c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4cb1d5-84ed-4bfb-a85c-124c900d5f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "de674c0f-6689-4d0f-b4bf-80fbda7eda32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81160b92-54ec-4933-b949-fa38c2538470",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "246aeabb-3371-43f4-9958-00ed89efabca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1ab0da2-40c2-4889-9a2e-91fd83354dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f61007-dda7-4e90-8f65-c4ff3ca041a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f224d81-fda4-4a80-b00b-809e0b974df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1edab3a9-33f4-40ff-991b-8cbe289ba341",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4e924d-7bbe-4723-a6e4-ccb2d825c871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba8535ed-8b5a-4aa0-b40a-f21920e6f750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcdb4cf-e35e-4a3a-9f6e-2657ab005bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "69fbae20-cbf9-48a2-928f-366d1e1da461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532f16d2-1d14-4c03-849e-7d07ace1ce5e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18d0d43-5d77-4e0d-aa83-359e759e6166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3db396e-e679-4976-a49c-952ced61c7a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79ed61b-b3e5-4a52-a5f1-d4a43d1434fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "695e2e7d-91ca-4fbe-8c7b-bf5941e8617d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38085225-6631-4927-9a3f-fa75c6abbba8",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eeadc91-5111-4044-9116-fe181670fbf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c99d288d-1fd3-4057-aab9-dd19fb2fde56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7109f53-ce8f-4cfc-82d7-a6e7c2095942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "637f6f16-4213-49f3-8e39-92af45928f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6660de-3ae4-4a71-827b-cbfed141048b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27f2b58-1ec3-49b2-9db9-fbb8a5139523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6707c3ec-2472-415b-832f-3c8f0c7ace27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f304498-e978-44e7-8af9-e8de8a64135a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "851ca47f-be25-4141-acf1-2a83db8d28ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca40d644-3c74-45eb-ac27-8648bcf1b717",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "744c8fab-05d5-4a10-818f-5a5c3bea829e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f501dc18-e53d-48d0-b8ed-afd1b623420d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1d6e0d-cd01-401f-a32c-ea171c1418a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "38f159d7-c99c-497b-a7ad-1253b874fe5f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "af519c1e-6c89-46f0-acce-3957ac1058ca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "99446ce5-c14a-4815-b960-7636c317b1bc",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8844bb1-f785-44de-b553-05df08c10ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e8a0f6e-98b8-4422-9372-b071c745305c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0ac4af-980d-41ae-84fb-769c53e290a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abf0ff8f-03a3-4259-b5fa-86fb9b9a98f1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c43cb667-efec-4dcf-a46c-46cfde04451d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00acbcd4-8814-4eb1-ab6e-e1f76dbd3995"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4471a15-da81-4b36-97d8-62969ae38f73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "948b0a78-7d42-4d9b-ab2c-ceae804dedae"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "65050759-1bfb-42bf-abf1-a37e2f38d252",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3085af3d-83d5-45e5-a2f9-fd68d92431c0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "90007641-fe77-463c-8f94-e1e76e799a82",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9e976888-cac0-40c4-a253-aae1ac9f93ae"
                }
              }
            ]
          },
          {
            "id": "51abe712-2ae1-4821-b1c0-d3b0ff899cc7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6dd4c354-385f-403e-a5d0-0e8a1f92cb9c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "17fae33a-f891-4aa6-aa90-4f9a2bd1c648",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb43d351-057a-426a-bacd-4efe2dd935fb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "806183d4-a320-4e5a-a9d5-010e8a413f6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7aadee13-4c70-4ee7-9632-952aeb7a97cf"
                    }
                  }
                ]
              },
              {
                "id": "22a4e208-7a8e-4de0-b59c-2dfdba4a93e9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7dfc4634-611c-4ad8-b710-2bb5729e4d68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5143eef-38fa-4cfa-92d2-e4ec57c661e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93033159-d96d-4401-a744-1fd4df586bc9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3480b3bf-2e64-45fc-a429-b6bd3f96aeb2"
                    }
                  }
                ]
              },
              {
                "id": "08f3aee9-2b80-4439-8631-4265f7dc2c75",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8705bd2b-0f84-4530-a478-3a728c1ca954",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94858f5e-3a41-4bd2-97b3-2ce055327391"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6db92d1-74f2-4b59-80d8-2ee047cf855a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "15d2c3e6-62bd-45a1-8a9e-25b0572a201f"
                    }
                  }
                ]
              },
              {
                "id": "14445802-1083-48a7-8d1e-8b642256798b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c72e940-e957-47ac-803a-882c864587b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26cd1aac-82f2-4d5c-be80-9083cc4c737b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8fe700c-efd8-4940-8550-4a17e6a4d9a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0a82537b-c953-44ec-a287-331e13c014ad"
                    }
                  }
                ]
              },
              {
                "id": "21530149-125c-4b6b-927b-e17f1a66e814",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "032ac6c7-be16-4d4b-a89e-38a5ff1d1df5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0073a4b0-fb76-4a1a-8fb9-995cc6e99a62"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c18f3b84-b221-4ec9-99cf-c8b21ccb35ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "303b82e4-666c-4a4d-a664-f490231c0a58"
                    }
                  }
                ]
              },
              {
                "id": "5b03a741-1092-405a-a786-d35a1cfe0439",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac37d328-9dfa-4464-b21c-b64f3a02744b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "52a22988-c425-4ed3-8158-4bdee434d170"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef7c2073-ba0c-41be-970e-172c660c022d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1e1d3468-a2fd-48a8-b3da-1e7d84775b07"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2fd88805-4184-463f-9ca6-50df3d0c812c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5ea3b555-7555-4b1c-8946-6433222a3fdd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9821bbba-b3fb-4a3c-ab03-b13e6b95dddb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f8544a03-bf36-4d0f-8616-095ff7d02d9e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27833208-f604-4cdb-9a1f-7754b34603dd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2dc767dd-1070-4b56-b2fd-c4328131e373"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "891ba297-7acc-4174-a5da-98c54b88800b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e371116b-6de6-4f65-af02-b529780bfd84"
            }
          }
        ]
      },
      {
        "id": "9486ee7c-4807-4ef9-8267-d8c6f8b369bc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b3f11053-e621-4974-b91a-33a4b97ab2c3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21a2c2ec-20dd-451f-9c7f-2a13a068bdb5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9ee45ea7-fad4-40ed-8ed7-9e955b030407",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c318c1-3f3f-4ff3-9f32-5f5b0dedebc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29ba984-764c-4018-bdc6-2c912f7f5ed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8630dbf8-e169-4ab9-8c2a-d8c6f9aacdfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4505e528-1cc4-497b-8607-8027c7b1d6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33f845f-5b7f-40c3-97c4-82c113b66096",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c31440-d814-4aaa-ba66-d20f80017c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0101e205-9467-494f-a6b6-9ac67ea857e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcdfcb0a-6146-4cfc-aca4-3a6bed2274bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "25b19eca-4aee-4669-bc42-cf70c2172f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1652f607-386c-4254-9348-422aaca3de76",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4e8887-498f-45da-aa3a-bb1ced0106f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae0f4ae5-05d1-4461-b352-297376a59596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23284e79-8fe7-426f-ac01-56929c132fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a35c9933-6d76-4360-806e-0df4af749a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24a28bc-838d-45cb-b0dd-ed5780b6d3b8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "832794d5-f03b-4fe2-a6db-2b7384d68573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a7bec3-9f1f-462e-ab40-f5c61f17d2be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115453c6-6f60-47d0-9043-774c6312af7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b4c374-1159-45cf-9e02-51acb7001654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d296e403-6b95-429a-9e63-d701926d116b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8029c669-724c-4837-9fde-2227cd3f3d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90549b5e-762a-410b-9ae7-1230a4a28b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea02343-86fd-4fd5-959f-eb3cd8442957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57c6650e-fafa-4a98-b810-a9d3dcd2b772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf51fcb-601e-4faf-87c8-5ab16302123c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b6d121-ef7d-4c65-bb37-8a4f003eccc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ffabb5-b331-4956-af8d-6b9940f34d28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e060334-9c5b-4b8e-bbcc-45c48400080e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6ed5ff3-82dd-45ca-8ebc-29d0335f024b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fab866d-e07e-47fd-a39a-9a9d8f40b440",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "494971d1-9718-4497-b186-5ee033995817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be3d427-dbaa-4854-b8fd-7f17a8fdee25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6373b1ba-d938-4f61-bcd9-b57d66fcf216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f31517ae-b338-408b-82d7-af90e4176101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d070156d-b6f3-43b3-8742-048fea3811af",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f563a1-28c7-4cab-bf12-c5339980d0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfb0c480-7375-4b4e-822c-3460b64e69cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64438c90-237d-4788-9fb4-9fbb13464899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "efc3ec21-01eb-4fe0-9eb7-5ed6639c8e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c46476d-7b6c-4356-9d76-303ea19555b2",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e55fb45-bca5-4510-8851-4d338201a464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1372013-bb3a-4a36-b664-22990a8f4019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29debf76-fbca-43bb-9a4e-9182afcbc07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53e3e4ea-787f-4b5c-83fd-6713ac32ac4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3acd998f-9ff3-4d23-a84d-7a2b22a504e9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4eeed35-5d12-428f-9ff1-21c6857d3e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ddf374-0e62-40c3-a67f-40d015b1f647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfec8574-3ee0-42d9-a13c-b84792526907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d17a968d-fdc0-4f72-b23e-d2cb7bfc7c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d14c897-0357-4f76-b70b-cb01195b7006",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb649d1c-0451-4487-9279-ab238f92982f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a35a70ad-4036-406e-ba05-ecbc8a8f7758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edfbb80c-312d-4bf6-a9f5-d929c2b3b012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9e35b9b9-ad7b-4412-a6e2-7397a8888716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24d3693-b5a9-4fc9-b7a2-afb77d4f3e22",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8531a6ff-f604-4f18-a968-905d8edf9fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c72cd4-945b-4cb5-9b8e-b717ef4f5471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b25139-39ec-44c7-811e-6165f1fc8b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2512e58d-f0e8-4f10-be7b-65492b488370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1fbec1e-c8f5-4d3d-bebb-bc0ce83729ef",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8bbcf2f-9347-420f-bde3-3664a6396352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d89f4486-ce12-4a87-977b-ba02aa6ad442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f523c4cd-66b1-4ac6-a12f-4976aca40313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4bace79-e4dc-4f1b-a2d0-55311786b24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09daed19-830b-4043-a333-a5a3a03c7ec0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e27607-9d88-4e00-8e05-4ed5e4a415b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b59cdaf6-f2a0-4981-91f1-f05ed7d06371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adcb43bc-a973-476f-b72e-eab9c2add96a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "adafb6f6-fe92-4567-8e23-c4ad4477f459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acdd06c-81f0-4936-89c2-e1c55c13eddd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a9b8da-ba5a-44eb-9398-452caa83bf01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee9df17b-73f8-40d0-a253-5595b0755a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e57cc6e-4eb0-45e0-adff-556225d4e0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c0144c8-f5ef-4589-a236-480a139d7e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6552e3d-699a-4391-b4aa-adc39624f5be",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93062c56-b3b7-4ac2-bdc0-cb7aa7ec7969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e325a218-c130-4810-8753-c512a4a2f982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93910881-3be1-487d-b968-0b73c6345cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f0ba69c-5a93-42a3-85f6-afd4d7a7d3f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1a9aa1-f479-4527-a88c-9074a1ccc415",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3914b88d-b7d7-43c0-a7ec-0e2ca6c1c771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb8bc09e-beda-4818-8cd7-7c9b44a07aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2cb07d5-4176-41a8-b34f-fe71b84aea69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f938d0ea-7f51-4b05-a446-150ae33aeb9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1497a795-4db5-438a-bcb9-483318a1c6ff",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef00c135-85fd-4c67-900d-ba7586a4e042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45fecc89-bfee-4048-b2eb-91a2bbb05475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d44b7c3-7f41-4517-b9b8-91a914856457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "82cf20dd-1630-42db-9bd3-0fb643122f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb2d4e7-b87f-4855-b10b-7aa7002a9dbf",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d654e7b0-c770-47fc-b96e-3a8e425ee0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f78ccf-ad7b-4aed-b169-13b9abf821ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5689c68-c0d7-449d-8b30-d37d7bb26110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc5c1bea-b22c-4a29-b8e0-7f5a70542b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907441f1-8abf-4811-8037-343c8d6d70b7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed03f1c2-2f8e-4e18-99de-2e221c592433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5359e406-b0b4-44f1-9a8c-a207cfe007ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec6ad26-044a-41e3-a109-0d8139e7d557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57ecb4e0-062c-4b31-94bb-918abd440b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3485b1b2-c647-4b66-a38d-76924672b497",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c902f9-2e10-48f9-8edd-e78ab50987ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d091abc-fb8c-4ff3-9630-3eee141b94bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e419145-e25a-41f8-af01-56ba6e9f84a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b385a1-a524-4b52-853a-185dc8146bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25fdd4b-6b3c-4a82-830b-6c1a590b1f44",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65aec862-d05d-4401-b987-1477ff229cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ebb21d-50ad-4740-8344-50a7768f08e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0fc8c62-ea03-426c-808f-fc5498e99a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0632491-8c44-460a-b3a6-7b537739f34c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa0a551-bcb1-48c4-a075-b940d8b0d3c0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db31706d-e5a8-4af3-915a-b8568377a0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "019cabf8-48e0-4612-9f0e-1ea86da29778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd18c8a7-1815-47ad-8753-ae88d70fc8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35c651d4-b4e3-4c8b-bcab-db78c25cc0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f6407f-1509-45be-961c-8e0ebc7b5533",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5721c196-0440-4b9a-8f37-dbd2fb775350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54d67d99-a17b-4b5b-b56f-63de4b956ab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c485f48c-020f-4d85-9d9c-bcae54c12b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97fdeff0-a0be-4f65-b3d7-e97f63f0913f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2cab48-6a44-45d8-ac2e-e10bf051cae2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2950c9-59fe-4d87-9122-0cbc100d82b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4070f29-1b6a-4833-9409-2d26929bda12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f86a1e-1b35-475f-99c9-9da081b7bfd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8a2d5ba-ff08-4a76-946a-2b0a1a4967c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f183137-1583-4c82-af37-f6e2602b0786",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1b00e5-2d31-41cd-aa22-5a7c85c62a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f6de9b-a21f-48ad-baec-5e1a2d80023f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc52221b-b966-4ca3-86f5-b29d368e2cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e22515d-3a32-43b7-a78c-bab453eaf64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70b8443-7bc8-4bd7-9400-bcdc5f85fe38",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7850dc-0949-4206-853e-8bada5bc4008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236ce943-4d08-4899-8597-7dd52d163dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f5a81b-be1c-49de-9b45-64c440d1c094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c84f239-02a0-40ab-a84e-a751cb1a8888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f59c48-aa69-460d-898e-338028b33bf1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabf9b45-477a-4e8c-905b-5e52543f9c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24171554-d1ad-4d29-b54e-ff285ddf75b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6598e7-8418-4f1c-b408-53580a358b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "908838f9-ed7a-4560-ae71-dbffc4f4b19b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be8fa54-2b0d-4020-8a5c-63a18fc3380d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb36fb5e-6883-4e04-9984-83f55e6f8f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "151814a8-973c-4f1c-8ce8-39fb880eaf69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05919970-1e2e-4d43-844b-27245ac44028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0821bd74-66f9-4f72-b47e-c392e3a06d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b08a128-acfb-4439-8e73-d0ef0d1caebf",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d446f3f-ed2a-4c33-a9af-b07ffbde61f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d0660dc-32b8-459c-ab12-90a08dc2be86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49df1a6f-3d0b-402d-8b8a-0812401a0819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd32bb8b-9432-402d-a6ff-7ffcd0f409c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16db9315-2408-46a7-b7e4-75c9c6d0156a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2aed6c-71a0-4406-90d8-834df346098e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63590c3-542e-4156-9b2c-7bbe39aa9077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697a71a8-d2dc-4b06-86df-e74c9f000e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0c2c96b-2d12-462d-a85f-817411cc451e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e0100a-182e-4540-8091-70fce3e19f09",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f1de8e-a195-4ace-8e7f-e6dbf6ea16db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e4939b5-47ec-44ed-81fe-4ce812f9040f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ea0e05-96b9-487a-a166-0efd47c68766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a06f1966-b3ec-4635-8b5d-199b7c95f28b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9b6d4a9c-cc0d-40c9-a60a-8c24ea2fc252",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "51d8b9ea-8b6d-4b5e-872c-8f7f7c8d4e5e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00399932-94b7-4d8f-8c4a-12467b81332e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "47867d72-b277-4628-866a-9f7c5e037ea6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e308b8-0436-482e-af3d-8462736cf22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7af420a-6214-4714-a5b7-024736bd5c4f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "557d464e-c379-4cbf-a210-49fe6aac8c35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d69c93c6-b967-4fcc-9562-4abeb885029a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cdaf19f4-91ba-46fa-b5d6-339a90b9b9b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53adf511-8806-4220-a12e-974e641eef80"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f18bd7b-1581-4f4d-8969-f545792a8cd7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c1ab2dc1-d9d5-4f65-9cff-37db3bc5afdb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f10a5615-be81-44be-8819-edf6a2ddd69b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ccd2bca3-74b6-46de-83e0-c726aab9b809"
            }
          }
        ]
      },
      {
        "id": "6d8f0857-1167-4532-aeb2-45f9c5a829ad",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "9cfebc0d-4d3e-43e0-8b88-2968be17395e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "07f72b8e-04ee-443a-b5e4-c19cbbdcada0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "31c183c7-ca52-40a8-a3bc-d01643323cd3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a50c67c-9b9e-4a3e-859c-52ab204c6de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74c0592d-9c99-4e49-8835-2cee7cb25380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c665ca-cbd6-4dbe-a127-5e6972862fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b5d781a-719c-402a-b415-bb1cfa45f187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95881d90-c539-4dfa-b681-ad6ad8c401fb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "545ed0c2-d509-452d-841f-432acbb3b199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d10fbba-f3fa-44b1-ab65-21f51640ce68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f264b7-df98-4c3f-89b2-5b40989dad94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d62590a2-24fc-46f0-82d3-a3909995d46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efdbfab9-9d91-4a87-b8cc-b3cf4ed2bec6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "419e7e41-4af0-448f-ae33-08849aea07b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df32c5ad-1578-42c1-9e17-7e2f65f149a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1b29c7-c98c-496b-94d5-2831c5c02ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "458a39a8-29fa-4f69-b6c3-dbff308babb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3c3a75-35b7-4fda-a39e-0849fa3c428c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a85b2e-33d9-4fde-971f-38763ac253f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ee9de9d-bf34-49ee-90dd-a0358be84aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2905c213-92bb-4f38-b7fc-146b762bb1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44ba3403-5897-4759-becf-835b0fc995ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4232f08-4207-4006-9195-755e8e8198d6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71fd3e11-5162-4508-98ff-9baa3ece1e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9a90edc-d129-4ff9-b9c7-6e41d358c38b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893243dc-e0eb-46b7-8927-ee30adbdb15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc0e91a0-f938-441f-a06a-c3716d560e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b334baf6-306f-4207-ad7e-bc1fdce463d5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d545dbd8-3876-4460-82c1-3b26f9ccd490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c03fbeda-2e05-45ed-af1d-91ac789fc653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b60ed8e-834a-43f9-bba7-be4ba1789e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "17d5802e-9c96-4d47-a2f9-2df1899739b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fea968a-2607-4612-a3e6-aa0aad56130d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d060da-fca0-4e50-bad3-e24b20b10311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a355571-b2fa-4197-bde3-7f1daaa9d4b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230a8d47-cbb8-4d75-a065-1e489453a1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b95784d-363e-4c55-a6de-a7d6e14b756f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224aac51-e7b0-4f38-a2e7-c730284b3d95",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6950d8-39dd-4569-aff4-4f760d93f9cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b20ab6-b0f3-40df-8dee-87fe2a7f0edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f84eac-7745-4e3d-8c8c-5ce78874a55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "04bd2d73-9fcb-4cf3-864c-b63e3a98eefa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b31b33-6de7-4f28-9ca7-209862cf5cc0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad56a56-4eeb-4bed-a9e2-1d70ba334a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33fe951f-5f9f-4987-9f53-fd05c23b5a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0401a01-9a4f-4742-aef6-1f67ef514e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9584117e-e48d-42d6-a89d-a72f05aa3c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c853e1d1-3881-4667-a108-062af9fb0a51",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "962bdeb3-8f96-4662-8b25-bc751e0ab69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab90fa7c-4442-4a4c-a19a-079b4a5eea86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1779a13c-c85a-4430-976d-3dd2ed17768c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbdf3a27-47a1-4751-873b-193ac1834fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39d00ce-be5d-45d9-b9fa-f52bf0b85557",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "745d0690-27cb-4b3e-931a-620168f0929e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef7c8d89-e4d8-4b70-ae2c-fee658bc427a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780ee388-bb6b-48e8-ad52-62d029f5df5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a9133596-6aea-4287-aa16-dec439271a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8b9705-2f29-4dfe-af3b-d9b67f3aa520",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ecf2e0-a14c-4b91-855d-a759fa107fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55bf0d5a-a3a3-4821-8e58-cbad030e1ca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce36087-c5c3-458f-a977-85a89c4d53f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf217ae5-243d-4739-a435-95c68a3c2bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a796f9a-0a1b-469e-8749-7d8a944edef1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed11493d-1697-42fa-80a1-790c8cdf82fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1387684-db25-46a4-8903-b5868b59b728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef19525-4b63-402b-b2c0-7f63d2b6019c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1eb1eb49-2982-4074-9a2c-41fde85e6d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bcb9c65-5c09-41ac-8f70-05c30d6d79ff",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de34415c-4c8a-4fa5-83f0-1751ddc0f4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcacdd48-1c69-4e84-aab4-909cfd9e831d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1266eb-307c-4963-a674-be621ad2d9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a48b011-b901-43d0-b59c-abbd0cfb98dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a63d8a2-1979-44a2-82e2-a7269dd78023",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5aa252-c40f-41b0-85bb-835bb0f766b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e7cdd44-c9aa-478c-bb23-b667856557e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd715bf-eccb-4ed8-9978-6b8349c79b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8af1a8d1-e40f-44a4-915d-aa3482892e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9097e58a-53ed-43e5-b934-1752f5b50bae",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b6ffe77-a9fd-4641-903b-d16deb74afe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc0296d-2871-4ec7-ae90-9ed9ce978ab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b47ad5d-6634-4f28-8335-d84e4392ca29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a25064ce-79e1-45b7-b455-1f2a1f11d504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab080a86-61a8-4062-9988-417188150a28",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f69b0b9-f073-40c7-b7ed-889e096ed3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1746691c-783d-4451-b36e-886631a500a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30be677f-32c4-40fe-ad53-f3922078e8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "56e2d254-838a-458d-88d6-9de43cc7a95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a5be12-ce60-4482-8a6d-c9998908b2a3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c476f9a-bc45-4c20-8d05-1653b930919e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1952f1c6-1bfb-4e9a-806f-89d502d6bd82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd362667-1829-4545-adc5-78f578fc2696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c91eb04-89db-464e-8e3f-3a07a2acffe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5369e01d-5e47-4faf-a2ce-ab41f54cc983",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1952b2-7117-45d1-aa7c-fd116852bc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c56b245f-662e-4c04-9f41-8eb7fb2d8c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3281a92d-c08c-4d46-a376-ff741deb721c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16962bdf-f061-4e7c-bf57-4c6398bd0bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7527dbab-3fd5-4f2b-8e20-1735aaabf3bf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404296df-7a45-4e69-b7bf-46c332f7979d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cef5d85-3b50-4dcb-9577-3aa8001ffb13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc05f91e-97d1-4772-a0fc-1db87d99058f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34af003f-748f-4cca-9ca7-aa6bda3eaec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79610b01-8eb8-4086-99f2-188aac56b3d7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db00dbf-44bb-4c5f-b256-45da60e4918c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fceb738b-f05e-4eee-a677-29e64a42e23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1bc27f-74f0-4c6a-af29-41a975b6944d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a7f1e06-7804-4c80-becb-f1c5bee456ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd24379-663d-4964-b3f9-7467622d0994",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9e6d1c-8870-4289-bd3d-5c4d399d37f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d13c918c-e063-4433-9c36-fb5bce749eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1050872-1a60-4be7-80fd-25a77d737da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf71d5e8-30c0-4a03-b82b-f01851f3befc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bed3854-338e-4724-be04-76921c6d6074",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6c7fdf-604e-4124-966c-fdd30f263cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf5a90e-3369-4e7e-b61a-523230e3cbf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caed4d7e-7f32-42b2-94a8-0cdc248cfa98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5444421-6684-47be-9649-163e9afe32a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a92ae428-16a5-46eb-8acb-3d0fe4be26cc",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "776c8b68-1ca3-4cb4-992b-b0a4daff1800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4fd96bd-01ee-40f6-9103-3f9c5a9b058b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2512fd1c-6638-40c0-b707-450c9960ba4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "318ab4e2-532c-40ff-8f0c-9b57f02dbf07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6c0b37-0345-440c-8e37-bcd6b59b8d63",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74ec106-67c2-4413-9d26-b4673e59c3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7e48564-1e05-4a1d-b718-81157c6f6872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46564c1d-7c56-4118-8d27-66ec31909993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b29bc72f-49ff-4deb-97d0-46f4db3522f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c0e00c-ab5a-4b37-b7bd-5f258e2ec1e1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d10151-43a4-4093-aeea-7c40b7b14bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a7b0a3-1f60-4e81-81e7-c062c7be3cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d9d3b6-06dc-44d8-bba9-64c93aff97ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d53892a1-1655-4c63-b3ef-4d608806ee23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0194e54-b0e5-4651-9c27-e56177f4b9e7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "914fd95f-271b-4d5e-9986-8568f1b623db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e71411-6c56-4f1e-8c6b-18b80d7d61f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "249aa63b-a981-40bb-943d-5b23423cfbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33b01809-fd2e-48fb-bb0d-9157d4bc84e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e0ece37-374b-4c0c-9d64-8287254a2011",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ad9d95-3558-4f58-b43a-5724f5e54382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7242f829-3f54-490b-928d-11c2404c7634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43b6beaf-1d48-4389-897f-8185e265b704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15b6c26d-2bfe-4fd5-b3ee-5364b5214f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5f19e3-a524-4338-9595-9bd0b7469e4c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d88f3a-a901-4ec2-aaf2-0afb0ef14d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0885380a-12c6-4894-bdda-13654d71ee04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbad49c9-6699-4f1c-8b99-d752870dda3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b2956cd-aca9-487a-aed0-d4dce20469fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f672c541-2f72-4c62-b65e-45019b2d6fa6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c853a77-7096-4a1b-9f51-d45e0f738c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92bba194-2344-4a39-a4c8-6a3d5c2bf685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9640295c-0d62-4cff-9d19-d3b4f3f8c3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab19dbb-bbaf-4bbd-ac43-4984ff2fdab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d9adc3-ec3b-4851-b31e-4d3de4450b16",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28da596e-84b5-47fe-82fd-26ad31ac219f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83179ad3-3be9-45ba-9baf-d8eb5bc12be5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f85a6c-3119-4f13-8355-33e898203af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86ca353c-cfe0-4647-bf76-8cdef5c7eed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e72d7a3-db86-4a63-8933-91c77390f168",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c3507e-0c95-4f4b-a7dc-00c56b0207f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35afcb5a-e25a-4619-a06b-64b816b2bb07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1ddf60-7c7a-4a7d-b603-7a7727ca483d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a752f4be-df3d-4375-99fc-df6aebe55702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e83743-8f41-4805-9ef9-70ef949cc1b1",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96570916-d1d5-4fe2-925d-bb959d00184b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73203cc0-753b-4f1d-9f7d-355fbed0e011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f5a8a9-7277-4f24-bd1d-7cc046423489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4d36713-a6c5-4ba5-9b36-e9a5bc714205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb04e8ff-5550-483c-abe2-9223a40f641c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f873d05-af26-4c68-8c17-95cb1829d63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ca00842-9ee6-4f2f-92aa-009a1647935f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f100355-105c-44d9-9ca6-a964e78aa561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21ea05f3-efa4-4bc7-af9a-ceacf960c1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0393abd6-00e5-4ce4-8803-75b3613b6133",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9306bac1-646e-4d41-a53d-f98f063c8158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e814abb-16d7-4362-b0c3-6146bd2e1389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0afe842-3d16-4ac1-819a-9a740f9f4ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b174490f-c0fd-466d-805b-f9a24496f79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f34959a-6b81-45ad-a4da-029e2116983e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e943d9-cf21-4cb5-a200-f043ff44d45f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41e99501-27be-48b7-9919-38b0ea7e7f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6c01d2-a5af-4121-8ae3-1694c7065a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94fed6d2-8191-40f8-935b-50b2df9286ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45724632-6bc1-45e6-aae8-581ee59d0e6d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0035bbc8-5096-4e84-9e9c-6f8b5e859040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddcea75c-934e-4fd8-a6b6-bf4e1975fcf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151a31d9-c6c3-4a9a-a7cd-2e3a04a1c5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52de92ce-9f41-4791-a48d-7acd83e7fec1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b70cc616-d5a8-4c35-95d6-151ac0796382",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1adb0714-2c86-4bbc-a74d-201bf1674072",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9e0a65-de88-4f63-bd8f-68296297ad9d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0e1763be-cff7-466b-87c2-45af588cd6d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4382775-ec93-4227-80de-1399330d1896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a624c73c-3887-4a22-b14d-b7bc322507c8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "945334a2-765f-487a-9380-f5d70ffb8b4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a6da040-6cbf-49c7-abd5-a0c304d58ea3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "06777026-e658-42e6-97d4-a8dd05e7bdfb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b654940-c944-45e6-ac5b-81a43604a177"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de0f4718-ccad-491f-b559-97e28c4c1081",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9ad78071-ad28-40d3-9d61-52ddc36746a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "16c4254e-77d3-4641-b7a4-a5c7f41d12ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "466b9ba6-fd5c-4cfb-8f6a-7d46ccc02463"
            }
          }
        ]
      },
      {
        "id": "32b649ba-b256-4662-b28a-ccfa1322cafd",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0823378f-0057-498a-a557-273de07b0480",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14824c30-f794-48a7-942f-35816a783d3f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1b6f9adc-51e1-456c-821e-ab9448d997d8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5586ef61-d07d-48c5-9436-5be015f0420f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21fc6e89-8012-4056-810d-f32d06f5519f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d8f68c-8d0a-4716-ab66-055d3fd505ba",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639911bc-3397-461e-852f-ae849ca3698c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb2d96fc-39e9-47f2-84ac-2356e1ecb63f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec14f3d-f9e3-4600-b461-53fb1078bf60",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e77f7b-4bcf-4abc-90e6-dbc6b7ca2e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c1326bc-126f-4284-9536-afcbc6ff6ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6797cec-fdc1-4996-b4da-259cc281fd62",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b8be07-4d7a-4b37-bce9-e9aefae06a1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b78d8a69-8405-433b-a8cf-12c3df49db80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7411d9bf-bdcb-4d3e-9cfd-5ed694fefde5",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d35a54-2b66-4512-8aa1-51992b484804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c6cc4e-d0a6-438a-aa82-a61297fd9ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73df8f3c-a73f-490c-af59-4af7703a629d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc63754-0dfc-48c9-9fe6-091766e5d88f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb37843d-82a7-49e6-b18f-aa92ce500e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4730957-2415-41eb-b1d9-1555478e5596",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da75358-963c-46c2-8e36-e5015808be71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "099b3271-bbec-40c1-ba03-4fe262c14c25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd69723-5223-4e1e-9ab1-88fdce0bde08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd50df7-e870-4e90-a7a1-83b089d7a32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5fc900-8fad-41ca-a03d-00d9a735d09b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d960372e-d761-4fa9-a84e-c3a8f20cee54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30f2ca73-3aef-4e28-9534-c00c431d5d4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "014cedd3-401f-47e1-ac83-819b345ec0fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a7bb36b-a16d-4ebf-ac2d-7ed2bd1d0a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c04808-8392-48d9-aa1d-79dca00c29f4",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dabf427-18ee-4182-bc39-4d1e94b8078d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad969f8a-5f99-4472-98f2-4f8ee7d9cb5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76fffbe9-28cf-4700-b54a-4b994efa61ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23101747-9d88-4295-ab11-8e9f83045b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79b9416-d869-4ec4-a257-1e28e5b545a2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83638c9-82b7-497c-9b25-3faefe49f1a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5f2cd08-1383-4de6-a824-9496741e72a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "546ff4a0-5ba0-4e39-8718-d23dc58341fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b4341da-8fb4-4eb5-b34f-70e94838d191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb6809a-0fa0-4df5-b466-a8bc82105763",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7197eb6-b5df-4383-aadf-1562c75d6f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d58eae9a-f9ae-4bb7-ac09-c177286eeaec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e55fee-3d4f-424e-a28a-cbdef140cdf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b11e31d-7031-4bea-8115-8019f60285c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466c323b-b0ac-4062-b878-2ef95f090928",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bdeb1f-6199-43b9-add0-666ecbe70de4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbda64c5-ae25-4cf4-b5d7-29461254f1a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "627a82e3-563c-4d8c-bd50-2f04737a2699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "995c0c78-7642-44d2-ad02-0a94bdc2cadd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac49fc2f-fd2f-4509-b13c-bd68c4678575",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32f3831-9538-46b1-a712-5107883dba90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e3496f8-b099-41ae-afb3-1c3a99a0218d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2d6c1e-3d23-4555-8acf-54b7eecffa7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6a20eb-03f4-40fd-9a68-2b84f0927974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77da49a5-8ad6-4d76-bf2f-0807bb4be285",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee99f3b1-2326-4ff1-988e-5b6f8e67a5f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5a9e140-f721-4729-812b-761681ed874d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c593b7e1-a26f-4dcd-930e-bba2555f6f67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3129f23b-b7e8-45c9-a38d-16bbdbbca22c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1d44e6-36cf-4a5d-84da-001b7798f223",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857f7568-1633-4557-9e93-a26021b1f5d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cdda4e0-f300-4b05-95a1-9f92a676dc41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad1a829-8fdb-4d44-ba9d-1006a3c3c726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d5c3de6-6327-4cb3-90f0-d584afd2dcc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6e8067-b048-4d51-9836-41cc5314f1c1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f35ac35-9ed5-414f-a7a1-8603b9415e5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad15a657-9661-4a4f-95ef-ce4387c5e9b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb29dd1-98d9-4a63-814f-ca9b343fd3d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42539ef-5657-4dfd-aa48-1978a7bbe62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081c32a6-a9d0-485f-a3b2-e8183879b491",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd81b350-034c-47ae-9b77-b27f30d93cb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f02564-e6f5-402d-b6d2-5a77cb9b80f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee662318-d4cc-44d0-9a00-cebd35d3bd16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "013f085e-8780-4261-a426-d9cff77b427d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861a5396-be28-4b44-9e46-67a2f4df572e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f1ad60-93b9-4a87-b148-a8b3c199e5dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f53eb6a5-36e1-40a5-926a-53566cf2e6ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9be3080-634f-4908-89d4-f1ddc062f0b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31f87a09-1f7d-436f-a58a-413ca007c281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f702a094-ff82-45a9-82c7-28175d305997",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ca4a53-d758-4f04-8a72-673418d7a9fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d35537e1-c5a0-4350-b001-10342dee0c38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1245a4f-ae20-489d-9e2a-0ed52946e6c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b850af-7ab6-491b-84cc-79fa4aee58ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273893c4-6ba9-486c-abcf-1c0f063c52b9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e0c69a-e0be-4571-b90c-763bdb9bf217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e1b3749-ba7a-419d-91b1-d747ade194c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd518eb9-ada3-4c62-9290-950af20ae2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3477dba1-50eb-4fbc-bae1-adf616713ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd47571c-8f73-4a1a-baff-1d72d3e7b250",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb6455b-adf6-49eb-a620-21d02afe06c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb394dc1-708e-4e51-b353-7a30663acd59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "796cf41b-4d70-41ff-aede-92595af0f048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c733932-c777-406d-959e-5a54b83d744f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afec5761-3c3a-4fa0-88f3-9ba19d2765fd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d210575-1eaa-45b9-bf18-2aee3fda63d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e21ac7-9c08-4ea8-a924-b4f83f036b1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "390ec2f5-5ebf-4854-93d6-3733d1531a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2957a5-4e51-4989-a11f-ee2c5060b327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3e3cfe-34f4-4241-9420-06658b6c79b3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e690e16-c2a8-4365-bdef-ebaad30a21c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67e5707c-9fc8-42e3-b57a-702fe3107a7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "554bb771-252e-42ad-80ec-ac0fce317e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df8054a-4748-4b16-bf83-745f1d7eeb73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c743839-2145-4ac6-8da2-8c1ecc3506e8",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32629285-9e7c-49ca-a999-af868ab2e5bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa7b6ba2-34ca-40e9-9f91-e5a205d4526c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43112a9f-2c62-40ed-9b9f-6b3c63cd1a73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03bba9f5-5935-47de-a20d-a6224e80c73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47c8a26-2363-470e-978a-5ece80b69de9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91415a77-3dc9-4bc2-8f9b-bf9ae3ae59fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9643700e-1ad9-4797-9407-4a1b00aec200"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4655cd5-af62-44a4-bfb9-6b53cf4b7960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def53f2e-e274-4c28-a67a-6f72977298e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304103fd-2951-414f-9b85-0aa05c46371f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03eaa1b-c951-426c-ab01-cf03dc64f189",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5232fd52-f3e6-4cc3-8967-0fc58ff6dd4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f9294f-5a95-4986-aa5d-029916aba61e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c72604e-b2d3-4809-8870-64dac9de43eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ad0fb1-0086-48fc-8ff0-b461c72b205f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09667cc-c696-4518-9601-03d97b149656",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c36e0843-b30b-4af6-aa74-3ad821dca5db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10323c7a-322e-490b-ae2f-8ac0af5eb59b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d4a65a-26bc-4daa-b400-5e04a6294069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004cfdd3-7a68-42f8-baa2-cc02a7e679d8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6567bb5-cb0f-43a3-a4ce-9d55ec4c8df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f81f3abb-b230-402a-9617-cf7977b746f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2944b6ab-803a-4cb2-812c-63226c4afa84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa45bc73-4865-4f14-9596-8ced63bbdadf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c2a82f-156b-412c-8f10-80f8d306789a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e62aaf-dfb1-40cd-b2a7-888d3129e1f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0bab99f-26be-4787-aaf0-843ba7eff6e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6c0b70-2ff5-4bae-8f27-6b3e3568edb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04cca325-c5a0-46ed-b4a8-4c74a9db4dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316889fc-9d4b-45bd-b5f0-5e122fb67447",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fdbd839-8b53-4f59-828c-cd56d913502f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12615178-3c8f-4eab-88f7-e5e68add3180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fb6b4b-4c26-4452-b621-ac4baeddb8d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f243b389-21c4-4225-acf7-07c89109a0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808b3087-5bb0-4a8f-a7fc-3ccd4ea9a022",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345c3526-9ea6-4f90-bb9f-71e8dab73d33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1190e88d-549f-4017-9bfd-54c122a3c32f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4587eab-4f68-4251-b4d4-793b9acdcf85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e36731-9340-4698-8363-9eb02c03c836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e998fa-7bad-42aa-86aa-493b8cc7e056",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b1315e-7de1-4e15-8d57-664382d112a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "970547fc-9896-4e56-abb9-e832696d8352"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "808bb028-c055-489f-a46f-3c47dac5e373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "928cea91-b759-491b-b314-4d57cae5feae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b76d9c-b204-498d-937b-658d8e50f74c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e6bd5a-446f-45af-b59c-718ad16d4a33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e314a3f8-56f7-4ca1-a0b5-c338926eec72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "830561d7-c604-41a3-98b6-43b4b3a9b940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01faaedd-c3a0-4f4f-bfca-5f0ae70bb63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff1ee27a-3c98-46eb-ba37-bffae86b2c12",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2d8302-5e29-40e0-99a3-b7a954619d4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7f63c43-fda3-47da-a7b2-735c6b2b8ff8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60319280-24d1-4e95-93fb-1e39afe68a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a27a0d3-f5c2-4190-9e11-11ca9e9e589e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34d9cdd-d2f3-48c8-a1fd-6b5c91429723",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e72d95-e9dc-4087-8624-26e0f76d06f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b3c4cd4-656d-471b-a897-5ac80cc0e4a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3b5a9b-5667-4b9f-a08b-860737fbccc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "329f52c7-3f9a-4551-971e-627a217b1852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb0ed09-56c1-4d90-907c-9a4a5a96b817",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc7f9e0-641a-4d72-912c-ab9139e0d8aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75e761b-794c-4a18-b9e8-de21d1262aaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d62827-be7f-4da6-80f6-d7a302588cfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c461640-a0d5-4f60-a7e1-89c0b97196b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d8a5fb-f8a8-4cf9-8cd9-184bd336f988",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be013d20-3d30-4c6c-96eb-31b25903b06d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2175aecb-7426-4e6a-9f33-5f1a2467eb40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d2a8b2-55e3-4569-944e-021b6221121b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16713e8f-b78f-4261-b0d8-77bf02853887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128d3585-7633-4ab2-b8f5-cd699aba7dd8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07ca901-4ca6-471c-b4f8-d777209f3d80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e135380-2980-445d-8adc-6e05e33ba0ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6256f2-3759-4240-8ab5-a11e240cb89c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99b9f0e2-6fd6-4d9f-8941-451d25c0d56d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d19f05-303d-4df9-811c-0980efec1271",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3ddd84-2ea1-4a1f-b911-fcfd13745bef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055b6cff-b585-4a5a-8486-1d016709971c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a01554-0217-43e0-8a4a-4298e97b62a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a1d038-d2c1-46d6-8cd0-848f3b23745c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e79687-25b0-4953-b0ec-ff4aa5b87532",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3f57f7-f5d5-4b20-8e56-6721ab454d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f471df7-5463-4d78-b5f4-6cdbdbb20f08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "335cedc9-b08b-4cf9-a5e4-fad97fa45a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "592a1357-296d-4e45-8654-cd0859a98b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304c2d7a-71a7-484a-b915-ba60293617d4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364d0291-807e-451b-9ab4-58998499e1ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d46e3545-71ec-44e7-9a33-cdaf41d703b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1768bd05-b1d8-4196-8db3-f45ca5177fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "235ce58d-b42d-408b-beac-5204fad5af63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572e4322-78b0-404e-8bff-bf9b33408ca8",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6f2b23-9dc6-4229-b6c5-624f515b968a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f5e76e-02de-4dd3-b64b-66a06356702b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f23fc3e-b0b4-4234-96fd-f915abd24982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb02925-87dd-4d0b-97bd-60bec7573b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c6704e-29fc-4000-b06c-1dfe736868c8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13f12a4-e3b6-4585-9f44-529e39820092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f06538e4-1f60-476a-b57f-904ae11cae05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "786b07d0-63f6-4bd6-9e27-85e00549bf24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91bd50c2-830c-467d-b554-22dbe7367107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89297161-c91e-43f9-848a-db90b9a4a889",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00fc10b2-1669-4e77-914b-a49a55e55401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c4c5cb-01b1-4df1-afc5-5e58ff8edf3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d730c128-8f0e-4191-877e-6cd51ea10aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f28d84d3-d322-48eb-bebc-d8aa93344390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0abd04-b44f-4c93-b1e2-de58b828841d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713652d3-48e4-4700-9e9e-b1f5c4f9b36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f0d089-cd42-452f-8653-45d451f43ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb08c9e-1910-4e53-b51b-76a944f7483f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "239a6714-9e60-4045-9cad-8b0ff3ad3870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70af31bd-6603-48f0-9a36-f04e40b21326",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1baee59-3592-482f-b91f-07ab60b4b92b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "874afe54-5987-4f47-9f9e-5a8676cff453"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a54b505-7e65-41b6-b0a7-5f1fbb16b1f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbf0e7fa-d1e1-46ba-8c1f-ba6d5841b17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67458790-6c25-4467-b142-9f03e930770a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913d119d-f8ee-4ea9-b3db-093eca7b2b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba23d3e-62bd-4e2f-a9ea-199a5cb307a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64980b8f-d05f-457d-a70c-feba7715150a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0670c490-a7c5-44d9-bfee-4b33af0c7b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b996ad-6ab2-4bf4-81ae-0a673571dc68",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c99f02-8b8b-425b-b089-d3ad2c43c0e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b40be33-dd67-4c6f-b2ff-6e9ce6976525"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7c34cc-fec7-449e-8cfa-c1d1fb29318b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e164b7-037e-4cfc-aac5-1af0aabbcfd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203c2be0-8b3c-410d-96da-12c33e9054fb",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246ffb15-c976-4634-87ca-c31510a6d0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19a4dea7-131b-4b56-935b-d5275e0db523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db6f8c1-82a4-4716-9536-ae99360eef38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "990f0f84-2f86-46a8-a7c2-230741b1c290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53fb796-4cee-4dc8-b80a-8e2fd2af2bbe",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424ff15b-1b96-4766-bcfb-311f8bc15ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b803232-8ebf-4d58-b1d0-3942d1c49145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66bf8f3-4191-4689-b760-d2c6fa125563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af782cc8-8e5c-47cc-a809-af13270cdf3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a08158d-d14a-46d8-948c-fbc7d78ce48c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1872baab-c0a7-46d1-a36c-784cfc48b325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d5ade6-84e4-4362-8664-f206fa38eaaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4fedd2-28e6-46b6-84e7-fcbbb117314b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c2fdc7-6b0e-417c-92ed-e3926c0626fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd7ed09-6482-453e-88f8-d7c88fd31820",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7f8f05-7628-4553-9868-fe4938a732d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f211ab7-f561-4d05-b579-a916350688ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7fba8c-f671-4d8a-ae0b-20a896672cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9aa6354-388f-4214-9dc3-e6ec072cc7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74351570-01d6-4bf7-aaa3-832cb94adaab",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659ec10d-2bbb-4403-8b86-c7e4bcedda52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0631c646-288a-418d-af65-f04fe3cb5b7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef35562-4861-4674-8813-155572881199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0ef593b-6ab0-4aee-8883-c5d862bc131e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771f12d9-d998-4b24-b518-8a66de047532",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22c5f61-9d5d-4ee9-85f9-e906500a1cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e4e1cc6-84b1-426e-bd97-82cb78c4c2d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e608d4a-6fc9-4290-9d1c-c7634cd04997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5d0b3bc-6178-479d-8629-c900aa07b8c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad03366-c123-4504-9959-c0c4d868fc98",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65263a8c-7775-439f-9606-5161532aeebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba63b3b-a225-497f-9cae-9dbe6430e001"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf20fe6-90f9-4b1f-a37e-4c91452f397d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c78d66-9419-4607-82de-d6d46173d677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1cb1990-8299-4d5c-9024-1bf07c2adc50",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72755b93-3560-4157-90c7-c1c2ced849ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b7c99ad-22b3-4f30-9989-16d98107ee0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79975a7-d78a-4315-bd0f-85db6dc9b7f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd29cc5-ed81-42f0-b5d1-52098cf8b924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014188d6-77a7-4cae-848a-5aaffb62664f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab6352f-1195-4775-a3e5-9641b74a0326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc577b9-00af-4584-beab-26754a4e83be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4898cc-c960-43ca-8e09-af9ff5e13ca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0b59d28-2de9-45ac-a2a8-20574aee5c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57c4056-82c4-4a27-bf97-5e0d5d1b8026",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55f0a6c-ae63-4e2e-b50b-fc94df606648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c1698c6-4020-482f-9bed-89cc7316d79d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6345d22c-3083-4724-942e-10ff0b488c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9730fd5e-16be-4630-acb9-690894f242ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a756e84e-ce74-4823-8048-c66d1165b8e0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54487d4-70be-4cf5-ac29-80d82a4a6f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7037cf5c-7fb0-4801-b147-2613d0666480"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85841f5e-3bd7-4e5c-b478-63ac123c9df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe996736-36ab-40f8-87b9-11bc63ee4ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca7b769-3b70-463d-b38f-3f7f9c2e4631",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e2d249-5e1f-40f4-893a-bf30fb76c791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6768285-7c9a-42bc-8913-bdd8e0f226e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8236546-9158-4809-9007-fb24be7eeafe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd39ee93-54a6-4d9f-9e0f-994e17f79bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e561283-9f1b-48f9-9b7c-971679da700d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6add8549-2354-4f8e-a1ac-652bb3ca774e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb173ce-e02d-434f-88e8-62d160c5c44c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d354d282-29cc-4dad-b52b-3e35949d0864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "344e3150-b5ec-4aaa-a7bd-cf514bb5e677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7140ad-aa1e-4f48-98f7-42b301e3e96d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85268ae-8cda-4748-8e11-d2c2d96f6b9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe6fd0a-13e8-4bee-8f5a-7d66f789173a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c27ac6c-c7a1-4e7f-8491-ab03eb50c860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a5b1a7c-9484-44d7-82ac-7c732fd3ec4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d77eae75-3194-4bb5-b483-59f1d0f1c65e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4388b4-388e-4d16-9604-e4514fea637f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89686b02-8e01-47a9-b0e6-86c042bb2a6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "734a7584-ce05-43b6-af99-b2e019a4a91d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1808a35c-dc40-4d93-bd9d-d364161718d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84dddfdd-bf51-43a4-be1b-77c943808b09",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb783d8d-95b1-4c9f-8597-f5af4486c465",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc6ab1b0-ebd5-4ba0-a073-5521dbe5a343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac22860-6983-416a-8c4b-5f346a7f0605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf0e2a9-0be8-42c3-bdce-3279c0a58dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6631a2a-9ba4-41dc-a204-9addfe94c4b6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6729388d-a702-49cb-9c90-cd037193f78e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9732d7ef-cd88-476f-8356-d1922abb72af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55ee387-4a64-4a4c-8f66-092edfa2c451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "103b09cf-1a24-44fa-9f96-032e9c70eb8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06e2358-b532-44f5-b43f-dcf60915e520",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce57be4-5913-4af6-974d-c20795ff378f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb07de1d-80a1-4f71-9fa0-01937e0710bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24200f6f-6346-46ec-8aed-423bdfe32de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "262057a5-924f-49d1-8c87-6fb1d1b4d977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af455d2-097d-4be4-9881-c7cd2e78ab62",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae41958-bac7-4981-aecf-c91250aff853",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4ef15c7-cdf4-4f50-aa31-406551e90e65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a4be7d-2968-4ab0-a0fa-0bb015a08190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c25c4c94-d0ac-44e5-aea6-590b466a0e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71aca788-ee3a-4093-a90a-e75417ed23e6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e6ecb8-b6a8-4bac-aae6-25f77d3e0d77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d43626e2-dda2-44aa-b34c-b14f3604e123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91f7229-6f0a-4897-9510-c3c3382212ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b8e1b4-0f23-4689-b2e5-ed91c2e0e28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcefb5d3-eb19-4c17-b32e-3590cf4f96af",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61fd242-672e-4961-b037-39cd72951406",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7adaa561-f331-4823-9af2-fc591aa1e55a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8fef41-0e7e-4f99-b700-7e24752f27e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e810793-8e95-4aa5-8d80-a6584efbb5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afe743c-0abc-4bcb-a3e1-ac535f80e2d0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2d188a-e852-486c-b5c2-9f2e9271d69c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "422eb079-7547-435c-8e14-160f76811038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41fd2248-c20b-4f32-aae5-c56567af2499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4312f2fe-a7eb-4ed2-b042-c3abb0023e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2fb1d1-e526-4171-b648-8fb6da1b4e4f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14a44ad-8c3e-430f-909c-d39fb657ad65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5641cf99-49a1-4412-b96c-01fb97773d90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f5dd96-a93a-43a3-8dd7-7aad3cf4de48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b344d54-27e4-432f-ac95-1fde0ab3c105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e40cc55-bca5-4140-96cd-dd962d39b6df",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b245a933-3e1f-44cd-991e-87ff8f540364",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d97500f5-21d9-4900-bc3d-42e1aba803a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1645586-4a6e-4739-9a55-fbcb9a3e6fe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1336b63d-af63-4823-8802-f5b677929d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f994dc75-bc41-4b6f-acc8-3c3e5bb5c8b7",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07dcedb-c306-449f-bf29-74e642b316c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28622780-86d5-45a1-947b-58ae446a80bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e683026c-6959-4307-a5e0-e94cdbf3a013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ad523a-365d-4965-9351-c8258ac75501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70075973-b885-4a82-97aa-2ed626b89f22",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b05625-ed93-46e2-80ef-541359818679",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba605345-8077-42af-9993-8054f6d7e85e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f5f22c-1091-427f-a28a-db9ac4f941b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed5db75-b7be-40c3-9555-7e14d70f9fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3caa80af-fe20-4630-8896-4f357c5145a6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b321bf8f-4007-472d-8590-33ab3f4bc001",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4941513b-fdb3-4531-bf00-300fc0fc022e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ea773a-14ce-4db7-9efa-222e24febbe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e516575b-e332-4a82-8169-3a72bbdac299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb588300-169d-46a6-8543-5f10719bc76c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ba0dc0-25e2-4179-9c26-172d468cefc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fabbb825-b0a8-4461-a6ed-393ce53f3f42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb82e9e-c183-4089-86e3-fbd9885f12d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89bd34d2-c9b4-492c-a673-e2d9b9c8936b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aecd5990-2e98-4a4e-8794-8f9a68867db0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8486a49-39bc-4de6-a5ad-255f7219c6f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2e419fc-e5b2-476c-b062-8a9cbf03179e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6d35ba-b3d8-4746-9438-dedda037ac3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d02795b-708a-4615-94ca-1479cf8099a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb47bbe-08c2-46c4-aa44-6f882b7780eb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86cdfbf-3f39-44e9-88b3-c614f28ab7b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19a43f48-68db-4412-8af5-16b92593bf28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "970c2a76-88a7-428f-9e35-2b4815db652e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71dc99b3-bc31-418d-a373-f68b561d957a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a435f8-009e-4df8-8a84-662e48bcfd90",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc4a0ab-7921-4c35-93ca-d7f5559de4fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3970acc5-cf97-4a14-9fcb-baad956440dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "907a131a-9320-4394-8977-6ba415f6b658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5c32f3b-5a28-49e2-83e4-26a1dff37128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4222177-dabc-4045-9b98-02e87d18035c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e523685-e60e-4eb2-a6a4-dd15e56123da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9402da2-75a4-44e3-8620-6536bb969419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0dcb4a2-1ad1-4bbc-b025-79fca0fad235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42920926-5885-4b44-b76e-2e0cd49226fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d88155-8709-4c14-90d9-c89fea3a6fed",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4611b4-1e98-4cc3-beb0-c53a83366a37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51ebe7fc-6648-42bc-b851-572aeefaad42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26eccb95-3d2c-4ec3-96e7-f555dbb26034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af45ec17-8cde-440a-ae1b-c92f575823b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924396ac-e658-4178-b76d-fed81367cb7a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b2a9a6-5730-4c35-b474-c168434e869c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "084ca96f-662f-4c01-b283-ceeabc2412c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc31cae9-9747-4d63-90fc-e85148450bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83eec732-32ba-496e-9690-3cffe1bacacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b4271f-9ece-45f6-a72a-803157327e72",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbe2cd7-f4fb-4aeb-b7dc-5ed1f9bba663",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52ccc153-11c1-4c31-82a6-2d17b6cd0d4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78470ad-f947-43d0-b0ef-d9aa4c99faa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c2fb017-bc4c-4569-bfb4-cf6d6a732e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b3a7c7-6b88-4b7c-9387-23fce587737e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b86549-05df-459f-81d3-6bd8103c92b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc0d64b1-d482-46b6-b9d8-51d4115d586e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a258894e-f960-4437-8383-2c671a32d6d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255f9710-0b4c-4c92-9009-1a753327e819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6fc0e0-3b2c-4a2c-b762-c6a02442768d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33dc5df0-bb33-416f-a9bb-bdebc71bd33f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f2b5de8-3c75-4676-8a8b-c907c3b329db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3a9aae-f8a1-4676-b36f-b4f49a8ae997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86719fa4-545d-44a6-981a-7641a8c6fa03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc8bde3-c4eb-40ee-8c43-8eec40c2ba13",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16fcf2ee-8692-4a5f-8b8b-d97c0a678b06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1856cfc1-7e4b-4c36-9725-cdbc09f4a188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78dd3059-17ff-4cc9-8ac0-8ca3bf7781e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac0bf904-db53-46f7-82c6-8cbfe21c464b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647d09a2-d5a8-47e1-aaee-6d0376487629",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf53819-64eb-4225-83b0-13a7b56cd1c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ccd7cd4-62df-41a5-97cf-0ace911beded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd16beb-3d7d-4cc6-9e90-ea293d3980db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b440e6-6f24-40b2-8078-302fdf5651e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a258754-ead6-496f-9428-b5764c7fa81d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be27b95f-4981-440a-9f92-52ad54f9bf40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5acd516-92f0-45e2-9449-2f0fa718b623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "022258af-f817-4ae8-b3cd-9c8200460452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6539508a-05c3-4fa0-855d-bfa60be11157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5d28e6-3bb1-4161-8198-ec6130b7327c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5633e139-8385-42d3-b2f1-d71d4498f99e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bd270eb-ff0e-4cd7-923f-9df3abc53988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dec896-fee1-4548-acea-d698e0e12d63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ba4b6f4-caf0-4194-b4bc-8cc81bedb24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f845cbf2-5f24-4a2a-88fd-dac264d95a52",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444df9d9-6a9c-47c6-b75c-8fee95da1820",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b6264bf-765b-4a3f-ac3c-58abc30fa102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "234246fe-fd35-4851-a198-9ce8ef2544df",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6ed02fb-f588-43d7-a265-03f6ae466efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25fc2a5-7ccd-4b08-985d-9c10c455a7dc",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0d986d-3d61-4f6e-bb32-4d7c6ff7a433",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "362f5f46-2aca-4fce-b8bf-5c7a1d25e54d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5486e7-e03b-46c4-a99f-9e630dc02e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f1f5c3f-46f3-4a00-9dd7-c6a0f1f18bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f112d6b4-f553-4a6b-b736-739a0c50ab08",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7afad04d-8760-4111-b30b-c9cb3ed20059",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c448b64-5905-47ec-aef6-8de2a9971b97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5fdeb02-242c-4758-b399-ae58c16ef408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d8d53b5-47a5-471b-b4a8-5cfa8a8dfa2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03db5e3e-fc3a-4057-b3d6-4a4e58584ff7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae0a96a-5019-47de-9a04-d3b43bd6a0ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e695cc3e-4d45-469d-81a4-0579e5d39998"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "101bde5a-fe08-4c06-af6d-af3a4ba8b75e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ceb7049-3d9a-46c3-9726-73f890a5e7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965ca100-60e5-4019-9b54-290778a910a9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25d8e00-5f9e-4bf0-ac98-6e3055789bf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e69daaf-3f97-4f52-afc1-c356e8b65f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed08e22-cd3f-4156-ad5b-23be50be7f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9042e6f0-27e8-4b35-af39-74a2cccffe2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1d5844-a9ce-4411-945e-d2fdd297d8fe",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821567d2-4b4c-4436-9f51-22cb2a19a6ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a851e55-92fa-4fe5-a597-abd00d418749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fcdf3f3-0854-45d0-b0f9-8e96b755659b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba95484-76bb-4721-b24b-7ad831b0b20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be54886e-67a5-4ba4-bcbb-150879211e0b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5187e48a-4faf-4d31-84d2-870467d1292b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34adcde0-6f0b-4e01-8af7-c29cbbfc2446"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a452ab-122b-4b74-9bf0-638ab9e8fe17",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d3fe261-a465-42d9-a0d3-045bafe009e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c206ea-c0ed-45ba-9763-11f4600b3388",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9f6a5c-4c1f-4b5e-bcde-f6af226f0b6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb6db985-faba-4ba4-afbc-dcf7f805c7ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f6d558-2deb-4e52-ace0-aa11a38289d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a34373a-5f61-4195-b5a0-cb332fde2ef9"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30319c7d-1745-4d96-a53b-7f6345253a5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2edd845-2a51-439d-a5e7-afe8cbdecd3a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c196cda-b0e7-4262-a5ab-969da8fe22b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71ba008b-db50-4df6-8d91-a9169de434c4"
                    }
                  }
                ]
              },
              {
                "id": "9479293b-16f3-4262-987f-fd21125d45fb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f9f5a9ee-27ee-4791-81c1-defa549ac91c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81512717-d827-4458-b13d-bc1834d6c1c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2c82fea4-7eaa-48d4-9ea4-dc7ce94e4c2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1128ae6-1ac1-4990-bb5f-eb7ee1ef3a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05712b60-0647-4dc2-a54a-a1407025236e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7be0963d-2746-4190-bca6-620bc9f74b21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25b71ba1-46f5-4215-8688-00a34cdba9ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1d2346c-3ce4-49c8-bd17-1611d5243552",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4715faa4-6c4f-4850-bb22-00d2612c69f5"
                    }
                  }
                ]
              },
              {
                "id": "507f3bce-a825-411a-9715-12e1ff498b1e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "407c52c1-0f1a-48de-a256-0372d3a61acd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c7a151-9863-4c30-8c50-c29e913c0396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "685f5916-1049-4063-a3a5-aa640d3517f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0911715e-975b-4568-a3d5-e69f95e268a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e32f03ec-f271-4bfb-8c1b-d5b7c943f045"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6433dd2e-8d96-436c-95b3-d1fe910e1ba7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3585489f-3d57-496f-a203-cd8bf3c9445a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2d35aa0-dd10-4b43-a5e0-bee0044fe0c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "66f8cdd0-6c06-423e-b2fe-77ee8cf50219"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "509d8421-ae72-434d-8a5c-de2c3a89b2e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c2ae9f4-4092-4829-974d-4ad43838c4b1"
                    }
                  }
                ]
              },
              {
                "id": "58609520-8d97-48a2-990f-b3674d91a8fa",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0439e6a-1e44-4467-ab90-080518a73cc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c40add67-567d-44ed-a8b8-62f3c383495f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e27e1f60-5c33-4c49-a647-c7fe32811e13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cab1e14d-166d-4d4a-ba49-2c1949e1140f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90bce27e-7a79-4619-b081-a7e80770e4c4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a9710875-d8bf-48b8-b799-a8938c38bc04"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b110502c-f5d2-413d-9fba-9cacbd174736",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ceec1001-cae6-41a7-9a95-9a4a9036628b"
            }
          }
        ]
      },
      {
        "id": "dc3d1c39-ada0-4a9e-b8cd-f2bb97de4782",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8ccc8f93-6b7d-44a2-8173-c9d9d054cbe5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9433a8ec-5fda-4fc7-830f-0fcaa0b0fe29",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25724937-de3c-4135-b98e-22c2e07a7c06",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ab869d-65c3-429d-83a1-943697063212",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "12e3ac6b-4b18-45b3-82ea-caf29f00e1ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce267e5-6e97-4c78-bdea-8728e48fd141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2d16f43-70e3-494b-b41d-88106e1065d5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7dde1a1-e8e8-4370-9a67-e4c58196db55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3c33063-6eab-4809-b997-9eca9034dd5a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6874afe7-953c-44aa-87d2-93b4fd12679e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23e1de44-79e5-42c6-b72e-1e7e392fdf2f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff3aa0a5-038c-4bb3-ac6b-de8cc825f0db",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fafdfae6-9d94-48e1-9f3a-6b89bdb8739e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a1a34805-0e87-4769-8f12-a7efb132eed8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7c8d4c5-10da-4d3e-a54d-bea43037d810"
            }
          }
        ]
      },
      {
        "id": "bbf0b00a-636b-4793-a369-d492729a2f87",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "95d79275-9403-4d8b-b92b-d7d4ec05f001",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8166087-8a6a-49ec-8fe6-55bcfa7aefb5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3d36d2f0-4a13-4fe1-8fbe-549039653d23",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd628a0-48c1-429c-a53e-92a679fe6a94",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca8bb5ce-6c1a-497b-8e50-af810a0e10a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c654fe75-2497-44e7-9c29-562f70ef11b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27bc2b7a-ebf4-4331-a261-1ef5f5eb16ce"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f921feb6-d1e4-4ab1-99a9-b0d83823b969",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "360e45d5-6d03-470a-bf73-47c44d8dcf57"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "08148147-c616-449a-a911-1a2f487d71d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3325b23-f5a7-4d13-b024-47d641435cc5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "18c2b2d1-9902-4fc2-9f69-54fbba7efffa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8e98f182-d0f9-4d3c-8515-8b47600e51d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed8bf247-fecc-403f-b5ef-d88fd09e7d9e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "33af90fa-d8ef-4a2c-b244-cb7998ee4793"
            }
          }
        ]
      },
      {
        "id": "7038c941-d5c6-4dcf-865b-91ac66c51c7f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "12bda086-4003-4190-8558-99f343c79a9e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cb0f2dfb-10b7-4663-a95f-81b27033bb43",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "640477f3-4f4e-4618-9753-8241c3de42ea",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32f406c-c536-4026-aa5c-9e1199ed3693",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23de3968-959f-4010-830a-d418827a06b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "987e5652-0727-44c8-bbb5-4061c9271e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ed4c367-b4e4-4df0-8b2c-68f2ff1a43c1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89f2c264-a032-40b3-9fe5-ad33616fda8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "adbbc192-487e-4860-9448-d9eb8f2316ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc793723-2a67-46e2-afa5-3dd74be62790",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eaa38336-34c1-43bc-ab72-d0ce19e485ef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53de7bed-0dab-4837-932e-d49035095c06",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f2b0aeb8-4513-4857-8ac1-21d9770c1f5a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2301317e-b2cc-4989-9f27-d311cade0b15",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "67e21b56-999e-475b-bccf-776fc18899f6"
            }
          }
        ]
      },
      {
        "id": "02515c16-522f-4b50-b950-25d8e9940c10",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa04ed40-e365-475c-a3c2-3d0db6daf63b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "156c43d5-508b-4327-be39-ee7c9ef52919",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "25a6aeb1-3b7a-486a-a5a3-de008a112346",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dacfed6d-c10b-411f-a321-48e5a1f3af6d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8dd40cb-98d5-4dee-b8d8-46dae4f4cd07",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 281.1584507042253,
      "responseMin": 10,
      "responseMax": 20200,
      "responseSd": 1390.2219980156447,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1687308119328,
      "completed": 1687308210879
    },
    "executions": [
      {
        "id": "99f14ead-aae0-439d-a90c-54c759210cde",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d69ebb85-8635-4c07-bea6-68bbad086f48",
          "httpRequestId": "8abac6f8-4d5f-4a62-a141-c0fdd19c155f"
        },
        "item": {
          "id": "99f14ead-aae0-439d-a90c-54c759210cde",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "bef20cfe-9fc2-420c-884f-6dca02edd732",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "b9ce8436-6235-4687-9c82-ae8aeae1e1a6",
        "cursor": {
          "ref": "f51a5ff7-fc99-4fe7-b096-5056bee4d126",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "daa940c2-8867-4c02-b665-7661c76d0e44"
        },
        "item": {
          "id": "b9ce8436-6235-4687-9c82-ae8aeae1e1a6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8989b672-4a8a-4d69-863a-f40f54c03f97",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "eb97aee5-affe-4753-b98a-2b758d1988ce",
        "cursor": {
          "ref": "e5b6a046-8ff5-480a-96e2-64d248abf251",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "36189d3d-63d2-400a-ae89-96c11676bed0"
        },
        "item": {
          "id": "eb97aee5-affe-4753-b98a-2b758d1988ce",
          "name": "did_json"
        },
        "response": {
          "id": "84552484-f0e4-4ab1-a156-ae9dd7143d61",
          "status": "OK",
          "code": 200,
          "responseTime": 391,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829c87e9-6fd9-4ece-88b6-716d7712d059",
        "cursor": {
          "ref": "98ff81c6-276f-4c60-980f-51b3ef834663",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f32b7ed5-011e-45fc-b7d9-f1808ae130e3"
        },
        "item": {
          "id": "829c87e9-6fd9-4ece-88b6-716d7712d059",
          "name": "did:invalid"
        },
        "response": {
          "id": "4c3e1fa5-1d91-4a70-b9e9-2acb5e4f2074",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2403,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "829c87e9-6fd9-4ece-88b6-716d7712d059",
        "cursor": {
          "ref": "98ff81c6-276f-4c60-980f-51b3ef834663",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f32b7ed5-011e-45fc-b7d9-f1808ae130e3"
        },
        "item": {
          "id": "829c87e9-6fd9-4ece-88b6-716d7712d059",
          "name": "did:invalid"
        },
        "response": {
          "id": "4c3e1fa5-1d91-4a70-b9e9-2acb5e4f2074",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2403,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "1472d4b8-f07e-4efe-8fdd-2554632d1227",
        "cursor": {
          "ref": "4e23213b-4f1c-4121-a0f2-33ca520df663",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cfbb5ec6-2f82-4336-93ba-54280c2f88bd"
        },
        "item": {
          "id": "1472d4b8-f07e-4efe-8fdd-2554632d1227",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "260efe60-909d-4275-a561-66c4aa08773b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 33,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c38c6a57-e3c5-45d2-a4af-41ae068384a1",
        "cursor": {
          "ref": "a2963604-cb17-49df-a9f8-802215dfe827",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "148e5f19-5b16-40c3-aea3-5491427b3fd6"
        },
        "item": {
          "id": "c38c6a57-e3c5-45d2-a4af-41ae068384a1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "fa05a767-aa48-4fb4-9a1d-182643fd3bdd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dce0afd-a5f8-487e-a8e5-9e7cc8f79e98",
        "cursor": {
          "ref": "d049cdd7-29c2-4e45-a736-e23cfcb77c4c",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4cb28e38-0ead-4d16-9ced-355b74abe5f8"
        },
        "item": {
          "id": "6dce0afd-a5f8-487e-a8e5-9e7cc8f79e98",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "97863ad7-06b4-4ae1-a3c5-267d5574ede3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 194,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "2da8d4bd-0223-4128-b027-2fb7976373d9",
        "cursor": {
          "ref": "938b020d-27a2-4fe1-bc92-6f809f78fcb9",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f56c56e6-c495-4a28-aef0-153e70694183"
        },
        "item": {
          "id": "2da8d4bd-0223-4128-b027-2fb7976373d9",
          "name": "identifiers"
        },
        "response": {
          "id": "3eb770b8-3eab-4c68-a30e-9bde4e2ff881",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6896a917-8162-4841-8d7f-e3dc38a2c80b",
        "cursor": {
          "ref": "795d9410-a5a5-45cb-8032-98176a52b15e",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ee1c1c51-fc64-434f-b5f0-c610ebe9b1b7"
        },
        "item": {
          "id": "6896a917-8162-4841-8d7f-e3dc38a2c80b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5db654ea-ca19-4d97-831a-314ace2bd855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14507258-eafc-4796-9faa-99bb7c0502d5",
        "cursor": {
          "ref": "b63f6a65-f80c-4b34-9898-e572687ec69f",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d3f715cf-5d6c-49ef-a44b-06d77fbc57e3"
        },
        "item": {
          "id": "14507258-eafc-4796-9faa-99bb7c0502d5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7f3e7f86-b141-4029-a17b-be83d86c2f9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79bedb0d-513c-4960-8744-047b89c3a3f4",
        "cursor": {
          "ref": "70028b3b-fe5a-4067-94dc-3c221121e8af",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "336d852b-c68a-4437-9f79-958f7e5a3d99"
        },
        "item": {
          "id": "79bedb0d-513c-4960-8744-047b89c3a3f4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0a6a30c9-b6a9-43d4-b7bd-b2b1bd768f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1898def8-5515-4f74-8886-cf5c0b3e97a5",
        "cursor": {
          "ref": "44699d78-1700-4c23-959f-34fb6d44cb9c",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "72ec30c9-d7bd-498a-b2de-5118a529f598"
        },
        "item": {
          "id": "1898def8-5515-4f74-8886-cf5c0b3e97a5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5b90b8b5-569a-4799-b7db-b14d9b1107ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217382bf-8f30-4cdd-9942-5c767a3335aa",
        "cursor": {
          "ref": "8750b1b6-2943-4e9e-985f-48aae00546df",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0e9da2f8-6156-4a9a-b2db-db77f0987d23"
        },
        "item": {
          "id": "217382bf-8f30-4cdd-9942-5c767a3335aa",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f2d1dabc-c6b1-4944-a615-986c8c99d8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9030fa-3799-4c3c-8822-2cfdfd8832e4",
        "cursor": {
          "ref": "cf29c756-e976-49c7-9efb-4505e873332f",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2e7faca7-1270-4329-9e3b-b813e949dbd0"
        },
        "item": {
          "id": "6a9030fa-3799-4c3c-8822-2cfdfd8832e4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5b091c0a-c6c8-4f71-9746-5af10044e346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a13d85e-9073-48c7-81e6-655ede0eafc7",
        "cursor": {
          "ref": "23e01879-afda-4b6a-bac9-18f8b7493700",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a6fcabd7-0854-4d4b-abd3-efd442891b28"
        },
        "item": {
          "id": "7a13d85e-9073-48c7-81e6-655ede0eafc7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4a64d0d6-59e4-451d-b925-d5c897476721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be6652d-0d90-475e-bd93-e1315c09f770",
        "cursor": {
          "ref": "e0a76433-280e-4d13-8eba-5a24ed743f2b",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5a640fd6-32ef-42ad-8505-f5669c4a71a7"
        },
        "item": {
          "id": "2be6652d-0d90-475e-bd93-e1315c09f770",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "59e7ac9d-6c8f-45b1-93a7-d2a399736501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9751fe-2ee6-4f29-a19f-5ba744ee911b",
        "cursor": {
          "ref": "b7c5a101-87ed-478b-87b9-b30ca28ba2be",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8bc8fe09-2433-42c4-a5cf-7d94b0705b6d"
        },
        "item": {
          "id": "1a9751fe-2ee6-4f29-a19f-5ba744ee911b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f1ae0ba2-1677-4bb9-9efe-4a8cea8e1b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7773b6f9-b26b-4ee7-aff3-ef739ff877e1",
        "cursor": {
          "ref": "000f1a63-0520-4503-857f-cbfa462fcf1b",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6487eea0-74d0-493a-b5ed-5cfe9c9e4082"
        },
        "item": {
          "id": "7773b6f9-b26b-4ee7-aff3-ef739ff877e1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "fc016ff5-2bfd-43ee-b415-3e55ff4a6893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7c9f55-6151-4f91-a0cd-dee8cccf01fb",
        "cursor": {
          "ref": "10b89655-00d0-4ba1-aee8-412bc54cd1cd",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "65155c9f-ebb4-46b0-9e19-df27b75e4089"
        },
        "item": {
          "id": "ce7c9f55-6151-4f91-a0cd-dee8cccf01fb",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6295e0dc-f769-4dfc-b430-87610685fd39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc1593f-7fc0-416f-be13-4877fdd1e9b0",
        "cursor": {
          "ref": "a0082602-c15a-4809-8bb6-3801a1070500",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3b019d18-50d0-4e2f-9a75-18bb8049348e"
        },
        "item": {
          "id": "3dc1593f-7fc0-416f-be13-4877fdd1e9b0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "75071f8b-d209-4633-9ea7-4aa39b2e781e",
          "status": "Created",
          "code": 201,
          "responseTime": 1575,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "b595d237-95af-4d3f-8ce1-f9562a703bb4",
        "cursor": {
          "ref": "0f08bb4f-63d8-4833-999e-c1c772490c5f",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "874baac9-e84b-414f-aa0b-226194290c2d"
        },
        "item": {
          "id": "b595d237-95af-4d3f-8ce1-f9562a703bb4",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a5f4e2d9-7624-4708-962a-a6242e948138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01081bf9-3bc3-4193-adbc-e0f573d5f3af",
        "cursor": {
          "ref": "73bbd19c-2d20-4dcb-bbb0-3337b3a0e421",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bae770df-c32e-4bd2-9d7d-ed5c911ab03c"
        },
        "item": {
          "id": "01081bf9-3bc3-4193-adbc-e0f573d5f3af",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0c596e42-cf1a-459f-8d92-329a05d5a8e0",
          "status": "Created",
          "code": 201,
          "responseTime": 20200,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "c1807600-1b76-42c1-8919-acb2c4e745c3",
        "cursor": {
          "ref": "4e236ebc-5b67-4875-a31e-05b64ea34ea4",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "965ce6b8-2b2a-4865-8ad8-70f3cdd3afa5"
        },
        "item": {
          "id": "c1807600-1b76-42c1-8919-acb2c4e745c3",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "276e1e43-b16f-4f2e-82a6-698c3ca3674a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "594808de-b91b-4e8a-984e-9df39c0725cb",
        "cursor": {
          "ref": "cc5d5fdf-5a55-496e-83cd-f033647db6de",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "eecfb13a-72dc-4dc0-838a-73db78004911"
        },
        "item": {
          "id": "594808de-b91b-4e8a-984e-9df39c0725cb",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5bc32c10-b77f-48cd-a66d-2fbf359b3aa8",
          "status": "Created",
          "code": 201,
          "responseTime": 7145,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "da637f9b-5256-47f8-a1fa-0dc79a5f07bd",
        "cursor": {
          "ref": "ba60dad6-67bd-43cf-8174-4a629e8ddaba",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d5294bc9-45e1-4d8c-8fb7-4f5b1ce48942"
        },
        "item": {
          "id": "da637f9b-5256-47f8-a1fa-0dc79a5f07bd",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e1843ad8-475c-4ed1-9bd9-3675601fd645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bedd6aa0-aae8-4897-9fea-297635c638af",
        "cursor": {
          "ref": "36e7b827-4190-405b-b40c-a531ed2b391b",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "93960cd4-a65d-40fc-83e1-4ce447df0570"
        },
        "item": {
          "id": "bedd6aa0-aae8-4897-9fea-297635c638af",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ab98837e-05b0-406f-8dce-5d791054fb18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7737b39a-bc8f-4e6d-932d-4073dad96fd0",
        "cursor": {
          "ref": "0789afae-adf8-4d67-9e4a-133c9c984ede",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0c31c6aa-1752-4034-b246-49f41cef4b95"
        },
        "item": {
          "id": "7737b39a-bc8f-4e6d-932d-4073dad96fd0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6b94488d-5386-47f4-b82a-1418fbd7c976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98eee9d-7b66-44a5-ad6a-0330525682ff",
        "cursor": {
          "ref": "371c07cb-5e7d-43ca-a7ef-9f574e4f39a3",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "161717e4-0242-44b6-8c9b-d76618988cde"
        },
        "item": {
          "id": "b98eee9d-7b66-44a5-ad6a-0330525682ff",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "dd2a8cad-b1b5-453f-840a-9817c43c1d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0c8607-9c0c-4e9f-a22c-7e779394b926",
        "cursor": {
          "ref": "e07f5c53-368b-4838-a963-03fc3a352c8b",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "662dff47-ac58-41e9-9f2c-51ba17307c81"
        },
        "item": {
          "id": "6d0c8607-9c0c-4e9f-a22c-7e779394b926",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "790c0a41-2c74-4d85-9a36-a6bc1a6afba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77111f9-a212-42a5-9195-2ae1e8f548d2",
        "cursor": {
          "ref": "247dca5e-7c39-44f6-8e38-7488e849295d",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "969fe732-0dc2-4026-9f1c-7d1b02c1fa3e"
        },
        "item": {
          "id": "c77111f9-a212-42a5-9195-2ae1e8f548d2",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "da2ef89c-04ba-4098-b447-3b580c1d3dd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169568e1-8cf9-4553-a8cc-e1acf4aabda5",
        "cursor": {
          "ref": "f3405c9a-1d05-4b82-8bd4-b060b219ff09",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "223b42fd-3300-4176-ba78-ab47dd7231e9"
        },
        "item": {
          "id": "169568e1-8cf9-4553-a8cc-e1acf4aabda5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "98d8e418-5604-4ecc-9ebc-ceacd4373d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891f7227-066d-4736-b6dc-11809c169325",
        "cursor": {
          "ref": "6cb70f71-45ea-43aa-8627-7aa5b53a9509",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d5347ee2-6092-4d49-a9b5-2eedff37fcce"
        },
        "item": {
          "id": "891f7227-066d-4736-b6dc-11809c169325",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c2daca65-c173-45c9-9cdc-5dbf3d9b5fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d3eca3-f191-461a-8d79-e0fb9744c6f0",
        "cursor": {
          "ref": "06a19fd0-e74e-4972-814a-e43b1f682697",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "63911826-7429-4098-aa0b-10402e866c0e"
        },
        "item": {
          "id": "02d3eca3-f191-461a-8d79-e0fb9744c6f0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "92c4a519-a541-43ac-93b7-ae5724c4bb71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a78d3b-07ed-44ea-9512-61e7beb996eb",
        "cursor": {
          "ref": "220017ed-e0a7-479d-9e5b-6dade5be7e22",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b602a575-46d5-4791-9d06-f4b0e32de3b8"
        },
        "item": {
          "id": "b6a78d3b-07ed-44ea-9512-61e7beb996eb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0113b5eb-a30c-4444-8b06-8da4cbc4e379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b11f59d-3cbb-4b15-9cc3-3f8b1abf77d9",
        "cursor": {
          "ref": "9d6ecd06-2daf-444c-9d6a-cc7bce8a71b0",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cc5805df-9cbb-4957-acb8-2f60ec4ab746"
        },
        "item": {
          "id": "7b11f59d-3cbb-4b15-9cc3-3f8b1abf77d9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "98f65e36-11fb-4253-8223-7ab9a92c8a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aeccd8a-3a43-4e23-8df6-04f6a9eb543c",
        "cursor": {
          "ref": "3cd04de0-3cf3-4e70-8441-31e3ed2e7a1b",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "23f9f90e-02d2-480d-ab3d-c61dec3b179a"
        },
        "item": {
          "id": "7aeccd8a-3a43-4e23-8df6-04f6a9eb543c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "da903bb3-e6a4-4073-9b2b-15e146adb3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3d7d15-e592-4fda-9778-40b37f93c182",
        "cursor": {
          "ref": "12e99c85-22d4-42ed-8057-78b9732490a4",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bdbddec3-1279-4f2d-9b06-2d2926a8a78b"
        },
        "item": {
          "id": "9a3d7d15-e592-4fda-9778-40b37f93c182",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a64a9d64-c02b-4fc0-9393-17a6708097a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f4dc19-3708-42a3-bf17-b7ecdf6c2ce4",
        "cursor": {
          "ref": "36531890-4a0b-4fcd-8f51-9281b23122ab",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e3efdc86-a13e-4f15-b883-105ad49c2686"
        },
        "item": {
          "id": "e9f4dc19-3708-42a3-bf17-b7ecdf6c2ce4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7c62b7fc-98f7-4fd0-be6a-5af05cf4c1c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03681a69-6097-4560-bc82-c961fe08fab4",
        "cursor": {
          "ref": "dc591766-1341-47f7-9657-f703c27c029e",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "288df2e8-5fe8-4fd1-84e7-d31a1cbf1945"
        },
        "item": {
          "id": "03681a69-6097-4560-bc82-c961fe08fab4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b7ac74b1-b996-48fe-9515-31d646bc3528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719cd207-9ee1-48a2-9a98-d75e4925fe67",
        "cursor": {
          "ref": "a84b6144-631a-4440-b9e5-9b0dc53ac63d",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "fd2277bc-5be0-4a3f-af61-225e36c39f1b"
        },
        "item": {
          "id": "719cd207-9ee1-48a2-9a98-d75e4925fe67",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "91e8ccbd-eecd-4904-9ff0-9184662173d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c1ac742-89d5-4e5c-bf47-215aca336b8e",
        "cursor": {
          "ref": "8fdcb9ba-d075-44dc-9505-753cc70c9621",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0eef87ce-fb00-4d2e-9ee4-ee05db58e164"
        },
        "item": {
          "id": "1c1ac742-89d5-4e5c-bf47-215aca336b8e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1b48bad5-26ea-4124-b702-47f7d1e9fa91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b51c8a-b314-48ca-9f32-1c4499ffaf85",
        "cursor": {
          "ref": "f0694b80-6648-47c3-a5ce-50fbe92705c1",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7a4d2692-8435-4c8b-932a-a205490b11b0"
        },
        "item": {
          "id": "c3b51c8a-b314-48ca-9f32-1c4499ffaf85",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b87646a7-4bb7-46aa-915d-724db6402963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc50204-3677-4580-a75f-e743138e7c54",
        "cursor": {
          "ref": "0d437444-9aca-408b-98fa-c65ab9e5c442",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f96b4aba-d5bb-44c9-8a24-dd580dd4dbdc"
        },
        "item": {
          "id": "ebc50204-3677-4580-a75f-e743138e7c54",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2610c8c8-3caa-4036-9d0a-c96dea581823",
          "status": "Created",
          "code": 201,
          "responseTime": 3916,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "816001de-8318-4da9-addb-1e58a1dd729f",
        "cursor": {
          "ref": "4a1177bb-1381-4dd7-84cc-dce3da28e1ac",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9b42b845-1dd1-4f83-869d-a5a1bde23289"
        },
        "item": {
          "id": "816001de-8318-4da9-addb-1e58a1dd729f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "240ac9e4-e21d-4c9e-937b-0c7907181f39",
          "status": "Created",
          "code": 201,
          "responseTime": 3109,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d900c6b9-b105-4292-a80d-115176118415",
        "cursor": {
          "ref": "118bcd85-3312-4131-b0e5-82c243bafd70",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ddc7926b-5e64-44ce-aec3-dcb7514d3168"
        },
        "item": {
          "id": "d900c6b9-b105-4292-a80d-115176118415",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "76a34440-1d19-42a6-874a-d6a9d32f0793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158eb99c-b119-403d-bc34-677c03cda1b5",
        "cursor": {
          "ref": "687e70f8-44dc-4518-ad02-1ea20b04187f",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b443bae6-eaf5-4022-b495-b46303e7dc17"
        },
        "item": {
          "id": "158eb99c-b119-403d-bc34-677c03cda1b5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4c1ad307-a4a6-4b93-8039-c0f477f6eaa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ed62e4-ad11-482f-8567-6b8a0f2d7f24",
        "cursor": {
          "ref": "2d39d94e-7497-4bc4-8270-f623378b6a7d",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b3653361-f604-4697-a051-6da5e5fc3eed"
        },
        "item": {
          "id": "e8ed62e4-ad11-482f-8567-6b8a0f2d7f24",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ac8517f7-beee-4fd1-95e7-6355889056ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ed35d5-f4ea-4813-be8f-d348ae083557",
        "cursor": {
          "ref": "3ea211a2-c5b2-4528-9c24-631af910e87a",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c615041e-9fe1-430f-9918-42b8f65eb4c3"
        },
        "item": {
          "id": "00ed35d5-f4ea-4813-be8f-d348ae083557",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6ac83dbd-a23c-4974-896b-63a80df99557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08806fa7-69b4-4dcf-8550-fd18ee2f7466",
        "cursor": {
          "ref": "36ac5b0f-444c-4cb3-ab0c-787faed20b4c",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "dfd4c292-9a27-497b-888d-99e27d6850c5"
        },
        "item": {
          "id": "08806fa7-69b4-4dcf-8550-fd18ee2f7466",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "5e57a291-6dbb-4769-98fc-bd69497b38e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a06a8e-aad9-44b9-b30e-c3e15e02a5f1",
        "cursor": {
          "ref": "496663fc-a26a-4aa8-9461-b4a1e158090d",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f17d9c7e-eecb-415c-9140-d0f9f6b1e07b"
        },
        "item": {
          "id": "f8a06a8e-aad9-44b9-b30e-c3e15e02a5f1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "39a39b68-2f46-4270-aac7-26d7eaafd096",
          "status": "Created",
          "code": 201,
          "responseTime": 2753,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c96760b1-f938-47b3-b39c-1b0cdba85963",
        "cursor": {
          "ref": "9e7e07a5-d533-44d4-86c5-11c4fba5df1d",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fdd14bab-1b53-447c-8db5-7d4b87800076"
        },
        "item": {
          "id": "c96760b1-f938-47b3-b39c-1b0cdba85963",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6c7f0d9b-c937-4278-9332-7a3c0723c9f5",
          "status": "Created",
          "code": 201,
          "responseTime": 2421,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "ee8c075e-696c-4d87-a6d3-e666f3cceee7",
        "cursor": {
          "ref": "c697e9c6-74a1-40cd-9738-013b0a9bbf89",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fdd9b2f9-7e46-4638-b2b7-a2a405fe4a78"
        },
        "item": {
          "id": "ee8c075e-696c-4d87-a6d3-e666f3cceee7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e29a4b6a-5d6f-41a6-99a6-0461d8dd12df",
          "status": "Created",
          "code": 201,
          "responseTime": 2453,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "5311a735-2722-4770-83f8-68487224451a",
        "cursor": {
          "ref": "b67a582e-6fa5-4ea2-ac9c-fb52e02d9d48",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "945e9548-4548-4ab5-a081-a05c32cce1c0"
        },
        "item": {
          "id": "5311a735-2722-4770-83f8-68487224451a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8cff7987-d5e8-46d8-b301-c0a997832e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb3c4a5d-ef7f-4620-b3ad-63369370b073",
        "cursor": {
          "ref": "8c050af1-526f-4aaa-b28c-3bb6d503fe37",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "16b517c1-9a77-4106-bd4f-8d7392ea7596"
        },
        "item": {
          "id": "eb3c4a5d-ef7f-4620-b3ad-63369370b073",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "01ee44d7-0410-4de9-a438-70c5736d1ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c90e035-3b75-4e20-9339-effd8e12d494",
        "cursor": {
          "ref": "1e0507c1-ca13-43f6-a414-93fb8b94b8a1",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4a787448-904f-4616-95fa-7ad9f7e36e84"
        },
        "item": {
          "id": "5c90e035-3b75-4e20-9339-effd8e12d494",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "70d9adf2-6624-4398-9fbe-9c961d7ff63a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e202a3be-c3fe-4b5c-9480-3eb7024008db",
        "cursor": {
          "ref": "ca6c44f6-4ffa-47a5-991a-b88d8cd601e9",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "80475c85-485e-4b37-83b6-ee6b1fa663b8"
        },
        "item": {
          "id": "e202a3be-c3fe-4b5c-9480-3eb7024008db",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7fa3e76b-78c7-4f50-ae55-761dec6556cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7cdb1c7-6af3-44c0-911c-af0e657b40ce",
        "cursor": {
          "ref": "2391bd36-96d6-48eb-925d-077ce14f57cf",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "001b84fe-e7e8-4638-b5f2-cd26f13d5146"
        },
        "item": {
          "id": "f7cdb1c7-6af3-44c0-911c-af0e657b40ce",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d535f7ba-9967-44a1-88ec-499fc958bcbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af836147-2ed9-42c2-915a-4a7dd457194c",
        "cursor": {
          "ref": "e8e3016f-8711-4abe-870b-3bfd41d2515f",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d9acc92f-f3ac-4f09-86e2-7275ddd17398"
        },
        "item": {
          "id": "af836147-2ed9-42c2-915a-4a7dd457194c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3b96a0f0-6576-40bb-93d4-d3944ffd70ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f244477-c473-4f75-ae30-e119135f4d0b",
        "cursor": {
          "ref": "9ae56738-8b37-48ca-af96-b510f5323533",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d16f607a-1d93-4f08-a1f7-af04d6d531d3"
        },
        "item": {
          "id": "4f244477-c473-4f75-ae30-e119135f4d0b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5002972f-49bd-4cfa-84a8-3cb03ec57a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a113713e-80a1-4f8e-bcad-212972d58ca9",
        "cursor": {
          "ref": "a95e89de-80a3-4e8a-be36-80148352029c",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "3a6ca8fb-2310-418f-b66a-24b76bb7cc9e"
        },
        "item": {
          "id": "a113713e-80a1-4f8e-bcad-212972d58ca9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "303c61fc-57c2-4be3-b79c-2a108b7331e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28de2bca-e6b9-45d7-ab4b-b72ee5e73ec8",
        "cursor": {
          "ref": "91c00475-8bba-4bb5-aa1a-c5c66f2853b8",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "868b82b9-64b3-40dc-8443-50dec73100ce"
        },
        "item": {
          "id": "28de2bca-e6b9-45d7-ab4b-b72ee5e73ec8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3787af1a-3770-42c8-bd75-55a69574d3c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c22017-3a85-4388-8216-d3c06bbb16a1",
        "cursor": {
          "ref": "0cf3f9e0-ef03-4a85-9d66-c5cb80b0c472",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8d7c5d58-4218-45e4-8247-fdb35456dc9d"
        },
        "item": {
          "id": "68c22017-3a85-4388-8216-d3c06bbb16a1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "75a03b52-6d41-4825-97e4-b968be356a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9e74af-a3e4-4857-b0a3-beac3ee64025",
        "cursor": {
          "ref": "a445f4e6-de0a-4d6b-8716-2557a4c4fd2b",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "362e8a8b-74dc-4146-8390-5a143ede3b83"
        },
        "item": {
          "id": "0a9e74af-a3e4-4857-b0a3-beac3ee64025",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "180d1691-e89e-49e5-b3a6-cd807b05c947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87053065-f4fa-4bca-9ae1-14dd8ee6c9b6",
        "cursor": {
          "ref": "5cfe07bb-da90-475c-a773-c4acdb98abe9",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d4615360-9002-4721-a215-f2c5a33bd4a2"
        },
        "item": {
          "id": "87053065-f4fa-4bca-9ae1-14dd8ee6c9b6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2718ce4c-f375-48a8-853b-4c724b22bf9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba155836-f429-43cc-add6-871699361557",
        "cursor": {
          "ref": "4f1bfa79-1657-49a4-9bca-3fa05e9ec52a",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d5398049-e829-4365-a6fd-964bce81630a"
        },
        "item": {
          "id": "ba155836-f429-43cc-add6-871699361557",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "57e20b12-6217-4430-b679-7023a2ca14b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b9e263-46d7-433d-aef4-b59e37b48e79",
        "cursor": {
          "ref": "aa356f7d-d9cb-483f-ae7d-5b6d645a20fa",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "79ac5ea9-bf98-476b-82be-b3836923d302"
        },
        "item": {
          "id": "14b9e263-46d7-433d-aef4-b59e37b48e79",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "411102fb-d1af-4d40-8862-8d333114bb7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335f5420-68f0-462a-85fa-f7d5512b1c9e",
        "cursor": {
          "ref": "6207820e-14a3-4189-9d13-1f7538253106",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e6b3b93d-1ac4-4707-af7b-b8e43d107de4"
        },
        "item": {
          "id": "335f5420-68f0-462a-85fa-f7d5512b1c9e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3dd29b3b-6cfa-4bbc-8f64-d8e513c2e9ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee26ee4-65da-4971-be90-26eb39b01590",
        "cursor": {
          "ref": "61c869f5-d6a3-46e5-a9f5-117bfe459737",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1ea08702-24a8-4861-b259-96cee0a95786"
        },
        "item": {
          "id": "7ee26ee4-65da-4971-be90-26eb39b01590",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0e047f94-d07e-4fd5-819c-6059f69d2b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6633574a-7b2d-4478-9ca4-8fbfb8eb27d6",
        "cursor": {
          "ref": "11fceb79-8d9a-4f7b-a205-be626c1f7305",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0c928523-2421-4009-a4ac-442e32149791"
        },
        "item": {
          "id": "6633574a-7b2d-4478-9ca4-8fbfb8eb27d6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a7dd00ce-e6db-4682-98bb-0310cf6d1c13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76a0cc0-49db-4a0c-bd11-adfe98e28e98",
        "cursor": {
          "ref": "636da12e-e6c7-4765-a2ba-66d70ae164e5",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7a570a06-fff8-42b1-af66-deee2d0ca360"
        },
        "item": {
          "id": "a76a0cc0-49db-4a0c-bd11-adfe98e28e98",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0b25386e-be21-44e4-8be8-ffa3cf374a49",
          "status": "Created",
          "code": 201,
          "responseTime": 2291,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "ebc2edaa-94d3-459f-96fe-169a3e2d8389",
        "cursor": {
          "ref": "75d52f95-4673-4c65-8129-9273cf8babf4",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7c87bfcc-b642-4a28-b955-f9c45b5490df"
        },
        "item": {
          "id": "ebc2edaa-94d3-459f-96fe-169a3e2d8389",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3b36eba8-7415-4f8e-8927-052a4921c1da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25b044b-4da1-4283-8680-fb2c35c6c99a",
        "cursor": {
          "ref": "87d08ef2-191d-451a-83fe-9eb22668608c",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "11d858ca-3f08-483b-af76-40a259ff6575"
        },
        "item": {
          "id": "b25b044b-4da1-4283-8680-fb2c35c6c99a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2902498a-885f-4706-a7a2-24e3580df71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a58d80a-7865-4f3c-a624-f39b34e3fe75",
        "cursor": {
          "ref": "831301c6-c96b-44dd-ae1f-2e17bc676e94",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "275ea224-57be-4fd6-95cb-0cf04e887c1f"
        },
        "item": {
          "id": "1a58d80a-7865-4f3c-a624-f39b34e3fe75",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3b1ec190-0d9f-4e28-bcab-fda424ed7fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce5701e-b3c9-4154-819e-bd216b4810b6",
        "cursor": {
          "ref": "7b999179-9b83-44ee-81a4-93c9c3b6e0f9",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "40478813-66ba-4896-adc9-6c12915e2c13"
        },
        "item": {
          "id": "6ce5701e-b3c9-4154-819e-bd216b4810b6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "53140a7f-402c-4f3e-8b9f-55bbca3b2b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac43c57-1e9f-41c7-8636-c352661d46c2",
        "cursor": {
          "ref": "1c6d901a-5d00-41cd-900e-e0a001bb047b",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d10d3622-8234-4a6a-8d93-481228b2587f"
        },
        "item": {
          "id": "8ac43c57-1e9f-41c7-8636-c352661d46c2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e7a6a5c6-a860-4a1f-9ff7-9f65b412df68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c12c4a84-43e3-40df-a275-3199dc8cdb0b",
        "cursor": {
          "ref": "ba8fde2c-1af8-4098-a79c-07508e8defe9",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "288fc4d2-0a93-4988-a22e-98d080de82cf"
        },
        "item": {
          "id": "c12c4a84-43e3-40df-a275-3199dc8cdb0b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ef9823ec-169e-4edb-81f8-cdad2f00e1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83365da-5d95-4141-a96f-60133c9d8c38",
        "cursor": {
          "ref": "7cfafab6-9718-49b8-9bfc-250ca3d65a59",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "72e8719b-eb89-4bb0-84d2-9e33091d892e"
        },
        "item": {
          "id": "d83365da-5d95-4141-a96f-60133c9d8c38",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "eb946533-24a6-4ef0-9d60-e1c66571d375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99476ba-3109-4fc1-b4b2-3b8103fa56b7",
        "cursor": {
          "ref": "9dc18718-61ab-4ff6-87c1-9795dcb3b19d",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "fbd4b638-ce4b-4f3c-85aa-dcd7ee478471"
        },
        "item": {
          "id": "f99476ba-3109-4fc1-b4b2-3b8103fa56b7",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6d5ceb0b-f0ba-486d-8744-4b039e899eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67eb65d7-e9d6-483c-8f65-9d66f35d8f11",
        "cursor": {
          "ref": "0841f6d6-90c3-47e8-9551-23630bb409df",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4838bdef-b054-4997-960e-528cc3d5a740"
        },
        "item": {
          "id": "67eb65d7-e9d6-483c-8f65-9d66f35d8f11",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "da9b9c27-0bcf-4e04-a5dd-a334f6cb9da1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9fdeca4-77b6-4fc0-ac6d-2dc52e7f316a",
        "cursor": {
          "ref": "2fc9225a-009f-4818-b9ec-80cca8802064",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d4bafe11-2626-47de-aec6-ac448fa43780"
        },
        "item": {
          "id": "d9fdeca4-77b6-4fc0-ac6d-2dc52e7f316a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3a93b6ac-0128-4192-924c-022b27516496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4136e58-33f5-420c-b07a-af37da05dd2c",
        "cursor": {
          "ref": "f987d89e-6bf4-4d44-95ff-532cdf55beb1",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0fd195a7-4cf5-422f-804d-e8f9692027e5"
        },
        "item": {
          "id": "a4136e58-33f5-420c-b07a-af37da05dd2c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6d94c5ba-a235-4d06-be0a-319224a2204d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e07201-932f-41f8-af8f-c92f1cfdb29b",
        "cursor": {
          "ref": "7a4a3c4b-4ad0-469d-875e-77c1ee04abb3",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "700bc98b-756b-42b6-9f6c-b8ab556c24c1"
        },
        "item": {
          "id": "45e07201-932f-41f8-af8f-c92f1cfdb29b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f2f3d578-68ad-4655-8fd2-6dc1e07be38a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a4d0db-bb51-4ce2-9dd2-426b71d9eda0",
        "cursor": {
          "ref": "89851838-adc4-4fca-b450-35648854a9ba",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "829ce5a7-c710-47c5-bb96-7ea6d10f0823"
        },
        "item": {
          "id": "75a4d0db-bb51-4ce2-9dd2-426b71d9eda0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "74016071-aca6-4f19-a62b-fb05669ac7a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6a8f93-64e7-44ec-b486-a130c9ad9665",
        "cursor": {
          "ref": "4d4caf97-0be9-4fac-9073-18c00dbd8fa8",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c8dfd416-726e-4e3e-9e2c-036063747eed"
        },
        "item": {
          "id": "ae6a8f93-64e7-44ec-b486-a130c9ad9665",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4caa439b-1fb0-4a03-a740-91b1503f8b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7ad61a-1cd6-4434-a4ae-5b6238c534f1",
        "cursor": {
          "ref": "bbf4de30-c2c5-4f77-886a-4480aaf6d57c",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d95dd901-8d4b-4d69-a2fc-245a7825e93f"
        },
        "item": {
          "id": "4e7ad61a-1cd6-4434-a4ae-5b6238c534f1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c75681c4-8766-4c53-932c-9d36ed7a4b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17965d4b-055a-4ac6-b0a0-69cf99b1dc23",
        "cursor": {
          "ref": "374ebe4b-7ba2-4261-8b5d-e33ebc536f7e",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1a4d543a-e7e0-4785-9f72-9453e936b954"
        },
        "item": {
          "id": "17965d4b-055a-4ac6-b0a0-69cf99b1dc23",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e61819a7-ada8-4297-8916-75898761bb18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0144936-c91f-437e-ab26-153780e3b49f",
        "cursor": {
          "ref": "c8a72d3c-0e96-4d41-9f51-b7e6080e8d55",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e7510570-b6d0-46a7-9308-1c4e310a22ad"
        },
        "item": {
          "id": "c0144936-c91f-437e-ab26-153780e3b49f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ca683c71-9e4a-474d-b2e5-06bcea18a622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5808d1d1-d0cc-428a-bd53-c0f944d701b9",
        "cursor": {
          "ref": "da4a384b-5aa2-4207-950f-968ef6bea0d6",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a87f476f-997e-4149-95fd-01a8807913c5"
        },
        "item": {
          "id": "5808d1d1-d0cc-428a-bd53-c0f944d701b9",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "65db44b6-c74c-4bdd-8cec-5401b4cba4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d6154f-1d65-43dc-9759-562c975180f6",
        "cursor": {
          "ref": "48d2360b-f91a-48d9-be0e-3079de50c55f",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e2a1a157-cf79-49c0-ae45-fe8c78934710"
        },
        "item": {
          "id": "97d6154f-1d65-43dc-9759-562c975180f6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8695bf57-9486-4672-b01b-237f3191514f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2daa1a9e-ad44-4808-b553-5f52d93b4730",
        "cursor": {
          "ref": "f7c7bff2-111b-428f-87eb-a852106b3f3b",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a349abb1-b89b-4443-9acb-096db575441f"
        },
        "item": {
          "id": "2daa1a9e-ad44-4808-b553-5f52d93b4730",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8b16f9a4-fc00-4d8e-89f4-42ab7f764ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e2080d-9b69-4891-8365-a6b912a59fe6",
        "cursor": {
          "ref": "ffaed6a1-a62b-44f9-bd09-f3d25b1c11ab",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "dd388be0-c095-4800-b326-d08674ea5fd9"
        },
        "item": {
          "id": "c4e2080d-9b69-4891-8365-a6b912a59fe6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "aedea035-3989-4ca1-a1b9-771d0bb60388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000fb8a4-9841-4aa7-8b9c-2cad39182cf3",
        "cursor": {
          "ref": "d7c71734-2762-4069-94e0-c99696ffab4e",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e29fb367-64f8-4131-bb0a-a64c73c131d3"
        },
        "item": {
          "id": "000fb8a4-9841-4aa7-8b9c-2cad39182cf3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7e6bc88c-3ca0-4afe-95ae-55d51b376e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a1d913-3b9e-498a-a8fc-7859f7418ad6",
        "cursor": {
          "ref": "c04fd36a-6d67-4903-9eee-3d18a4e777fb",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cceb0165-b689-4696-bb0e-f4800d83c0cc"
        },
        "item": {
          "id": "57a1d913-3b9e-498a-a8fc-7859f7418ad6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "551c6b03-925e-4b48-9c1e-a54a62d0ed72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4a719a-ce00-491f-9cc7-c48ad016cc47",
        "cursor": {
          "ref": "12507d1c-4d88-414f-9280-e4b52dbcf2fe",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e25781ba-ed03-4fec-a26f-5af90972d1bc"
        },
        "item": {
          "id": "da4a719a-ce00-491f-9cc7-c48ad016cc47",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "29a47830-6837-4fb8-9f23-a121c0b3d997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81160b92-54ec-4933-b949-fa38c2538470",
        "cursor": {
          "ref": "585ac97b-a768-4fff-98c5-7ff36bb18025",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "57cc84d9-2fee-488c-9778-f82083b1a60f"
        },
        "item": {
          "id": "81160b92-54ec-4933-b949-fa38c2538470",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "80e90866-6898-4abb-8f0e-b72b2a78d744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1edab3a9-33f4-40ff-991b-8cbe289ba341",
        "cursor": {
          "ref": "6edc2201-6b7d-4305-b210-28170bb786ee",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ec7e823b-4462-486f-9caa-8b247036cc96"
        },
        "item": {
          "id": "1edab3a9-33f4-40ff-991b-8cbe289ba341",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f85c2cf7-8009-4502-a4e8-0b634159f042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532f16d2-1d14-4c03-849e-7d07ace1ce5e",
        "cursor": {
          "ref": "55cc5582-bdb1-475a-b058-c396ef26ef4a",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0819fabd-7a31-460d-8bba-42e1331b40b8"
        },
        "item": {
          "id": "532f16d2-1d14-4c03-849e-7d07ace1ce5e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "fb0c35f0-18d4-4f3c-9f3b-2f6871c7451c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38085225-6631-4927-9a3f-fa75c6abbba8",
        "cursor": {
          "ref": "1ea33813-0d71-4261-b5ca-35c61223451f",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "94b4df33-ea24-44c9-a305-0645d706ac1f"
        },
        "item": {
          "id": "38085225-6631-4927-9a3f-fa75c6abbba8",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1ce2ff0d-17ce-4f49-aac3-f72bee99ad79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6660de-3ae4-4a71-827b-cbfed141048b",
        "cursor": {
          "ref": "d9b40ba8-66ca-460a-b937-c8f3fca45ddf",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6e2b0eeb-1870-465e-a205-425a6617bacc"
        },
        "item": {
          "id": "fb6660de-3ae4-4a71-827b-cbfed141048b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b1148fab-cbdd-4ec2-a8b7-cf2fa5b611a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca40d644-3c74-45eb-ac27-8648bcf1b717",
        "cursor": {
          "ref": "0c0db9a0-3a87-43b2-9066-60de100f89aa",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f6b68706-ab2c-42d3-8167-15295346103b"
        },
        "item": {
          "id": "ca40d644-3c74-45eb-ac27-8648bcf1b717",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "618a2bca-2232-4c98-a841-0223ded7d515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99446ce5-c14a-4815-b960-7636c317b1bc",
        "cursor": {
          "ref": "29388b17-9952-4192-ae7a-117ac9ac0d5d",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9efbdf4e-5feb-49df-a97f-7043bda283d5"
        },
        "item": {
          "id": "99446ce5-c14a-4815-b960-7636c317b1bc",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c79080ce-2864-46f5-bb5d-3c9e8e98f2b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "6dd4c354-385f-403e-a5d0-0e8a1f92cb9c",
        "cursor": {
          "ref": "f924edcb-736a-47de-bdfd-dc7639114606",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5d7fd03c-e2b1-4847-ba8e-b6bdfaa5b0d0"
        },
        "item": {
          "id": "6dd4c354-385f-403e-a5d0-0e8a1f92cb9c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "86911e5b-6c9f-4145-96bd-de526d8be23b",
          "status": "Created",
          "code": 201,
          "responseTime": 2029,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "22a4e208-7a8e-4de0-b59c-2dfdba4a93e9",
        "cursor": {
          "ref": "158e5b0f-3acb-4cec-9622-7d8645f2fbf2",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9969e8ca-d951-423f-b227-c5b9ecee00ab"
        },
        "item": {
          "id": "22a4e208-7a8e-4de0-b59c-2dfdba4a93e9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "5c4572a2-ec5e-4106-ba06-3293ae300167",
          "status": "Created",
          "code": 201,
          "responseTime": 2448,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f3aee9-2b80-4439-8631-4265f7dc2c75",
        "cursor": {
          "ref": "eac1eb5a-8743-46d9-be1e-a5b9f090f2aa",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "682bb64e-06e1-4c14-9c1f-c93f9585b4f8"
        },
        "item": {
          "id": "08f3aee9-2b80-4439-8631-4265f7dc2c75",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c5e18684-ff08-4535-807a-8ac09bd44a62",
          "status": "Created",
          "code": 201,
          "responseTime": 2427,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "14445802-1083-48a7-8d1e-8b642256798b",
        "cursor": {
          "ref": "11a6f661-01af-40d6-a833-7edecf226758",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "24838ce7-7511-44f3-a3d6-732cc6187eb7"
        },
        "item": {
          "id": "14445802-1083-48a7-8d1e-8b642256798b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1ebc71f1-8383-47cb-aee1-c88ba76d37e6",
          "status": "Created",
          "code": 201,
          "responseTime": 4356,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "21530149-125c-4b6b-927b-e17f1a66e814",
        "cursor": {
          "ref": "e1f5a191-c8bd-40b5-97ac-d8e13cd28457",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b3f66b99-d56b-45ea-ad68-1aaea556b450"
        },
        "item": {
          "id": "21530149-125c-4b6b-927b-e17f1a66e814",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bd31f251-6b7d-4bdd-966e-3c5db3c5d551",
          "status": "Created",
          "code": 201,
          "responseTime": 2384,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-21T00:43:11Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-21T00:43:11Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "5b03a741-1092-405a-a786-d35a1cfe0439",
        "cursor": {
          "ref": "0878dfdf-e68e-44c4-bd4a-4a5eeb2e715a",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7b717551-6827-4a1d-b355-c2532b10212b"
        },
        "item": {
          "id": "5b03a741-1092-405a-a786-d35a1cfe0439",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7d640318-2620-489d-8600-d9d2331d8056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "9ee45ea7-fad4-40ed-8ed7-9e955b030407",
        "cursor": {
          "ref": "fa6be542-2c59-4808-8459-9d31b59a51a3",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8d709c2e-1769-4baf-b2e6-571700193347"
        },
        "item": {
          "id": "9ee45ea7-fad4-40ed-8ed7-9e955b030407",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6bec8731-8d49-4528-9e2f-a87cca8a288b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33f845f-5b7f-40c3-97c4-82c113b66096",
        "cursor": {
          "ref": "fc8b5719-ddf8-4c5b-8656-74e75f0aa2ea",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "09ca9f5a-cbd8-44ff-8b97-02a4ef4ed962"
        },
        "item": {
          "id": "f33f845f-5b7f-40c3-97c4-82c113b66096",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c14a4878-0efe-4ba1-adbb-1b38f1c5168d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1652f607-386c-4254-9348-422aaca3de76",
        "cursor": {
          "ref": "426e54ed-40e5-4ac3-9b89-73ade61534e4",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ab408b40-2fb3-4c26-a787-ec62b573e606"
        },
        "item": {
          "id": "1652f607-386c-4254-9348-422aaca3de76",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "78949542-4af7-494c-916b-e564346d7ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24a28bc-838d-45cb-b0dd-ed5780b6d3b8",
        "cursor": {
          "ref": "9ee11f5e-8fcd-4318-be69-21496d3f0605",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "80d7de3f-823b-4ed6-888e-1f3dbc787bc4"
        },
        "item": {
          "id": "a24a28bc-838d-45cb-b0dd-ed5780b6d3b8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9a37ee61-22b9-4284-a13b-db7839604335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d296e403-6b95-429a-9e63-d701926d116b",
        "cursor": {
          "ref": "0fdfb074-1a2c-4f3c-ba4a-3c144d7aa584",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3442f973-dc4c-4783-8bf0-901bfffe6307"
        },
        "item": {
          "id": "d296e403-6b95-429a-9e63-d701926d116b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c140318d-534d-4c9c-b815-26665a7dc972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf51fcb-601e-4faf-87c8-5ab16302123c",
        "cursor": {
          "ref": "d5ef7ed7-ca92-41b0-89fb-c6a336b0418a",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f9a8fb1e-7ffb-430d-89ea-898787732ee5"
        },
        "item": {
          "id": "baf51fcb-601e-4faf-87c8-5ab16302123c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0a7eb943-143f-44f7-8231-7ad4b73256f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fab866d-e07e-47fd-a39a-9a9d8f40b440",
        "cursor": {
          "ref": "9bbb8bb1-5064-4270-b40a-9926d4aec3cd",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d9182a22-fbe6-48ed-baf9-635400c15d48"
        },
        "item": {
          "id": "0fab866d-e07e-47fd-a39a-9a9d8f40b440",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "579bacde-ede8-445d-989c-33e844cdbbd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d070156d-b6f3-43b3-8742-048fea3811af",
        "cursor": {
          "ref": "3276f768-4b71-4be0-a725-7c2a09b0052f",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a7227fee-168a-4345-80ea-37f4d104a0be"
        },
        "item": {
          "id": "d070156d-b6f3-43b3-8742-048fea3811af",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "65b4caa5-91ef-41b9-8ed9-cc04daa609ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c46476d-7b6c-4356-9d76-303ea19555b2",
        "cursor": {
          "ref": "36d27821-2753-49ab-b691-9a308fed3326",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b2105a03-0aec-4aec-8b97-ec31cfe31d2b"
        },
        "item": {
          "id": "3c46476d-7b6c-4356-9d76-303ea19555b2",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c195ea2d-db63-43e1-a1f0-bcded67e67dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3acd998f-9ff3-4d23-a84d-7a2b22a504e9",
        "cursor": {
          "ref": "d39b7788-c4fd-426b-ae79-d792f39a212d",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "74e51ece-7aef-4529-bf50-a426801f81ba"
        },
        "item": {
          "id": "3acd998f-9ff3-4d23-a84d-7a2b22a504e9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1ddf2663-6255-4761-9fd6-dfadc6b4d6fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d14c897-0357-4f76-b70b-cb01195b7006",
        "cursor": {
          "ref": "5a953909-0a60-4481-95b7-2c361ac2b3ff",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "38c82a50-f862-4079-b913-556b5267a490"
        },
        "item": {
          "id": "6d14c897-0357-4f76-b70b-cb01195b7006",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d6b89ccb-ef7c-42d1-a92e-ffa7145cc02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24d3693-b5a9-4fc9-b7a2-afb77d4f3e22",
        "cursor": {
          "ref": "29a581c7-c6f6-436e-b0ec-542ea0a5b3b3",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "83106671-2f85-4b97-9a2a-e593c342c860"
        },
        "item": {
          "id": "a24d3693-b5a9-4fc9-b7a2-afb77d4f3e22",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c0a27d97-04df-4ea8-b014-c9748ad8fceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1fbec1e-c8f5-4d3d-bebb-bc0ce83729ef",
        "cursor": {
          "ref": "7cf03447-38c8-415b-a546-41e045edf006",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7ad8a72e-86ec-4918-ad19-123bd6a222ba"
        },
        "item": {
          "id": "a1fbec1e-c8f5-4d3d-bebb-bc0ce83729ef",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8f387ad9-3e94-4474-bb15-008fb067ee09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09daed19-830b-4043-a333-a5a3a03c7ec0",
        "cursor": {
          "ref": "f4c0744d-f6bf-410d-a2e6-b83330afa838",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "21efa8f6-be91-4043-b4ac-1a146e699d42"
        },
        "item": {
          "id": "09daed19-830b-4043-a333-a5a3a03c7ec0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0a5aae41-dbc9-4613-9265-a10fdf9b459c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7acdd06c-81f0-4936-89c2-e1c55c13eddd",
        "cursor": {
          "ref": "fdcc0e6d-dda8-4577-9598-711e75acf614",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8f87b1a3-6378-4242-8f99-0fbe7cffa531"
        },
        "item": {
          "id": "7acdd06c-81f0-4936-89c2-e1c55c13eddd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7237cfb3-cc2b-4a06-b7e2-85c75aaaf8d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6552e3d-699a-4391-b4aa-adc39624f5be",
        "cursor": {
          "ref": "96e8beb3-f58a-4325-920d-e34545bd64bc",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7ae2c879-78d0-4a31-8edd-88b003cb0a0c"
        },
        "item": {
          "id": "d6552e3d-699a-4391-b4aa-adc39624f5be",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b03caa9e-bbfa-4d77-a56e-9719db2aaed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1a9aa1-f479-4527-a88c-9074a1ccc415",
        "cursor": {
          "ref": "a62d7dae-dfa7-4eaa-a5e3-8b332a529b63",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b8f39096-bf63-4f3b-a4aa-e2ce11606558"
        },
        "item": {
          "id": "4c1a9aa1-f479-4527-a88c-9074a1ccc415",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "83e16806-06cf-4dd7-a272-0998a53f041d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1497a795-4db5-438a-bcb9-483318a1c6ff",
        "cursor": {
          "ref": "735d88c5-5077-4a6f-8910-6f707e1a6965",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "55133b87-83b4-40aa-9872-26f4ae7ee5e0"
        },
        "item": {
          "id": "1497a795-4db5-438a-bcb9-483318a1c6ff",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b7c6d957-b356-4676-bd10-1abb2e7ae889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb2d4e7-b87f-4855-b10b-7aa7002a9dbf",
        "cursor": {
          "ref": "aefa2730-4c30-4ce8-b05a-0d8cadb6e84b",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "02b4b38c-d362-444e-a880-2dafc6368234"
        },
        "item": {
          "id": "efb2d4e7-b87f-4855-b10b-7aa7002a9dbf",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "86adca3b-9bf5-4973-a379-a929e577ab0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907441f1-8abf-4811-8037-343c8d6d70b7",
        "cursor": {
          "ref": "b981f59f-b8c6-4595-8d36-3de14e23d991",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3c2da224-6910-4f53-9c45-32d739e51129"
        },
        "item": {
          "id": "907441f1-8abf-4811-8037-343c8d6d70b7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0d945f75-b29f-4341-ae0e-76294b3ce877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3485b1b2-c647-4b66-a38d-76924672b497",
        "cursor": {
          "ref": "6b7f3b21-7052-4875-882b-976f7c1e2a7b",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6e7da6c0-e99f-4ed1-ab2a-0fee461a15ba"
        },
        "item": {
          "id": "3485b1b2-c647-4b66-a38d-76924672b497",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d5c49cc5-2678-40d1-ac7f-0ed8b53fe30d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25fdd4b-6b3c-4a82-830b-6c1a590b1f44",
        "cursor": {
          "ref": "96df8832-ea40-41e8-ac3c-4857040778fc",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "bf4ecd28-d628-4fcc-a71b-8f546327edcb"
        },
        "item": {
          "id": "c25fdd4b-6b3c-4a82-830b-6c1a590b1f44",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1bbb5ef3-8b09-4fad-b7a4-129ddacb21db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa0a551-bcb1-48c4-a075-b940d8b0d3c0",
        "cursor": {
          "ref": "f8dac3af-f2c5-44de-b14f-666957d835fc",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "49275a05-c998-4359-ab57-9cc92475b91c"
        },
        "item": {
          "id": "9aa0a551-bcb1-48c4-a075-b940d8b0d3c0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7b22804b-6bd1-42f2-9723-ecda76456e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f6407f-1509-45be-961c-8e0ebc7b5533",
        "cursor": {
          "ref": "9ba04669-f8ee-4251-8116-e14222dc5c7d",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "51c211b6-1a47-435f-8eb6-ae7697424c02"
        },
        "item": {
          "id": "55f6407f-1509-45be-961c-8e0ebc7b5533",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "65385bcb-4832-4aaa-9eb4-52f421794e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2cab48-6a44-45d8-ac2e-e10bf051cae2",
        "cursor": {
          "ref": "593a8678-bc99-4558-b5fb-626f5ef75db6",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fa6e904d-683a-4f60-864f-222e5976a5e9"
        },
        "item": {
          "id": "bf2cab48-6a44-45d8-ac2e-e10bf051cae2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "346a19a6-a769-4d59-b3b9-fef2995fa304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f183137-1583-4c82-af37-f6e2602b0786",
        "cursor": {
          "ref": "1bcb40fa-c21e-4bfa-a081-11950fc14c98",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4f7cfd74-973e-45d2-b0b1-240f691f4b24"
        },
        "item": {
          "id": "9f183137-1583-4c82-af37-f6e2602b0786",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4d93d989-eea0-4a06-9254-f069025cbf74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70b8443-7bc8-4bd7-9400-bcdc5f85fe38",
        "cursor": {
          "ref": "b62e4502-c5e1-4a40-b759-5bec72578003",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e8be203c-7596-4ad3-a2b5-e0ad15c025b7"
        },
        "item": {
          "id": "f70b8443-7bc8-4bd7-9400-bcdc5f85fe38",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "48ca6a13-4db0-4ab6-a467-39b9c766e3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f59c48-aa69-460d-898e-338028b33bf1",
        "cursor": {
          "ref": "ffa0d79c-2136-4d77-9f79-9248b4d9905f",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "08aab85f-1105-4256-a759-632ff23cacd2"
        },
        "item": {
          "id": "75f59c48-aa69-460d-898e-338028b33bf1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0629e957-3227-449d-8398-70ced0df457d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be8fa54-2b0d-4020-8a5c-63a18fc3380d",
        "cursor": {
          "ref": "ec2a9d84-e0ca-4ba9-b4a4-fbb7eac9098d",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5ab16d7e-861a-4c49-b726-254177c97f1c"
        },
        "item": {
          "id": "6be8fa54-2b0d-4020-8a5c-63a18fc3380d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9849f555-e88b-4794-accb-9e9ebde59de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b08a128-acfb-4439-8e73-d0ef0d1caebf",
        "cursor": {
          "ref": "5ccbe094-3fcd-494b-bf7b-19fc66ca2ea7",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "11442155-fd99-4dd8-acb8-86c41f97bfe4"
        },
        "item": {
          "id": "3b08a128-acfb-4439-8e73-d0ef0d1caebf",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "15a889f5-607d-4ed6-936e-206397752d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16db9315-2408-46a7-b7e4-75c9c6d0156a",
        "cursor": {
          "ref": "992b744d-e4ba-44f4-885c-8ef85f6c55b1",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "87dcd6a8-29bc-4bfd-9dfb-73ede458d26d"
        },
        "item": {
          "id": "16db9315-2408-46a7-b7e4-75c9c6d0156a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "46bd6087-1c6c-4c66-bd95-9109e3b60443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e0100a-182e-4540-8091-70fce3e19f09",
        "cursor": {
          "ref": "5e2f4c62-9cdd-48b1-a791-a194567c7298",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9fdd661e-885f-441d-8f01-8306423ca7bb"
        },
        "item": {
          "id": "32e0100a-182e-4540-8091-70fce3e19f09",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "68b0ec70-606f-4b3c-8cc9-1773f809f87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d8b9ea-8b6d-4b5e-872c-8f7f7c8d4e5e",
        "cursor": {
          "ref": "7b747974-88c5-4a5b-8028-57e4465e0ff4",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "085a9bd6-50ad-4521-b38e-9a3b3c1b740b"
        },
        "item": {
          "id": "51d8b9ea-8b6d-4b5e-872c-8f7f7c8d4e5e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6897e9a8-f9e4-4409-a377-2c3b9cc85c76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "31c183c7-ca52-40a8-a3bc-d01643323cd3",
        "cursor": {
          "ref": "79fd54dc-a2c2-4601-8a84-b383d3c798e9",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "79007003-98f4-4948-83b2-b2e185cb0e28"
        },
        "item": {
          "id": "31c183c7-ca52-40a8-a3bc-d01643323cd3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8c237dcc-c23e-4697-a133-f0cfa748227b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95881d90-c539-4dfa-b681-ad6ad8c401fb",
        "cursor": {
          "ref": "128ecf2a-92b1-46b1-8be5-fde40712e52b",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "692f25c2-c355-499e-876a-9ed405246228"
        },
        "item": {
          "id": "95881d90-c539-4dfa-b681-ad6ad8c401fb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d22b8db2-45eb-4979-806f-736d02ba79be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efdbfab9-9d91-4a87-b8cc-b3cf4ed2bec6",
        "cursor": {
          "ref": "b883d78e-d2fd-4185-93d7-76146acea5ee",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "57a17f81-a9f1-46b3-a0d1-d156fd2a68d4"
        },
        "item": {
          "id": "efdbfab9-9d91-4a87-b8cc-b3cf4ed2bec6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "43ffc7e0-1fae-4aa2-b6e7-51004335d2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3c3a75-35b7-4fda-a39e-0849fa3c428c",
        "cursor": {
          "ref": "63e28028-f927-413d-9be1-d7d6479bbc91",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "155e822c-8d9c-425c-99dd-0a243836692c"
        },
        "item": {
          "id": "7a3c3a75-35b7-4fda-a39e-0849fa3c428c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cf0eef10-19c3-4c40-abb5-431cb2eadeeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4232f08-4207-4006-9195-755e8e8198d6",
        "cursor": {
          "ref": "05797640-59a4-45b2-8769-ac2ac6eae000",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c52b3fe2-0bfc-46b1-bf37-835c24997832"
        },
        "item": {
          "id": "f4232f08-4207-4006-9195-755e8e8198d6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d0e9ac92-e82b-4d30-a9db-9782e0da7528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b334baf6-306f-4207-ad7e-bc1fdce463d5",
        "cursor": {
          "ref": "4bb36b86-95d6-4950-b5a2-499c330261c1",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d2630d12-587c-42cf-8fe1-38a560e2660f"
        },
        "item": {
          "id": "b334baf6-306f-4207-ad7e-bc1fdce463d5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f6d57ecd-829f-4c6e-8d92-4dee61cfa942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fea968a-2607-4612-a3e6-aa0aad56130d",
        "cursor": {
          "ref": "266bd63c-1888-4549-87a3-50ebfc3098aa",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "71176a04-36b0-4ada-ab79-cb1926f82280"
        },
        "item": {
          "id": "9fea968a-2607-4612-a3e6-aa0aad56130d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c281d547-a12f-4958-bcbb-ece2ec57eff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224aac51-e7b0-4f38-a2e7-c730284b3d95",
        "cursor": {
          "ref": "d6c457a3-6010-49f9-9f74-043fada907cc",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d2f62358-507d-4baa-b3ab-12cf147d0593"
        },
        "item": {
          "id": "224aac51-e7b0-4f38-a2e7-c730284b3d95",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d9598c1d-a407-4202-87ea-41a41b4ed50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b31b33-6de7-4f28-9ca7-209862cf5cc0",
        "cursor": {
          "ref": "691c64f1-6fb0-4f39-ba94-a3c31c27f4df",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0628fe05-db19-43f3-b3b9-a0a375ed1641"
        },
        "item": {
          "id": "61b31b33-6de7-4f28-9ca7-209862cf5cc0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e6276722-f071-49e6-bd94-58c1a6dc0bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c853e1d1-3881-4667-a108-062af9fb0a51",
        "cursor": {
          "ref": "7944d816-ca41-4ee8-a579-013d9df1dc3e",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ec7dcda8-de60-4233-8865-1679a516d8e7"
        },
        "item": {
          "id": "c853e1d1-3881-4667-a108-062af9fb0a51",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4318ddc6-2aac-40e7-8b9f-dd963ee8a84f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39d00ce-be5d-45d9-b9fa-f52bf0b85557",
        "cursor": {
          "ref": "87cb283d-54ff-4c08-a4c6-87df3db82fe9",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0ce9d092-6f8f-4b73-8901-46dc927c2a38"
        },
        "item": {
          "id": "b39d00ce-be5d-45d9-b9fa-f52bf0b85557",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7419bea8-40fb-4563-83dc-e1d464c83753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8b9705-2f29-4dfe-af3b-d9b67f3aa520",
        "cursor": {
          "ref": "60fc1123-a0da-4b3e-8757-6986366d547b",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1948fab6-599f-45f2-8f23-2780ec3538c9"
        },
        "item": {
          "id": "de8b9705-2f29-4dfe-af3b-d9b67f3aa520",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "020fc270-a3a2-4521-a9a1-7027795e9b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a796f9a-0a1b-469e-8749-7d8a944edef1",
        "cursor": {
          "ref": "4b339ead-1771-40a0-9eb5-cd633b2ffd8e",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9458568c-06e3-4ca4-8e9d-f92f067ac2de"
        },
        "item": {
          "id": "8a796f9a-0a1b-469e-8749-7d8a944edef1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "816261fe-98ed-46a8-b215-3c0e80f20c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcb9c65-5c09-41ac-8f70-05c30d6d79ff",
        "cursor": {
          "ref": "694f7a92-693d-4288-9b5a-4c338a637811",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4f104c88-c295-4df2-a3c9-13fdbe3b5408"
        },
        "item": {
          "id": "3bcb9c65-5c09-41ac-8f70-05c30d6d79ff",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "56ef1cf8-6ad5-46f2-86d6-8896b1a21c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a63d8a2-1979-44a2-82e2-a7269dd78023",
        "cursor": {
          "ref": "4065b138-3413-4d82-ade8-18a9fdfccba9",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "21507478-02c2-4300-8d75-74bc87a30ece"
        },
        "item": {
          "id": "5a63d8a2-1979-44a2-82e2-a7269dd78023",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ef8f2572-c660-4a34-baff-ed6ea30bd75f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9097e58a-53ed-43e5-b934-1752f5b50bae",
        "cursor": {
          "ref": "8cf8dd4d-c1c1-43f1-8f3d-bc76f52ee12e",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "44a148e9-adb7-40ea-b469-223263041434"
        },
        "item": {
          "id": "9097e58a-53ed-43e5-b934-1752f5b50bae",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d289df9c-510d-4218-bd06-c1526c6dca88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab080a86-61a8-4062-9988-417188150a28",
        "cursor": {
          "ref": "ef1f8293-2703-47a3-9cbf-cffb67b3b733",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3b099655-022c-4f4d-9ed6-4ec6bb1d6abe"
        },
        "item": {
          "id": "ab080a86-61a8-4062-9988-417188150a28",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "efe33bb0-eef9-4c70-872f-1b1fc8446d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a5be12-ce60-4482-8a6d-c9998908b2a3",
        "cursor": {
          "ref": "e230062d-34f9-42bf-8347-8b94d69f3416",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0cf71d77-cba1-4c6d-a54f-064e961d21e8"
        },
        "item": {
          "id": "d1a5be12-ce60-4482-8a6d-c9998908b2a3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ac55122a-38e3-471a-bdec-82ec2a434193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5369e01d-5e47-4faf-a2ce-ab41f54cc983",
        "cursor": {
          "ref": "ef885a25-6243-4a9d-830f-5368b4128c6b",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e7271e38-813c-4d4a-b3d7-3f46c2b57257"
        },
        "item": {
          "id": "5369e01d-5e47-4faf-a2ce-ab41f54cc983",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c037309e-9aa5-402b-bc21-396d39bdd717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7527dbab-3fd5-4f2b-8e20-1735aaabf3bf",
        "cursor": {
          "ref": "c08d0345-a46f-4311-9000-2da0060f1d2f",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "708bec2e-3cbd-431e-a7f3-055f73d7f85b"
        },
        "item": {
          "id": "7527dbab-3fd5-4f2b-8e20-1735aaabf3bf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "24e5dc98-b3e2-479a-b31f-142ec5271d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79610b01-8eb8-4086-99f2-188aac56b3d7",
        "cursor": {
          "ref": "bba70a8c-20b5-4b36-afc5-bd0d54581233",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5142a703-f536-4686-9cbb-f7f6cc92d9ee"
        },
        "item": {
          "id": "79610b01-8eb8-4086-99f2-188aac56b3d7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7e41a27f-5c71-452a-b849-bdba3a7a3c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd24379-663d-4964-b3f9-7467622d0994",
        "cursor": {
          "ref": "8f6c0d0c-acf4-4ce4-8e9e-71efd32476da",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "76ffbc9f-41ce-4a14-a19a-356eee832feb"
        },
        "item": {
          "id": "cdd24379-663d-4964-b3f9-7467622d0994",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bec888fc-1eb5-4305-b918-d40b92247cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bed3854-338e-4724-be04-76921c6d6074",
        "cursor": {
          "ref": "6549b962-a210-471a-b923-24bdac060282",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f9e032af-211e-4d7e-b9f1-28fe590ed6ad"
        },
        "item": {
          "id": "1bed3854-338e-4724-be04-76921c6d6074",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "91b62275-5a8d-486d-a560-12a404e18126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a92ae428-16a5-46eb-8acb-3d0fe4be26cc",
        "cursor": {
          "ref": "7bb759da-91d9-49ce-85ed-bd70eb690e59",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "85264130-b0db-4307-a91b-226defde2d34"
        },
        "item": {
          "id": "a92ae428-16a5-46eb-8acb-3d0fe4be26cc",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "233f637e-92c0-49b7-a44b-85e8bd96bf9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e6c0b37-0345-440c-8e37-bcd6b59b8d63",
        "cursor": {
          "ref": "6c311133-b8c2-4bd6-8cf4-b39b6e4b5c39",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "74c5bcfa-1656-47f6-87c4-e0c3fa486710"
        },
        "item": {
          "id": "1e6c0b37-0345-440c-8e37-bcd6b59b8d63",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "02875f1b-3477-4220-abf0-7290fff97370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c0e00c-ab5a-4b37-b7bd-5f258e2ec1e1",
        "cursor": {
          "ref": "70733c03-f02b-42cc-b251-ef25453a63e7",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3f4ccf2d-824b-46b3-b69a-f1faca65d9b1"
        },
        "item": {
          "id": "e4c0e00c-ab5a-4b37-b7bd-5f258e2ec1e1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "965557e1-a869-4c8f-b2be-72230a0d667e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0194e54-b0e5-4651-9c27-e56177f4b9e7",
        "cursor": {
          "ref": "c36ae5f2-5cfc-4a89-847a-e42c5448f4e4",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f6e2fe9e-3ad7-4154-ab38-9eff2701511d"
        },
        "item": {
          "id": "b0194e54-b0e5-4651-9c27-e56177f4b9e7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d2428564-ef33-490a-844d-151ebe448195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e0ece37-374b-4c0c-9d64-8287254a2011",
        "cursor": {
          "ref": "a39db724-f829-44aa-96f6-1ba977ef9f63",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6497acb6-bd7e-41d4-ba66-0b455ee1a15a"
        },
        "item": {
          "id": "0e0ece37-374b-4c0c-9d64-8287254a2011",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "62c1a2da-0f65-48a6-9e98-94812a7792b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5f19e3-a524-4338-9595-9bd0b7469e4c",
        "cursor": {
          "ref": "14505ca4-3390-4c78-b870-cb44aeb2c506",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "eb196b7f-77f5-4bc6-bef3-3d4f13bd85cc"
        },
        "item": {
          "id": "ea5f19e3-a524-4338-9595-9bd0b7469e4c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "718c2ee6-c3c1-4717-b03c-5849810d9a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f672c541-2f72-4c62-b65e-45019b2d6fa6",
        "cursor": {
          "ref": "40c2858f-592e-4e88-9de2-57b1e20b5527",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "07d42670-5d16-49b7-9e07-68f8744815b1"
        },
        "item": {
          "id": "f672c541-2f72-4c62-b65e-45019b2d6fa6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c337d9e1-abb9-4e62-8ecf-ff5f05ed9308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d9adc3-ec3b-4851-b31e-4d3de4450b16",
        "cursor": {
          "ref": "08152f29-ba18-4426-b4ec-5cfcb16ed831",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "938f8de3-eb6d-463d-9027-8e87ba9024ea"
        },
        "item": {
          "id": "99d9adc3-ec3b-4851-b31e-4d3de4450b16",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "34f4978f-e580-493f-8b6a-844132a768ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e72d7a3-db86-4a63-8933-91c77390f168",
        "cursor": {
          "ref": "dc39a381-b3f6-45e9-ae3c-b255f8bbea48",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5bea895c-647e-4066-a651-eeb1593487ef"
        },
        "item": {
          "id": "5e72d7a3-db86-4a63-8933-91c77390f168",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "41ea30cc-cb21-4df9-9491-173e465567c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e83743-8f41-4805-9ef9-70ef949cc1b1",
        "cursor": {
          "ref": "eb38a544-06de-4572-bd64-80bf5c1e144a",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "70a1f33e-abfe-48b5-b63d-831dc3d25232"
        },
        "item": {
          "id": "59e83743-8f41-4805-9ef9-70ef949cc1b1",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d6cc1c0a-fde8-4586-97a3-1bff3c19733d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb04e8ff-5550-483c-abe2-9223a40f641c",
        "cursor": {
          "ref": "c6458d33-60e7-415f-9410-b9760ce3fc78",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a9010f90-8107-4e32-9b71-03a6f82f0edd"
        },
        "item": {
          "id": "fb04e8ff-5550-483c-abe2-9223a40f641c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "52de9600-eb02-4055-80ed-8fc36220c6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0393abd6-00e5-4ce4-8803-75b3613b6133",
        "cursor": {
          "ref": "1beae918-a9e5-4e82-88c3-d4a8ac8bac81",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5333779f-88f6-4437-84df-5c770766abc6"
        },
        "item": {
          "id": "0393abd6-00e5-4ce4-8803-75b3613b6133",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "887e641a-f478-4836-bdcf-a6dcc7111f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f34959a-6b81-45ad-a4da-029e2116983e",
        "cursor": {
          "ref": "01b03190-2a9b-4d08-8e0a-092266a84486",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2061ce26-be19-4314-b315-6339216e3314"
        },
        "item": {
          "id": "0f34959a-6b81-45ad-a4da-029e2116983e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b8faea8d-7ccc-4a48-9a8f-b93e6e2e60e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45724632-6bc1-45e6-aae8-581ee59d0e6d",
        "cursor": {
          "ref": "969a9b4b-1eb4-4bd1-8e25-60755ca18d90",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "95d2df8a-27c4-457e-b131-bfa0ae9c542f"
        },
        "item": {
          "id": "45724632-6bc1-45e6-aae8-581ee59d0e6d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "b7c16268-dd89-45d3-8763-bc51f68b7543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1adb0714-2c86-4bbc-a74d-201bf1674072",
        "cursor": {
          "ref": "682c47d0-1117-4b23-b437-012693ab1343",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1b549efb-b4b7-4d66-b5a9-89838dc06a47"
        },
        "item": {
          "id": "1adb0714-2c86-4bbc-a74d-201bf1674072",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "aed741b8-918b-441b-a19f-fd179a751c01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "1b6f9adc-51e1-456c-821e-ab9448d997d8",
        "cursor": {
          "ref": "c37695e4-db84-44ec-b3c2-bb38b3d19e29",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c414a11d-7f4e-4d89-978a-d4ed064ea418"
        },
        "item": {
          "id": "1b6f9adc-51e1-456c-821e-ab9448d997d8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5dc46e98-7de2-4944-89e6-c135450b2b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d8f68c-8d0a-4716-ab66-055d3fd505ba",
        "cursor": {
          "ref": "fc0ad420-e31b-4438-a32a-8662aa4ece4c",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e2c9ab27-5600-4116-b8ea-38ed94ec3c20"
        },
        "item": {
          "id": "f3d8f68c-8d0a-4716-ab66-055d3fd505ba",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "33693630-20f8-4bed-b851-19dde8f277c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec14f3d-f9e3-4600-b461-53fb1078bf60",
        "cursor": {
          "ref": "e5043d5c-a14b-45a1-a0e9-2dcd1957459a",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "79ddc319-b97d-4e20-99a2-24290ad6a785"
        },
        "item": {
          "id": "aec14f3d-f9e3-4600-b461-53fb1078bf60",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3eb0e88f-23ec-411f-9ec0-430b5324ed3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6797cec-fdc1-4996-b4da-259cc281fd62",
        "cursor": {
          "ref": "a86394b4-1d79-4f89-a458-0e65a20d84f2",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ef979350-f1dd-4426-99b6-306872cbb210"
        },
        "item": {
          "id": "d6797cec-fdc1-4996-b4da-259cc281fd62",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "050fa650-7043-47cc-88a9-8dfcfe0503df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7411d9bf-bdcb-4d3e-9cfd-5ed694fefde5",
        "cursor": {
          "ref": "bc440660-b463-4563-b8d6-e56aa8a5aa0c",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "bdb7d802-3505-4225-b81b-1575b6ca41fd"
        },
        "item": {
          "id": "7411d9bf-bdcb-4d3e-9cfd-5ed694fefde5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9e942bc1-938a-47c1-8492-b79dd5293ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73df8f3c-a73f-490c-af59-4af7703a629d",
        "cursor": {
          "ref": "df5a6e5f-da40-42d6-875a-d28060e55255",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "58bd8fba-accb-4647-85a0-4f7b98be5393"
        },
        "item": {
          "id": "73df8f3c-a73f-490c-af59-4af7703a629d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3b5b7c14-d28e-4911-a7dd-67613ddf92c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4730957-2415-41eb-b1d9-1555478e5596",
        "cursor": {
          "ref": "eff1396e-06cd-4f41-b092-7e9040ab3dfc",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "214b0e55-85bc-406b-b107-e6600adf121a"
        },
        "item": {
          "id": "a4730957-2415-41eb-b1d9-1555478e5596",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "efa4ec04-8de2-47db-bb86-d87546bbe30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5fc900-8fad-41ca-a03d-00d9a735d09b",
        "cursor": {
          "ref": "a1675175-c445-45eb-938a-e953109fcdaf",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "dcfebf59-e26d-468c-9b0a-cd22bc5f1dba"
        },
        "item": {
          "id": "af5fc900-8fad-41ca-a03d-00d9a735d09b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "268aacfc-ac2b-44cf-9cb9-881e393a3f14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c04808-8392-48d9-aa1d-79dca00c29f4",
        "cursor": {
          "ref": "25fcc686-cb56-47eb-87e0-788b81273132",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f1aa71b3-f46a-4424-8304-85a0b6dc8253"
        },
        "item": {
          "id": "88c04808-8392-48d9-aa1d-79dca00c29f4",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "eff33090-a701-4196-bf2b-768020fe6193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79b9416-d869-4ec4-a257-1e28e5b545a2",
        "cursor": {
          "ref": "5a242a96-307b-4a5b-9bc9-f80c40174120",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "dba847ec-05bc-440c-8f1d-ab59b75c8eb1"
        },
        "item": {
          "id": "f79b9416-d869-4ec4-a257-1e28e5b545a2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d9db8356-9d16-4e2a-8d59-471792f8e8b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb6809a-0fa0-4df5-b466-a8bc82105763",
        "cursor": {
          "ref": "d5131da0-0428-4e6f-a083-d68ae166e233",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ba4f97de-74aa-4280-9a14-77b8b7a47712"
        },
        "item": {
          "id": "deb6809a-0fa0-4df5-b466-a8bc82105763",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f064a1ff-0e5e-4f5c-9ffb-2a55bcba04d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466c323b-b0ac-4062-b878-2ef95f090928",
        "cursor": {
          "ref": "1ab923b8-2374-4e91-9140-0af2f31d8b72",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b8c218de-dc83-4db9-ac35-cb847fef422d"
        },
        "item": {
          "id": "466c323b-b0ac-4062-b878-2ef95f090928",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "63ea645b-a382-42b3-9f49-49639de1c1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac49fc2f-fd2f-4509-b13c-bd68c4678575",
        "cursor": {
          "ref": "6545d565-2110-4c20-a66f-1fa09bacf324",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3e1e4d61-1c14-495d-8b51-5032706d6100"
        },
        "item": {
          "id": "ac49fc2f-fd2f-4509-b13c-bd68c4678575",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "73297514-302a-4753-bc21-ec57f9ecf26c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77da49a5-8ad6-4d76-bf2f-0807bb4be285",
        "cursor": {
          "ref": "c939674f-e2d2-4521-a071-e5f883f9263e",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ff8de7b2-d660-4397-97ae-123b04e35cef"
        },
        "item": {
          "id": "77da49a5-8ad6-4d76-bf2f-0807bb4be285",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f041cbe2-dc04-4700-bc9d-90fcb072f8cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1d44e6-36cf-4a5d-84da-001b7798f223",
        "cursor": {
          "ref": "7d40e6fe-462b-4984-ab98-3136e6b1eee0",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f164b45c-fd8d-42b3-8b8f-c6d2211e30ab"
        },
        "item": {
          "id": "bc1d44e6-36cf-4a5d-84da-001b7798f223",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2f3e7e8f-df82-4a31-9867-c632b8e8d435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6e8067-b048-4d51-9836-41cc5314f1c1",
        "cursor": {
          "ref": "713d0d78-a382-4f76-acd4-e4d755371367",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b43bd0fd-5731-4f35-aebd-c49ec5f7c98b"
        },
        "item": {
          "id": "ea6e8067-b048-4d51-9836-41cc5314f1c1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "aca74af1-195e-4cf1-a948-e5ceab6d5d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081c32a6-a9d0-485f-a3b2-e8183879b491",
        "cursor": {
          "ref": "e1d01922-026f-4659-9481-40b035010e7f",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2d7c2a4e-eeab-48ab-9ad2-4471e47fa80a"
        },
        "item": {
          "id": "081c32a6-a9d0-485f-a3b2-e8183879b491",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cfbd4604-bd2b-4565-947e-9f884bf96934",
          "status": "OK",
          "code": 200,
          "responseTime": 273,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "861a5396-be28-4b44-9e46-67a2f4df572e",
        "cursor": {
          "ref": "66221de3-1e35-4eca-b15d-a43598d96f40",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b3d4c384-87b4-494a-85cc-62aa16b62039"
        },
        "item": {
          "id": "861a5396-be28-4b44-9e46-67a2f4df572e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "830fe617-4472-40b1-8679-9f1b5d39cc85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f702a094-ff82-45a9-82c7-28175d305997",
        "cursor": {
          "ref": "4f6cb01b-185b-4109-a747-4142c7ad0b6b",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a6ee8009-817e-4f05-88f8-6b03eee123a4"
        },
        "item": {
          "id": "f702a094-ff82-45a9-82c7-28175d305997",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2c837fd3-4df4-4047-af67-bd901459f23e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273893c4-6ba9-486c-abcf-1c0f063c52b9",
        "cursor": {
          "ref": "60f432e6-b1a7-4059-a237-f5c6f485d624",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "984efcd5-131a-48bc-b9bd-27b932b31278"
        },
        "item": {
          "id": "273893c4-6ba9-486c-abcf-1c0f063c52b9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f850fca2-866d-401a-9f2e-41b6bfceda11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd47571c-8f73-4a1a-baff-1d72d3e7b250",
        "cursor": {
          "ref": "ff85bc74-bd3c-427e-ac8e-fff81e306746",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "844c7baf-a685-4d33-8a7b-24f09c8c707a"
        },
        "item": {
          "id": "bd47571c-8f73-4a1a-baff-1d72d3e7b250",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c6613b11-05cd-4ad4-91e4-4ca9945a42ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afec5761-3c3a-4fa0-88f3-9ba19d2765fd",
        "cursor": {
          "ref": "671780d5-7fb1-46bd-911b-6c6c9ca5152d",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "99532e60-7861-426a-84d6-bbfad0ff6c96"
        },
        "item": {
          "id": "afec5761-3c3a-4fa0-88f3-9ba19d2765fd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ad78caab-6422-485c-9011-d9c94e49eae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3e3cfe-34f4-4241-9420-06658b6c79b3",
        "cursor": {
          "ref": "68b2a550-0399-4278-83a7-ef0b9f708f7d",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5576fc4f-198c-4fd4-9862-7ecb5460015c"
        },
        "item": {
          "id": "2a3e3cfe-34f4-4241-9420-06658b6c79b3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8e0a450b-0cfb-4428-91a1-62058d65db6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c743839-2145-4ac6-8da2-8c1ecc3506e8",
        "cursor": {
          "ref": "e5907b25-8f4b-4ca8-ae75-33eee1e8ce77",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d3d4b6c8-e077-46c2-b42f-e4a5540f600f"
        },
        "item": {
          "id": "8c743839-2145-4ac6-8da2-8c1ecc3506e8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "54da8b29-95c1-49a6-b77a-fe038759e699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a47c8a26-2363-470e-978a-5ece80b69de9",
        "cursor": {
          "ref": "ea4cdeb5-0b59-40c4-a618-8d2417ea3a3a",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "22b2ca13-7d8c-4b7a-b941-5792c02c467e"
        },
        "item": {
          "id": "a47c8a26-2363-470e-978a-5ece80b69de9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b1d02290-6d92-4058-80ea-48793144bd64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304103fd-2951-414f-9b85-0aa05c46371f",
        "cursor": {
          "ref": "4581b83d-3e8a-4861-ad44-c5eddf71055f",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b45e0b1f-937e-4859-930b-d17a2c8418c9"
        },
        "item": {
          "id": "304103fd-2951-414f-9b85-0aa05c46371f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4913ac2f-29ba-4193-8b7d-1554e8bfc965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ad0fb1-0086-48fc-8ff0-b461c72b205f",
        "cursor": {
          "ref": "124376fe-47e6-4c91-aafd-9142fb67fd0c",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ebced0be-039e-4e7b-ba14-af6cf0bad2e3"
        },
        "item": {
          "id": "79ad0fb1-0086-48fc-8ff0-b461c72b205f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c6dd175a-b9e2-4c39-aa57-159b5c30a56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004cfdd3-7a68-42f8-baa2-cc02a7e679d8",
        "cursor": {
          "ref": "6879612f-51ec-465a-b8c8-a7cdff792301",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "614d7d68-849d-4e9a-b458-dc9e142aa1ab"
        },
        "item": {
          "id": "004cfdd3-7a68-42f8-baa2-cc02a7e679d8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "323fe9a1-9831-401f-b980-e4b8922b34d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c2a82f-156b-412c-8f10-80f8d306789a",
        "cursor": {
          "ref": "a476b50d-a9a9-4607-9a87-9243d46012cc",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6238dd68-1515-48c9-99c3-c82e54770d2e"
        },
        "item": {
          "id": "94c2a82f-156b-412c-8f10-80f8d306789a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "946017b4-a30f-4ea3-b040-ef84a17cb14a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316889fc-9d4b-45bd-b5f0-5e122fb67447",
        "cursor": {
          "ref": "4ffb8bab-4439-45d4-91f5-fe1629331c52",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3f4b12b4-52aa-43db-a954-640dc6b64602"
        },
        "item": {
          "id": "316889fc-9d4b-45bd-b5f0-5e122fb67447",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6b8805ef-89f7-4e37-8092-945f1ff317dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808b3087-5bb0-4a8f-a7fc-3ccd4ea9a022",
        "cursor": {
          "ref": "20c65475-516d-484a-b6d1-03e574009d82",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d8091cd5-0d5e-432d-8961-366d2879a26f"
        },
        "item": {
          "id": "808b3087-5bb0-4a8f-a7fc-3ccd4ea9a022",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5a798654-e600-463d-acd5-3bf823a36c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e998fa-7bad-42aa-86aa-493b8cc7e056",
        "cursor": {
          "ref": "0cd1e16c-d56a-49ba-a1f7-3c6477c6bc29",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "484f026d-4bc5-45c7-8bc2-ff9a51a39e6f"
        },
        "item": {
          "id": "f4e998fa-7bad-42aa-86aa-493b8cc7e056",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f376a5cc-7a6a-4a3f-a362-489e435c6a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b76d9c-b204-498d-937b-658d8e50f74c",
        "cursor": {
          "ref": "33b84aba-1039-4f01-b24e-b8c554bb3f58",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6e6db804-ef37-4e8f-af7d-372c761f6b64"
        },
        "item": {
          "id": "95b76d9c-b204-498d-937b-658d8e50f74c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3bcb479f-ea8b-428a-b84f-2af80f49ef71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff1ee27a-3c98-46eb-ba37-bffae86b2c12",
        "cursor": {
          "ref": "946f9db7-5129-46fb-8f2d-a33dfe6ed0a7",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f89fc8d4-effd-459e-ad13-a365641ebec3"
        },
        "item": {
          "id": "ff1ee27a-3c98-46eb-ba37-bffae86b2c12",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "06cda09e-8ed7-4f47-b392-7df091287da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34d9cdd-d2f3-48c8-a1fd-6b5c91429723",
        "cursor": {
          "ref": "89a5f2aa-c8ac-4764-af95-0762ae85c36f",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cbc0f068-0bef-4a85-87bc-d8ce1c6e242f"
        },
        "item": {
          "id": "b34d9cdd-d2f3-48c8-a1fd-6b5c91429723",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d9c37487-072f-4d2e-a6a1-45a0975c4c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb0ed09-56c1-4d90-907c-9a4a5a96b817",
        "cursor": {
          "ref": "60808b1e-fbcf-4862-88ca-825d14ba23b0",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "838f800b-080d-4fc6-b4d6-c137cebd6854"
        },
        "item": {
          "id": "5bb0ed09-56c1-4d90-907c-9a4a5a96b817",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2c8f05a1-f33b-47e7-8934-f05cea7ebc39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d8a5fb-f8a8-4cf9-8cd9-184bd336f988",
        "cursor": {
          "ref": "9ec8c827-0fc2-483b-ba5d-e2b31054817f",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7ac07fa2-0216-409e-8285-29032a83fb3c"
        },
        "item": {
          "id": "60d8a5fb-f8a8-4cf9-8cd9-184bd336f988",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2380e7ae-cbb2-402d-8fac-987f676500d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128d3585-7633-4ab2-b8f5-cd699aba7dd8",
        "cursor": {
          "ref": "199d78ba-c5ca-4233-9ae9-8fc69dc95131",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3008457d-6f1d-4d07-a0ac-c08d1f2fb554"
        },
        "item": {
          "id": "128d3585-7633-4ab2-b8f5-cd699aba7dd8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2314c453-a27d-470a-9440-7c10c79aa925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d19f05-303d-4df9-811c-0980efec1271",
        "cursor": {
          "ref": "8d747648-593a-4255-a7e7-54f07206e851",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "89778386-ee94-4710-89c0-4b48af8d2cff"
        },
        "item": {
          "id": "c8d19f05-303d-4df9-811c-0980efec1271",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e43fe916-3b6b-4aa9-bdd6-49d4f62226c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e79687-25b0-4953-b0ec-ff4aa5b87532",
        "cursor": {
          "ref": "714f09e6-f132-4983-ba7f-fc8bb2d0be37",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6e4e9a9f-4589-4250-a26a-b1365c46c2a0"
        },
        "item": {
          "id": "f7e79687-25b0-4953-b0ec-ff4aa5b87532",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "cb8fb8b7-f981-49a1-9256-e2ddec140027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304c2d7a-71a7-484a-b915-ba60293617d4",
        "cursor": {
          "ref": "36fe8b9d-9ec5-4869-b886-7a0f26706a67",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1d14f8f7-427f-4d64-a20b-d7e2bff6fc69"
        },
        "item": {
          "id": "304c2d7a-71a7-484a-b915-ba60293617d4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0e0b9c04-e7dc-4d46-8f15-1b7323645f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572e4322-78b0-404e-8bff-bf9b33408ca8",
        "cursor": {
          "ref": "4005ff4a-a5a8-4a19-bdc4-668fc2ac4617",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4dcfd52b-cc31-41f7-b87d-20ad173e93b8"
        },
        "item": {
          "id": "572e4322-78b0-404e-8bff-bf9b33408ca8",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cc10e2f6-0d91-4375-b1f3-c1a1e01dd873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c6704e-29fc-4000-b06c-1dfe736868c8",
        "cursor": {
          "ref": "4ac8368f-0026-4460-bc69-b2bbf8fd656b",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fab6d922-42d0-4c60-a067-c03496dbe4ea"
        },
        "item": {
          "id": "a5c6704e-29fc-4000-b06c-1dfe736868c8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "22a5835d-f983-4c67-9e3b-499129f8061f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89297161-c91e-43f9-848a-db90b9a4a889",
        "cursor": {
          "ref": "546e3314-9d1c-4301-ab34-dca9935010e5",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5bd0441c-ce67-48ee-a567-ebd4ed862b56"
        },
        "item": {
          "id": "89297161-c91e-43f9-848a-db90b9a4a889",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ca78286f-fc83-4b6e-a0c1-58f4d9feda8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0abd04-b44f-4c93-b1e2-de58b828841d",
        "cursor": {
          "ref": "c2340c3e-1dbc-47d2-a60e-147a8b23df08",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5d09d464-0ed7-4469-9446-221c2791c110"
        },
        "item": {
          "id": "be0abd04-b44f-4c93-b1e2-de58b828841d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "68ce73b0-39d3-4979-9e1d-8423ffc7c811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70af31bd-6603-48f0-9a36-f04e40b21326",
        "cursor": {
          "ref": "1b2aa7f4-63a1-4a7f-ab55-a16e758a04c5",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1e3084bf-6412-4e6c-9fac-69db91eacf48"
        },
        "item": {
          "id": "70af31bd-6603-48f0-9a36-f04e40b21326",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2971adea-66df-4c6a-9be0-28fffd2719e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67458790-6c25-4467-b142-9f03e930770a",
        "cursor": {
          "ref": "fd2a73d7-c5a2-435a-ac51-ab61cc7b57a7",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "47446799-19f3-4f3b-be66-8ffa857b0ae1"
        },
        "item": {
          "id": "67458790-6c25-4467-b142-9f03e930770a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b80f64e9-bafa-4c62-bb10-da1f843cd942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b996ad-6ab2-4bf4-81ae-0a673571dc68",
        "cursor": {
          "ref": "08c4b597-d6ab-4b54-b3b6-485bbccc3e3b",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8bc9b3f3-7f90-4880-a482-6f2f15003a93"
        },
        "item": {
          "id": "71b996ad-6ab2-4bf4-81ae-0a673571dc68",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a0c9c27c-70d4-40d1-838d-252c43b9463b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203c2be0-8b3c-410d-96da-12c33e9054fb",
        "cursor": {
          "ref": "b5b76ae5-fa5b-4718-9b98-cac90725fe21",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "fd3ad9e9-6fa6-47b8-a77f-c36d8d7fd044"
        },
        "item": {
          "id": "203c2be0-8b3c-410d-96da-12c33e9054fb",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1dc6d232-dbd1-4db5-9143-114bed0d4b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53fb796-4cee-4dc8-b80a-8e2fd2af2bbe",
        "cursor": {
          "ref": "cb1db1bd-0b8c-468c-84e1-8dc18257d47d",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b240d4a5-f809-45a7-ac22-c439c77bddbd"
        },
        "item": {
          "id": "c53fb796-4cee-4dc8-b80a-8e2fd2af2bbe",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9a179b47-0318-4a8b-835c-acfb2b808bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a08158d-d14a-46d8-948c-fbc7d78ce48c",
        "cursor": {
          "ref": "ee178c3c-a5e1-442d-a61f-99c7dc97738c",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c48af5ee-adff-4301-b441-297c3c921208"
        },
        "item": {
          "id": "7a08158d-d14a-46d8-948c-fbc7d78ce48c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "292e2afa-70f0-4643-a331-f47f69f10018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd7ed09-6482-453e-88f8-d7c88fd31820",
        "cursor": {
          "ref": "811864eb-3bca-422e-9351-d007acb723e1",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "926cb67b-0a47-4bfa-9a73-81102f2e7d65"
        },
        "item": {
          "id": "9cd7ed09-6482-453e-88f8-d7c88fd31820",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7cb7b1fc-f268-467e-9e63-310a43833e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74351570-01d6-4bf7-aaa3-832cb94adaab",
        "cursor": {
          "ref": "de8d8e6d-4037-4c26-9b72-df6dc00de097",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "24b451ef-f5cd-41a7-9059-ac88fcbf3a37"
        },
        "item": {
          "id": "74351570-01d6-4bf7-aaa3-832cb94adaab",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "06e3e7c7-e54d-440b-907d-12c1429a78e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771f12d9-d998-4b24-b518-8a66de047532",
        "cursor": {
          "ref": "9bda6206-23e1-4f02-a488-a763bef9e66f",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5ac8e5ce-0d3f-4821-a790-3e65273fd3a3"
        },
        "item": {
          "id": "771f12d9-d998-4b24-b518-8a66de047532",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b2791ddd-26d0-4492-9248-3daa1eb35ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad03366-c123-4504-9959-c0c4d868fc98",
        "cursor": {
          "ref": "bfb90764-72fd-4a0e-b557-de84dcabfdad",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6373fc0f-5e91-434a-b894-5ef3996d1cda"
        },
        "item": {
          "id": "2ad03366-c123-4504-9959-c0c4d868fc98",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ec96356c-d00f-402c-920d-a5c57e630434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1cb1990-8299-4d5c-9024-1bf07c2adc50",
        "cursor": {
          "ref": "f4c991f7-51dd-4661-af5d-7aed8bab4f4e",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3cc8e865-864d-4db7-aa68-87358c616f2d"
        },
        "item": {
          "id": "d1cb1990-8299-4d5c-9024-1bf07c2adc50",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0577d836-cec2-4e03-873b-61fc3435b027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014188d6-77a7-4cae-848a-5aaffb62664f",
        "cursor": {
          "ref": "de426a54-a76e-44fe-934a-e03a1fca7b0b",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e8b23ea5-bcff-4541-b7a5-465ab087e667"
        },
        "item": {
          "id": "014188d6-77a7-4cae-848a-5aaffb62664f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5c6129da-d3c4-4496-aa8b-298dbc7289a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57c4056-82c4-4a27-bf97-5e0d5d1b8026",
        "cursor": {
          "ref": "6a4e493a-a236-4b02-8651-f22a293b3faa",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ff01583b-85b6-4267-ad51-ed4a5d2f731f"
        },
        "item": {
          "id": "f57c4056-82c4-4a27-bf97-5e0d5d1b8026",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "443d922a-26cb-4d98-9a4d-87ea96ca778a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a756e84e-ce74-4823-8048-c66d1165b8e0",
        "cursor": {
          "ref": "4ff275c1-f923-47d8-b64c-e9690089a60a",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e453f4e2-ab43-4db0-82b2-77cc105247ef"
        },
        "item": {
          "id": "a756e84e-ce74-4823-8048-c66d1165b8e0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "853be655-d915-41c8-9647-7d995eaa4151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca7b769-3b70-463d-b38f-3f7f9c2e4631",
        "cursor": {
          "ref": "8065a9d6-4dcb-4921-aa14-5a0e46cb9f5a",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e0a909b4-931a-4721-9154-68ec9d2fe2ef"
        },
        "item": {
          "id": "6ca7b769-3b70-463d-b38f-3f7f9c2e4631",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "88500885-8c4d-47ef-9cd9-e385b0d110db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e561283-9f1b-48f9-9b7c-971679da700d",
        "cursor": {
          "ref": "11ae3aad-354b-43d0-8d4b-deab397fdb36",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1bde04fe-0ddc-4d06-af3b-7cfb3c62e582"
        },
        "item": {
          "id": "6e561283-9f1b-48f9-9b7c-971679da700d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6ad0b091-6fe4-434e-b2a2-b96333e33956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7140ad-aa1e-4f48-98f7-42b301e3e96d",
        "cursor": {
          "ref": "a3317d9d-4517-42fb-877a-38df15e5fc22",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7c3c19d4-b2ed-495d-b000-6571c589e5cd"
        },
        "item": {
          "id": "bd7140ad-aa1e-4f48-98f7-42b301e3e96d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "7b0f0bee-035a-4896-9729-534cf4bda84b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d77eae75-3194-4bb5-b483-59f1d0f1c65e",
        "cursor": {
          "ref": "54ed34da-b9ba-4ae2-92e3-7bcfc9aa3611",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "259b7c6c-9ea2-456d-8634-cfb09abc020b"
        },
        "item": {
          "id": "d77eae75-3194-4bb5-b483-59f1d0f1c65e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "670da6ef-ae25-4182-8151-70d9f007a390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84dddfdd-bf51-43a4-be1b-77c943808b09",
        "cursor": {
          "ref": "6d387b26-d288-4aa7-a855-254a8579cfbf",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6af1bff7-f192-483d-a596-63b424ad2270"
        },
        "item": {
          "id": "84dddfdd-bf51-43a4-be1b-77c943808b09",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0d02dae5-de01-41f4-a4cb-56f78a1b221b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6631a2a-9ba4-41dc-a204-9addfe94c4b6",
        "cursor": {
          "ref": "f294a635-2466-4666-8023-7b2b0369a847",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c706bea9-b07b-42b8-af07-3c3bd42d02f4"
        },
        "item": {
          "id": "a6631a2a-9ba4-41dc-a204-9addfe94c4b6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "514baca9-5b16-4c80-82d8-ef4f923e3e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06e2358-b532-44f5-b43f-dcf60915e520",
        "cursor": {
          "ref": "a3257131-ea7b-4a32-8285-96b9867e8b1b",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8cf15969-6142-4ba3-b5b5-58ec2b770a4f"
        },
        "item": {
          "id": "e06e2358-b532-44f5-b43f-dcf60915e520",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ae677ccc-2b9e-4f6a-ba5c-e179e447dff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af455d2-097d-4be4-9881-c7cd2e78ab62",
        "cursor": {
          "ref": "58c86a67-b970-4e78-bf6d-137de5ea6612",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5271214f-eec4-4d8a-bb2c-e8b7235de026"
        },
        "item": {
          "id": "4af455d2-097d-4be4-9881-c7cd2e78ab62",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "22a3cf4b-93fe-4093-9fda-13646c0af03f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71aca788-ee3a-4093-a90a-e75417ed23e6",
        "cursor": {
          "ref": "e2514337-3584-4dc9-9df4-f11f9d02899e",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "59640476-ef72-418b-9d13-3e036c3caa7c"
        },
        "item": {
          "id": "71aca788-ee3a-4093-a90a-e75417ed23e6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ce45cb1b-e194-4df5-acbb-87a33ac5974b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcefb5d3-eb19-4c17-b32e-3590cf4f96af",
        "cursor": {
          "ref": "9daf0ef2-da1f-4721-8420-74605f9a023e",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "361fb021-b2e5-4652-8857-64ac31691fd4"
        },
        "item": {
          "id": "dcefb5d3-eb19-4c17-b32e-3590cf4f96af",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e1c39db3-ceee-416e-b4bb-e5ee1111de74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afe743c-0abc-4bcb-a3e1-ac535f80e2d0",
        "cursor": {
          "ref": "69aac8a2-65c0-4e20-affb-b14f7dfc7540",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6a9a2442-ef91-4b5a-8f8f-5d538d9a80d7"
        },
        "item": {
          "id": "9afe743c-0abc-4bcb-a3e1-ac535f80e2d0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e79b0cdc-6f15-4a2c-988e-e3e01ee281c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2fb1d1-e526-4171-b648-8fb6da1b4e4f",
        "cursor": {
          "ref": "2bf468ef-ba96-4202-892b-d84efa3e7ae0",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "edfc34d1-73d3-4b3a-b53f-9911209ea2da"
        },
        "item": {
          "id": "ae2fb1d1-e526-4171-b648-8fb6da1b4e4f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4d018fe5-42d3-4217-b719-83660392ba2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e40cc55-bca5-4140-96cd-dd962d39b6df",
        "cursor": {
          "ref": "41b31a77-5b9b-4fb2-8d85-cf748a1ab190",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2278dcd8-9032-429f-8f60-b79dcfc486cb"
        },
        "item": {
          "id": "1e40cc55-bca5-4140-96cd-dd962d39b6df",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "70b3a4e0-5a1f-48fc-a436-0620657e873c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f994dc75-bc41-4b6f-acc8-3c3e5bb5c8b7",
        "cursor": {
          "ref": "1fbfc64d-e074-4624-bbbe-da1ff2d7869a",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "6b9e061c-a579-44bf-b1ef-9fbaf2efcbdb"
        },
        "item": {
          "id": "f994dc75-bc41-4b6f-acc8-3c3e5bb5c8b7",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "22cfe697-9dba-4ea2-a662-fbe9c55163e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70075973-b885-4a82-97aa-2ed626b89f22",
        "cursor": {
          "ref": "9d7f4071-ad2d-4141-be53-95075238405b",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "56051ddc-1c9e-419b-91d6-667d33a1e9a4"
        },
        "item": {
          "id": "70075973-b885-4a82-97aa-2ed626b89f22",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "10b2e37c-8147-4de2-bfca-ff2e63a110a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3caa80af-fe20-4630-8896-4f357c5145a6",
        "cursor": {
          "ref": "e041b3f4-3014-471e-b801-acf0049e8c60",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "7b124804-bb65-4a3b-b4ea-d91722af215d"
        },
        "item": {
          "id": "3caa80af-fe20-4630-8896-4f357c5145a6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "fa2d60c5-5ccf-4c6a-ba3b-790b252c8b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb588300-169d-46a6-8543-5f10719bc76c",
        "cursor": {
          "ref": "540cf86a-019b-4ec7-9cc1-f461be1bd219",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "2b000129-d01c-4657-ad67-0d1ff976fb56"
        },
        "item": {
          "id": "fb588300-169d-46a6-8543-5f10719bc76c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d43bd631-1fd3-4682-a3bc-5a22d3fe1645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aecd5990-2e98-4a4e-8794-8f9a68867db0",
        "cursor": {
          "ref": "1ed5a3c4-aa99-4a29-a1a1-098b1c27b8d3",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "6b11055b-0c28-4fa0-a75d-77177ae29ebd"
        },
        "item": {
          "id": "aecd5990-2e98-4a4e-8794-8f9a68867db0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "51730375-5d2e-4758-a8e3-02d5523218b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb47bbe-08c2-46c4-aa44-6f882b7780eb",
        "cursor": {
          "ref": "4c3632de-9f44-47ff-ae95-cc6b739c7fa2",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "3f6e5298-b6aa-430c-b9b2-447d6c8f50af"
        },
        "item": {
          "id": "0cb47bbe-08c2-46c4-aa44-6f882b7780eb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "842fcfff-7e18-4a61-b327-6e254a78610c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a435f8-009e-4df8-8a84-662e48bcfd90",
        "cursor": {
          "ref": "503377e6-979a-4a5b-a29c-afeacf6f74ac",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "2f4297da-8b12-48cb-b6b2-118637e49c85"
        },
        "item": {
          "id": "d1a435f8-009e-4df8-8a84-662e48bcfd90",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a8f8f339-a347-460a-9e04-701eeb3bc170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4222177-dabc-4045-9b98-02e87d18035c",
        "cursor": {
          "ref": "bf8e8a6e-f31e-4a55-8406-89defebee822",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "e763c579-119c-4566-ae26-72b0e207a837"
        },
        "item": {
          "id": "d4222177-dabc-4045-9b98-02e87d18035c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "08c99a1b-7ab2-4fad-8015-0ca5fc9a002a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d88155-8709-4c14-90d9-c89fea3a6fed",
        "cursor": {
          "ref": "cc50af05-12da-46bb-966b-7a4b29d5fd66",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "289179d9-f870-44a5-b8a3-deab663be4dc"
        },
        "item": {
          "id": "29d88155-8709-4c14-90d9-c89fea3a6fed",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "edd69573-2cff-4652-bb42-e18346925af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924396ac-e658-4178-b76d-fed81367cb7a",
        "cursor": {
          "ref": "2bb438bc-b135-4fb3-95ad-f75fa6f44c18",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "a022f0fb-280f-4830-a111-87a108d7488e"
        },
        "item": {
          "id": "924396ac-e658-4178-b76d-fed81367cb7a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8393a4f2-4870-40d5-822b-c256715d51a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b4271f-9ece-45f6-a72a-803157327e72",
        "cursor": {
          "ref": "d6562c16-a982-4251-9132-4a0f62636e2e",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "cfbfec4e-a8d4-47d1-85a2-08f41d403a46"
        },
        "item": {
          "id": "24b4271f-9ece-45f6-a72a-803157327e72",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "bfdc851f-cd20-472d-bc41-ec96493120d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b3a7c7-6b88-4b7c-9387-23fce587737e",
        "cursor": {
          "ref": "994555a2-efb1-4ac6-93a2-1514a385fb3c",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "f219014d-4735-46cd-8239-9bc2fa8554d5"
        },
        "item": {
          "id": "b4b3a7c7-6b88-4b7c-9387-23fce587737e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "165c6915-a244-4bfb-a9f4-4dd1e5a78184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6fc0e0-3b2c-4a2c-b762-c6a02442768d",
        "cursor": {
          "ref": "68aa4ea2-4fd7-49f3-8970-1bb9ac855340",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "dac05065-667b-4b89-a5ef-21a4a4e9e36b"
        },
        "item": {
          "id": "8e6fc0e0-3b2c-4a2c-b762-c6a02442768d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "62783d2a-e933-4188-9c83-6979abe5efe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc8bde3-c4eb-40ee-8c43-8eec40c2ba13",
        "cursor": {
          "ref": "59b39daa-f8a8-4e6c-a726-5448114c343f",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "cd7783dc-35a7-4928-82ca-4fc24fac08bc"
        },
        "item": {
          "id": "6bc8bde3-c4eb-40ee-8c43-8eec40c2ba13",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "66c99699-727c-446f-ae4d-2503871c539c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647d09a2-d5a8-47e1-aaee-6d0376487629",
        "cursor": {
          "ref": "ddc0c8c9-ed07-4f02-bd85-9ddf990432ab",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "8048f70e-3c41-4c1a-badb-8c6191d984da"
        },
        "item": {
          "id": "647d09a2-d5a8-47e1-aaee-6d0376487629",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "284fa0b4-b65e-419c-9b26-44f334b63fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a258754-ead6-496f-9428-b5764c7fa81d",
        "cursor": {
          "ref": "039f5f50-c319-489c-96ad-561b5d2d520a",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "fdd347bd-cc03-4cc0-933b-59171e5ffe3b"
        },
        "item": {
          "id": "2a258754-ead6-496f-9428-b5764c7fa81d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6d8ba041-0ec4-4664-a34a-ff041777ffb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5d28e6-3bb1-4161-8198-ec6130b7327c",
        "cursor": {
          "ref": "0aa870d6-ffb2-4711-8782-db7b6b94b76a",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "a38140cb-ebf5-4aeb-bb7b-f2917ff8846a"
        },
        "item": {
          "id": "6f5d28e6-3bb1-4161-8198-ec6130b7327c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "208659ed-2722-4f6b-bab9-d8f19e271027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f845cbf2-5f24-4a2a-88fd-dac264d95a52",
        "cursor": {
          "ref": "b54c2f3f-7868-4285-9e12-409f7ac30f3e",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "ee1f56cb-23aa-4aa6-a55b-f03a20910cca"
        },
        "item": {
          "id": "f845cbf2-5f24-4a2a-88fd-dac264d95a52",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8665858d-c488-4ab3-b913-36710f983c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25fc2a5-7ccd-4b08-985d-9c10c455a7dc",
        "cursor": {
          "ref": "03e75527-19b7-4ea2-a48b-13609a90afed",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "519008cf-4c62-485d-953d-4e264ce28a7d"
        },
        "item": {
          "id": "e25fc2a5-7ccd-4b08-985d-9c10c455a7dc",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a4961bff-51e8-4732-aaa9-8dc42f4b739a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f112d6b4-f553-4a6b-b736-739a0c50ab08",
        "cursor": {
          "ref": "5a8076fe-d042-4b47-9440-c6a790fe96a7",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "38cb7da6-08d9-4d34-843b-cb12de4a3cf6"
        },
        "item": {
          "id": "f112d6b4-f553-4a6b-b736-739a0c50ab08",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "28417b67-625c-41ee-a02c-d73d46509d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03db5e3e-fc3a-4057-b3d6-4a4e58584ff7",
        "cursor": {
          "ref": "4ac85a42-cbe8-4403-b62a-f672b8819015",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "fa2209a5-6923-4311-8dda-3b6a23e4040a"
        },
        "item": {
          "id": "03db5e3e-fc3a-4057-b3d6-4a4e58584ff7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e08fdce7-57d6-4d99-9805-e402d04534b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965ca100-60e5-4019-9b54-290778a910a9",
        "cursor": {
          "ref": "a5a0ddd2-e17f-4b68-a56c-6b881fdd8308",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1adee777-45d2-4344-9de8-234e7190f986"
        },
        "item": {
          "id": "965ca100-60e5-4019-9b54-290778a910a9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6a96dbcf-19aa-4aa4-a2f8-28bd55b57635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1d5844-a9ce-4411-945e-d2fdd297d8fe",
        "cursor": {
          "ref": "ec2f1817-151e-497a-84fe-07d798c8fde8",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "073939a7-e2de-4479-9af3-f1188b561de3"
        },
        "item": {
          "id": "bf1d5844-a9ce-4411-945e-d2fdd297d8fe",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "18507bd0-f8b5-4e89-b8cd-a4ed74e2db94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be54886e-67a5-4ba4-bcbb-150879211e0b",
        "cursor": {
          "ref": "f45a75da-48cb-4308-afb4-64d788693fa6",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "b6679a44-f5ee-4230-b7c1-90e3a2b1c90a"
        },
        "item": {
          "id": "be54886e-67a5-4ba4-bcbb-150879211e0b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "bff5e04d-c786-4310-83bf-c6bb73641766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c206ea-c0ed-45ba-9763-11f4600b3388",
        "cursor": {
          "ref": "4fdbab57-91fd-46f2-a0d5-715f3f95864e",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "4b3180e4-6ebf-47c2-8181-133287238a24"
        },
        "item": {
          "id": "05c206ea-c0ed-45ba-9763-11f4600b3388",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fa5f878d-d3ea-473a-a934-484fbe1a7bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f5a9ee-27ee-4791-81c1-defa549ac91c",
        "cursor": {
          "ref": "c5b82bd0-146c-4603-8abd-fd1e3609d405",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "26ddc49e-c6d4-43ba-a63b-bddf00a6cc09"
        },
        "item": {
          "id": "f9f5a9ee-27ee-4791-81c1-defa549ac91c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "69d4d4f0-f579-4013-a1d2-2d814bd891af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "407c52c1-0f1a-48de-a256-0372d3a61acd",
        "cursor": {
          "ref": "df2c4806-494b-4b4f-8fbc-fd163bba882c",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "2ae231df-b86a-4703-9abc-7f2431753e87"
        },
        "item": {
          "id": "407c52c1-0f1a-48de-a256-0372d3a61acd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "533834cc-780f-45e5-8efb-91be338c274b",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "3585489f-3d57-496f-a203-cd8bf3c9445a",
        "cursor": {
          "ref": "c3cf6982-387e-4199-8813-fd5236379da9",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "1fbddd3d-ca8f-435b-9963-fc7c80356ca7"
        },
        "item": {
          "id": "3585489f-3d57-496f-a203-cd8bf3c9445a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c8a470ee-bc5e-4896-b7d4-3e87cc31f3cf",
          "status": "OK",
          "code": 200,
          "responseTime": 1717,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "58609520-8d97-48a2-990f-b3674d91a8fa",
        "cursor": {
          "ref": "ba9e0d38-5aa4-4f99-a7ef-671e246846a9",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "89ebbca5-cdf8-4104-a66e-6f84c9202711"
        },
        "item": {
          "id": "58609520-8d97-48a2-990f-b3674d91a8fa",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "411a932f-f4ac-4421-a373-34baa1844d6f",
          "status": "OK",
          "code": 200,
          "responseTime": 2458,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "25724937-de3c-4135-b98e-22c2e07a7c06",
        "cursor": {
          "ref": "52abdda7-3cb8-4fcc-825a-5c634be51db3",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2da5a048-4499-456d-b9d0-13de60fa1be0"
        },
        "item": {
          "id": "25724937-de3c-4135-b98e-22c2e07a7c06",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "de0caaf3-161a-436e-b561-cc92834ce0a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "25724937-de3c-4135-b98e-22c2e07a7c06",
        "cursor": {
          "ref": "52abdda7-3cb8-4fcc-825a-5c634be51db3",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2da5a048-4499-456d-b9d0-13de60fa1be0"
        },
        "item": {
          "id": "25724937-de3c-4135-b98e-22c2e07a7c06",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "de0caaf3-161a-436e-b561-cc92834ce0a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "3d36d2f0-4a13-4fe1-8fbe-549039653d23",
        "cursor": {
          "ref": "b8953d78-eee9-4395-a590-c4991ba51d9c",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "96608e48-8036-46a8-92c9-bdc500a19069"
        },
        "item": {
          "id": "3d36d2f0-4a13-4fe1-8fbe-549039653d23",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8a9f3eff-b2fa-4396-8503-2ba5605c832f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "640477f3-4f4e-4618-9753-8241c3de42ea",
        "cursor": {
          "ref": "2f6865ba-39ff-4a79-974a-1b21fc462570",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "18d926fc-afad-48f4-a466-577dbfbdde3a"
        },
        "item": {
          "id": "640477f3-4f4e-4618-9753-8241c3de42ea",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d9cc38ab-f140-4414-b876-510a41c8d883",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}